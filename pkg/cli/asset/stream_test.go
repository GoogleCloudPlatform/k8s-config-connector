// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package asset_test

import (
	"context"
	"errors"
	"io"
	"testing"

	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/cli/asset"
	testgcp "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/test/gcp"
)

const (
	exportJSONFile             = "testdata/cai-export.json"
	exportPrettyFormatJSONFile = "testdata/cai-export-pretty-formatted.json"
	expectedAssetCount         = 273
)

func TestAssetStream(t *testing.T) {
	testFileStream(t, exportJSONFile, expectedAssetCount)
}

func TestAssetStreamPrettyFormattedExport(t *testing.T) {
	// pretty formatted file is generated by this command
	// cat testdata/cai-export.json | jq '.' > testdata/cai-export-pretty-formatted.json
	testFileStream(t, exportPrettyFormatJSONFile, expectedAssetCount)
}

func testStorageStream(t *testing.T, bucketName string, objectName string, expectedCount int) {
	httpClient := testgcp.NewDefaultHTTPClient(t)
	stream, err := asset.NewStreamFromStorageObject(context.TODO(), httpClient, bucketName, objectName)
	if err != nil {
		t.Fatalf("error creating new stream from storage object: %v", err)
	}
	defer closeStream(t, stream)
	testStream(t, stream, expectedCount)
}

func testFileStream(t *testing.T, filePath string, expectedCount int) {
	stream := newStreamFromFile(t, filePath)
	defer closeStream(t, stream)
	testStream(t, stream, expectedCount)
}

func testStream(t *testing.T, stream *asset.Stream, expectedCount int) {
	count := 0
	for asset, err := stream.Next(); !errors.Is(err, io.EOF); asset, err = stream.Next() {
		if err != nil {
			t.Fatalf("unexpected error reading asset: %v", err)
		}
		assertAsset(t, asset)
		count++
	}
	if count != expectedCount {
		t.Fatalf("unexpected value for count: got '%v', want '%v'", count, expectedCount)
	}
}

func assertAsset(t *testing.T, asset *asset.Asset) {
	if asset == nil {
		t.Fatalf("unexpected nil asset")
	}
	if asset.Name == "" {
		t.Fatalf("unexpected empty name")
	}
	if asset.AssetType == "" {
		t.Fatalf("unexpected empty type")
	}
	if len(asset.Ancestors) == 0 {
		t.Fatalf("unexpected empty asset ancestor list")
	}
	for _, s := range asset.Ancestors {
		if s == "" {
			t.Fatalf("unexpected empty ancestor value")
		}
	}
}

func newStreamFromFile(t *testing.T, filePath string) *asset.Stream {
	stream, err := asset.NewStreamFromFile(filePath)
	if err != nil {
		t.Fatalf("error opening asset stream: %v", err)
	}
	if stream == nil {
		t.Fatalf("unexpected nil stream")
	}
	return stream
}

func closeStream(t *testing.T, assetStream *asset.Stream) {
	err := assetStream.Close()
	if err != nil {
		t.Fatalf("error closing stream: %v", err)
	}
}

func TestStreamBadInput(t *testing.T) {
	stream, err := asset.NewStreamFromFile("testdata/bad-file-name.json")
	if stream != nil {
		t.Fatalf("expected nil stream")
	}
	if err == nil {
		t.Fatalf("expected error")
	}
}
