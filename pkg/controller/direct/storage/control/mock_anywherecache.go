// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/controller/direct/storage/control/anywherecache_client_interface.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/controller/direct/storage/control/anywherecache_client_interface.go -destination=./pkg/controller/direct/storage/control/mock_anywherecache.go -package=storagecontrol
//

// Package storagecontrol is a generated GoMock package.
package storagecontrol

import (
	context "context"
	reflect "reflect"

	control "cloud.google.com/go/storage/control/apiv2"
	controlpb "cloud.google.com/go/storage/control/apiv2/controlpb"
	v1alpha1 "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/apis/k8s/v1alpha1"
	gax "github.com/googleapis/gax-go/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockAnywhereCacheAPI is a mock of AnywhereCacheAPI interface.
type MockAnywhereCacheAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAnywhereCacheAPIMockRecorder
	isgomock struct{}
}

// MockAnywhereCacheAPIMockRecorder is the mock recorder for MockAnywhereCacheAPI.
type MockAnywhereCacheAPIMockRecorder struct {
	mock *MockAnywhereCacheAPI
}

// NewMockAnywhereCacheAPI creates a new mock instance.
func NewMockAnywhereCacheAPI(ctrl *gomock.Controller) *MockAnywhereCacheAPI {
	mock := &MockAnywhereCacheAPI{ctrl: ctrl}
	mock.recorder = &MockAnywhereCacheAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnywhereCacheAPI) EXPECT() *MockAnywhereCacheAPIMockRecorder {
	return m.recorder
}

// CreateAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) CreateAnywhereCache(ctx context.Context, in *controlpb.CreateAnywhereCacheRequest, opts ...gax.CallOption) (*control.CreateAnywhereCacheOperation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAnywhereCache", varargs...)
	ret0, _ := ret[0].(*control.CreateAnywhereCacheOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnywhereCache indicates an expected call of CreateAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) CreateAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).CreateAnywhereCache), varargs...)
}

// DisableAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) DisableAnywhereCache(ctx context.Context, in *controlpb.DisableAnywhereCacheRequest, opts ...gax.CallOption) (*controlpb.AnywhereCache, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAnywhereCache", varargs...)
	ret0, _ := ret[0].(*controlpb.AnywhereCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAnywhereCache indicates an expected call of DisableAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) DisableAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).DisableAnywhereCache), varargs...)
}

// GetAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) GetAnywhereCache(ctx context.Context, in *controlpb.GetAnywhereCacheRequest, opts ...gax.CallOption) (*controlpb.AnywhereCache, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAnywhereCache", varargs...)
	ret0, _ := ret[0].(*controlpb.AnywhereCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnywhereCache indicates an expected call of GetAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) GetAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).GetAnywhereCache), varargs...)
}

// ListAnywhereCaches mocks base method.
func (m *MockAnywhereCacheAPI) ListAnywhereCaches(ctx context.Context, in *controlpb.ListAnywhereCachesRequest, opts ...gax.CallOption) *control.AnywhereCacheIterator {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAnywhereCaches", varargs...)
	ret0, _ := ret[0].(*control.AnywhereCacheIterator)
	return ret0
}

// ListAnywhereCaches indicates an expected call of ListAnywhereCaches.
func (mr *MockAnywhereCacheAPIMockRecorder) ListAnywhereCaches(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnywhereCaches", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).ListAnywhereCaches), varargs...)
}

// PauseAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) PauseAnywhereCache(ctx context.Context, in *controlpb.PauseAnywhereCacheRequest, opts ...gax.CallOption) (*controlpb.AnywhereCache, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PauseAnywhereCache", varargs...)
	ret0, _ := ret[0].(*controlpb.AnywhereCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseAnywhereCache indicates an expected call of PauseAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) PauseAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).PauseAnywhereCache), varargs...)
}

// ResumeAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) ResumeAnywhereCache(ctx context.Context, in *controlpb.ResumeAnywhereCacheRequest, opts ...gax.CallOption) (*controlpb.AnywhereCache, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResumeAnywhereCache", varargs...)
	ret0, _ := ret[0].(*controlpb.AnywhereCache)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumeAnywhereCache indicates an expected call of ResumeAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) ResumeAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).ResumeAnywhereCache), varargs...)
}

// UpdateAnywhereCache mocks base method.
func (m *MockAnywhereCacheAPI) UpdateAnywhereCache(ctx context.Context, in *controlpb.UpdateAnywhereCacheRequest, opts ...gax.CallOption) (*control.UpdateAnywhereCacheOperation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAnywhereCache", varargs...)
	ret0, _ := ret[0].(*control.UpdateAnywhereCacheOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnywhereCache indicates an expected call of UpdateAnywhereCache.
func (mr *MockAnywhereCacheAPIMockRecorder) UpdateAnywhereCache(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnywhereCache", reflect.TypeOf((*MockAnywhereCacheAPI)(nil).UpdateAnywhereCache), varargs...)
}

// MockDirectBaseUpdateOperation is a mock of DirectBaseUpdateOperation interface.
type MockDirectBaseUpdateOperation struct {
	ctrl     *gomock.Controller
	recorder *MockDirectBaseUpdateOperationMockRecorder
	isgomock struct{}
}

// MockDirectBaseUpdateOperationMockRecorder is the mock recorder for MockDirectBaseUpdateOperation.
type MockDirectBaseUpdateOperationMockRecorder struct {
	mock *MockDirectBaseUpdateOperation
}

// NewMockDirectBaseUpdateOperation creates a new mock instance.
func NewMockDirectBaseUpdateOperation(ctrl *gomock.Controller) *MockDirectBaseUpdateOperation {
	mock := &MockDirectBaseUpdateOperation{ctrl: ctrl}
	mock.recorder = &MockDirectBaseUpdateOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectBaseUpdateOperation) EXPECT() *MockDirectBaseUpdateOperationMockRecorder {
	return m.recorder
}

// RequestRequeue mocks base method.
func (m *MockDirectBaseUpdateOperation) RequestRequeue() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestRequeue")
}

// RequestRequeue indicates an expected call of RequestRequeue.
func (mr *MockDirectBaseUpdateOperationMockRecorder) RequestRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRequeue", reflect.TypeOf((*MockDirectBaseUpdateOperation)(nil).RequestRequeue))
}

// UpdateStatus mocks base method.
func (m *MockDirectBaseUpdateOperation) UpdateStatus(ctx context.Context, typedStatus any, readyCondition *v1alpha1.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, typedStatus, readyCondition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockDirectBaseUpdateOperationMockRecorder) UpdateStatus(ctx, typedStatus, readyCondition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockDirectBaseUpdateOperation)(nil).UpdateStatus), ctx, typedStatus, readyCondition)
}
