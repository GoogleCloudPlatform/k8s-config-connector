// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/gkehub/v1beta1"
	scheme "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// GKEHubFeaturesGetter has a method to return a GKEHubFeatureInterface.
// A group's client should implement this interface.
type GKEHubFeaturesGetter interface {
	GKEHubFeatures(namespace string) GKEHubFeatureInterface
}

// GKEHubFeatureInterface has methods to work with GKEHubFeature resources.
type GKEHubFeatureInterface interface {
	Create(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.CreateOptions) (*v1beta1.GKEHubFeature, error)
	Update(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.UpdateOptions) (*v1beta1.GKEHubFeature, error)
	UpdateStatus(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.UpdateOptions) (*v1beta1.GKEHubFeature, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.GKEHubFeature, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.GKEHubFeatureList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.GKEHubFeature, err error)
	GKEHubFeatureExpansion
}

// gKEHubFeatures implements GKEHubFeatureInterface
type gKEHubFeatures struct {
	client rest.Interface
	ns     string
}

// newGKEHubFeatures returns a GKEHubFeatures
func newGKEHubFeatures(c *GkehubV1beta1Client, namespace string) *gKEHubFeatures {
	return &gKEHubFeatures{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the gKEHubFeature, and returns the corresponding gKEHubFeature object, and an error if there is any.
func (c *gKEHubFeatures) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.GKEHubFeature, err error) {
	result = &v1beta1.GKEHubFeature{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of GKEHubFeatures that match those selectors.
func (c *gKEHubFeatures) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.GKEHubFeatureList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.GKEHubFeatureList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested gKEHubFeatures.
func (c *gKEHubFeatures) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a gKEHubFeature and creates it.  Returns the server's representation of the gKEHubFeature, and an error, if there is any.
func (c *gKEHubFeatures) Create(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.CreateOptions) (result *v1beta1.GKEHubFeature, err error) {
	result = &v1beta1.GKEHubFeature{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(gKEHubFeature).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a gKEHubFeature and updates it. Returns the server's representation of the gKEHubFeature, and an error, if there is any.
func (c *gKEHubFeatures) Update(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.UpdateOptions) (result *v1beta1.GKEHubFeature, err error) {
	result = &v1beta1.GKEHubFeature{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		Name(gKEHubFeature.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(gKEHubFeature).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *gKEHubFeatures) UpdateStatus(ctx context.Context, gKEHubFeature *v1beta1.GKEHubFeature, opts v1.UpdateOptions) (result *v1beta1.GKEHubFeature, err error) {
	result = &v1beta1.GKEHubFeature{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		Name(gKEHubFeature.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(gKEHubFeature).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the gKEHubFeature and deletes it. Returns an error if one occurs.
func (c *gKEHubFeatures) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *gKEHubFeatures) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("gkehubfeatures").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched gKEHubFeature.
func (c *gKEHubFeatures) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.GKEHubFeature, err error) {
	result = &v1beta1.GKEHubFeature{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("gkehubfeatures").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
