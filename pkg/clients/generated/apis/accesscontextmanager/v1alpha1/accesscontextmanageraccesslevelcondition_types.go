// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type AccesslevelconditionDevicePolicy struct {
	/* Immutable. A list of allowed device management levels.
	An empty list allows all management levels. Possible values: ["MANAGEMENT_UNSPECIFIED", "NONE", "BASIC", "COMPLETE"]. */
	// +optional
	AllowedDeviceManagementLevels []string `json:"allowedDeviceManagementLevels,omitempty"`

	/* Immutable. A list of allowed encryptions statuses.
	An empty list allows all statuses. Possible values: ["ENCRYPTION_UNSPECIFIED", "ENCRYPTION_UNSUPPORTED", "UNENCRYPTED", "ENCRYPTED"]. */
	// +optional
	AllowedEncryptionStatuses []string `json:"allowedEncryptionStatuses,omitempty"`

	/* Immutable. A list of allowed OS versions.
	An empty list allows all types and all versions. */
	// +optional
	OsConstraints []AccesslevelconditionOsConstraints `json:"osConstraints,omitempty"`

	/* Immutable. Whether the device needs to be approved by the customer admin. */
	// +optional
	RequireAdminApproval *bool `json:"requireAdminApproval,omitempty"`

	/* Immutable. Whether the device needs to be corp owned. */
	// +optional
	RequireCorpOwned *bool `json:"requireCorpOwned,omitempty"`

	/* Immutable. Whether or not screenlock is required for the DevicePolicy
	to be true. Defaults to false. */
	// +optional
	RequireScreenLock *bool `json:"requireScreenLock,omitempty"`
}

type AccesslevelconditionOsConstraints struct {
	/* Immutable. The minimum allowed OS version. If not set, any version
	of this OS satisfies the constraint.
	Format: "major.minor.patch" such as "10.5.301", "9.2.1". */
	// +optional
	MinimumVersion *string `json:"minimumVersion,omitempty"`

	/* Immutable. The operating system type of the device. Possible values: ["OS_UNSPECIFIED", "DESKTOP_MAC", "DESKTOP_WINDOWS", "DESKTOP_LINUX", "DESKTOP_CHROME_OS", "ANDROID", "IOS"]. */
	OsType string `json:"osType"`
}

type AccessContextManagerAccessLevelConditionSpec struct {
	// +optional
	AccessLevelRef *v1alpha1.ResourceRef `json:"accessLevelRef,omitempty"`

	/* Immutable. Device specific restrictions, all restrictions must hold for
	the Condition to be true. If not specified, all devices are
	allowed. */
	// +optional
	DevicePolicy *AccesslevelconditionDevicePolicy `json:"devicePolicy,omitempty"`

	/* Immutable. A list of CIDR block IP subnetwork specification. May be IPv4
	or IPv6.
	Note that for a CIDR IP address block, the specified IP address
	portion must be properly truncated (i.e. all the host bits must
	be zero) or the input is considered malformed. For example,
	"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,
	for IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"
	is not. The originating IP of a request must be in one of the
	listed subnets in order for this Condition to be true.
	If empty, all IP addresses are allowed. */
	// +optional
	IpSubnetworks []string `json:"ipSubnetworks,omitempty"`

	/* Immutable. An allowed list of members (users, service accounts).
	Using groups is not supported yet.

	The signed-in user originating the request must be a part of one
	of the provided members. If not specified, a request may come
	from any user (logged in/not logged in, not present in any
	groups, etc.).
	Formats: 'user:{emailid}', 'serviceAccount:{emailid}'. */
	// +optional
	Members []string `json:"members,omitempty"`

	/* Immutable. Whether to negate the Condition. If true, the Condition becomes
	a NAND over its non-empty fields, each field must be false for
	the Condition overall to be satisfied. Defaults to false. */
	// +optional
	Negate *bool `json:"negate,omitempty"`

	/* Immutable. The request must originate from one of the provided
	countries/regions.
	Format: A valid ISO 3166-1 alpha-2 code. */
	// +optional
	Regions []string `json:"regions,omitempty"`

	/* Immutable. A list of other access levels defined in the same Policy,
	referenced by resource name. Referencing an AccessLevel which
	does not exist is an error. All access levels listed must be
	granted for the Condition to be true.
	Format: accessPolicies/{policy_id}/accessLevels/{short_name}. */
	// +optional
	RequiredAccessLevels []string `json:"requiredAccessLevels,omitempty"`

	/* Immutable. Optional. The accessLevel of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type AccessContextManagerAccessLevelConditionStatus struct {
	/* Conditions represent the latest available observations of the
	   AccessContextManagerAccessLevelCondition's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpaccesscontextmanageraccesslevelcondition;gcpaccesscontextmanageraccesslevelconditions
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// AccessContextManagerAccessLevelCondition is the Schema for the accesscontextmanager API
// +k8s:openapi-gen=true
type AccessContextManagerAccessLevelCondition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AccessContextManagerAccessLevelConditionSpec   `json:"spec,omitempty"`
	Status AccessContextManagerAccessLevelConditionStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// AccessContextManagerAccessLevelConditionList contains a list of AccessContextManagerAccessLevelCondition
type AccessContextManagerAccessLevelConditionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessContextManagerAccessLevelCondition `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AccessContextManagerAccessLevelCondition{}, &AccessContextManagerAccessLevelConditionList{})
}
