// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ClusterAccelerators struct {
	/* Immutable. The number of accelerator cards exposed to an instance. */
	// +optional
	AcceleratorCount *int64 `json:"acceleratorCount,omitempty"`

	/* Immutable. The accelerator type resource namename (see GPUs on Compute Engine). */
	// +optional
	AcceleratorType *string `json:"acceleratorType,omitempty"`

	/* Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning). */
	// +optional
	GpuPartitionSize *string `json:"gpuPartitionSize,omitempty"`
}

type ClusterAutoscaling struct {
	/* Immutable. The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. **Note:** Quota must be sufficient to scale up the cluster. */
	// +optional
	MaxNodeCount *int64 `json:"maxNodeCount,omitempty"`

	/* Immutable. The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count. */
	// +optional
	MinNodeCount *int64 `json:"minNodeCount,omitempty"`
}

type ClusterAutoscalingConfig struct {
	/* Immutable. */
	// +optional
	PolicyRef *v1alpha1.ResourceRef `json:"policyRef,omitempty"`
}

type ClusterAuxiliaryServicesConfig struct {
	/* Immutable. Optional. The Hive Metastore configuration for this workload. */
	// +optional
	MetastoreConfig *ClusterMetastoreConfig `json:"metastoreConfig,omitempty"`

	/* Immutable. Optional. The Spark History Server configuration for the workload. */
	// +optional
	SparkHistoryServerConfig *ClusterSparkHistoryServerConfig `json:"sparkHistoryServerConfig,omitempty"`
}

type ClusterConfidentialInstanceConfig struct {
	/* Immutable. Optional. Defines whether the instance should have confidential compute enabled. */
	// +optional
	EnableConfidentialCompute *bool `json:"enableConfidentialCompute,omitempty"`
}

type ClusterConfig struct {
	/* Immutable. Optional. A list of [hardware accelerators](https://cloud.google.com/compute/docs/gpus) to attach to each node. */
	// +optional
	Accelerators []ClusterAccelerators `json:"accelerators,omitempty"`

	/* Immutable. Optional. The [Customer Managed Encryption Key (CMEK)] (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: `projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME`. */
	// +optional
	BootDiskKmsKey *string `json:"bootDiskKmsKey,omitempty"`

	/* Immutable. Optional. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk. */
	// +optional
	EphemeralStorageConfig *ClusterEphemeralStorageConfig `json:"ephemeralStorageConfig,omitempty"`

	/* Immutable. Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see [Adding Local SSDs](https://cloud.google.com/compute/docs/disks/local-ssd)). */
	// +optional
	LocalSsdCount *int64 `json:"localSsdCount,omitempty"`

	/* Immutable. Optional. The name of a Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Immutable. Optional. [Minimum CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as "Intel Haswell"` or Intel Sandy Bridge". */
	// +optional
	MinCpuPlatform *string `json:"minCpuPlatform,omitempty"`

	/* Immutable. Optional. Whether the nodes are created as legacy [preemptible VM instances] (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the `CONTROLLER` [role] (/dataproc/docs/reference/rest/v1/projects.regions.clusters#role) or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role). */
	// +optional
	Preemptible *bool `json:"preemptible,omitempty"`

	/* Immutable. Optional. Whether the nodes are created as [Spot VM instances] (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the `CONTROLLER` [role](/dataproc/docs/reference/rest/v1/projects.regions.clusters#role) or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role). */
	// +optional
	Spot *bool `json:"spot,omitempty"`
}

type ClusterDataprocMetricConfig struct {
	/* Immutable. Required. Metrics sources to enable. */
	Metrics []ClusterMetrics `json:"metrics"`
}

type ClusterDiskConfig struct {
	/* Immutable. Optional. Size in GB of the boot disk (default is 500GB). */
	// +optional
	BootDiskSizeGb *int64 `json:"bootDiskSizeGb,omitempty"`

	/* Immutable. Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-balanced" (Persistent Disk Balanced Solid State Drive), "pd-ssd" (Persistent Disk Solid State Drive), or "pd-standard" (Persistent Disk Hard Disk Drive). See [Disk types](https://cloud.google.com/compute/docs/disks#disk-types). */
	// +optional
	BootDiskType *string `json:"bootDiskType,omitempty"`

	/* Immutable. Optional. Interface type of local SSDs (default is "scsi"). Valid values: "scsi" (Small Computer System Interface), "nvme" (Non-Volatile Memory Express). See [local SSD performance](https://cloud.google.com/compute/docs/disks/local-ssd#performance). */
	// +optional
	LocalSsdInterface *string `json:"localSsdInterface,omitempty"`

	/* Immutable. Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and [HDFS](https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries. */
	// +optional
	NumLocalSsds *int64 `json:"numLocalSsds,omitempty"`
}

type ClusterEncryptionConfig struct {
	/* Immutable. */
	// +optional
	GcePdKmsKeyRef *v1alpha1.ResourceRef `json:"gcePdKmsKeyRef,omitempty"`
}

type ClusterEndpointConfig struct {
	/* Immutable. Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false. */
	// +optional
	EnableHttpPortAccess *bool `json:"enableHttpPortAccess,omitempty"`
}

type ClusterEphemeralStorageConfig struct {
	/* Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD is 375 GB in size. If zero, it means to disable using local SSDs as ephemeral storage. */
	// +optional
	LocalSsdCount *int64 `json:"localSsdCount,omitempty"`
}

type ClusterGceClusterConfig struct {
	/* Immutable. Optional. Confidential Instance Config for clusters using [Confidential VMs](https://cloud.google.com/compute/confidential-vm/docs). */
	// +optional
	ConfidentialInstanceConfig *ClusterConfidentialInstanceConfig `json:"confidentialInstanceConfig,omitempty"`

	/* Immutable. Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses. */
	// +optional
	InternalIPOnly *bool `json:"internalIPOnly,omitempty"`

	/* Immutable. The Compute Engine metadata entries to add to all instances (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)). */
	// +optional
	Metadata map[string]string `json:"metadata,omitempty"`

	/* Immutable. */
	// +optional
	NetworkRef *v1alpha1.ResourceRef `json:"networkRef,omitempty"`

	/* Immutable. Optional. Node Group Affinity for sole-tenant clusters. */
	// +optional
	NodeGroupAffinity *ClusterNodeGroupAffinity `json:"nodeGroupAffinity,omitempty"`

	/* Immutable. Optional. The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL */
	// +optional
	PrivateIPv6GoogleAccess *string `json:"privateIPv6GoogleAccess,omitempty"`

	/* Immutable. Optional. Reservation Affinity for consuming Zonal reservation. */
	// +optional
	ReservationAffinity *ClusterReservationAffinity `json:"reservationAffinity,omitempty"`

	/* Immutable. */
	// +optional
	ServiceAccountRef *v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`

	/* Immutable. Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control */
	// +optional
	ServiceAccountScopes []string `json:"serviceAccountScopes,omitempty"`

	/* Immutable. Optional. Shielded Instance Config for clusters using [Compute Engine Shielded VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm). */
	// +optional
	ShieldedInstanceConfig *ClusterShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`

	/* Immutable. */
	// +optional
	SubnetworkRef *v1alpha1.ResourceRef `json:"subnetworkRef,omitempty"`

	/* Immutable. The Compute Engine tags to add to all instances (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)). */
	// +optional
	Tags []string `json:"tags,omitempty"`

	/* Immutable. Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]` * `projects/[project_id]/zones/[zone]` * `us-central1-f` */
	// +optional
	Zone *string `json:"zone,omitempty"`
}

type ClusterGkeClusterConfig struct {
	/* Immutable. */
	// +optional
	GkeClusterTargetRef *v1alpha1.ResourceRef `json:"gkeClusterTargetRef,omitempty"`

	/* Immutable. Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the `DEFAULT` GkeNodePoolTarget.Role. If a `GkeNodePoolTarget` is not specified, Dataproc constructs a `DEFAULT` `GkeNodePoolTarget`. Each role can be given to only one `GkeNodePoolTarget`. All node pools must have the same location settings. */
	// +optional
	NodePoolTarget []ClusterNodePoolTarget `json:"nodePoolTarget,omitempty"`
}

type ClusterIdentityConfig struct {
	/* Immutable. Required. Map of user to service account. */
	UserServiceAccountMapping map[string]string `json:"userServiceAccountMapping"`
}

type ClusterInitializationActions struct {
	/* Immutable. Required. Cloud Storage URI of executable file. */
	ExecutableFile string `json:"executableFile"`

	/* Immutable. Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period. */
	// +optional
	ExecutionTimeout *string `json:"executionTimeout,omitempty"`
}

type ClusterKerberosConfig struct {
	/* Immutable. Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship. */
	// +optional
	CrossRealmTrustAdminServer *string `json:"crossRealmTrustAdminServer,omitempty"`

	/* Immutable. Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship. */
	// +optional
	CrossRealmTrustKdc *string `json:"crossRealmTrustKdc,omitempty"`

	/* Immutable. Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust. */
	// +optional
	CrossRealmTrustRealm *string `json:"crossRealmTrustRealm,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship. */
	// +optional
	CrossRealmTrustSharedPassword *string `json:"crossRealmTrustSharedPassword,omitempty"`

	/* Immutable. Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster. */
	// +optional
	EnableKerberos *bool `json:"enableKerberos,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database. */
	// +optional
	KdcDbKey *string `json:"kdcDbKey,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc. */
	// +optional
	KeyPassword *string `json:"keyPassword,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate. */
	// +optional
	Keystore *string `json:"keystore,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc. */
	// +optional
	KeystorePassword *string `json:"keystorePassword,omitempty"`

	/* Immutable. */
	// +optional
	KmsKeyRef *v1alpha1.ResourceRef `json:"kmsKeyRef,omitempty"`

	/* Immutable. Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm. */
	// +optional
	Realm *string `json:"realm,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password. */
	// +optional
	RootPrincipalPassword *string `json:"rootPrincipalPassword,omitempty"`

	/* Immutable. Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used. */
	// +optional
	TgtLifetimeHours *int64 `json:"tgtLifetimeHours,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate. */
	// +optional
	Truststore *string `json:"truststore,omitempty"`

	/* Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc. */
	// +optional
	TruststorePassword *string `json:"truststorePassword,omitempty"`
}

type ClusterKubernetesClusterConfig struct {
	/* Immutable. Required. The configuration for running the Dataproc cluster on GKE. */
	GkeClusterConfig ClusterGkeClusterConfig `json:"gkeClusterConfig"`

	/* Immutable. Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used. */
	// +optional
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty"`

	/* Immutable. Optional. The software configuration for this Dataproc cluster running on Kubernetes. */
	// +optional
	KubernetesSoftwareConfig *ClusterKubernetesSoftwareConfig `json:"kubernetesSoftwareConfig,omitempty"`
}

type ClusterKubernetesSoftwareConfig struct {
	/* Immutable. The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified. */
	// +optional
	ComponentVersion map[string]string `json:"componentVersion,omitempty"`

	/* Immutable. The properties to set on daemon config files. Property keys are specified in `prefix:property` format, for example `spark:spark.kubernetes.container.image`. The following are supported prefixes and their mappings: * spark: `spark-defaults.conf` For more information, see [Cluster properties](https://cloud.google.com/dataproc/docs/concepts/cluster-properties). */
	// +optional
	Properties map[string]string `json:"properties,omitempty"`
}

type ClusterLifecycleConfig struct {
	/* Immutable. Optional. The time when cluster will be auto-deleted (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	AutoDeleteTime *string `json:"autoDeleteTime,omitempty"`

	/* Immutable. Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	AutoDeleteTtl *string `json:"autoDeleteTtl,omitempty"`

	/* Immutable. Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	IdleDeleteTtl *string `json:"idleDeleteTtl,omitempty"`
}

type ClusterMasterConfig struct {
	/* Immutable. Optional. The Compute Engine accelerator configuration for these instances. */
	// +optional
	Accelerators []ClusterAccelerators `json:"accelerators,omitempty"`

	/* Immutable. Optional. Disk option config settings. */
	// +optional
	DiskConfig *ClusterDiskConfig `json:"diskConfig,omitempty"`

	/* Immutable. */
	// +optional
	ImageRef *v1alpha1.ResourceRef `json:"imageRef,omitempty"`

	/* Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu). */
	// +optional
	MinCpuPlatform *string `json:"minCpuPlatform,omitempty"`

	/* Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**. */
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty"`

	/* Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE */
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty"`
}

type ClusterMetastoreConfig struct {
	/* Immutable. */
	DataprocMetastoreServiceRef v1alpha1.ResourceRef `json:"dataprocMetastoreServiceRef"`
}

type ClusterMetrics struct {
	/* Immutable. Optional. Specify one or more [available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course (for the `SPARK` metric source, any [Spark metric] (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified). Provide metrics in the following format: `METRIC_SOURCE:INSTANCE:GROUP:METRIC` Use camelcase as appropriate. Examples: ``` yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used ``` Notes: * Only the specified overridden metrics will be collected for the metric source. For example, if one or more `spark:executive` metrics are listed as metric overrides, other `SPARK` metrics will not be collected. The collection of the default metrics for other OSS metric sources is unaffected. For example, if both `SPARK` andd `YARN` metric sources are enabled, and overrides are provided for Spark metrics only, all default YARN metrics will be collected. */
	// +optional
	MetricOverrides []string `json:"metricOverrides,omitempty"`

	/* Immutable. Required. Default metrics are collected unless `metricOverrides` are specified for the metric source (see [Available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information). Possible values: METRIC_SOURCE_UNSPECIFIED, MONITORING_AGENT_DEFAULTS, HDFS, SPARK, YARN, SPARK_HISTORY_SERVER, HIVESERVER2 */
	MetricSource string `json:"metricSource"`
}

type ClusterNodeGroupAffinity struct {
	/* Immutable. */
	NodeGroupRef v1alpha1.ResourceRef `json:"nodeGroupRef"`
}

type ClusterNodePoolConfig struct {
	/* Immutable. Optional. The autoscaler configuration for this node pool. The autoscaler is enabled only when a valid configuration is present. */
	// +optional
	Autoscaling *ClusterAutoscaling `json:"autoscaling,omitempty"`

	/* Immutable. Optional. The node pool configuration. */
	// +optional
	Config *ClusterConfig `json:"config,omitempty"`

	/* Immutable. Optional. The list of Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located. **Note:** All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region. If a location is not specified during node pool creation, Dataproc on GKE will choose the zone. */
	// +optional
	Locations []string `json:"locations,omitempty"`
}

type ClusterNodePoolTarget struct {
	/* Immutable. Input only. The configuration for the GKE node pool. If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail. If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values. This is an input only field. It will not be returned by the API. */
	// +optional
	NodePoolConfig *ClusterNodePoolConfig `json:"nodePoolConfig,omitempty"`

	/* Immutable. */
	NodePoolRef v1alpha1.ResourceRef `json:"nodePoolRef"`

	/* Immutable. Required. The roles associated with the GKE node pool. */
	Roles []string `json:"roles"`
}

type ClusterReservationAffinity struct {
	/* Immutable. Optional. Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION */
	// +optional
	ConsumeReservationType *string `json:"consumeReservationType,omitempty"`

	/* Immutable. Optional. Corresponds to the label key of reservation resource. */
	// +optional
	Key *string `json:"key,omitempty"`

	/* Immutable. Optional. Corresponds to the label values of reservation resource. */
	// +optional
	Values []string `json:"values,omitempty"`
}

type ClusterSecondaryWorkerConfig struct {
	/* Immutable. Optional. The Compute Engine accelerator configuration for these instances. */
	// +optional
	Accelerators []ClusterAccelerators `json:"accelerators,omitempty"`

	/* Immutable. Optional. Disk option config settings. */
	// +optional
	DiskConfig *ClusterDiskConfig `json:"diskConfig,omitempty"`

	/* Immutable. */
	// +optional
	ImageRef *v1alpha1.ResourceRef `json:"imageRef,omitempty"`

	/* Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu). */
	// +optional
	MinCpuPlatform *string `json:"minCpuPlatform,omitempty"`

	/* Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**. */
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty"`

	/* Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE */
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty"`
}

type ClusterSecurityConfig struct {
	/* Immutable. Optional. Identity related configuration, including service account based secure multi-tenancy user mappings. */
	// +optional
	IdentityConfig *ClusterIdentityConfig `json:"identityConfig,omitempty"`

	/* Immutable. Optional. Kerberos related configuration. */
	// +optional
	KerberosConfig *ClusterKerberosConfig `json:"kerberosConfig,omitempty"`
}

type ClusterShieldedInstanceConfig struct {
	/* Immutable. Optional. Defines whether instances have integrity monitoring enabled. */
	// +optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty"`

	/* Immutable. Optional. Defines whether instances have Secure Boot enabled. */
	// +optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty"`

	/* Immutable. Optional. Defines whether instances have the vTPM enabled. */
	// +optional
	EnableVtpm *bool `json:"enableVtpm,omitempty"`
}

type ClusterSoftwareConfig struct {
	/* Immutable. Optional. The version of software inside the cluster. It must be one of the supported [Dataproc Versions](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the ["preview" version](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version. */
	// +optional
	ImageVersion *string `json:"imageVersion,omitempty"`

	/* Immutable. Optional. The set of components to activate on the cluster. */
	// +optional
	OptionalComponents []string `json:"optionalComponents,omitempty"`

	/* Immutable. Optional. The properties to set on daemon config files. Property keys are specified in `prefix:property` format, for example `core:hadoop.tmp.dir`. The following are supported prefixes and their mappings: * capacity-scheduler: `capacity-scheduler.xml` * core: `core-site.xml` * distcp: `distcp-default.xml` * hdfs: `hdfs-site.xml` * hive: `hive-site.xml` * mapred: `mapred-site.xml` * pig: `pig.properties` * spark: `spark-defaults.conf` * yarn: `yarn-site.xml` For more information, see [Cluster properties](https://cloud.google.com/dataproc/docs/concepts/cluster-properties). */
	// +optional
	Properties map[string]string `json:"properties,omitempty"`
}

type ClusterSparkHistoryServerConfig struct {
	/* Immutable. */
	// +optional
	DataprocClusterRef *v1alpha1.ResourceRef `json:"dataprocClusterRef,omitempty"`
}

type ClusterVirtualClusterConfig struct {
	/* Immutable. Optional. Configuration of auxiliary services used by this cluster. */
	// +optional
	AuxiliaryServicesConfig *ClusterAuxiliaryServicesConfig `json:"auxiliaryServicesConfig,omitempty"`

	/* Immutable. Required. The configuration for running the Dataproc cluster on Kubernetes. */
	KubernetesClusterConfig ClusterKubernetesClusterConfig `json:"kubernetesClusterConfig"`

	/* Immutable. */
	// +optional
	StagingBucketRef *v1alpha1.ResourceRef `json:"stagingBucketRef,omitempty"`
}

type ClusterWorkerConfig struct {
	/* Immutable. Optional. The Compute Engine accelerator configuration for these instances. */
	// +optional
	Accelerators []ClusterAccelerators `json:"accelerators,omitempty"`

	/* Immutable. Optional. Disk option config settings. */
	// +optional
	DiskConfig *ClusterDiskConfig `json:"diskConfig,omitempty"`

	/* Immutable. */
	// +optional
	ImageRef *v1alpha1.ResourceRef `json:"imageRef,omitempty"`

	/* Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu). */
	// +optional
	MinCpuPlatform *string `json:"minCpuPlatform,omitempty"`

	/* Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**. */
	// +optional
	NumInstances *int64 `json:"numInstances,omitempty"`

	/* Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE */
	// +optional
	Preemptibility *string `json:"preemptibility,omitempty"`
}

type DataprocClusterSpec struct {
	/* Immutable. The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated. */
	// +optional
	Config *ClusterConfig `json:"config,omitempty"`

	/* Immutable. The location for the resource, usually a GCP region. */
	Location string `json:"location"`

	/* Immutable. The Project that this resource belongs to. */
	// +optional
	ProjectRef *v1alpha1.ResourceRef `json:"projectRef,omitempty"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. Optional. The virtual cluster config is used when creating a Dataproc cluster that does not directly control the underlying compute resources, for example, when creating a [Dataproc-on-GKE cluster](https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke). Dataproc may set default values, and values may change when clusters are updated. Exactly one of config or virtual_cluster_config must be specified. */
	// +optional
	VirtualClusterConfig *ClusterVirtualClusterConfig `json:"virtualClusterConfig,omitempty"`
}

type ClusterConfigStatus struct {
	// +optional
	EndpointConfig *ClusterEndpointConfigStatus `json:"endpointConfig,omitempty"`

	// +optional
	LifecycleConfig *ClusterLifecycleConfigStatus `json:"lifecycleConfig,omitempty"`

	// +optional
	MasterConfig *ClusterMasterConfigStatus `json:"masterConfig,omitempty"`

	// +optional
	SecondaryWorkerConfig *ClusterSecondaryWorkerConfigStatus `json:"secondaryWorkerConfig,omitempty"`

	// +optional
	WorkerConfig *ClusterWorkerConfigStatus `json:"workerConfig,omitempty"`
}

type ClusterEndpointConfigStatus struct {
	/* Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true. */
	// +optional
	HttpPorts map[string]string `json:"httpPorts,omitempty"`
}

type ClusterInstanceReferencesStatus struct {
	/* The unique identifier of the Compute Engine instance. */
	// +optional
	InstanceId *string `json:"instanceId,omitempty"`

	/* The user-friendly name of the Compute Engine instance. */
	// +optional
	InstanceName *string `json:"instanceName,omitempty"`

	/* The public ECIES key used for sharing data with this instance. */
	// +optional
	PublicEciesKey *string `json:"publicEciesKey,omitempty"`

	/* The public RSA key used for sharing data with this instance. */
	// +optional
	PublicKey *string `json:"publicKey,omitempty"`
}

type ClusterLifecycleConfigStatus struct {
	/* Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	IdleStartTime *string `json:"idleStartTime,omitempty"`
}

type ClusterManagedGroupConfigStatus struct {
	/* Output only. The name of the Instance Group Manager for this group. */
	// +optional
	InstanceGroupManagerName *string `json:"instanceGroupManagerName,omitempty"`

	/* Output only. The name of the Instance Template used for the Managed Instance Group. */
	// +optional
	InstanceTemplateName *string `json:"instanceTemplateName,omitempty"`
}

type ClusterMasterConfigStatus struct {
	/* Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group. */
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty"`

	/* Output only. List of references to Compute Engine instances. */
	// +optional
	InstanceReferences []ClusterInstanceReferencesStatus `json:"instanceReferences,omitempty"`

	/* Output only. Specifies that this instance group contains preemptible instances. */
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty"`

	/* Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups. */
	// +optional
	ManagedGroupConfig *ClusterManagedGroupConfigStatus `json:"managedGroupConfig,omitempty"`
}

type ClusterMetricsStatus struct {
	/* The HDFS metrics. */
	// +optional
	HdfsMetrics map[string]string `json:"hdfsMetrics,omitempty"`

	/* The YARN metrics. */
	// +optional
	YarnMetrics map[string]string `json:"yarnMetrics,omitempty"`
}

type ClusterSecondaryWorkerConfigStatus struct {
	/* Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group. */
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty"`

	/* Output only. List of references to Compute Engine instances. */
	// +optional
	InstanceReferences []ClusterInstanceReferencesStatus `json:"instanceReferences,omitempty"`

	/* Output only. Specifies that this instance group contains preemptible instances. */
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty"`

	/* Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups. */
	// +optional
	ManagedGroupConfig *ClusterManagedGroupConfigStatus `json:"managedGroupConfig,omitempty"`
}

type ClusterStatusHistoryStatus struct {
	/* Optional. Output only. Details of cluster's state. */
	// +optional
	Detail *string `json:"detail,omitempty"`

	/* Output only. The cluster's state. Possible values: UNKNOWN, CREATING, RUNNING, ERROR, DELETING, UPDATING, STOPPING, STOPPED, STARTING */
	// +optional
	State *string `json:"state,omitempty"`

	/* Output only. Time when this state was entered (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	StateStartTime *string `json:"stateStartTime,omitempty"`

	/* Output only. Additional state information that includes status reported by the agent. Possible values: UNSPECIFIED, UNHEALTHY, STALE_STATUS */
	// +optional
	Substate *string `json:"substate,omitempty"`
}

type ClusterStatusStatus struct {
	/* Optional. Output only. Details of cluster's state. */
	// +optional
	Detail *string `json:"detail,omitempty"`

	/* Output only. The cluster's state. Possible values: UNKNOWN, CREATING, RUNNING, ERROR, DELETING, UPDATING, STOPPING, STOPPED, STARTING */
	// +optional
	State *string `json:"state,omitempty"`

	/* Output only. Time when this state was entered (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)). */
	// +optional
	StateStartTime *string `json:"stateStartTime,omitempty"`

	/* Output only. Additional state information that includes status reported by the agent. Possible values: UNSPECIFIED, UNHEALTHY, STALE_STATUS */
	// +optional
	Substate *string `json:"substate,omitempty"`
}

type ClusterWorkerConfigStatus struct {
	/* Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group. */
	// +optional
	InstanceNames []string `json:"instanceNames,omitempty"`

	/* Output only. List of references to Compute Engine instances. */
	// +optional
	InstanceReferences []ClusterInstanceReferencesStatus `json:"instanceReferences,omitempty"`

	/* Output only. Specifies that this instance group contains preemptible instances. */
	// +optional
	IsPreemptible *bool `json:"isPreemptible,omitempty"`

	/* Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups. */
	// +optional
	ManagedGroupConfig *ClusterManagedGroupConfigStatus `json:"managedGroupConfig,omitempty"`
}

type DataprocClusterStatus struct {
	/* Conditions represent the latest available observations of the
	   DataprocCluster's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster. */
	// +optional
	ClusterUuid *string `json:"clusterUuid,omitempty"`

	// +optional
	Config *ClusterConfigStatus `json:"config,omitempty"`

	/* Output only. Contains cluster daemon metrics such as HDFS and YARN stats. **Beta Feature**: This report is available for testing purposes only. It may be changed before final release. */
	// +optional
	Metrics *ClusterMetricsStatus `json:"metrics,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Output only. Cluster status. */
	// +optional
	Status *ClusterStatusStatus `json:"status,omitempty"`

	/* Output only. The previous cluster status. */
	// +optional
	StatusHistory []ClusterStatusHistoryStatus `json:"statusHistory,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdataproccluster;gcpdataprocclusters
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/dcl2crd=true";"cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DataprocCluster is the Schema for the dataproc API
// +k8s:openapi-gen=true
type DataprocCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DataprocClusterSpec   `json:"spec,omitempty"`
	Status DataprocClusterStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DataprocClusterList contains a list of DataprocCluster
type DataprocClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataprocCluster `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DataprocCluster{}, &DataprocClusterList{})
}
