// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type TagFields struct {
	/* Holds the value for a tag field with boolean type. */
	// +optional
	BoolValue *bool `json:"boolValue,omitempty"`

	/* The display name of this field. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* Holds the value for a tag field with double type. */
	// +optional
	DoubleValue *float64 `json:"doubleValue,omitempty"`

	/* The display name of the enum value. */
	// +optional
	EnumValue *string `json:"enumValue,omitempty"`

	FieldName string `json:"fieldName"`

	/* The order of this field with respect to other fields in this tag. For example, a higher value can indicate
	a more important field. The value can be negative. Multiple fields can have the same order, and field orders
	within a tag do not have to be sequential. */
	// +optional
	Order *int64 `json:"order,omitempty"`

	/* Holds the value for a tag field with string type. */
	// +optional
	StringValue *string `json:"stringValue,omitempty"`

	/* Holds the value for a tag field with timestamp type. */
	// +optional
	TimestampValue *string `json:"timestampValue,omitempty"`
}

type DataCatalogTagSpec struct {
	/* Resources like Entry can have schemas associated with them. This scope allows users to attach tags to an
	individual column based on that schema.

	For attaching a tag to a nested column, use '.' to separate the column names. Example:
	'outer_column.inner_column'. */
	// +optional
	Column *string `json:"column,omitempty"`

	/* This maps the ID of a tag field to the value of and additional information about that field.
	Valid field IDs are defined by the tag's template. A tag must have at least 1 field and at most 500 fields. */
	Fields []TagFields `json:"fields"`

	/* Immutable. The name of the parent this tag is attached to. This can be the name of an entry or an entry group. If an entry group, the tag will be attached to
	all entries in that group. */
	// +optional
	Parent *string `json:"parent,omitempty"`

	/* Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. The resource name of the tag template that this tag uses. Example:
	projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}
	This field cannot be modified after creation. */
	Template string `json:"template"`
}

type DataCatalogTagStatus struct {
	/* Conditions represent the latest available observations of the
	   DataCatalogTag's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The resource name of the tag in URL format. Example:
	projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/entries/{entryId}/tags/{tag_id} or
	projects/{project_id}/locations/{location}/entrygroups/{entryGroupId}/tags/{tag_id}
	where tag_id is a system-generated identifier. Note that this Tag may not actually be stored in the location in this name. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The display name of the tag template. */
	// +optional
	TemplateDisplayname *string `json:"templateDisplayname,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdatacatalogtag;gcpdatacatalogtags
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DataCatalogTag is the Schema for the datacatalog API
// +k8s:openapi-gen=true
type DataCatalogTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DataCatalogTagSpec   `json:"spec,omitempty"`
	Status DataCatalogTagStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DataCatalogTagList contains a list of DataCatalogTag
type DataCatalogTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataCatalogTag `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DataCatalogTag{}, &DataCatalogTagList{})
}
