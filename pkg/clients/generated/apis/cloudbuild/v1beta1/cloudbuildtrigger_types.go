// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type TriggerApprovalConfig struct {
	/* Whether or not approval is needed. If this is set on a build, it will become pending when run,
	and will need to be explicitly approved to start. */
	// +optional
	ApprovalRequired *bool `json:"approvalRequired,omitempty"`
}

type TriggerArtifacts struct {
	/* A list of images to be pushed upon the successful completion of all build steps.

	The images will be pushed using the builder service account's credentials.

	The digests of the pushed images will be stored in the Build resource's results field.

	If any of the images fail to be pushed, the build is marked FAILURE. */
	// +optional
	Images []string `json:"images,omitempty"`

	/* A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps.

	Files in the workspace matching specified paths globs will be uploaded to the
	Cloud Storage location using the builder service account's credentials.

	The location and generation of the uploaded objects will be stored in the Build resource's results field.

	If any objects fail to be pushed, the build is marked FAILURE. */
	// +optional
	Objects *TriggerObjects `json:"objects,omitempty"`
}

type TriggerAvailableSecrets struct {
	/* Pairs a secret environment variable with a SecretVersion in Secret Manager. */
	SecretManager []TriggerSecretManager `json:"secretManager"`
}

type TriggerBitbucketServerTriggerConfig struct {
	/* Only `external` field is supported to configure the reference.

	The full resource name of the bitbucket server config. Format:
	projects/{project}/locations/{location}/bitbucketServerConfigs/{id}. */
	BitbucketServerConfigResourceRef v1alpha1.ResourceRef `json:"bitbucketServerConfigResourceRef"`

	/* Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST". */
	ProjectKey string `json:"projectKey"`

	/* Filter to match changes in pull requests. */
	// +optional
	PullRequest *TriggerPullRequest `json:"pullRequest,omitempty"`

	/* Filter to match changes in refs like branches, tags. */
	// +optional
	Push *TriggerPush `json:"push,omitempty"`

	/* Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL.
	For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo. */
	RepoSlug string `json:"repoSlug"`
}

type TriggerBuild struct {
	/* Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
	// +optional
	Artifacts *TriggerArtifacts `json:"artifacts,omitempty"`

	/* Secrets and secret environment variables. */
	// +optional
	AvailableSecrets *TriggerAvailableSecrets `json:"availableSecrets,omitempty"`

	/* A list of images to be pushed upon the successful completion of all build steps.
	The images are pushed using the builder service account's credentials.
	The digests of the pushed images will be stored in the Build resource's results field.
	If any of the images fail to be pushed, the build status is marked FAILURE. */
	// +optional
	Images []string `json:"images,omitempty"`

	/* Google Cloud Storage bucket where logs should be written. Logs file
	names will be of the format ${logsBucket}/log-${build_id}.txt. */
	// +optional
	LogsBucketRef *v1alpha1.ResourceRef `json:"logsBucketRef,omitempty"`

	/* Special options for this build. */
	// +optional
	Options *TriggerOptions `json:"options,omitempty"`

	/* TTL in queue for this build. If provided and the build is enqueued longer than this value,
	the build will expire and the build status will be EXPIRED.
	The TTL starts ticking from createTime.
	A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s". */
	// +optional
	QueueTtl *string `json:"queueTtl,omitempty"`

	/* Secrets to decrypt using Cloud Key Management Service. */
	// +optional
	Secret []TriggerSecret `json:"secret,omitempty"`

	/* The location of the source files to build.

	One of 'storageSource' or 'repoSource' must be provided. */
	// +optional
	Source *TriggerSource `json:"source,omitempty"`

	/* The operations to be performed on the workspace. */
	Step []TriggerStep `json:"step"`

	/* Substitutions data for Build resource. */
	// +optional
	Substitutions map[string]string `json:"substitutions,omitempty"`

	/* Tags for annotation of a Build. These are not docker tags. */
	// +optional
	Tags []string `json:"tags,omitempty"`

	/* Amount of time that this build should be allowed to run, to second granularity.
	If this amount of time elapses, work on the build will cease and the build status will be TIMEOUT.
	This timeout must be equal to or greater than the sum of the timeouts for build steps within the build.
	The expected format is the number of seconds followed by s.
	Default time is ten minutes (600s). */
	// +optional
	Timeout *string `json:"timeout,omitempty"`
}

type TriggerGitFileSource struct {
	/* Only `external` field is supported to configure the reference.

	The full resource name of the bitbucket server config. Format:
	projects/{project}/locations/{location}/bitbucketServerConfigs/{id}. */
	// +optional
	BitbucketServerConfigRef *v1alpha1.ResourceRef `json:"bitbucketServerConfigRef,omitempty"`

	/* Only `external` field is supported to configure the reference.

	The full resource name of the github enterprise config. Format:
	projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. */
	// +optional
	GithubEnterpriseConfigRef *v1alpha1.ResourceRef `json:"githubEnterpriseConfigRef,omitempty"`

	/* The path of the file, with the repo root as the root of the path. */
	Path string `json:"path"`

	/* The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: ["UNKNOWN", "CLOUD_SOURCE_REPOSITORIES", "GITHUB", "BITBUCKET_SERVER"]. */
	RepoType string `json:"repoType"`

	/* Only `external` field is supported to configure the reference.

	The fully qualified resource name of the Repo API repository. The fully qualified resource name of the Repo API repository.
	If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path. */
	// +optional
	RepositoryRef *v1alpha1.ResourceRef `json:"repositoryRef,omitempty"`

	/* The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the
	filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
	If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path. */
	// +optional
	Revision *string `json:"revision,omitempty"`

	/* The URI of the repo (optional). If unspecified, the repo from which the trigger
	invocation originated is assumed to be the repo from which to read the specified path. */
	// +optional
	Uri *string `json:"uri,omitempty"`
}

type TriggerGithub struct {
	/* Only `external` field is supported to configure the reference.

	The full resource name of the github enterprise config. Format:
	projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. */
	// +optional
	EnterpriseConfigResourceNameRef *v1alpha1.ResourceRef `json:"enterpriseConfigResourceNameRef,omitempty"`

	/* Name of the repository. For example: The name for
	https://github.com/googlecloudplatform/cloud-builders is "cloud-builders". */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Owner of the repository. For example: The owner for
	https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform". */
	// +optional
	Owner *string `json:"owner,omitempty"`

	/* filter to match changes in pull requests. Specify only one of 'pull_request' or 'push'. */
	// +optional
	PullRequest *TriggerPullRequest `json:"pullRequest,omitempty"`

	/* filter to match changes in refs, like branches or tags. Specify only one of 'pull_request' or 'push'. */
	// +optional
	Push *TriggerPush `json:"push,omitempty"`
}

type TriggerObjects struct {
	/* Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/".

	Files in the workspace matching any path pattern will be uploaded to Cloud Storage with
	this location as a prefix. */
	// +optional
	Location *string `json:"location,omitempty"`

	/* Path globs used to match files in the build's workspace. */
	// +optional
	Paths []string `json:"paths,omitempty"`

	/* Output only. Stores timing information for pushing all artifact objects. */
	// +optional
	Timing []TriggerTiming `json:"timing,omitempty"`
}

type TriggerOptions struct {
	/* Requested disk size for the VM that runs the build. Note that this is NOT "disk free";
	some of the space will be used by the operating system and build utilities.
	Also note that this is the minimum disk size that will be allocated for the build --
	the build may run with a larger disk than requested. At present, the maximum disk size
	is 1000GB; builds that request more than the maximum are rejected with an error. */
	// +optional
	DiskSizeGb *int64 `json:"diskSizeGb,omitempty"`

	/* Option to specify whether or not to apply bash style string operations to the substitutions.

	NOTE this is always enabled for triggered builds and cannot be overridden in the build configuration file. */
	// +optional
	DynamicSubstitutions *bool `json:"dynamicSubstitutions,omitempty"`

	/* A list of global environment variable definitions that will exist for all build steps
	in this build. If a variable is defined in both globally and in a build step,
	the variable will use the build step value.

	The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
	// +optional
	Env []string `json:"env,omitempty"`

	/* Option to define build log streaming behavior to Google Cloud Storage. Possible values: ["STREAM_DEFAULT", "STREAM_ON", "STREAM_OFF"]. */
	// +optional
	LogStreamingOption *string `json:"logStreamingOption,omitempty"`

	/* Option to specify the logging mode, which determines if and where build logs are stored. Possible values: ["LOGGING_UNSPECIFIED", "LEGACY", "GCS_ONLY", "STACKDRIVER_ONLY", "CLOUD_LOGGING_ONLY", "NONE"]. */
	// +optional
	Logging *string `json:"logging,omitempty"`

	/* Compute Engine machine type on which to run the build. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Requested verifiability options. Possible values: ["NOT_VERIFIED", "VERIFIED"]. */
	// +optional
	RequestedVerifyOption *string `json:"requestedVerifyOption,omitempty"`

	/* A list of global environment variables, which are encrypted using a Cloud Key Management
	Service crypto key. These values must be specified in the build's Secret. These variables
	will be available to all build steps in this build. */
	// +optional
	SecretEnv []string `json:"secretEnv,omitempty"`

	/* Requested hash for SourceProvenance. Possible values: ["NONE", "SHA256", "MD5"]. */
	// +optional
	SourceProvenanceHash []string `json:"sourceProvenanceHash,omitempty"`

	/* Option to specify behavior when there is an error in the substitution checks.

	NOTE this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden
	in the build configuration file. Possible values: ["MUST_MATCH", "ALLOW_LOOSE"]. */
	// +optional
	SubstitutionOption *string `json:"substitutionOption,omitempty"`

	/* Global list of volumes to mount for ALL build steps

	Each volume is created as an empty volume prior to starting the build process.
	Upon completion of the build, volumes and their contents are discarded. Global
	volume names and paths cannot conflict with the volumes defined a build step.

	Using a global volume in a build with only one step is not valid as it is indicative
	of a build request with an incorrect configuration. */
	// +optional
	Volumes []TriggerVolumes `json:"volumes,omitempty"`

	/* Option to specify a WorkerPool for the build. Format projects/{project}/workerPools/{workerPool}

	This field is experimental. */
	// +optional
	WorkerPool *string `json:"workerPool,omitempty"`
}

type TriggerPubsubConfig struct {
	/* Service account that will make the push request. */
	// +optional
	ServiceAccountRef *v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`

	/* Potential issues with the underlying Pub/Sub subscription configuration.
	Only populated on get requests. */
	// +optional
	State *string `json:"state,omitempty"`

	/* Output only. Name of the subscription. */
	// +optional
	Subscription *string `json:"subscription,omitempty"`

	/* The name of the topic from which this subscription
	is receiving messages. */
	TopicRef v1alpha1.ResourceRef `json:"topicRef"`
}

type TriggerPullRequest struct {
	/* Regex of branches to match.

	The syntax of the regular expressions accepted is the syntax accepted by
	RE2 and described at https://github.com/google/re2/wiki/Syntax. */
	// +optional
	Branch *string `json:"branch,omitempty"`

	/* Configure builds to run whether a repository owner or collaborator need to comment '/gcbrun'. Possible values: ["COMMENTS_DISABLED", "COMMENTS_ENABLED", "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"]. */
	// +optional
	CommentControl *string `json:"commentControl,omitempty"`

	/* If true, branches that do NOT match the git_ref will trigger a build. */
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty"`
}

type TriggerPush struct {
	/* Regex of branches to match.

	The syntax of the regular expressions accepted is the syntax accepted by
	RE2 and described at https://github.com/google/re2/wiki/Syntax. */
	// +optional
	Branch *string `json:"branch,omitempty"`

	/* If true, only trigger a build if the revision regex does NOT match the git_ref regex. */
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty"`

	/* Regex of tags to match.

	The syntax of the regular expressions accepted is the syntax accepted by
	RE2 and described at https://github.com/google/re2/wiki/Syntax. */
	// +optional
	Tag *string `json:"tag,omitempty"`
}

type TriggerRepoSource struct {
	/* Regex matching branches to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	described at https://github.com/google/re2/wiki/Syntax. */
	// +optional
	BranchName *string `json:"branchName,omitempty"`

	/* Explicit commit SHA to build. Exactly one a of branch name, tag, or commit SHA must be provided. */
	// +optional
	CommitSha *string `json:"commitSha,omitempty"`

	/* Directory, relative to the source root, in which to run the build.
	This must be a relative path. If a step's dir is specified and is an absolute path,
	this value is ignored for that step's execution. */
	// +optional
	Dir *string `json:"dir,omitempty"`

	/* Only trigger a build if the revision regex does NOT match the revision regex. */
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty"`

	/* ID of the project that owns the Cloud Source Repository.
	If omitted, the project ID requesting the build is assumed. */
	// +optional
	ProjectId *string `json:"projectId,omitempty"`

	/* The desired Cloud Source Repository. If omitted, "default" is
	assumed. */
	RepoRef v1alpha1.ResourceRef `json:"repoRef"`

	/* Substitutions to use in a triggered build. Should only be used with triggers.run. */
	// +optional
	Substitutions map[string]string `json:"substitutions,omitempty"`

	/* Regex matching tags to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	The syntax of the regular expressions accepted is the syntax accepted by RE2 and
	described at https://github.com/google/re2/wiki/Syntax. */
	// +optional
	TagName *string `json:"tagName,omitempty"`
}

type TriggerRepositoryEventConfig struct {
	/* Contains filter properties for matching Pull Requests. */
	// +optional
	PullRequest *TriggerPullRequest `json:"pullRequest,omitempty"`

	/* Contains filter properties for matching git pushes. */
	// +optional
	Push *TriggerPush `json:"push,omitempty"`

	/* The resource name of the Repo API resource. */
	// +optional
	Repository *string `json:"repository,omitempty"`
}

type TriggerSecret struct {
	/* KMS crypto key to use to decrypt these envs. */
	KmsKeyRef v1alpha1.ResourceRef `json:"kmsKeyRef"`

	/* Map of environment variable name to its encrypted value.
	Secret environment variables must be unique across all of a build's secrets,
	and must be used by at least one build step. Values can be at most 64 KB in size.
	There can be at most 100 secret values across all of a build's secrets. */
	// +optional
	SecretEnv map[string]string `json:"secretEnv,omitempty"`
}

type TriggerSecretManager struct {
	/* Environment variable name to associate with the secret. Secret environment
	variables must be unique across all of a build's secrets, and must be used
	by at least one build step. */
	Env string `json:"env"`

	VersionRef v1alpha1.ResourceRef `json:"versionRef"`
}

type TriggerSource struct {
	/* Location of the source in a Google Cloud Source Repository. */
	// +optional
	RepoSource *TriggerRepoSource `json:"repoSource,omitempty"`

	/* Location of the source in an archive file in Google Cloud Storage. */
	// +optional
	StorageSource *TriggerStorageSource `json:"storageSource,omitempty"`
}

type TriggerSourceToBuild struct {
	/* Only `external` field is supported to configure the reference.

	The full resource name of the bitbucket server config. Format:
	projects/{project}/locations/{location}/bitbucketServerConfigs/{id}. */
	// +optional
	BitbucketServerConfigRef *v1alpha1.ResourceRef `json:"bitbucketServerConfigRef,omitempty"`

	/* Only `external` field is supported to configure the reference.

	The full resource name of the github enterprise config. Format:
	projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}. */
	// +optional
	GithubEnterpriseConfigRef *v1alpha1.ResourceRef `json:"githubEnterpriseConfigRef,omitempty"`

	/* The branch or tag to use. Must start with "refs/" (required). */
	Ref string `json:"ref"`

	/* The type of the repo, since it may not be explicit from the repo field (e.g from a URL).
	Values can be UNKNOWN, CLOUD_SOURCE_REPOSITORIES, GITHUB, BITBUCKET_SERVER Possible values: ["UNKNOWN", "CLOUD_SOURCE_REPOSITORIES", "GITHUB", "BITBUCKET_SERVER"]. */
	RepoType string `json:"repoType"`

	/* Only `external` field is supported to configure the reference.

	The qualified resource name of the Repo API repository.
	Either uri or repository can be specified and is required. */
	// +optional
	RepositoryRef *v1alpha1.ResourceRef `json:"repositoryRef,omitempty"`

	/* The URI of the repo. */
	// +optional
	Uri *string `json:"uri,omitempty"`
}

type TriggerStep struct {
	/* Allow this build step to fail without failing the entire build if and
	only if the exit code is one of the specified codes.

	If 'allowFailure' is also specified, this field will take precedence. */
	// +optional
	AllowExitCodes []int64 `json:"allowExitCodes,omitempty"`

	/* Allow this build step to fail without failing the entire build.
	If false, the entire build will fail if this step fails. Otherwise, the
	build will succeed, but this step will still have a failure status.
	Error information will be reported in the 'failureDetail' field.

	'allowExitCodes' takes precedence over this field. */
	// +optional
	AllowFailure *bool `json:"allowFailure,omitempty"`

	/* A list of arguments that will be presented to the step when it is started.

	If the image used to run the step's container has an entrypoint, the args
	are used as arguments to that entrypoint. If the image does not define an
	entrypoint, the first element in args is used as the entrypoint, and the
	remainder will be used as arguments. */
	// +optional
	Args []string `json:"args,omitempty"`

	/* Working directory to use when running this step's container.

	If this value is a relative path, it is relative to the build's working
	directory. If this value is absolute, it may be outside the build's working
	directory, in which case the contents of the path may not be persisted
	across build step executions, unless a 'volume' for that path is specified.

	If the build specifies a 'RepoSource' with 'dir' and a step with a
	'dir',
	which specifies an absolute path, the 'RepoSource' 'dir' is ignored
	for the step's execution. */
	// +optional
	Dir *string `json:"dir,omitempty"`

	/* Entrypoint to be used instead of the build step image's
	default entrypoint.
	If unset, the image's default entrypoint is used. */
	// +optional
	Entrypoint *string `json:"entrypoint,omitempty"`

	/* A list of environment variable definitions to be used when
	running a step.

	The elements are of the form "KEY=VALUE" for the environment variable
	"KEY" being given the value "VALUE". */
	// +optional
	Env []string `json:"env,omitempty"`

	/* Unique identifier for this build step, used in 'wait_for' to
	reference this build step as a dependency. */
	// +optional
	Id *string `json:"id,omitempty"`

	/* The name of the container image that will run this particular build step.

	If the image is available in the host's Docker daemon's cache, it will be
	run directly. If not, the host will attempt to pull the image first, using
	the builder service account's credentials if necessary.

	The Docker daemon's cache will already have the latest versions of all of
	the officially supported build steps (see https://github.com/GoogleCloudPlatform/cloud-builders
	for images and examples).
	The Docker daemon will also have cached many of the layers for some popular
	images, like "ubuntu", "debian", but they will be refreshed at the time
	you attempt to use them.

	If you built an image in a previous build step, it will be stored in the
	host's Docker daemon's cache and is available to use as the name for a
	later build step. */
	Name string `json:"name"`

	/* A shell script to be executed in the step.
	When script is provided, the user cannot specify the entrypoint or args. */
	// +optional
	Script *string `json:"script,omitempty"`

	/* A list of environment variables which are encrypted using
	a Cloud Key
	Management Service crypto key. These values must be specified in
	the build's 'Secret'. */
	// +optional
	SecretEnv []string `json:"secretEnv,omitempty"`

	/* Time limit for executing this build step. If not defined,
	the step has no
	time limit and will be allowed to continue to run until either it
	completes or the build itself times out. */
	// +optional
	Timeout *string `json:"timeout,omitempty"`

	/* Output only. Stores timing information for executing this
	build step. */
	// +optional
	Timing *string `json:"timing,omitempty"`

	/* List of volumes to mount into the build step.

	Each volume is created as an empty volume prior to execution of the
	build step. Upon completion of the build, volumes and their contents
	are discarded.

	Using a named volume in only one step is not valid as it is
	indicative of a build request with an incorrect configuration. */
	// +optional
	Volumes []TriggerVolumes `json:"volumes,omitempty"`

	/* The ID(s) of the step(s) that this build step depends on.

	This build step will not start until all the build steps in 'wait_for'
	have completed successfully. If 'wait_for' is empty, this build step
	will start when all previous build steps in the 'Build.Steps' list
	have completed successfully. */
	// +optional
	WaitFor []string `json:"waitFor,omitempty"`
}

type TriggerStorageSource struct {
	/* Google Cloud Storage bucket containing the source. */
	BucketRef v1alpha1.ResourceRef `json:"bucketRef"`

	/* Google Cloud Storage generation for the object.
	If the generation is omitted, the latest generation will be used. */
	// +optional
	Generation *string `json:"generation,omitempty"`

	/* Google Cloud Storage object containing the source.
	This object must be a gzipped archive file (.tar.gz) containing source to build. */
	Object string `json:"object"`
}

type TriggerTiming struct {
	/* End of time span.

	A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". */
	// +optional
	EndTime *string `json:"endTime,omitempty"`

	/* Start of time span.

	A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to
	nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". */
	// +optional
	StartTime *string `json:"startTime,omitempty"`
}

type TriggerTriggerTemplate struct {
	/* Name of the branch to build. Exactly one a of branch name, tag, or commit SHA must be provided.
	This field is a regular expression. */
	// +optional
	BranchName *string `json:"branchName,omitempty"`

	/* Explicit commit SHA to build. Exactly one of a branch name, tag, or commit SHA must be provided. */
	// +optional
	CommitSha *string `json:"commitSha,omitempty"`

	/* Directory, relative to the source root, in which to run the build.

	This must be a relative path. If a step's dir is specified and
	is an absolute path, this value is ignored for that step's
	execution. */
	// +optional
	Dir *string `json:"dir,omitempty"`

	/* Only trigger a build if the revision regex does NOT match the revision regex. */
	// +optional
	InvertRegex *bool `json:"invertRegex,omitempty"`

	/* The Cloud Source Repository to build. If omitted, the repo with
	name "default" is assumed. */
	// +optional
	RepoRef *v1alpha1.ResourceRef `json:"repoRef,omitempty"`

	/* Name of the tag to build. Exactly one of a branch name, tag, or commit SHA must be provided.
	This field is a regular expression. */
	// +optional
	TagName *string `json:"tagName,omitempty"`
}

type TriggerVolumes struct {
	/* Name of the volume to mount.

	Volume names must be unique per build step and must be valid names for
	Docker volumes. Each named volume must be used by at least two build steps. */
	Name string `json:"name"`

	/* Path at which to mount the volume.

	Paths must be absolute and cannot conflict with other volume paths on
	the same build step or with certain reserved volume paths. */
	Path string `json:"path"`
}

type TriggerWebhookConfig struct {
	/* The secret required */
	SecretRef v1alpha1.ResourceRef `json:"secretRef"`

	/* Potential issues with the underlying Pub/Sub subscription configuration.
	Only populated on get requests. */
	// +optional
	State *string `json:"state,omitempty"`
}

type CloudBuildTriggerSpec struct {
	/* Configuration for manual approval to start a build invocation of this BuildTrigger.
	Builds created by this trigger will require approval before they execute.
	Any user with a Cloud Build Approver role for the project can approve a build. */
	// +optional
	ApprovalConfig *TriggerApprovalConfig `json:"approvalConfig,omitempty"`

	/* BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received. */
	// +optional
	BitbucketServerTriggerConfig *TriggerBitbucketServerTriggerConfig `json:"bitbucketServerTriggerConfig,omitempty"`

	/* Contents of the build template. Either a filename or build template must be provided. */
	// +optional
	Build *TriggerBuild `json:"build,omitempty"`

	/* Human-readable description of the trigger. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Whether the trigger is disabled or not. If true, the trigger will never result in a build. */
	// +optional
	Disabled *bool `json:"disabled,omitempty"`

	/* Path, from the source root, to a file whose contents is used for the template.
	Either a filename or build template must be provided. Set this only when using trigger_template or github.
	When using Pub/Sub, Webhook or Manual set the file name using git_file_source instead. */
	// +optional
	Filename *string `json:"filename,omitempty"`

	/* A Common Expression Language string. Used only with Pub/Sub and Webhook. */
	// +optional
	Filter *string `json:"filter,omitempty"`

	/* The file source describing the local or remote Build template. */
	// +optional
	GitFileSource *TriggerGitFileSource `json:"gitFileSource,omitempty"`

	/* Describes the configuration of a trigger that creates a build whenever a GitHub event is received.

	One of 'trigger_template', 'github', 'pubsub_config' or 'webhook_config' must be provided. */
	// +optional
	Github *TriggerGithub `json:"github,omitempty"`

	/* ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	extended with support for '**'.

	If ignoredFiles and changed files are both empty, then they are not
	used to determine whether or not to trigger a build.

	If ignoredFiles is not empty, then we ignore any files that match any
	of the ignored_file globs. If the change has no files that are outside
	of the ignoredFiles globs, then we do not trigger a build. */
	// +optional
	IgnoredFiles []string `json:"ignoredFiles,omitempty"`

	/* Build logs will be sent back to GitHub as part of the checkrun
	result.  Values can be INCLUDE_BUILD_LOGS_UNSPECIFIED or
	INCLUDE_BUILD_LOGS_WITH_STATUS Possible values: ["INCLUDE_BUILD_LOGS_UNSPECIFIED", "INCLUDE_BUILD_LOGS_WITH_STATUS"]. */
	// +optional
	IncludeBuildLogs *string `json:"includeBuildLogs,omitempty"`

	/* ignoredFiles and includedFiles are file glob matches using https://golang.org/pkg/path/filepath/#Match
	extended with support for '**'.

	If any of the files altered in the commit pass the ignoredFiles filter
	and includedFiles is empty, then as far as this filter is concerned, we
	should trigger the build.

	If any of the files altered in the commit pass the ignoredFiles filter
	and includedFiles is not empty, then we make sure that at least one of
	those files matches a includedFiles glob. If not, then we do not trigger
	a build. */
	// +optional
	IncludedFiles []string `json:"includedFiles,omitempty"`

	/* Immutable. The [Cloud Build location](https://cloud.google.com/build/docs/locations) for the trigger.
	If not specified, "global" is used. */
	// +optional
	Location *string `json:"location,omitempty"`

	/* PubsubConfig describes the configuration of a trigger that creates
	a build whenever a Pub/Sub message is published.

	One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. */
	// +optional
	PubsubConfig *TriggerPubsubConfig `json:"pubsubConfig,omitempty"`

	/* The configuration of a trigger that creates a build whenever an event from Repo API is received. */
	// +optional
	RepositoryEventConfig *TriggerRepositoryEventConfig `json:"repositoryEventConfig,omitempty"`

	/* The service account used for all user-controlled operations including
	triggers.patch, triggers.run, builds.create, and builds.cancel.

	If no service account is set, then the standard Cloud Build service account
	([PROJECT_NUM]@system.gserviceaccount.com) will be used instead.

	When populating via the external field, the following format is supported:
	projects/{PROJECT_ID}/serviceAccounts/{SERVICE_ACCOUNT_EMAIL} */
	// +optional
	ServiceAccountRef *v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`

	/* The repo and ref of the repository from which to build.
	This field is used only for those triggers that do not respond to SCM events.
	Triggers that respond to such events build source at whatever commit caused the event.
	This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.

	One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. */
	// +optional
	SourceToBuild *TriggerSourceToBuild `json:"sourceToBuild,omitempty"`

	/* Substitutions data for Build resource. */
	// +optional
	Substitutions map[string]string `json:"substitutions,omitempty"`

	/* Tags for annotation of a BuildTrigger. */
	// +optional
	Tags []string `json:"tags,omitempty"`

	/* Template describing the types of source changes to trigger a build.

	Branch and tag names in trigger templates are interpreted as regular
	expressions. Any branch or tag change that matches that regular
	expression will trigger a build.

	One of 'trigger_template', 'github', 'pubsub_config', 'webhook_config' or 'source_to_build' must be provided. */
	// +optional
	TriggerTemplate *TriggerTriggerTemplate `json:"triggerTemplate,omitempty"`

	/* WebhookConfig describes the configuration of a trigger that creates
	a build whenever a webhook is sent to a trigger's webhook URL.

	One of 'trigger_template', 'github', 'pubsub_config' 'webhook_config' or 'source_to_build' must be provided. */
	// +optional
	WebhookConfig *TriggerWebhookConfig `json:"webhookConfig,omitempty"`
}

type CloudBuildTriggerStatus struct {
	/* Conditions represent the latest available observations of the
	   CloudBuildTrigger's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Time when the trigger was created. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The unique identifier for the trigger. */
	// +optional
	TriggerId *string `json:"triggerId,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpcloudbuildtrigger;gcpcloudbuildtriggers
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// CloudBuildTrigger is the Schema for the cloudbuild API
// +k8s:openapi-gen=true
type CloudBuildTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CloudBuildTriggerSpec   `json:"spec,omitempty"`
	Status CloudBuildTriggerStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// CloudBuildTriggerList contains a list of CloudBuildTrigger
type CloudBuildTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudBuildTrigger `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CloudBuildTrigger{}, &CloudBuildTriggerList{})
}
