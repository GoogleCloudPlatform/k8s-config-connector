// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FulfillmentFeatures struct {
	/* The type of the feature that enabled for fulfillment.
	* SMALLTALK: Fulfillment is enabled for SmallTalk. Possible values: ["SMALLTALK"]. */
	Type string `json:"type"`
}

type FulfillmentGenericWebService struct {
	/* The password for HTTP Basic authentication. */
	// +optional
	Password *string `json:"password,omitempty"`

	/* The HTTP request headers to send together with fulfillment requests. */
	// +optional
	RequestHeaders map[string]string `json:"requestHeaders,omitempty"`

	/* The fulfillment URI for receiving POST requests. It must use https protocol. */
	Uri string `json:"uri"`

	/* The user name for HTTP Basic authentication. */
	// +optional
	Username *string `json:"username,omitempty"`
}

type DialogflowFulfillmentSpec struct {
	/* The human-readable name of the fulfillment, unique within the agent. */
	DisplayName string `json:"displayName"`

	/* Whether fulfillment is enabled. */
	// +optional
	Enabled *bool `json:"enabled,omitempty"`

	/* The field defines whether the fulfillment is enabled for certain features. */
	// +optional
	Features []FulfillmentFeatures `json:"features,omitempty"`

	/* Represents configuration for a generic web service. Dialogflow supports two mechanisms for authentications: - Basic authentication with username and password. - Authentication with additional authentication headers. */
	// +optional
	GenericWebService *FulfillmentGenericWebService `json:"genericWebService,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type DialogflowFulfillmentStatus struct {
	/* Conditions represent the latest available observations of the
	   DialogflowFulfillment's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The unique identifier of the fulfillment.
	Format: projects/<Project ID>/agent/fulfillment - projects/<Project ID>/locations/<Location ID>/agent/fulfillment. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdialogflowfulfillment;gcpdialogflowfulfillments
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DialogflowFulfillment is the Schema for the dialogflow API
// +k8s:openapi-gen=true
type DialogflowFulfillment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DialogflowFulfillmentSpec   `json:"spec,omitempty"`
	Status DialogflowFulfillmentStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DialogflowFulfillmentList contains a list of DialogflowFulfillment
type DialogflowFulfillmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DialogflowFulfillment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DialogflowFulfillment{}, &DialogflowFulfillmentList{})
}
