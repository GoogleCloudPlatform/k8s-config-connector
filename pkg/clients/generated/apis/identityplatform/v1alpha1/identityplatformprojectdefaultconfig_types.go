// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ProjectdefaultconfigAnonymous struct {
	/* Whether anonymous user auth is enabled for the project or not. */
	Enabled bool `json:"enabled"`
}

type ProjectdefaultconfigEmail struct {
	/* Whether email auth is enabled for the project or not. */
	// +optional
	Enabled *bool `json:"enabled,omitempty"`

	/* Whether a password is required for email auth or not. If true, both an email and
	password must be provided to sign in. If false, a user may sign in via either
	email/password or email link. */
	// +optional
	PasswordRequired *bool `json:"passwordRequired,omitempty"`
}

type ProjectdefaultconfigHashConfig struct {
	/* Different password hash algorithms used in Identity Toolkit. */
	// +optional
	Algorithm *string `json:"algorithm,omitempty"`

	/* Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field. */
	// +optional
	MemoryCost *int64 `json:"memoryCost,omitempty"`

	/* How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms. */
	// +optional
	Rounds *int64 `json:"rounds,omitempty"`

	/* Non-printable character to be inserted between the salt and plain text password in base64. */
	// +optional
	SaltSeparator *string `json:"saltSeparator,omitempty"`

	/* Signer key in base64. */
	// +optional
	SignerKey *string `json:"signerKey,omitempty"`
}

type ProjectdefaultconfigPhoneNumber struct {
	/* Whether phone number auth is enabled for the project or not. */
	// +optional
	Enabled *bool `json:"enabled,omitempty"`

	/* A map of <test phone number, fake code> that can be used for phone auth testing. */
	// +optional
	TestPhoneNumbers map[string]string `json:"testPhoneNumbers,omitempty"`
}

type ProjectdefaultconfigSignIn struct {
	/* Whether to allow more than one account to have the same email. */
	// +optional
	AllowDuplicateEmails *bool `json:"allowDuplicateEmails,omitempty"`

	/* Configuration options related to authenticating an anonymous user. */
	// +optional
	Anonymous *ProjectdefaultconfigAnonymous `json:"anonymous,omitempty"`

	/* Configuration options related to authenticating a user by their email address. */
	// +optional
	Email *ProjectdefaultconfigEmail `json:"email,omitempty"`

	/* Output only. Hash config information. */
	// +optional
	HashConfig []ProjectdefaultconfigHashConfig `json:"hashConfig,omitempty"`

	/* Configuration options related to authenticated a user by their phone number. */
	// +optional
	PhoneNumber *ProjectdefaultconfigPhoneNumber `json:"phoneNumber,omitempty"`
}

type IdentityPlatformProjectDefaultConfigSpec struct {
	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Configuration related to local sign in methods. */
	// +optional
	SignIn *ProjectdefaultconfigSignIn `json:"signIn,omitempty"`
}

type IdentityPlatformProjectDefaultConfigStatus struct {
	/* Conditions represent the latest available observations of the
	   IdentityPlatformProjectDefaultConfig's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The name of the Config resource. Example: "projects/my-awesome-project/config". */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpidentityplatformprojectdefaultconfig;gcpidentityplatformprojectdefaultconfigs
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// IdentityPlatformProjectDefaultConfig is the Schema for the identityplatform API
// +k8s:openapi-gen=true
type IdentityPlatformProjectDefaultConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   IdentityPlatformProjectDefaultConfigSpec   `json:"spec,omitempty"`
	Status IdentityPlatformProjectDefaultConfigStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IdentityPlatformProjectDefaultConfigList contains a list of IdentityPlatformProjectDefaultConfig
type IdentityPlatformProjectDefaultConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPlatformProjectDefaultConfig `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IdentityPlatformProjectDefaultConfig{}, &IdentityPlatformProjectDefaultConfigList{})
}
