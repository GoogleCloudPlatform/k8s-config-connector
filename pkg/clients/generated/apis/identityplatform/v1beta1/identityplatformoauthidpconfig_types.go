// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type OauthidpconfigClientSecret struct {
	/* Value of the field. Cannot be used if 'valueFrom' is specified. */
	// +optional
	Value *string `json:"value,omitempty"`

	/* Source for the field's value. Cannot be used if 'value' is specified. */
	// +optional
	ValueFrom *OauthidpconfigValueFrom `json:"valueFrom,omitempty"`
}

type OauthidpconfigResponseType struct {
	/* If true, authorization code is returned from IdP's authorization endpoint. */
	// +optional
	Code *bool `json:"code,omitempty"`

	/* If true, ID token is returned from IdP's authorization endpoint. */
	// +optional
	IdToken *bool `json:"idToken,omitempty"`

	/* If true, access token is returned from IdP's authorization endpoint. */
	// +optional
	Token *bool `json:"token,omitempty"`
}

type OauthidpconfigSecretKeyRef struct {
	/* Key that identifies the value to be extracted. */
	Key string `json:"key"`

	/* Name of the Secret to extract a value from. */
	Name string `json:"name"`
}

type OauthidpconfigValueFrom struct {
	/* Reference to a value with the given key in the given Secret in the resource's namespace. */
	// +optional
	SecretKeyRef *OauthidpconfigSecretKeyRef `json:"secretKeyRef,omitempty"`
}

type IdentityPlatformOAuthIDPConfigSpec struct {
	/* The client id of an OAuth client. */
	// +optional
	ClientId *string `json:"clientId,omitempty"`

	/* The client secret of the OAuth client, to enable OIDC code flow. */
	// +optional
	ClientSecret *OauthidpconfigClientSecret `json:"clientSecret,omitempty"`

	/* The config's display name set by developers. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* True if allows the user to sign in with the provider. */
	// +optional
	Enabled *bool `json:"enabled,omitempty"`

	/* For OIDC Idps, the issuer identifier. */
	// +optional
	Issuer *string `json:"issuer,omitempty"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* The multiple response type to request for in the OAuth authorization flow. This can possibly be a combination of set bits (e.g.: {id\_token, token}). */
	// +optional
	ResponseType *OauthidpconfigResponseType `json:"responseType,omitempty"`
}

type IdentityPlatformOAuthIDPConfigStatus struct {
	/* Conditions represent the latest available observations of the
	   IdentityPlatformOAuthIDPConfig's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IdentityPlatformOAuthIDPConfig is the Schema for the identityplatform API
// +k8s:openapi-gen=true
type IdentityPlatformOAuthIDPConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   IdentityPlatformOAuthIDPConfigSpec   `json:"spec,omitempty"`
	Status IdentityPlatformOAuthIDPConfigStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IdentityPlatformOAuthIDPConfigList contains a list of IdentityPlatformOAuthIDPConfig
type IdentityPlatformOAuthIDPConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPlatformOAuthIDPConfig `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IdentityPlatformOAuthIDPConfig{}, &IdentityPlatformOAuthIDPConfigList{})
}
