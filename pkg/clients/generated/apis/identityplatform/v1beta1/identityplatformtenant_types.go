// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type TenantMfaConfig struct {
	/* A list of usable second factors for this project. */
	// +optional
	EnabledProviders []string `json:"enabledProviders,omitempty"`

	/* Whether MultiFactor Authentication has been enabled for this project. Possible values: STATE_UNSPECIFIED, DISABLED, ENABLED, MANDATORY */
	// +optional
	State *string `json:"state,omitempty"`
}

type IdentityPlatformTenantSpec struct {
	/* Whether to allow email/password user authentication. */
	// +optional
	AllowPasswordSignup *bool `json:"allowPasswordSignup,omitempty"`

	/* Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users. */
	// +optional
	DisableAuth *bool `json:"disableAuth,omitempty"`

	/* Display name of the tenant. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* Whether to enable anonymous user authentication. */
	// +optional
	EnableAnonymousUser *bool `json:"enableAnonymousUser,omitempty"`

	/* Whether to enable email link user authentication. */
	// +optional
	EnableEmailLinkSignin *bool `json:"enableEmailLinkSignin,omitempty"`

	/* The tenant-level configuration of MFA options. */
	// +optional
	MfaConfig *TenantMfaConfig `json:"mfaConfig,omitempty"`

	/* Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* A map of <test phone number, fake code> pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded). */
	// +optional
	TestPhoneNumbers map[string]string `json:"testPhoneNumbers,omitempty"`
}

type IdentityPlatformTenantStatus struct {
	/* Conditions represent the latest available observations of the
	   IdentityPlatformTenant's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpidentityplatformtenant;gcpidentityplatformtenants
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/dcl2crd=true";"cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// IdentityPlatformTenant is the Schema for the identityplatform API
// +k8s:openapi-gen=true
type IdentityPlatformTenant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   IdentityPlatformTenantSpec   `json:"spec,omitempty"`
	Status IdentityPlatformTenantStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IdentityPlatformTenantList contains a list of IdentityPlatformTenant
type IdentityPlatformTenantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IdentityPlatformTenant `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IdentityPlatformTenant{}, &IdentityPlatformTenantList{})
}
