// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type DatasetAccess struct {
	/* [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation. */
	// +optional
	Dataset *DatasetDataset `json:"dataset,omitempty"`

	/* [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN". */
	// +optional
	Domain *string `json:"domain,omitempty"`

	/* [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP". */
	// +optional
	GroupByEmail *string `json:"groupByEmail,omitempty"`

	/* [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group. */
	// +optional
	IamMember *string `json:"iamMember,omitempty"`

	/* An IAM role ID that should be granted to the user, group,
	or domain specified in this access entry.
	The following legacy mappings will be applied:

	* `OWNER`: `roles/bigquery.dataOwner`
	* `WRITER`: `roles/bigquery.dataEditor`
	* `READER`: `roles/bigquery.dataViewer`

	This field will accept any of the above formats, but will return only
	the legacy format. For example, if you set this field to
	"roles/bigquery.dataOwner", it will be returned back as "OWNER". */
	// +optional
	Role *string `json:"role,omitempty"`

	/* [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation. */
	// +optional
	Routine *DatasetRoutine `json:"routine,omitempty"`

	/* [Pick one] A special group to grant access to. Possible values include:

	* projectOwners: Owners of the enclosing project.
	* projectReaders: Readers of the enclosing project.
	* projectWriters: Writers of the enclosing project.
	* allAuthenticatedUsers: All authenticated BigQuery users.

	Maps to similarly-named IAM members. */
	// +optional
	SpecialGroup *string `json:"specialGroup,omitempty"`

	/* [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL". */
	// +optional
	UserByEmail *string `json:"userByEmail,omitempty"`

	/* [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation. */
	// +optional
	View *DatasetView `json:"view,omitempty"`
}

type DatasetDataset struct {
	/* A unique Id for this dataset, without the project name. The Id must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters. */
	DatasetId string `json:"datasetId"`

	/* The ID of the project containing this dataset. */
	ProjectId string `json:"projectId"`
}

type DatasetDefaultEncryptionConfiguration struct {
	/* Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. */
	// +optional
	KmsKeyRef *v1alpha1.ResourceRef `json:"kmsKeyRef,omitempty"`
}

type DatasetRoutine struct {
	/* The ID of the dataset containing this routine. */
	DatasetId string `json:"datasetId"`

	/* The ID of the project containing this routine. */
	ProjectId string `json:"projectId"`

	/* The Id of the routine. The Id must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters. */
	RoutineId string `json:"routineId"`
}

type DatasetView struct {
	/* The ID of the dataset containing this table. */
	DatasetId string `json:"datasetId"`

	/* The ID of the project containing this table. */
	ProjectId string `json:"projectId"`

	/* The Id of the table. The Id can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters.  Certain operations allow suffixing of the table Id with a partition decorator, such as `sample_table$20190123`. */
	TableId string `json:"tableId"`
}

type BigQueryDatasetSpec struct {
	/* An array of objects that define dataset access for one or more entities. */
	// +optional
	Access []DatasetAccess `json:"access,omitempty"`

	/* Optional. Defines the default collation specification of future tables
	created in the dataset. If a table is created in this dataset without
	table-level default collation, then the table inherits the dataset default
	collation, which is applied to the string fields that do not have explicit
	collation specified. A change to this field affects only tables created
	afterwards, and does not alter the existing tables.
	The following values are supported:

	* 'und:ci': undetermined locale, case insensitive.
	* '': empty string. Default to case-sensitive behavior. */
	// +optional
	DefaultCollation *string `json:"defaultCollation,omitempty"`

	/* The default encryption key for all tables in the dataset. After this property is set, the encryption key of all newly-created tables in the dataset is set to this value unless the table creation request or query explicitly overrides the key. */
	// +optional
	DefaultEncryptionConfiguration *DatasetDefaultEncryptionConfiguration `json:"defaultEncryptionConfiguration,omitempty"`

	/* This default partition expiration, expressed in milliseconds.

	When new time-partitioned tables are created in a dataset where this
	property is set, the table will inherit this value, propagated as the
	`TimePartitioning.expirationMs` property on the new table.  If you set
	`TimePartitioning.expirationMs` explicitly when creating a table,
	the `defaultPartitionExpirationMs` of the containing dataset is ignored.

	When creating a partitioned table, if `defaultPartitionExpirationMs`
	is set, the `defaultTableExpirationMs` value is ignored and the table
	will not be inherit a table expiration deadline. */
	// +optional
	DefaultPartitionExpirationMs *int64 `json:"defaultPartitionExpirationMs,omitempty"`

	/* Optional. The default lifetime of all tables in the dataset, in milliseconds. The minimum lifetime value is 3600000 milliseconds (one hour). To clear an existing default expiration with a PATCH request, set to 0. Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property. */
	// +optional
	DefaultTableExpirationMs *int64 `json:"defaultTableExpirationMs,omitempty"`

	/* Optional. A user-friendly description of the dataset. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Optional. A descriptive name for the dataset. */
	// +optional
	FriendlyName *string `json:"friendlyName,omitempty"`

	/* Optional. TRUE if the dataset and its table names are case-insensitive, otherwise FALSE. By default, this is FALSE, which means the dataset and its table names are case-sensitive. This field does not affect routine references. */
	// +optional
	IsCaseInsensitive *bool `json:"isCaseInsensitive,omitempty"`

	/* The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations. */
	Location string `json:"location"`

	/* Optional. Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days). The default value is 168 hours if this is not set. */
	// +optional
	MaxTimeTravelHours *string `json:"maxTimeTravelHours,omitempty"`

	/* Optional. The project that this resource belongs to. */
	// +optional
	ProjectRef *v1alpha1.ResourceRef `json:"projectRef,omitempty"`

	/* The BigQueryDataset name. If not given, the metadata.name will be used. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Optional. Updates storage_billing_model for the dataset. */
	// +optional
	StorageBillingModel *string `json:"storageBillingModel,omitempty"`
}

type BigQueryDatasetStatus struct {
	/* Conditions represent the latest available observations of the
	   BigQueryDataset's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. The time when this dataset was created, in milliseconds since the epoch. */
	// +optional
	CreationTime *int64 `json:"creationTime,omitempty"`

	/* Output only. A hash of the resource. */
	// +optional
	Etag *string `json:"etag,omitempty"`

	/* A unique specifier for the BigQueryAnalyticsHubDataExchangeListing resource in GCP. */
	// +optional
	ExternalRef *string `json:"externalRef,omitempty"`

	/* Output only. The date when this dataset was last modified, in milliseconds since the epoch. */
	// +optional
	LastModifiedTime *int64 `json:"lastModifiedTime,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Output only. A URL that can be used to access the resource again. You can use this URL in Get or Update requests to the resource. */
	// +optional
	SelfLink *string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpbigquerydataset;gcpbigquerydatasets
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// BigQueryDataset is the Schema for the bigquery API
// +k8s:openapi-gen=true
type BigQueryDataset struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BigQueryDatasetSpec   `json:"spec,omitempty"`
	Status BigQueryDatasetStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BigQueryDatasetList contains a list of BigQueryDataset
type BigQueryDatasetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BigQueryDataset `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BigQueryDataset{}, &BigQueryDatasetList{})
}
