// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type OspolicyassignmentApt struct {
	/* Required. Type of archive files in this repository. Possible values: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC */
	ArchiveType string `json:"archiveType"`

	/* Required. List of components for this repository. Must contain at least one item. */
	Components []string `json:"components"`

	/* Required. Distribution of this repository. */
	Distribution string `json:"distribution"`

	/* URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`. */
	// +optional
	GpgKey *string `json:"gpgKey,omitempty"`

	/* Required. URI for this repository. */
	Uri string `json:"uri"`
}

type OspolicyassignmentDeb struct {
	/* Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb` */
	// +optional
	PullDeps *bool `json:"pullDeps,omitempty"`

	/* Required. A deb package. */
	Source OspolicyassignmentSource `json:"source"`
}

type OspolicyassignmentDisruptionBudget struct {
	/* Specifies a fixed value. */
	// +optional
	Fixed *int64 `json:"fixed,omitempty"`

	/* Specifies the relative value defined as a percentage, which will be multiplied by a reference value. */
	// +optional
	Percent *int64 `json:"percent,omitempty"`
}

type OspolicyassignmentEnforce struct {
	/* Optional arguments to pass to the source during execution. */
	// +optional
	Args []string `json:"args,omitempty"`

	/* A remote or local file. */
	// +optional
	File *OspolicyassignmentFile `json:"file,omitempty"`

	/* Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL */
	Interpreter string `json:"interpreter"`

	/* Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes. */
	// +optional
	OutputFilePath *string `json:"outputFilePath,omitempty"`

	/* An inline script. The size of the script is limited to 1024 characters. */
	// +optional
	Script *string `json:"script,omitempty"`
}

type OspolicyassignmentExclusionLabels struct {
	/* Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected. */
	// +optional
	Labels map[string]string `json:"labels,omitempty"`
}

type OspolicyassignmentExec struct {
	/* What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce. */
	// +optional
	Enforce *OspolicyassignmentEnforce `json:"enforce,omitempty"`

	/* Required. What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate. */
	Validate OspolicyassignmentValidate `json:"validate"`
}

type OspolicyassignmentFile struct {
	/* Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified. */
	// +optional
	AllowInsecure *bool `json:"allowInsecure,omitempty"`

	/* A Cloud Storage object. */
	// +optional
	Gcs *OspolicyassignmentGcs `json:"gcs,omitempty"`

	/* A local path within the VM to use. */
	// +optional
	LocalPath *string `json:"localPath,omitempty"`

	/* A generic remote file. */
	// +optional
	Remote *OspolicyassignmentRemote `json:"remote,omitempty"`
}

type OspolicyassignmentGcs struct {
	/* Required. Bucket of the Cloud Storage object. */
	Bucket string `json:"bucket"`

	/* Generation number of the Cloud Storage object. */
	// +optional
	Generation *int64 `json:"generation,omitempty"`

	/* Required. Name of the Cloud Storage object. */
	Object string `json:"object"`
}

type OspolicyassignmentGoo struct {
	/* Required. The name of the repository. */
	Name string `json:"name"`

	/* Required. The url of the repository. */
	Url string `json:"url"`
}

type OspolicyassignmentGooget struct {
	/* Required. Package name. */
	Name string `json:"name"`
}

type OspolicyassignmentInclusionLabels struct {
	/* Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected. */
	// +optional
	Labels map[string]string `json:"labels,omitempty"`
}

type OspolicyassignmentInstanceFilter struct {
	/* Target all VMs in the project. If true, no other criteria is permitted. */
	// +optional
	All *bool `json:"all,omitempty"`

	/* List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM. */
	// +optional
	ExclusionLabels []OspolicyassignmentExclusionLabels `json:"exclusionLabels,omitempty"`

	/* List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM. */
	// +optional
	InclusionLabels []OspolicyassignmentInclusionLabels `json:"inclusionLabels,omitempty"`

	/* List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories. */
	// +optional
	Inventories []OspolicyassignmentInventories `json:"inventories,omitempty"`
}

type OspolicyassignmentInventories struct {
	/* Required. The OS short name */
	OsShortName string `json:"osShortName"`

	/* The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions. */
	// +optional
	OsVersion *string `json:"osVersion,omitempty"`
}

type OspolicyassignmentInventoryFilters struct {
	/* Required. The OS short name */
	OsShortName string `json:"osShortName"`

	/* The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions. */
	// +optional
	OsVersion *string `json:"osVersion,omitempty"`
}

type OspolicyassignmentMsi struct {
	/* Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`. */
	// +optional
	Properties []string `json:"properties,omitempty"`

	/* Required. The MSI package. */
	Source OspolicyassignmentSource `json:"source"`
}

type OspolicyassignmentOsPolicies struct {
	/* This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce. */
	// +optional
	AllowNoResourceGroupMatch *bool `json:"allowNoResourceGroupMatch,omitempty"`

	/* Policy description. Length of the description is limited to 1024 characters. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment. */
	Id string `json:"id"`

	/* Required. Policy mode Possible values: MODE_UNSPECIFIED, VALIDATION, ENFORCEMENT */
	Mode string `json:"mode"`

	/* Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match` */
	ResourceGroups []OspolicyassignmentResourceGroups `json:"resourceGroups"`
}

type OspolicyassignmentPkg struct {
	/* A package managed by Apt. */
	// +optional
	Apt *OspolicyassignmentApt `json:"apt,omitempty"`

	/* A deb package file. */
	// +optional
	Deb *OspolicyassignmentDeb `json:"deb,omitempty"`

	/* Required. The desired state the agent should maintain for this package. Possible values: DESIRED_STATE_UNSPECIFIED, INSTALLED, REMOVED */
	DesiredState string `json:"desiredState"`

	/* A package managed by GooGet. */
	// +optional
	Googet *OspolicyassignmentGooget `json:"googet,omitempty"`

	/* An MSI package. */
	// +optional
	Msi *OspolicyassignmentMsi `json:"msi,omitempty"`

	/* An rpm package file. */
	// +optional
	Rpm *OspolicyassignmentRpm `json:"rpm,omitempty"`

	/* A package managed by YUM. */
	// +optional
	Yum *OspolicyassignmentYum `json:"yum,omitempty"`

	/* A package managed by Zypper. */
	// +optional
	Zypper *OspolicyassignmentZypper `json:"zypper,omitempty"`
}

type OspolicyassignmentRemote struct {
	/* SHA256 checksum of the remote file. */
	// +optional
	Sha256Checksum *string `json:"sha256Checksum,omitempty"`

	/* Required. URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`. */
	Uri string `json:"uri"`
}

type OspolicyassignmentRepository struct {
	/* An Apt Repository. */
	// +optional
	Apt *OspolicyassignmentApt `json:"apt,omitempty"`

	/* A Goo Repository. */
	// +optional
	Goo *OspolicyassignmentGoo `json:"goo,omitempty"`

	/* A Yum Repository. */
	// +optional
	Yum *OspolicyassignmentYum `json:"yum,omitempty"`

	/* A Zypper Repository. */
	// +optional
	Zypper *OspolicyassignmentZypper `json:"zypper,omitempty"`
}

type OspolicyassignmentResourceGroups struct {
	/* List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally. */
	// +optional
	InventoryFilters []OspolicyassignmentInventoryFilters `json:"inventoryFilters,omitempty"`

	/* Required. List of resources configured for this resource group. The resources are executed in the exact order specified here. */
	Resources []OspolicyassignmentResources `json:"resources"`
}

type OspolicyassignmentResources struct {
	/* Exec resource */
	// +optional
	Exec *OspolicyassignmentExec `json:"exec,omitempty"`

	/* File resource */
	// +optional
	File *OspolicyassignmentFile `json:"file,omitempty"`

	/* Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy. */
	Id string `json:"id"`

	/* Package resource */
	// +optional
	Pkg *OspolicyassignmentPkg `json:"pkg,omitempty"`

	/* Package repository resource */
	// +optional
	Repository *OspolicyassignmentRepository `json:"repository,omitempty"`
}

type OspolicyassignmentRollout struct {
	/* Required. The maximum number (or percentage) of VMs per zone to disrupt at any given moment. */
	DisruptionBudget OspolicyassignmentDisruptionBudget `json:"disruptionBudget"`

	/* Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied. */
	MinWaitDuration string `json:"minWaitDuration"`
}

type OspolicyassignmentRpm struct {
	/* Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm` */
	// +optional
	PullDeps *bool `json:"pullDeps,omitempty"`

	/* Required. An rpm package. */
	Source OspolicyassignmentSource `json:"source"`
}

type OspolicyassignmentSource struct {
	/* Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified. */
	// +optional
	AllowInsecure *bool `json:"allowInsecure,omitempty"`

	/* A Cloud Storage object. */
	// +optional
	Gcs *OspolicyassignmentGcs `json:"gcs,omitempty"`

	/* A local path within the VM to use. */
	// +optional
	LocalPath *string `json:"localPath,omitempty"`

	/* A generic remote file. */
	// +optional
	Remote *OspolicyassignmentRemote `json:"remote,omitempty"`
}

type OspolicyassignmentValidate struct {
	/* Optional arguments to pass to the source during execution. */
	// +optional
	Args []string `json:"args,omitempty"`

	/* A remote or local file. */
	// +optional
	File *OspolicyassignmentFile `json:"file,omitempty"`

	/* Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL */
	Interpreter string `json:"interpreter"`

	/* Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes. */
	// +optional
	OutputFilePath *string `json:"outputFilePath,omitempty"`

	/* An inline script. The size of the script is limited to 1024 characters. */
	// +optional
	Script *string `json:"script,omitempty"`
}

type OspolicyassignmentYum struct {
	/* Required. The location of the repository directory. */
	BaseUrl string `json:"baseUrl"`

	/* The display name of the repository. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* URIs of GPG keys. */
	// +optional
	GpgKeys []string `json:"gpgKeys,omitempty"`

	/* Required. A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts. */
	Id string `json:"id"`
}

type OspolicyassignmentZypper struct {
	/* Required. The location of the repository directory. */
	BaseUrl string `json:"baseUrl"`

	/* The display name of the repository. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* URIs of GPG keys. */
	// +optional
	GpgKeys []string `json:"gpgKeys,omitempty"`

	/* Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts. */
	Id string `json:"id"`
}

type OSConfigOSPolicyAssignmentSpec struct {
	/* OS policy assignment description. Length of the description is limited to 1024 characters. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Required. Filter to select VMs. */
	InstanceFilter OspolicyassignmentInstanceFilter `json:"instanceFilter"`

	/* Immutable. The location for the resource */
	Location string `json:"location"`

	/* Required. List of OS policies to be applied to the VMs. */
	OsPolicies []OspolicyassignmentOsPolicies `json:"osPolicies"`

	/* Immutable. The Project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted. */
	Rollout OspolicyassignmentRollout `json:"rollout"`

	/* Set to true to skip awaiting rollout during resource creation and update. */
	// +optional
	SkipAwaitRollout *bool `json:"skipAwaitRollout,omitempty"`
}

type OSConfigOSPolicyAssignmentStatus struct {
	/* Conditions represent the latest available observations of the
	   OSConfigOSPolicyAssignment's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field. */
	// +optional
	Baseline *bool `json:"baseline,omitempty"`

	/* Output only. Indicates that this revision deletes the OS policy assignment. */
	// +optional
	Deleted *bool `json:"deleted,omitempty"`

	/* The etag for this OS policy assignment. If this is provided on update, it must match the server's etag. */
	// +optional
	Etag *string `json:"etag,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING */
	// +optional
	Reconciling *bool `json:"reconciling,omitempty"`

	/* Output only. The timestamp that the revision was created. */
	// +optional
	RevisionCreateTime *string `json:"revisionCreateTime,omitempty"`

	/* Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment */
	// +optional
	RevisionId *string `json:"revisionId,omitempty"`

	/* Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING, CANCELLED, SUCCEEDED */
	// +optional
	RolloutState *string `json:"rolloutState,omitempty"`

	/* Output only. Server generated unique id for the OS policy assignment resource. */
	// +optional
	Uid *string `json:"uid,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcposconfigospolicyassignment;gcposconfigospolicyassignments
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/dcl2crd=true";"cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// OSConfigOSPolicyAssignment is the Schema for the osconfig API
// +k8s:openapi-gen=true
type OSConfigOSPolicyAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   OSConfigOSPolicyAssignmentSpec   `json:"spec,omitempty"`
	Status OSConfigOSPolicyAssignmentStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// OSConfigOSPolicyAssignmentList contains a list of OSConfigOSPolicyAssignment
type OSConfigOSPolicyAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OSConfigOSPolicyAssignment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&OSConfigOSPolicyAssignment{}, &OSConfigOSPolicyAssignmentList{})
}
