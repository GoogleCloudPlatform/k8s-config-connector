// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ListingBigqueryDataset struct {
	/* Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123. */
	Dataset string `json:"dataset"`
}

type ListingDataProvider struct {
	/* Name of the data provider. */
	Name string `json:"name"`

	/* Email or URL of the data provider. */
	// +optional
	PrimaryContact *string `json:"primaryContact,omitempty"`
}

type ListingPublisher struct {
	/* Name of the listing publisher. */
	Name string `json:"name"`

	/* Email or URL of the listing publisher. */
	// +optional
	PrimaryContact *string `json:"primaryContact,omitempty"`
}

type BigQueryAnalyticsHubListingSpec struct {
	/* Shared dataset i.e. BigQuery dataset source. */
	BigqueryDataset ListingBigqueryDataset `json:"bigqueryDataset"`

	/* Categories of the listing. Up to two categories are allowed. */
	// +optional
	Categories []string `json:"categories,omitempty"`

	/* Immutable. The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces. */
	DataExchangeId string `json:"dataExchangeId"`

	/* Details of the data provider who owns the source data. */
	// +optional
	DataProvider *ListingDataProvider `json:"dataProvider,omitempty"`

	/* Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces. */
	DisplayName string `json:"displayName"`

	/* Documentation describing the listing. */
	// +optional
	Documentation *string `json:"documentation,omitempty"`

	/* Base64 encoded image representing the listing. */
	// +optional
	Icon *string `json:"icon,omitempty"`

	/* Immutable. The name of the location this data exchange listing. */
	Location string `json:"location"`

	/* Email or URL of the primary point of contact of the listing. */
	// +optional
	PrimaryContact *string `json:"primaryContact,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Details of the publisher who owns the listing and who can share the source data. */
	// +optional
	Publisher *ListingPublisher `json:"publisher,omitempty"`

	/* Email or URL of the request access of the listing. Subscribers can use this reference to request access. */
	// +optional
	RequestAccess *string `json:"requestAccess,omitempty"`

	/* Immutable. Optional. The listingId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type BigQueryAnalyticsHubListingStatus struct {
	/* Conditions represent the latest available observations of the
	   BigQueryAnalyticsHubListing's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The resource name of the listing. e.g. "projects/myproject/locations/US/dataExchanges/123/listings/456". */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpbigqueryanalyticshublisting;gcpbigqueryanalyticshublistings
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// BigQueryAnalyticsHubListing is the Schema for the bigqueryanalyticshub API
// +k8s:openapi-gen=true
type BigQueryAnalyticsHubListing struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BigQueryAnalyticsHubListingSpec   `json:"spec,omitempty"`
	Status BigQueryAnalyticsHubListingStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// BigQueryAnalyticsHubListingList contains a list of BigQueryAnalyticsHubListing
type BigQueryAnalyticsHubListingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BigQueryAnalyticsHubListing `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BigQueryAnalyticsHubListing{}, &BigQueryAnalyticsHubListingList{})
}
