// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type IndexFields struct {
	/* Immutable. Indicates that this field supports operations on arrayValues. Only one of 'order' and 'arrayConfig' can
	be specified. Possible values: ["CONTAINS"]. */
	// +optional
	ArrayConfig *string `json:"arrayConfig,omitempty"`

	/* Immutable. Name of the field. */
	// +optional
	FieldPath *string `json:"fieldPath,omitempty"`

	/* Immutable. Indicates that this field supports ordering by the specified order or comparing using =, <, <=, >, >=.
	Only one of 'order' and 'arrayConfig' can be specified. Possible values: ["ASCENDING", "DESCENDING"]. */
	// +optional
	Order *string `json:"order,omitempty"`
}

type FirestoreIndexSpec struct {
	/* Immutable. The collection being indexed. */
	Collection string `json:"collection"`

	/* Immutable. The Firestore database id. Defaults to '"(default)"'. */
	// +optional
	Database *string `json:"database,omitempty"`

	/* Immutable. The fields supported by this index. The last field entry is always for
	the field path '__name__'. If, on creation, '__name__' was not
	specified as the last field, it will be added automatically with the
	same direction as that of the last field defined. If the final field
	in a composite index is not directional, the '__name__' will be
	ordered '"ASCENDING"' (unless explicitly specified otherwise). */
	Fields []IndexFields `json:"fields"`

	/* Immutable. The scope at which a query is run. Default value: "COLLECTION" Possible values: ["COLLECTION", "COLLECTION_GROUP"]. */
	// +optional
	QueryScope *string `json:"queryScope,omitempty"`
}

type FirestoreIndexStatus struct {
	/* Conditions represent the latest available observations of the
	   FirestoreIndex's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* A server defined name for this index. Format:
	'projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/indexes/{{server_generated_id}}'. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpfirestoreindex;gcpfirestoreindexes
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// FirestoreIndex is the Schema for the firestore API
// +k8s:openapi-gen=true
type FirestoreIndex struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   FirestoreIndexSpec   `json:"spec,omitempty"`
	Status FirestoreIndexStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// FirestoreIndexList contains a list of FirestoreIndex
type FirestoreIndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirestoreIndex `json:"items"`
}

func init() {
	SchemeBuilder.Register(&FirestoreIndex{}, &FirestoreIndexList{})
}
