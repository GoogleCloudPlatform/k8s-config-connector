// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type DomainmappingSslSettings struct {
	/* ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will
	remove SSL support.
	By default, a managed certificate is automatically created for every domain mapping. To omit SSL support
	or to configure SSL manually, specify 'SslManagementType.MANUAL' on a 'CREATE' or 'UPDATE' request. You must be
	authorized to administer the 'AuthorizedCertificate' resource to manually map it to a DomainMapping resource.
	Example: 12345. */
	// +optional
	CertificateId *string `json:"certificateId,omitempty"`

	/* ID of the managed 'AuthorizedCertificate' resource currently being provisioned, if applicable. Until the new
	managed certificate has been successfully provisioned, the previous SSL state will be preserved. Once the
	provisioning process completes, the 'certificateId' field will reflect the new managed certificate and this
	field will be left empty. To remove SSL support while there is still a pending managed certificate, clear the
	'certificateId' field with an update request. */
	// +optional
	PendingManagedCertificateId *string `json:"pendingManagedCertificateId,omitempty"`

	/* SSL management type for this domain. If 'AUTOMATIC', a managed certificate is automatically provisioned.
	If 'MANUAL', 'certificateId' must be manually specified in order to configure SSL for this domain. Possible values: ["AUTOMATIC", "MANUAL"]. */
	SslManagementType string `json:"sslManagementType"`
}

type AppEngineDomainMappingSpec struct {
	/* Whether the domain creation should override any existing mappings for this domain.
	By default, overrides are rejected. Default value: "STRICT" Possible values: ["STRICT", "OVERRIDE"]. */
	// +optional
	OverrideStrategy *string `json:"overrideStrategy,omitempty"`

	/* Immutable. */
	// +optional
	Project *string `json:"project,omitempty"`

	/* Immutable. Optional. The domainName of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* SSL configuration for this domain. If unconfigured, this domain will not serve with SSL. */
	// +optional
	SslSettings *DomainmappingSslSettings `json:"sslSettings,omitempty"`
}

type DomainmappingResourceRecordsStatus struct {
	/* Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1). */
	// +optional
	Rrdata *string `json:"rrdata,omitempty"`

	/* Resource record type. Example: 'AAAA'. Possible values: ["A", "AAAA", "CNAME"]. */
	// +optional
	Type *string `json:"type,omitempty"`
}

type AppEngineDomainMappingStatus struct {
	/* Conditions represent the latest available observations of the
	   AppEngineDomainMapping's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The resource records required to configure this domain mapping. These records must be added to the domain's DNS
	configuration in order to serve the application via this domain mapping. */
	// +optional
	ResourceRecords []DomainmappingResourceRecordsStatus `json:"resourceRecords,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpappenginedomainmapping;gcpappenginedomainmappings
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// AppEngineDomainMapping is the Schema for the appengine API
// +k8s:openapi-gen=true
type AppEngineDomainMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   AppEngineDomainMappingSpec   `json:"spec,omitempty"`
	Status AppEngineDomainMappingStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// AppEngineDomainMappingList contains a list of AppEngineDomainMapping
type AppEngineDomainMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppEngineDomainMapping `json:"items"`
}

func init() {
	SchemeBuilder.Register(&AppEngineDomainMapping{}, &AppEngineDomainMappingList{})
}
