// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ServiceBinaryAuthorization struct {
	/* If present, indicates to use Breakglass using this justification. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass */
	// +optional
	BreakglassJustification *string `json:"breakglassJustification,omitempty"`

	/* If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled */
	// +optional
	UseDefault *bool `json:"useDefault,omitempty"`
}

type ServiceCloudSqlInstance struct {
	// +optional
	Instances []ServiceInstances `json:"instances,omitempty"`
}

type ServiceContainers struct {
	/* Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell */
	// +optional
	Args []string `json:"args,omitempty"`

	/* Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell */
	// +optional
	Command []string `json:"command,omitempty"`

	/* List of environment variables to set in the container. */
	// +optional
	Env []ServiceEnv `json:"env,omitempty"`

	/* Required. URL of the Container image in Google Container Registry or Docker More info: https://kubernetes.io/docs/concepts/containers/images */
	Image string `json:"image"`

	/* Name of the container specified as a DNS_LABEL. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible. If omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on. */
	// +optional
	Ports []ServicePorts `json:"ports,omitempty"`

	/* Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources */
	// +optional
	Resources *ServiceResources `json:"resources,omitempty"`

	/* Volume to mount into the container's filesystem. */
	// +optional
	VolumeMounts []ServiceVolumeMounts `json:"volumeMounts,omitempty"`
}

type ServiceEnv struct {
	/* Required. Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters. */
	Name string `json:"name"`

	/* Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes. */
	// +optional
	Value *string `json:"value,omitempty"`

	/* Source for the environment variable's value. */
	// +optional
	ValueSource *ServiceValueSource `json:"valueSource,omitempty"`
}

type ServiceInstances struct {
	/* Allowed value: The `instanceName` field of a `SQLInstance` resource. */
	// +optional
	External *string `json:"external,omitempty"`

	/* Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ */
	// +optional
	Namespace *string `json:"namespace,omitempty"`
}

type ServiceItems struct {
	/* Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. */
	// +optional
	Mode *int `json:"mode,omitempty"`

	/* Required. The relative path of the secret in the container. */
	Path string `json:"path"`

	// +optional
	VersionRef *v1alpha1.ResourceRef `json:"versionRef,omitempty"`
}

type ServicePorts struct {
	/* Port number the container listens on. This must be a valid TCP port number, 0 < container_port < 65536. */
	// +optional
	ContainerPort *int `json:"containerPort,omitempty"`

	/* If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c". */
	// +optional
	Name *string `json:"name,omitempty"`
}

type ServiceResources struct {
	/* Determines whether CPU should be throttled or not outside of requests. */
	// +optional
	CpuIdle *bool `json:"cpuIdle,omitempty"`

	/* Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', and '4'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go */
	// +optional
	Limits map[string]string `json:"limits,omitempty"`
}

type ServiceScaling struct {
	/* Maximum number of serving instances that this resource should have. */
	// +optional
	MaxInstanceCount *int `json:"maxInstanceCount,omitempty"`

	/* Minimum number of serving instances that this resource should have. */
	// +optional
	MinInstanceCount *int `json:"minInstanceCount,omitempty"`
}

type ServiceSecret struct {
	/* Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0644. Directories within the path are not affected by this setting. Notes * Internally, a umask of 0222 will be applied to any non-zero value. * This is an integer representation of the mode bits. So, the octal integer value should look exactly as the chmod numeric notation with a leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493 (base-10). * This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set. This might be in conflict with other options that affect the file mode, like fsGroup, and as a result, other mode bits could be set. */
	// +optional
	DefaultMode *int `json:"defaultMode,omitempty"`

	/* If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version. */
	// +optional
	Items []ServiceItems `json:"items,omitempty"`

	SecretRef v1alpha1.ResourceRef `json:"secretRef"`
}

type ServiceSecretKeyRef struct {
	SecretRef v1alpha1.ResourceRef `json:"secretRef"`

	// +optional
	VersionRef *v1alpha1.ResourceRef `json:"versionRef,omitempty"`
}

type ServiceTemplate struct {
	/* KRM-style annotations for the resource. */
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	/* Sets the maximum number of requests that each serving instance can receive. */
	// +optional
	ContainerConcurrency *int `json:"containerConcurrency,omitempty"`

	/* Holds the single container that defines the unit of execution for this Revision. */
	// +optional
	Containers []ServiceContainers `json:"containers,omitempty"`

	/* The sandbox environment to host this Revision. Possible values: EXECUTION_ENVIRONMENT_UNSPECIFIED, EXECUTION_ENVIRONMENT_GEN1, EXECUTION_ENVIRONMENT_GEN2 */
	// +optional
	ExecutionEnvironment *string `json:"executionEnvironment,omitempty"`

	/* KRM-style labels for the resource. */
	// +optional
	Labels map[string]string `json:"labels,omitempty"`

	/* The unique name for the revision. If this field is omitted, it will be automatically generated based on the Service name. */
	// +optional
	Revision *string `json:"revision,omitempty"`

	/* Scaling settings for this Revision. */
	// +optional
	Scaling *ServiceScaling `json:"scaling,omitempty"`

	// +optional
	ServiceAccountRef *v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`

	/* Max allowed time for an instance to respond to a request. */
	// +optional
	Timeout *string `json:"timeout,omitempty"`

	/* A list of Volumes to make available to containers. */
	// +optional
	Volumes []ServiceVolumes `json:"volumes,omitempty"`

	/* VPC Access configuration to use for this Revision. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc. */
	// +optional
	VpcAccess *ServiceVpcAccess `json:"vpcAccess,omitempty"`
}

type ServiceTraffic struct {
	/* Specifies percent of the traffic to this Revision. This defaults to zero if unspecified. Cloud Run currently requires 100 percent for a single TrafficTarget entry. */
	// +optional
	Percent *int `json:"percent,omitempty"`

	/* Revision to which to send this portion of traffic, if traffic allocation is by revision. */
	// +optional
	Revision *string `json:"revision,omitempty"`

	/* Indicates a string to be part of the URI to exclusively reference this target. */
	// +optional
	Tag *string `json:"tag,omitempty"`

	/* The allocation type for this traffic target. Possible values: TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED, TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST, TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION */
	// +optional
	Type *string `json:"type,omitempty"`
}

type ServiceValueSource struct {
	/* Selects a secret and a specific version from Cloud Secret Manager. */
	// +optional
	SecretKeyRef *ServiceSecretKeyRef `json:"secretKeyRef,omitempty"`
}

type ServiceVolumeMounts struct {
	/* Required. Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be `/cloudsql`. All instances defined in the Volume will be available as `/cloudsql/[instance]`. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run */
	MountPath string `json:"mountPath"`

	/* Required. This must match the Name of a Volume. */
	Name string `json:"name"`
}

type ServiceVolumes struct {
	/* For Cloud SQL volumes, contains the specific instances that should be mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for more information on how to connect Cloud SQL and Cloud Run. */
	// +optional
	CloudSqlInstance *ServiceCloudSqlInstance `json:"cloudSqlInstance,omitempty"`

	/* Required. Volume's name. */
	Name string `json:"name"`

	/* Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret */
	// +optional
	Secret *ServiceSecret `json:"secret,omitempty"`
}

type ServiceVpcAccess struct {
	// +optional
	ConnectorRef *v1alpha1.ResourceRef `json:"connectorRef,omitempty"`

	/* Traffic VPC egress settings. Possible values: VPC_EGRESS_UNSPECIFIED, ALL_TRAFFIC, PRIVATE_RANGES_ONLY */
	// +optional
	Egress *string `json:"egress,omitempty"`
}

type RunServiceSpec struct {
	/* Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects. Cloud Run will populate some annotations using 'run.googleapis.com' or 'serving.knative.dev' namespaces. This field follows Kubernetes annotations' namespacing, limits, and rules. More info: http://kubernetes.io/docs/user-guide/annotations */
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	/* Settings for the Binary Authorization feature. */
	// +optional
	BinaryAuthorization *ServiceBinaryAuthorization `json:"binaryAuthorization,omitempty"`

	/* Arbitrary identifier for the API client. */
	// +optional
	Client *string `json:"client,omitempty"`

	/* Arbitrary version identifier for the API client. */
	// +optional
	ClientVersion *string `json:"clientVersion,omitempty"`

	/* User-provided description of the Service. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Provides the ingress settings for this Service. On output, returns the currently observed ingress settings, or INGRESS_TRAFFIC_UNSPECIFIED if no revision is active. */
	// +optional
	Ingress *string `json:"ingress,omitempty"`

	/* The launch stage as defined by [Google Cloud Platform Launch Stages](http://cloud.google.com/terms/launch-stages). Cloud Run supports `ALPHA`, `BETA`, and `GA`. If no value is specified, GA is assumed. Possible values: LAUNCH_STAGE_UNSPECIFIED, UNIMPLEMENTED, PRELAUNCH, EARLY_ACCESS, ALPHA, BETA, GA, DEPRECATED */
	// +optional
	LaunchStage *string `json:"launchStage,omitempty"`

	/* Immutable. The location for the resource */
	Location string `json:"location"`

	/* Immutable. The Project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Required. The template used to create revisions for this Service. */
	Template ServiceTemplate `json:"template"`

	/* Specifies how to distribute traffic over a collection of Revisions belonging to the Service. If traffic is empty or not provided, defaults to 100% traffic to the latest `Ready` Revision. */
	// +optional
	Traffic []ServiceTraffic `json:"traffic,omitempty"`
}

type ServiceTerminalConditionStatus struct {
	/* A reason for the job condition. Possible values: JOB_REASON_UNDEFINED, JOB_STATUS_SERVICE_POLLING_ERROR */
	// +optional
	JobReason *string `json:"jobReason,omitempty"`

	/* Last time the condition transitioned from one status to another. */
	// +optional
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	/* Human readable message indicating details about the current status. */
	// +optional
	Message *string `json:"message,omitempty"`

	/* A common (service-level) reason for this condition. Possible values: COMMON_REASON_UNDEFINED, UNKNOWN, REVISION_FAILED, PROGRESS_DEADLINE_EXCEEDED, CONTAINER_MISSING, CONTAINER_PERMISSION_DENIED, CONTAINER_IMAGE_UNAUTHORIZED, CONTAINER_IMAGE_AUTHORIZATION_CHECK_FAILED, ENCRYPTION_KEY_PERMISSION_DENIED, ENCRYPTION_KEY_CHECK_FAILED, SECRETS_ACCESS_CHECK_FAILED, WAITING_FOR_OPERATION, IMMEDIATE_RETRY, POSTPONED_RETRY, INTERNAL */
	// +optional
	Reason *string `json:"reason,omitempty"`

	/* A reason for the revision condition. Possible values: REVISION_REASON_UNDEFINED, PENDING, RESERVE, RETIRED, RETIRING, RECREATING, HEALTH_CHECK_CONTAINER_ERROR, CUSTOMIZED_PATH_RESPONSE_PENDING, MIN_INSTANCES_NOT_PROVISIONED, ACTIVE_REVISION_LIMIT_REACHED, NO_DEPLOYMENT */
	// +optional
	RevisionReason *string `json:"revisionReason,omitempty"`

	/* How to interpret failures of this condition, one of Error, Warning, Info Possible values: SEVERITY_UNSPECIFIED, ERROR, WARNING, INFO */
	// +optional
	Severity *string `json:"severity,omitempty"`

	/* State of the condition. Possible values: STATE_UNSPECIFIED, CONDITION_PENDING, CONDITION_RECONCILING, CONDITION_FAILED, CONDITION_SUCCEEDED */
	// +optional
	State *string `json:"state,omitempty"`

	/* type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready. */
	// +optional
	Type *string `json:"type,omitempty"`
}

type ServiceTrafficStatusesStatus struct {
	/* Specifies percent of the traffic to this Revision. */
	// +optional
	Percent *int `json:"percent,omitempty"`

	/* Revision to which this traffic is sent. */
	// +optional
	Revision *string `json:"revision,omitempty"`

	/* Indicates the string used in the URI to exclusively reference this target. */
	// +optional
	Tag *string `json:"tag,omitempty"`

	/* The allocation type for this traffic target. Possible values: TRAFFIC_TARGET_ALLOCATION_TYPE_UNSPECIFIED, TRAFFIC_TARGET_ALLOCATION_TYPE_LATEST, TRAFFIC_TARGET_ALLOCATION_TYPE_REVISION */
	// +optional
	Type *string `json:"type,omitempty"`

	/* Displays the target URI. */
	// +optional
	Uri *string `json:"uri,omitempty"`
}

type RunServiceStatus struct {
	/* Conditions represent the latest available observations of the
	   RunService's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. The creation time. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Output only. Email address of the authenticated creator. */
	// +optional
	Creator *string `json:"creator,omitempty"`

	/* Output only. The deletion time. */
	// +optional
	DeleteTime *string `json:"deleteTime,omitempty"`

	/* Output only. A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates. */
	// +optional
	Etag *string `json:"etag,omitempty"`

	/* Output only. For a deleted resource, the time after which it will be permamently deleted. */
	// +optional
	ExpireTime *string `json:"expireTime,omitempty"`

	/* Map of string keys and values that can be used to organize and categorize objects. User-provided labels are shared with Google's billing system, so they can be used to filter, or break down billing charges by team, component, environment, state, etc. For more information, visit https://cloud.google.com/resource-manager/docs/creating-managing-labels or https://cloud.google.com/run/docs/configuring/labels Cloud Run will populate some labels with 'run.googleapis.com' or 'serving.knative.dev' namespaces. Those labels are read-only, and user changes will not be preserved. */
	// +optional
	Labels map[string]string `json:"labels,omitempty"`

	/* Output only. Email address of the last authenticated modifier. */
	// +optional
	LastModifier *string `json:"lastModifier,omitempty"`

	/* Output only. Name of the last created revision. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
	// +optional
	LatestCreatedRevision *string `json:"latestCreatedRevision,omitempty"`

	/* Output only. Name of the latest revision that is serving traffic. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
	// +optional
	LatestReadyRevision *string `json:"latestReadyRevision,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int `json:"observedGeneration,omitempty"`

	/* Output only. Returns true if the Service is currently being acted upon by the system to bring it into the desired state. When a new Service is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Service to the desired serving state. This process is called reconciliation. While reconciliation is in process, `observed_generation`, `latest_ready_revison`, `traffic_statuses`, and `uri` will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the serving state matches the Service, or there was an error, and reconciliation failed. This state can be found in `terminal_condition.state`. If reconciliation succeeded, the following fields will match: `traffic` and `traffic_statuses`, `observed_generation` and `generation`, `latest_ready_revision` and `latest_created_revision`. If reconciliation failed, `traffic_statuses`, `observed_generation`, and `latest_ready_revision` will have the state of the last serving revision, or empty for newly created Services. Additional information on the failure can be found in `terminal_condition` and `conditions`. */
	// +optional
	Reconciling *bool `json:"reconciling,omitempty"`

	/* Output only. A number that monotonically increases every time the user modifies the desired state. */
	// +optional
	ResourceGeneration *int `json:"resourceGeneration,omitempty"`

	/* Output only. The Condition of this Service, containing its readiness status, and detailed error information in case it did not reach a serving state. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
	// +optional
	TerminalCondition *ServiceTerminalConditionStatus `json:"terminalCondition,omitempty"`

	/* Output only. Detailed status information for corresponding traffic targets. See comments in `reconciling` for additional information on reconciliation process in Cloud Run. */
	// +optional
	TrafficStatuses []ServiceTrafficStatusesStatus `json:"trafficStatuses,omitempty"`

	/* Output only. Server assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted. */
	// +optional
	Uid *string `json:"uid,omitempty"`

	/* Output only. The last-modified time. */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`

	/* Output only. The main URI in which this Service is serving traffic. */
	// +optional
	Uri *string `json:"uri,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RunService is the Schema for the run API
// +k8s:openapi-gen=true
type RunService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   RunServiceSpec   `json:"spec,omitempty"`
	Status RunServiceStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RunServiceList contains a list of RunService
type RunServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RunService `json:"items"`
}

func init() {
	SchemeBuilder.Register(&RunService{}, &RunServiceList{})
}
