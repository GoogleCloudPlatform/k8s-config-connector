// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type WorkstationconfigAccelerators struct {
	/* Number of accelerator cards exposed to the instance. */
	Count int `json:"count"`

	/* Type of accelerator resource to attach to the instance, for example, "nvidia-tesla-p100". */
	Type string `json:"type"`
}

type WorkstationconfigConfidentialInstanceConfig struct {
	/* Whether the instance has confidential compute enabled. */
	// +optional
	EnableConfidentialCompute *bool `json:"enableConfidentialCompute,omitempty"`
}

type WorkstationconfigContainer struct {
	/* Arguments passed to the entrypoint. */
	// +optional
	Args []string `json:"args,omitempty"`

	/* If set, overrides the default ENTRYPOINT specified by the image. */
	// +optional
	Command []string `json:"command,omitempty"`

	/* Environment variables passed to the container.
	The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
	// +optional
	Env map[string]string `json:"env,omitempty"`

	/* Docker image defining the container. This image must be accessible by the config's service account. */
	// +optional
	Image *string `json:"image,omitempty"`

	/* If set, overrides the USER specified in the image with the given uid. */
	// +optional
	RunAsUser *int `json:"runAsUser,omitempty"`

	/* If set, overrides the default DIR specified by the image. */
	// +optional
	WorkingDir *string `json:"workingDir,omitempty"`
}

type WorkstationconfigEncryptionKey struct {
	/* The name of the Google Cloud KMS encryption key. */
	KmsKey string `json:"kmsKey"`

	/* The service account to use with the specified KMS key. */
	KmsKeyServiceAccount string `json:"kmsKeyServiceAccount"`
}

type WorkstationconfigGceInstance struct {
	/* An accelerator card attached to the instance. */
	// +optional
	Accelerators []WorkstationconfigAccelerators `json:"accelerators,omitempty"`

	/* Immutable. Size of the boot disk in GB. */
	// +optional
	BootDiskSizeGb *int `json:"bootDiskSizeGb,omitempty"`

	/* A set of Compute Engine Confidential VM instance options. */
	// +optional
	ConfidentialInstanceConfig *WorkstationconfigConfidentialInstanceConfig `json:"confidentialInstanceConfig,omitempty"`

	/* Whether instances have no public IP address. */
	// +optional
	DisablePublicIpAddresses *bool `json:"disablePublicIpAddresses,omitempty"`

	/* Whether to enable nested virtualization on the Compute Engine VMs backing the Workstations.

	See https://cloud.google.com/workstations/docs/reference/rest/v1beta/projects.locations.workstationClusters.workstationConfigs#GceInstance.FIELDS.enable_nested_virtualization. */
	// +optional
	EnableNestedVirtualization *bool `json:"enableNestedVirtualization,omitempty"`

	/* The name of a Compute Engine machine type. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Number of instances to pool for faster workstation startup. */
	// +optional
	PoolSize *int `json:"poolSize,omitempty"`

	/* Immutable. Email address of the service account that will be used on VM instances used to support this config. This service account must have permission to pull the specified container image. If not set, VMs will run without a service account, in which case the image must be publicly accessible. */
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty"`

	/* A set of Compute Engine Shielded instance options. */
	// +optional
	ShieldedInstanceConfig *WorkstationconfigShieldedInstanceConfig `json:"shieldedInstanceConfig,omitempty"`

	/* Network tags to add to the Compute Engine machines backing the Workstations. */
	// +optional
	Tags []string `json:"tags,omitempty"`
}

type WorkstationconfigGcePd struct {
	/* Immutable. The type of the persistent disk for the home directory. Defaults to 'pd-standard'. */
	// +optional
	DiskType *string `json:"diskType,omitempty"`

	/* Immutable. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if 'sourceSnapshot' is set. Defaults to 'ext4'. */
	// +optional
	FsType *string `json:"fsType,omitempty"`

	/* Whether the persistent disk should be deleted when the workstation is deleted. Valid values are 'DELETE' and 'RETAIN'. Defaults to 'DELETE'. Possible values: ["DELETE", "RETAIN"]. */
	// +optional
	ReclaimPolicy *string `json:"reclaimPolicy,omitempty"`

	/* Immutable. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if 'sourceSnapshot' is set.
	Valid values are '10', '50', '100', '200', '500', or '1000'. Defaults to '200'. If less than '200' GB, the 'diskType' must be 'pd-balanced' or 'pd-ssd'. */
	// +optional
	SizeGb *int `json:"sizeGb,omitempty"`

	/* Name of the snapshot to use as the source for the disk. This can be the snapshot's 'self_link', 'id', or a string in the format of 'projects/{project}/global/snapshots/{snapshot}'. If set, 'sizeGb' and 'fsType' must be empty. Can only be updated if it has an existing value. */
	// +optional
	SourceSnapshot *string `json:"sourceSnapshot,omitempty"`
}

type WorkstationconfigHost struct {
	/* A runtime using a Compute Engine instance. */
	// +optional
	GceInstance *WorkstationconfigGceInstance `json:"gceInstance,omitempty"`
}

type WorkstationconfigPersistentDirectories struct {
	/* A directory to persist across workstation sessions, backed by a Compute Engine regional persistent disk. Can only be updated if not empty during creation. */
	// +optional
	GcePd *WorkstationconfigGcePd `json:"gcePd,omitempty"`

	/* Immutable. Location of this directory in the running workstation. */
	// +optional
	MountPath *string `json:"mountPath,omitempty"`
}

type WorkstationconfigShieldedInstanceConfig struct {
	/* Whether the instance has integrity monitoring enabled. */
	// +optional
	EnableIntegrityMonitoring *bool `json:"enableIntegrityMonitoring,omitempty"`

	/* Whether the instance has Secure Boot enabled. */
	// +optional
	EnableSecureBoot *bool `json:"enableSecureBoot,omitempty"`

	/* Whether the instance has the vTPM enabled. */
	// +optional
	EnableVtpm *bool `json:"enableVtpm,omitempty"`
}

type WorkstationsWorkstationConfigSpec struct {
	/* Client-specified annotations. This is distinct from labels. */
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	/* Container that will be run for each workstation using this configuration when that workstation is started. */
	// +optional
	Container *WorkstationconfigContainer `json:"container,omitempty"`

	/* Human-readable name for this resource. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* Immutable. Encrypts resources of this workstation configuration using a customer-managed encryption key.

	If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata.
	If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk will be lost.
	If the encryption key is revoked, the workstation session will automatically be stopped within 7 hours. */
	// +optional
	EncryptionKey *WorkstationconfigEncryptionKey `json:"encryptionKey,omitempty"`

	/* Runtime host for a workstation. */
	// +optional
	Host *WorkstationconfigHost `json:"host,omitempty"`

	/* How long to wait before automatically stopping an instance that hasn't recently received any user traffic. A value of 0 indicates that this instance should never time out from idleness. Defaults to 20 minutes.
	A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s". */
	// +optional
	IdleTimeout *string `json:"idleTimeout,omitempty"`

	/* Immutable. The location where the workstation cluster config should reside. */
	Location string `json:"location"`

	/* Directories to persist across workstation sessions. */
	// +optional
	PersistentDirectories []WorkstationconfigPersistentDirectories `json:"persistentDirectories,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The workstationConfigId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* How long to wait before automatically stopping a workstation after it was started. A value of 0 indicates that workstations using this configuration should never time out from running duration. Must be greater than 0 and less than 24 hours if 'encryption_key' is set. Defaults to 12 hours.
	A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s". */
	// +optional
	RunningTimeout *string `json:"runningTimeout,omitempty"`

	/* Immutable. The ID of the parent workstation cluster. */
	WorkstationClusterId string `json:"workstationClusterId"`
}

type WorkstationconfigDetailsStatus struct {
}

type WorkstationconfigResourceConditionsStatus struct {
	/* The status code, which should be an enum value of google.rpc.Code. */
	// +optional
	Code *int `json:"code,omitempty"`

	/* A list of messages that carry the error details. */
	// +optional
	Details []WorkstationconfigDetailsStatus `json:"details,omitempty"`

	/* Human readable message indicating details about the current status. */
	// +optional
	Message *string `json:"message,omitempty"`
}

type WorkstationsWorkstationConfigStatus struct {
	/* Conditions represent the latest available observations of the
	   WorkstationsWorkstationConfig's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Time when this resource was created. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the conditions field. */
	// +optional
	Degraded *bool `json:"degraded,omitempty"`

	/* Checksum computed by the server.
	May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding. */
	// +optional
	Etag *string `json:"etag,omitempty"`

	/* Full name of this resource. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int `json:"observedGeneration,omitempty"`

	/* Status conditions describing the current resource state. */
	// +optional
	ResourceConditions []WorkstationconfigResourceConditionsStatus `json:"resourceConditions,omitempty"`

	/* The system-generated UID of the resource. */
	// +optional
	Uid *string `json:"uid,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkstationsWorkstationConfig is the Schema for the workstations API
// +k8s:openapi-gen=true
type WorkstationsWorkstationConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   WorkstationsWorkstationConfigSpec   `json:"spec,omitempty"`
	Status WorkstationsWorkstationConfigStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkstationsWorkstationConfigList contains a list of WorkstationsWorkstationConfig
type WorkstationsWorkstationConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkstationsWorkstationConfig `json:"items"`
}

func init() {
	SchemeBuilder.Register(&WorkstationsWorkstationConfig{}, &WorkstationsWorkstationConfigList{})
}
