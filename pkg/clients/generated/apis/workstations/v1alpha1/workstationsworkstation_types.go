// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type WorkstationsWorkstationSpec struct {
	/* Client-specified annotations. This is distinct from labels. */
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	/* Human-readable name for this resource. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* 'Client-specified environment variables passed to the workstation container's entrypoint.'. */
	// +optional
	Env map[string]string `json:"env,omitempty"`

	/* Immutable. The location where the workstation parent resources reside. */
	Location string `json:"location"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The workstationId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. The ID of the parent workstation cluster. */
	WorkstationClusterId string `json:"workstationClusterId"`

	/* Immutable. The ID of the parent workstation cluster config. */
	WorkstationConfigId string `json:"workstationConfigId"`
}

type WorkstationsWorkstationStatus struct {
	/* Conditions represent the latest available observations of the
	   WorkstationsWorkstation's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Time when this resource was created. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Host to which clients can send HTTPS traffic that will be received by the workstation.
	Authorized traffic will be received to the workstation as HTTP on port 80.
	To send traffic to a different port, clients may prefix the host with the destination port in the format "{port}-{host}". */
	// +optional
	Host *string `json:"host,omitempty"`

	/* Full name of this resource. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int `json:"observedGeneration,omitempty"`

	/* Current state of the workstation. */
	// +optional
	State *string `json:"state,omitempty"`

	/* A system-assigned unique identified for this resource. */
	// +optional
	Uid *string `json:"uid,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkstationsWorkstation is the Schema for the workstations API
// +k8s:openapi-gen=true
type WorkstationsWorkstation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   WorkstationsWorkstationSpec   `json:"spec,omitempty"`
	Status WorkstationsWorkstationStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkstationsWorkstationList contains a list of WorkstationsWorkstation
type WorkstationsWorkstationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkstationsWorkstation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&WorkstationsWorkstation{}, &WorkstationsWorkstationList{})
}
