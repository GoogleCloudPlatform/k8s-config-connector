// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type WorkstationsWorkstationSpec struct {
	/* Optional. Client-specified annotations. */
	// +optional
	Annotations map[string]string `json:"annotations,omitempty"`

	/* Optional. Human-readable name for this workstation. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* The WorkstationsWorkstation name. If not given, the metadata.name will be used. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type WorkstationObservedStateStatus struct {
	/* Output only. Time when this workstation was created. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Output only. Time when this workstation was soft-deleted. */
	// +optional
	DeleteTime *string `json:"deleteTime,omitempty"`

	/* Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding. */
	// +optional
	Etag *string `json:"etag,omitempty"`

	/* Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`. */
	// +optional
	Host *string `json:"host,omitempty"`

	/* Output only. Time when this workstation was most recently successfully started, regardless of the workstation's initial state. */
	// +optional
	StartTime *string `json:"startTime,omitempty"`

	/* Output only. Current state of the workstation. */
	// +optional
	State *string `json:"state,omitempty"`

	/* Output only. A system-assigned unique identifier for this workstation. */
	// +optional
	Uid *string `json:"uid,omitempty"`

	/* Output only. Time when this workstation was most recently updated. */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

type WorkstationsWorkstationStatus struct {
	/* Conditions represent the latest available observations of the
	   WorkstationsWorkstation's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* A unique specifier for the WorkstationsWorkstation resource in GCP. */
	// +optional
	ExternalRef *string `json:"externalRef,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* ObservedState is the state of the resource as most recently observed in GCP. */
	// +optional
	ObservedState *WorkstationObservedStateStatus `json:"observedState,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// WorkstationsWorkstation is the Schema for the workstations API
// +k8s:openapi-gen=true
type WorkstationsWorkstation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   WorkstationsWorkstationSpec   `json:"spec,omitempty"`
	Status WorkstationsWorkstationStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkstationsWorkstationList contains a list of WorkstationsWorkstation
type WorkstationsWorkstationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkstationsWorkstation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&WorkstationsWorkstation{}, &WorkstationsWorkstationList{})
}
