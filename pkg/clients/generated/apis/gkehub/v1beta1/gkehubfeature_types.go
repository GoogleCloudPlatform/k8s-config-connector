// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FeatureDefaultConfig struct {
	/* The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE */
	// +optional
	Mode *string `json:"mode,omitempty"`
}

type FeatureFleetScopeLogsConfig struct {
	/* The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE */
	// +optional
	Mode *string `json:"mode,omitempty"`
}

type FeatureFleetobservability struct {
	/* Fleet Observability Logging-specific spec. */
	// +optional
	LoggingConfig *FeatureLoggingConfig `json:"loggingConfig,omitempty"`
}

type FeatureLoggingConfig struct {
	/* Specified if applying the default routing config to logs not specified in other configs. */
	// +optional
	DefaultConfig *FeatureDefaultConfig `json:"defaultConfig,omitempty"`

	/* Specified if applying the routing config to all logs for all fleet scopes. */
	// +optional
	FleetScopeLogsConfig *FeatureFleetScopeLogsConfig `json:"fleetScopeLogsConfig,omitempty"`
}

type FeatureMulticlusteringress struct {
	ConfigMembershipRef v1alpha1.ResourceRef `json:"configMembershipRef"`
}

type FeatureSpec struct {
	/* Fleet Observability spec. */
	// +optional
	Fleetobservability *FeatureFleetobservability `json:"fleetobservability,omitempty"`

	/* Multicluster Ingress-specific spec. */
	// +optional
	Multiclusteringress *FeatureMulticlusteringress `json:"multiclusteringress,omitempty"`
}

type GKEHubFeatureSpec struct {
	/* Immutable. The location for the resource */
	Location string `json:"location"`

	/* Immutable. The Project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused. */
	// +optional
	Spec *FeatureSpec `json:"spec,omitempty"`
}

type FeatureResourceStateStatus struct {
	/* Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled. */
	// +optional
	HasResources *bool `json:"hasResources,omitempty"`

	/* The current state of the Feature resource in the Hub API. Possible values: STATE_UNSPECIFIED, ENABLING, ACTIVE, DISABLING, UPDATING, SERVICE_UPDATING */
	// +optional
	State *string `json:"state,omitempty"`
}

type FeatureStateStatus struct {
	/* The high-level, machine-readable status of this Feature. Possible values: CODE_UNSPECIFIED, OK, WARNING, ERROR */
	// +optional
	Code *string `json:"code,omitempty"`

	/* A human-readable description of the current status. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z" */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

type GKEHubFeatureStatus struct {
	/* Conditions represent the latest available observations of the
	   GKEHubFeature's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. When the Feature resource was created. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Output only. When the Feature resource was deleted. */
	// +optional
	DeleteTime *string `json:"deleteTime,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* State of the Feature resource itself. */
	// +optional
	ResourceState *FeatureResourceStateStatus `json:"resourceState,omitempty"`

	/* Output only. The Hub-wide Feature state */
	// +optional
	State *FeatureStateStatus `json:"state,omitempty"`

	/* Output only. When the Feature resource was last updated. */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpgkehubfeature;gcpgkehubfeatures
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/dcl2crd=true";"cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// GKEHubFeature is the Schema for the gkehub API
// +k8s:openapi-gen=true
type GKEHubFeature struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GKEHubFeatureSpec   `json:"spec,omitempty"`
	Status GKEHubFeatureStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// GKEHubFeatureList contains a list of GKEHubFeature
type GKEHubFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GKEHubFeature `json:"items"`
}

func init() {
	SchemeBuilder.Register(&GKEHubFeature{}, &GKEHubFeatureList{})
}
