// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type EnvironmentContainerImage struct {
	/* The path to the container image repository.
	For example: gcr.io/{project_id}/{imageName}. */
	Repository string `json:"repository"`

	/* The tag of the container image. If not specified, this defaults to the latest tag. */
	// +optional
	Tag *string `json:"tag,omitempty"`
}

type EnvironmentVmImage struct {
	/* Use this VM image family to find the image; the newest image in this family will be used. */
	// +optional
	ImageFamily *string `json:"imageFamily,omitempty"`

	/* Use VM image name to find the image. */
	// +optional
	ImageName *string `json:"imageName,omitempty"`

	/* The name of the Google Cloud project that this VM image belongs to.
	Format: projects/{project_id}. */
	Project string `json:"project"`
}

type NotebooksEnvironmentSpec struct {
	/* Use a container image to start the notebook instance. */
	// +optional
	ContainerImage *EnvironmentContainerImage `json:"containerImage,omitempty"`

	/* A brief description of this environment. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Display name of this environment for the UI. */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	LocationRef v1alpha1.ResourceRef `json:"locationRef"`

	/* Path to a Bash script that automatically runs after a notebook instance fully boots up.
	The path must be a URL or Cloud Storage path. Example: "gs://path-to-file/file-name". */
	// +optional
	PostStartupScript *string `json:"postStartupScript,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Use a Compute Engine VM image to start the notebook instance. */
	// +optional
	VmImage *EnvironmentVmImage `json:"vmImage,omitempty"`
}

type NotebooksEnvironmentStatus struct {
	/* Conditions represent the latest available observations of the
	   NotebooksEnvironment's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Instance creation time. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpnotebooksenvironment;gcpnotebooksenvironments
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// NotebooksEnvironment is the Schema for the notebooks API
// +k8s:openapi-gen=true
type NotebooksEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NotebooksEnvironmentSpec   `json:"spec,omitempty"`
	Status NotebooksEnvironmentStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// NotebooksEnvironmentList contains a list of NotebooksEnvironment
type NotebooksEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebooksEnvironment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NotebooksEnvironment{}, &NotebooksEnvironmentList{})
}
