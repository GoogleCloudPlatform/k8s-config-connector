// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type WorkflowsWorkflowSpec struct {
	/* The KMS key used to encrypt workflow and execution data.

	Format: projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{cryptoKey}. */
	// +optional
	CryptoKeyName *string `json:"cryptoKeyName,omitempty"`

	/* Description of the workflow provided by the user. Must be at most 1000 unicode characters long. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Immutable. */
	// +optional
	NamePrefix *string `json:"namePrefix,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. The region of the workflow. */
	Region string `json:"region"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Name of the service account associated with the latest workflow version. This service
	account represents the identity of the workflow and determines what permissions the workflow has.
	Format: projects/{project}/serviceAccounts/{account} or {account}.
	Using - as a wildcard for the {project} or not providing one at all will infer the project from the account.
	The {account} value can be the email address or the unique_id of the service account.
	If not provided, workflow will use the project's default service account.
	Modifying this field for an existing workflow results in a new workflow revision. */
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty"`

	/* Workflow code to be executed. The size limit is 32KB. */
	// +optional
	SourceContents *string `json:"sourceContents,omitempty"`
}

type WorkflowsWorkflowStatus struct {
	/* Conditions represent the latest available observations of the
	   WorkflowsWorkflow's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The timestamp of when the workflow was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The revision of the workflow. A new one is generated if the service account or source contents is changed. */
	// +optional
	RevisionId *string `json:"revisionId,omitempty"`

	/* State of the workflow deployment. */
	// +optional
	State *string `json:"state,omitempty"`

	/* The timestamp of when the workflow was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpworkflowsworkflow;gcpworkflowsworkflows
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// WorkflowsWorkflow is the Schema for the workflows API
// +k8s:openapi-gen=true
type WorkflowsWorkflow struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   WorkflowsWorkflowSpec   `json:"spec,omitempty"`
	Status WorkflowsWorkflowStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// WorkflowsWorkflowList contains a list of WorkflowsWorkflow
type WorkflowsWorkflowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkflowsWorkflow `json:"items"`
}

func init() {
	SchemeBuilder.Register(&WorkflowsWorkflow{}, &WorkflowsWorkflowList{})
}
