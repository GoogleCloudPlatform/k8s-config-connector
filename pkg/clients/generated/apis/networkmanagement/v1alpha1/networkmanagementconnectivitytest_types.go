// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type ConnectivitytestDestination struct {
	/* A Compute Engine instance URI. */
	// +optional
	Instance *string `json:"instance,omitempty"`

	/* The IP address of the endpoint, which can be an external or
	internal IP. An IPv6 address is only allowed when the test's
	destination is a global load balancer VIP. */
	// +optional
	IpAddress *string `json:"ipAddress,omitempty"`

	/* A Compute Engine network URI. */
	// +optional
	Network *string `json:"network,omitempty"`

	/* The IP protocol port of the endpoint. Only applicable when
	protocol is TCP or UDP. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Project ID where the endpoint is located. The Project ID can be
	derived from the URI if you provide a VM instance or network URI.
	The following are two cases where you must provide the project ID:
	1. Only the IP address is specified, and the IP address is within
	a GCP project. 2. When you are using Shared VPC and the IP address
	that you provide is from the service project. In this case, the
	network that the IP address resides in is defined in the host
	project. */
	// +optional
	ProjectId *string `json:"projectId,omitempty"`
}

type ConnectivitytestSource struct {
	/* A Compute Engine instance URI. */
	// +optional
	Instance *string `json:"instance,omitempty"`

	/* The IP address of the endpoint, which can be an external or
	internal IP. An IPv6 address is only allowed when the test's
	destination is a global load balancer VIP. */
	// +optional
	IpAddress *string `json:"ipAddress,omitempty"`

	/* A Compute Engine network URI. */
	// +optional
	Network *string `json:"network,omitempty"`

	/* Type of the network where the endpoint is located. Possible values: ["GCP_NETWORK", "NON_GCP_NETWORK"]. */
	// +optional
	NetworkType *string `json:"networkType,omitempty"`

	/* The IP protocol port of the endpoint. Only applicable when
	protocol is TCP or UDP. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Project ID where the endpoint is located. The Project ID can be
	derived from the URI if you provide a VM instance or network URI.
	The following are two cases where you must provide the project ID:

	1. Only the IP address is specified, and the IP address is
	within a GCP project.
	2. When you are using Shared VPC and the IP address
	that you provide is from the service project. In this case,
	the network that the IP address resides in is defined in the
	host project. */
	// +optional
	ProjectId *string `json:"projectId,omitempty"`
}

type NetworkManagementConnectivityTestSpec struct {
	/* The user-supplied description of the Connectivity Test.
	Maximum of 512 characters. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Required. Destination specification of the Connectivity Test.

	You can use a combination of destination IP address, Compute
	Engine VM instance, or VPC network to uniquely identify the
	destination location.

	Even if the destination IP address is not unique, the source IP
	location is unique. Usually, the analysis can infer the destination
	endpoint from route information.

	If the destination you specify is a VM instance and the instance has
	multiple network interfaces, then you must also specify either a
	destination IP address or VPC network to identify the destination
	interface.

	A reachability analysis proceeds even if the destination location
	is ambiguous. However, the result can include endpoints that you
	don't intend to test. */
	Destination ConnectivitytestDestination `json:"destination"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* IP Protocol of the test. When not provided, "TCP" is assumed. */
	// +optional
	Protocol *string `json:"protocol,omitempty"`

	/* Other projects that may be relevant for reachability analysis.
	This is applicable to scenarios where a test can cross project
	boundaries. */
	// +optional
	RelatedProjects []string `json:"relatedProjects,omitempty"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Required. Source specification of the Connectivity Test.

	You can use a combination of source IP address, virtual machine
	(VM) instance, or Compute Engine network to uniquely identify the
	source location.

	Examples: If the source IP address is an internal IP address within
	a Google Cloud Virtual Private Cloud (VPC) network, then you must
	also specify the VPC network. Otherwise, specify the VM instance,
	which already contains its internal IP address and VPC network
	information.

	If the source of the test is within an on-premises network, then
	you must provide the destination VPC network.

	If the source endpoint is a Compute Engine VM instance with multiple
	network interfaces, the instance itself is not sufficient to
	identify the endpoint. So, you must also specify the source IP
	address or VPC network.

	A reachability analysis proceeds even if the source location is
	ambiguous. However, the test result may include endpoints that
	you don't intend to test. */
	Source ConnectivitytestSource `json:"source"`
}

type NetworkManagementConnectivityTestStatus struct {
	/* Conditions represent the latest available observations of the
	   NetworkManagementConnectivityTest's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpnetworkmanagementconnectivitytest;gcpnetworkmanagementconnectivitytests
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// NetworkManagementConnectivityTest is the Schema for the networkmanagement API
// +k8s:openapi-gen=true
type NetworkManagementConnectivityTest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NetworkManagementConnectivityTestSpec   `json:"spec,omitempty"`
	Status NetworkManagementConnectivityTestStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// NetworkManagementConnectivityTestList contains a list of NetworkManagementConnectivityTest
type NetworkManagementConnectivityTestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkManagementConnectivityTest `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NetworkManagementConnectivityTest{}, &NetworkManagementConnectivityTestList{})
}
