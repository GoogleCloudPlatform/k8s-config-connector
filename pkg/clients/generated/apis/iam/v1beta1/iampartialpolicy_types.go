// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type PartialpolicyBindings struct {
	/* Optional. The condition under which the binding applies. */
	// +optional
	Condition *PartialpolicyCondition `json:"condition,omitempty"`

	/* Optional. The list of IAM users to be bound to the role. */
	// +optional
	Members []PartialpolicyMembers `json:"members,omitempty"`

	/* Required. The role to bind the users to. */
	Role string `json:"role"`
}

type PartialpolicyCondition struct {
	// +optional
	Description *string `json:"description,omitempty"`

	Expression string `json:"expression"`

	Title string `json:"title"`
}

type PartialpolicyMemberFrom struct {
	/* The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role. */
	// +optional
	LogSinkRef *v1alpha1.IAMResourceRef `json:"logSinkRef,omitempty"`

	/* The IAMServiceAccount to be bound to the role. */
	// +optional
	ServiceAccountRef *v1alpha1.IAMResourceRef `json:"serviceAccountRef,omitempty"`

	/* The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role. */
	// +optional
	ServiceIdentityRef *v1alpha1.IAMResourceRef `json:"serviceIdentityRef,omitempty"`

	/* The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role. */
	// +optional
	SqlInstanceRef *v1alpha1.IAMResourceRef `json:"sqlInstanceRef,omitempty"`
}

type PartialpolicyMembers struct {
	/* The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used. */
	// +optional
	Member *string `json:"member,omitempty"`

	/* The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used. */
	// +optional
	MemberFrom *PartialpolicyMemberFrom `json:"memberFrom,omitempty"`
}

type IAMPartialPolicySpec struct {
	/* Optional. The list of IAM bindings managed by Config Connector. */
	// +optional
	Bindings []PartialpolicyBindings `json:"bindings,omitempty"`

	/* Immutable. Required. The GCP resource to set the IAM policy on. */
	ResourceRef v1alpha1.IAMResourceRef `json:"resourceRef"`
}

type PartialpolicyAllBindingsStatus struct {
	/* Optional. The condition under which the binding applies. */
	// +optional
	Condition *PartialpolicyConditionStatus `json:"condition,omitempty"`

	/* Optional. The list of IAM users to be bound to the role. */
	// +optional
	Members []string `json:"members,omitempty"`

	/* Required. The role to bind the users to. */
	Role string `json:"role"`
}

type PartialpolicyConditionStatus struct {
	// +optional
	Description *string `json:"description,omitempty"`

	Expression string `json:"expression"`

	Title string `json:"title"`
}

type PartialpolicyLastAppliedBindingsStatus struct {
	/* Optional. The condition under which the binding applies. */
	// +optional
	Condition *PartialpolicyConditionStatus `json:"condition,omitempty"`

	/* Optional. The list of IAM users to be bound to the role. */
	// +optional
	Members []string `json:"members,omitempty"`

	/* Required. The role to bind the users to. */
	Role string `json:"role"`
}

type IAMPartialPolicyStatus struct {
	/* Conditions represent the latest available observations of the
	   IAMPartialPolicy's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* AllBindings surfaces all IAM bindings for the referenced resource. */
	// +optional
	AllBindings []PartialpolicyAllBindingsStatus `json:"allBindings,omitempty"`

	/* LastAppliedBindings is the list of IAM bindings that were most recently applied by Config Connector. */
	// +optional
	LastAppliedBindings []PartialpolicyLastAppliedBindingsStatus `json:"lastAppliedBindings,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpiampartialpolicy;gcpiampartialpolicies
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True' the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date"

// IAMPartialPolicy is the Schema for the iam API
// +k8s:openapi-gen=true
type IAMPartialPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   IAMPartialPolicySpec   `json:"spec,omitempty"`
	Status IAMPartialPolicyStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// IAMPartialPolicyList contains a list of IAMPartialPolicy
type IAMPartialPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IAMPartialPolicy `json:"items"`
}

func init() {
	SchemeBuilder.Register(&IAMPartialPolicy{}, &IAMPartialPolicyList{})
}
