// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type JobParameters struct {
}

type JobTransformNameMapping struct {
}

type DataflowJobSpec struct {
	/* List of experiments that should be used by the job. An example value is ["enable_stackdriver_agent_metrics"]. */
	// +optional
	AdditionalExperiments []string `json:"additionalExperiments,omitempty"`

	/* Indicates if the job should use the streaming engine feature. */
	// +optional
	EnableStreamingEngine *bool `json:"enableStreamingEngine,omitempty"`

	/* The configuration for VM IPs. Options are "WORKER_IP_PUBLIC" or "WORKER_IP_PRIVATE". */
	// +optional
	IpConfiguration *string `json:"ipConfiguration,omitempty"`

	/* The name for the Cloud KMS key for the job. */
	// +optional
	KmsKeyRef *v1alpha1.ResourceRef `json:"kmsKeyRef,omitempty"`

	/* The machine type to use for the job. */
	// +optional
	MachineType *string `json:"machineType,omitempty"`

	/* Immutable. The number of workers permitted to work on the job. More workers may improve processing speed at additional cost. */
	// +optional
	MaxWorkers *int64 `json:"maxWorkers,omitempty"`

	// +optional
	NetworkRef *v1alpha1.ResourceRef `json:"networkRef,omitempty"`

	/* Key/Value pairs to be passed to the Dataflow job (as used in the template). */
	// +optional
	Parameters *JobParameters `json:"parameters,omitempty"`

	/* Immutable. The region in which the created job should run. */
	// +optional
	Region *string `json:"region,omitempty"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	// +optional
	ServiceAccountRef *v1alpha1.ResourceRef `json:"serviceAccountRef,omitempty"`

	// +optional
	SubnetworkRef *v1alpha1.ResourceRef `json:"subnetworkRef,omitempty"`

	/* A writeable location on Google Cloud Storage for the Dataflow job to dump its temporary data. */
	TempGcsLocation string `json:"tempGcsLocation"`

	/* The Google Cloud Storage path to the Dataflow job template. */
	TemplateGcsPath string `json:"templateGcsPath"`

	/* Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced with the corresponding name prefixes of the new job. */
	// +optional
	TransformNameMapping *JobTransformNameMapping `json:"transformNameMapping,omitempty"`

	/* Immutable. The zone in which the created job should run. If it is not provided, the provider zone is used. */
	// +optional
	Zone *string `json:"zone,omitempty"`
}

type DataflowJobStatus struct {
	/* Conditions represent the latest available observations of the
	   DataflowJob's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The unique ID of this job. */
	// +optional
	JobId *string `json:"jobId,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The current state of the resource, selected from the JobState enum. */
	// +optional
	State *string `json:"state,omitempty"`

	/* The type of this job, selected from the JobType enum. */
	// +optional
	Type *string `json:"type,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdataflowjob;gcpdataflowjobs
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DataflowJob is the Schema for the dataflow API
// +k8s:openapi-gen=true
type DataflowJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DataflowJobSpec   `json:"spec,omitempty"`
	Status DataflowJobStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DataflowJobList contains a list of DataflowJob
type DataflowJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataflowJob `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DataflowJob{}, &DataflowJobList{})
}
