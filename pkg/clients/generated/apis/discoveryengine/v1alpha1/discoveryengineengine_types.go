// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type EngineAgentCreationConfig struct {
	/* Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search. */
	// +optional
	Business *string `json:"business,omitempty"`

	/* Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes. */
	// +optional
	DefaultLanguageCode *string `json:"defaultLanguageCode,omitempty"`

	/* Agent location for Agent creation, supported values: global/us/eu. If not provided, us Engine will create Agent using us-central-1 by default; eu Engine will create Agent using eu-west-1 by default. */
	// +optional
	Location *string `json:"location,omitempty"`

	/* Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. */
	// +optional
	TimeZone *string `json:"timeZone,omitempty"`
}

type EngineChatEngineConfig struct {
	/* The configurationt generate the Dialogflow agent that is associated to
	this Engine.

	Note that these configurations are one-time consumed by
	and passed to Dialogflow service. It means they cannot be retrieved using
	[EngineService.GetEngine][google.cloud.discoveryengine.v1.EngineService.GetEngine]
	or
	[EngineService.ListEngines][google.cloud.discoveryengine.v1.EngineService.ListEngines]
	API after engine creation. */
	// +optional
	AgentCreationConfig *EngineAgentCreationConfig `json:"agentCreationConfig,omitempty"`

	/* The resource name of an exist Dialogflow agent to link to this Chat
	Engine. Customers can either provide `agent_creation_config` to create
	agent or provide an agent name that links the agent with the Chat engine.

	Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
	ID>`.

	Note that the `dialogflow_agent_to_link` are one-time consumed by and
	passed to Dialogflow service. It means they cannot be retrieved using
	[EngineService.GetEngine][google.cloud.discoveryengine.v1.EngineService.GetEngine]
	or
	[EngineService.ListEngines][google.cloud.discoveryengine.v1.EngineService.ListEngines]
	API after engine creation. Use
	[ChatEngineMetadata.dialogflow_agent][google.cloud.discoveryengine.v1.Engine.ChatEngineMetadata.dialogflow_agent]
	for actual agent association after Engine is created. */
	// +optional
	DialogflowAgentToLink *string `json:"dialogflowAgentToLink,omitempty"`
}

type EngineCommonConfig struct {
	/* The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features. */
	// +optional
	CompanyName *string `json:"companyName,omitempty"`
}

type EngineSearchEngineConfig struct {
	/* The add-on that this search engine enables. */
	// +optional
	SearchAddOns []string `json:"searchAddOns,omitempty"`

	/* The search feature tier of this engine.

	Different tiers might have different
	pricing. To learn more, check the pricing documentation.

	Defaults to
	[SearchTier.SEARCH_TIER_STANDARD][google.cloud.discoveryengine.v1.SearchTier.SEARCH_TIER_STANDARD]
	if not specified. */
	// +optional
	SearchTier *string `json:"searchTier,omitempty"`
}

type DiscoveryEngineEngineSpec struct {
	/* Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT. */
	// +optional
	ChatEngineConfig *EngineChatEngineConfig `json:"chatEngineConfig,omitempty"`

	/* Immutable. The collection for the Engine. */
	Collection string `json:"collection"`

	/* Common config spec that specifies the metadata of the engine. */
	// +optional
	CommonConfig *EngineCommonConfig `json:"commonConfig,omitempty"`

	/* The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore must be provided as the system will use it for necessary initializations. */
	// +optional
	DataStoreRefs []v1alpha1.ResourceRef `json:"dataStoreRefs,omitempty"`

	/* Optional. Whether to disable analytics for searches performed on this engine. */
	// +optional
	DisableAnalytics *bool `json:"disableAnalytics,omitempty"`

	/* Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters. */
	DisplayName string `json:"displayName"`

	/* The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore linked to the engine. */
	// +optional
	IndustryVertical *string `json:"industryVertical,omitempty"`

	/* Immutable. Location of the resource. */
	Location string `json:"location"`

	/* Immutable. The Project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. The DiscoveryEngineChatEngine name. If not given, the metadata.name will be used. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH. */
	// +optional
	SearchEngineConfig *EngineSearchEngineConfig `json:"searchEngineConfig,omitempty"`

	/* Required. The solutions of the engine. */
	SolutionType string `json:"solutionType"`
}

type EngineObservedStateStatus struct {
}

type DiscoveryEngineEngineStatus struct {
	/* Conditions represent the latest available observations of the
	   DiscoveryEngineEngine's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* A unique specifier for the DiscoveryEngineEngine resource in GCP. */
	// +optional
	ExternalRef *string `json:"externalRef,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* ObservedState is the state of the resource as most recently observed in GCP. */
	// +optional
	ObservedState *EngineObservedStateStatus `json:"observedState,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdiscoveryengineengine;gcpdiscoveryengineengines
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DiscoveryEngineEngine is the Schema for the discoveryengine API
// +k8s:openapi-gen=true
type DiscoveryEngineEngine struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DiscoveryEngineEngineSpec   `json:"spec,omitempty"`
	Status DiscoveryEngineEngineStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DiscoveryEngineEngineList contains a list of DiscoveryEngineEngine
type DiscoveryEngineEngineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiscoveryEngineEngine `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DiscoveryEngineEngine{}, &DiscoveryEngineEngineList{})
}
