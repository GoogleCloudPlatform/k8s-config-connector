//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1beta1

import (
	v1alpha1 "github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSManagedZone) DeepCopyInto(out *DNSManagedZone) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSManagedZone.
func (in *DNSManagedZone) DeepCopy() *DNSManagedZone {
	if in == nil {
		return nil
	}
	out := new(DNSManagedZone)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSManagedZone) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSManagedZoneList) DeepCopyInto(out *DNSManagedZoneList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DNSManagedZone, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSManagedZoneList.
func (in *DNSManagedZoneList) DeepCopy() *DNSManagedZoneList {
	if in == nil {
		return nil
	}
	out := new(DNSManagedZoneList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSManagedZoneList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSManagedZoneSpec) DeepCopyInto(out *DNSManagedZoneSpec) {
	*out = *in
	if in.CloudLoggingConfig != nil {
		in, out := &in.CloudLoggingConfig, &out.CloudLoggingConfig
		*out = new(ManagedzoneCloudLoggingConfig)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.DnssecConfig != nil {
		in, out := &in.DnssecConfig, &out.DnssecConfig
		*out = new(ManagedzoneDnssecConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ForwardingConfig != nil {
		in, out := &in.ForwardingConfig, &out.ForwardingConfig
		*out = new(ManagedzoneForwardingConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.PeeringConfig != nil {
		in, out := &in.PeeringConfig, &out.PeeringConfig
		*out = new(ManagedzonePeeringConfig)
		**out = **in
	}
	if in.PrivateVisibilityConfig != nil {
		in, out := &in.PrivateVisibilityConfig, &out.PrivateVisibilityConfig
		*out = new(ManagedzonePrivateVisibilityConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
	if in.ReverseLookup != nil {
		in, out := &in.ReverseLookup, &out.ReverseLookup
		*out = new(bool)
		**out = **in
	}
	if in.ServiceDirectoryConfig != nil {
		in, out := &in.ServiceDirectoryConfig, &out.ServiceDirectoryConfig
		*out = new(ManagedzoneServiceDirectoryConfig)
		**out = **in
	}
	if in.Visibility != nil {
		in, out := &in.Visibility, &out.Visibility
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSManagedZoneSpec.
func (in *DNSManagedZoneSpec) DeepCopy() *DNSManagedZoneSpec {
	if in == nil {
		return nil
	}
	out := new(DNSManagedZoneSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSManagedZoneStatus) DeepCopyInto(out *DNSManagedZoneStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.CreationTime != nil {
		in, out := &in.CreationTime, &out.CreationTime
		*out = new(string)
		**out = **in
	}
	if in.ManagedZoneId != nil {
		in, out := &in.ManagedZoneId, &out.ManagedZoneId
		*out = new(int64)
		**out = **in
	}
	if in.NameServers != nil {
		in, out := &in.NameServers, &out.NameServers
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSManagedZoneStatus.
func (in *DNSManagedZoneStatus) DeepCopy() *DNSManagedZoneStatus {
	if in == nil {
		return nil
	}
	out := new(DNSManagedZoneStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSPolicy) DeepCopyInto(out *DNSPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSPolicy.
func (in *DNSPolicy) DeepCopy() *DNSPolicy {
	if in == nil {
		return nil
	}
	out := new(DNSPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSPolicyList) DeepCopyInto(out *DNSPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DNSPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSPolicyList.
func (in *DNSPolicyList) DeepCopy() *DNSPolicyList {
	if in == nil {
		return nil
	}
	out := new(DNSPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSPolicySpec) DeepCopyInto(out *DNSPolicySpec) {
	*out = *in
	if in.AlternativeNameServerConfig != nil {
		in, out := &in.AlternativeNameServerConfig, &out.AlternativeNameServerConfig
		*out = new(PolicyAlternativeNameServerConfig)
		(*in).DeepCopyInto(*out)
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EnableInboundForwarding != nil {
		in, out := &in.EnableInboundForwarding, &out.EnableInboundForwarding
		*out = new(bool)
		**out = **in
	}
	if in.EnableLogging != nil {
		in, out := &in.EnableLogging, &out.EnableLogging
		*out = new(bool)
		**out = **in
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]PolicyNetworks, len(*in))
		copy(*out, *in)
	}
	if in.ResourceID != nil {
		in, out := &in.ResourceID, &out.ResourceID
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSPolicySpec.
func (in *DNSPolicySpec) DeepCopy() *DNSPolicySpec {
	if in == nil {
		return nil
	}
	out := new(DNSPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSPolicyStatus) DeepCopyInto(out *DNSPolicyStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSPolicyStatus.
func (in *DNSPolicyStatus) DeepCopy() *DNSPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(DNSPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSRecordSet) DeepCopyInto(out *DNSRecordSet) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSRecordSet.
func (in *DNSRecordSet) DeepCopy() *DNSRecordSet {
	if in == nil {
		return nil
	}
	out := new(DNSRecordSet)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSRecordSet) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSRecordSetList) DeepCopyInto(out *DNSRecordSetList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DNSRecordSet, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSRecordSetList.
func (in *DNSRecordSetList) DeepCopy() *DNSRecordSetList {
	if in == nil {
		return nil
	}
	out := new(DNSRecordSetList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DNSRecordSetList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSRecordSetSpec) DeepCopyInto(out *DNSRecordSetSpec) {
	*out = *in
	out.ManagedZoneRef = in.ManagedZoneRef
	if in.RoutingPolicy != nil {
		in, out := &in.RoutingPolicy, &out.RoutingPolicy
		*out = new(RecordsetRoutingPolicy)
		(*in).DeepCopyInto(*out)
	}
	if in.Rrdatas != nil {
		in, out := &in.Rrdatas, &out.Rrdatas
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.RrdatasRefs != nil {
		in, out := &in.RrdatasRefs, &out.RrdatasRefs
		*out = make([]RecordsetRrdatasRefs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Ttl != nil {
		in, out := &in.Ttl, &out.Ttl
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSRecordSetSpec.
func (in *DNSRecordSetSpec) DeepCopy() *DNSRecordSetSpec {
	if in == nil {
		return nil
	}
	out := new(DNSRecordSetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DNSRecordSetStatus) DeepCopyInto(out *DNSRecordSetStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]v1alpha1.Condition, len(*in))
		copy(*out, *in)
	}
	if in.ObservedGeneration != nil {
		in, out := &in.ObservedGeneration, &out.ObservedGeneration
		*out = new(int64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DNSRecordSetStatus.
func (in *DNSRecordSetStatus) DeepCopy() *DNSRecordSetStatus {
	if in == nil {
		return nil
	}
	out := new(DNSRecordSetStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneCloudLoggingConfig) DeepCopyInto(out *ManagedzoneCloudLoggingConfig) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneCloudLoggingConfig.
func (in *ManagedzoneCloudLoggingConfig) DeepCopy() *ManagedzoneCloudLoggingConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneCloudLoggingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneDefaultKeySpecs) DeepCopyInto(out *ManagedzoneDefaultKeySpecs) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.KeyLength != nil {
		in, out := &in.KeyLength, &out.KeyLength
		*out = new(int64)
		**out = **in
	}
	if in.KeyType != nil {
		in, out := &in.KeyType, &out.KeyType
		*out = new(string)
		**out = **in
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneDefaultKeySpecs.
func (in *ManagedzoneDefaultKeySpecs) DeepCopy() *ManagedzoneDefaultKeySpecs {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneDefaultKeySpecs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneDnssecConfig) DeepCopyInto(out *ManagedzoneDnssecConfig) {
	*out = *in
	if in.DefaultKeySpecs != nil {
		in, out := &in.DefaultKeySpecs, &out.DefaultKeySpecs
		*out = make([]ManagedzoneDefaultKeySpecs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.NonExistence != nil {
		in, out := &in.NonExistence, &out.NonExistence
		*out = new(string)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneDnssecConfig.
func (in *ManagedzoneDnssecConfig) DeepCopy() *ManagedzoneDnssecConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneDnssecConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneForwardingConfig) DeepCopyInto(out *ManagedzoneForwardingConfig) {
	*out = *in
	if in.TargetNameServers != nil {
		in, out := &in.TargetNameServers, &out.TargetNameServers
		*out = make([]ManagedzoneTargetNameServers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneForwardingConfig.
func (in *ManagedzoneForwardingConfig) DeepCopy() *ManagedzoneForwardingConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneForwardingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneGkeClusters) DeepCopyInto(out *ManagedzoneGkeClusters) {
	*out = *in
	out.GkeClusterNameRef = in.GkeClusterNameRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneGkeClusters.
func (in *ManagedzoneGkeClusters) DeepCopy() *ManagedzoneGkeClusters {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneGkeClusters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneNamespace) DeepCopyInto(out *ManagedzoneNamespace) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneNamespace.
func (in *ManagedzoneNamespace) DeepCopy() *ManagedzoneNamespace {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneNamespace)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneNetworks) DeepCopyInto(out *ManagedzoneNetworks) {
	*out = *in
	out.NetworkRef = in.NetworkRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneNetworks.
func (in *ManagedzoneNetworks) DeepCopy() *ManagedzoneNetworks {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneNetworks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzonePeeringConfig) DeepCopyInto(out *ManagedzonePeeringConfig) {
	*out = *in
	out.TargetNetwork = in.TargetNetwork
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzonePeeringConfig.
func (in *ManagedzonePeeringConfig) DeepCopy() *ManagedzonePeeringConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzonePeeringConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzonePrivateVisibilityConfig) DeepCopyInto(out *ManagedzonePrivateVisibilityConfig) {
	*out = *in
	if in.GkeClusters != nil {
		in, out := &in.GkeClusters, &out.GkeClusters
		*out = make([]ManagedzoneGkeClusters, len(*in))
		copy(*out, *in)
	}
	if in.Networks != nil {
		in, out := &in.Networks, &out.Networks
		*out = make([]ManagedzoneNetworks, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzonePrivateVisibilityConfig.
func (in *ManagedzonePrivateVisibilityConfig) DeepCopy() *ManagedzonePrivateVisibilityConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzonePrivateVisibilityConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneServiceDirectoryConfig) DeepCopyInto(out *ManagedzoneServiceDirectoryConfig) {
	*out = *in
	out.Namespace = in.Namespace
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneServiceDirectoryConfig.
func (in *ManagedzoneServiceDirectoryConfig) DeepCopy() *ManagedzoneServiceDirectoryConfig {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneServiceDirectoryConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneTargetNameServers) DeepCopyInto(out *ManagedzoneTargetNameServers) {
	*out = *in
	if in.ForwardingPath != nil {
		in, out := &in.ForwardingPath, &out.ForwardingPath
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneTargetNameServers.
func (in *ManagedzoneTargetNameServers) DeepCopy() *ManagedzoneTargetNameServers {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneTargetNameServers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedzoneTargetNetwork) DeepCopyInto(out *ManagedzoneTargetNetwork) {
	*out = *in
	out.NetworkRef = in.NetworkRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedzoneTargetNetwork.
func (in *ManagedzoneTargetNetwork) DeepCopy() *ManagedzoneTargetNetwork {
	if in == nil {
		return nil
	}
	out := new(ManagedzoneTargetNetwork)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyAlternativeNameServerConfig) DeepCopyInto(out *PolicyAlternativeNameServerConfig) {
	*out = *in
	if in.TargetNameServers != nil {
		in, out := &in.TargetNameServers, &out.TargetNameServers
		*out = make([]PolicyTargetNameServers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyAlternativeNameServerConfig.
func (in *PolicyAlternativeNameServerConfig) DeepCopy() *PolicyAlternativeNameServerConfig {
	if in == nil {
		return nil
	}
	out := new(PolicyAlternativeNameServerConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyNetworks) DeepCopyInto(out *PolicyNetworks) {
	*out = *in
	out.NetworkRef = in.NetworkRef
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyNetworks.
func (in *PolicyNetworks) DeepCopy() *PolicyNetworks {
	if in == nil {
		return nil
	}
	out := new(PolicyNetworks)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PolicyTargetNameServers) DeepCopyInto(out *PolicyTargetNameServers) {
	*out = *in
	if in.ForwardingPath != nil {
		in, out := &in.ForwardingPath, &out.ForwardingPath
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PolicyTargetNameServers.
func (in *PolicyTargetNameServers) DeepCopy() *PolicyTargetNameServers {
	if in == nil {
		return nil
	}
	out := new(PolicyTargetNameServers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetBackupGeo) DeepCopyInto(out *RecordsetBackupGeo) {
	*out = *in
	if in.HealthCheckedTargets != nil {
		in, out := &in.HealthCheckedTargets, &out.HealthCheckedTargets
		*out = new(RecordsetHealthCheckedTargets)
		(*in).DeepCopyInto(*out)
	}
	if in.RrdatasRefs != nil {
		in, out := &in.RrdatasRefs, &out.RrdatasRefs
		*out = make([]RecordsetRrdatasRefs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetBackupGeo.
func (in *RecordsetBackupGeo) DeepCopy() *RecordsetBackupGeo {
	if in == nil {
		return nil
	}
	out := new(RecordsetBackupGeo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetGeo) DeepCopyInto(out *RecordsetGeo) {
	*out = *in
	if in.HealthCheckedTargets != nil {
		in, out := &in.HealthCheckedTargets, &out.HealthCheckedTargets
		*out = new(RecordsetHealthCheckedTargets)
		(*in).DeepCopyInto(*out)
	}
	if in.RrdatasRefs != nil {
		in, out := &in.RrdatasRefs, &out.RrdatasRefs
		*out = make([]RecordsetRrdatasRefs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetGeo.
func (in *RecordsetGeo) DeepCopy() *RecordsetGeo {
	if in == nil {
		return nil
	}
	out := new(RecordsetGeo)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetHealthCheckedTargets) DeepCopyInto(out *RecordsetHealthCheckedTargets) {
	*out = *in
	if in.InternalLoadBalancers != nil {
		in, out := &in.InternalLoadBalancers, &out.InternalLoadBalancers
		*out = make([]RecordsetInternalLoadBalancers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetHealthCheckedTargets.
func (in *RecordsetHealthCheckedTargets) DeepCopy() *RecordsetHealthCheckedTargets {
	if in == nil {
		return nil
	}
	out := new(RecordsetHealthCheckedTargets)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetInternalLoadBalancers) DeepCopyInto(out *RecordsetInternalLoadBalancers) {
	*out = *in
	out.IpAddressRef = in.IpAddressRef
	out.NetworkRef = in.NetworkRef
	out.ProjectRef = in.ProjectRef
	if in.RegionRef != nil {
		in, out := &in.RegionRef, &out.RegionRef
		*out = new(v1alpha1.ResourceRef)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetInternalLoadBalancers.
func (in *RecordsetInternalLoadBalancers) DeepCopy() *RecordsetInternalLoadBalancers {
	if in == nil {
		return nil
	}
	out := new(RecordsetInternalLoadBalancers)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetPrimary) DeepCopyInto(out *RecordsetPrimary) {
	*out = *in
	if in.InternalLoadBalancers != nil {
		in, out := &in.InternalLoadBalancers, &out.InternalLoadBalancers
		*out = make([]RecordsetInternalLoadBalancers, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetPrimary.
func (in *RecordsetPrimary) DeepCopy() *RecordsetPrimary {
	if in == nil {
		return nil
	}
	out := new(RecordsetPrimary)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetPrimaryBackup) DeepCopyInto(out *RecordsetPrimaryBackup) {
	*out = *in
	if in.BackupGeo != nil {
		in, out := &in.BackupGeo, &out.BackupGeo
		*out = make([]RecordsetBackupGeo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnableGeoFencingForBackups != nil {
		in, out := &in.EnableGeoFencingForBackups, &out.EnableGeoFencingForBackups
		*out = new(bool)
		**out = **in
	}
	in.Primary.DeepCopyInto(&out.Primary)
	if in.TrickleRatio != nil {
		in, out := &in.TrickleRatio, &out.TrickleRatio
		*out = new(float64)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetPrimaryBackup.
func (in *RecordsetPrimaryBackup) DeepCopy() *RecordsetPrimaryBackup {
	if in == nil {
		return nil
	}
	out := new(RecordsetPrimaryBackup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetRoutingPolicy) DeepCopyInto(out *RecordsetRoutingPolicy) {
	*out = *in
	if in.EnableGeoFencing != nil {
		in, out := &in.EnableGeoFencing, &out.EnableGeoFencing
		*out = new(bool)
		**out = **in
	}
	if in.Geo != nil {
		in, out := &in.Geo, &out.Geo
		*out = make([]RecordsetGeo, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrimaryBackup != nil {
		in, out := &in.PrimaryBackup, &out.PrimaryBackup
		*out = new(RecordsetPrimaryBackup)
		(*in).DeepCopyInto(*out)
	}
	if in.Wrr != nil {
		in, out := &in.Wrr, &out.Wrr
		*out = make([]RecordsetWrr, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetRoutingPolicy.
func (in *RecordsetRoutingPolicy) DeepCopy() *RecordsetRoutingPolicy {
	if in == nil {
		return nil
	}
	out := new(RecordsetRoutingPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetRrdatasRefs) DeepCopyInto(out *RecordsetRrdatasRefs) {
	*out = *in
	if in.External != nil {
		in, out := &in.External, &out.External
		*out = new(string)
		**out = **in
	}
	if in.Kind != nil {
		in, out := &in.Kind, &out.Kind
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetRrdatasRefs.
func (in *RecordsetRrdatasRefs) DeepCopy() *RecordsetRrdatasRefs {
	if in == nil {
		return nil
	}
	out := new(RecordsetRrdatasRefs)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RecordsetWrr) DeepCopyInto(out *RecordsetWrr) {
	*out = *in
	if in.HealthCheckedTargets != nil {
		in, out := &in.HealthCheckedTargets, &out.HealthCheckedTargets
		*out = new(RecordsetHealthCheckedTargets)
		(*in).DeepCopyInto(*out)
	}
	if in.RrdatasRefs != nil {
		in, out := &in.RrdatasRefs, &out.RrdatasRefs
		*out = make([]RecordsetRrdatasRefs, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RecordsetWrr.
func (in *RecordsetWrr) DeepCopy() *RecordsetWrr {
	if in == nil {
		return nil
	}
	out := new(RecordsetWrr)
	in.DeepCopyInto(out)
	return out
}
