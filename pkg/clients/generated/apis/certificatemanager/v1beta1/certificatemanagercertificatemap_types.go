// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type CertificateManagerCertificateMapSpec struct {
	/* A human-readable description of the resource. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`
}

type CertificatemapGclbTargetsStatus struct {
	/* An IP configuration where this Certificate Map is serving. */
	// +optional
	IpConfigs []CertificatemapIpConfigsStatus `json:"ipConfigs,omitempty"`

	/* Proxy name must be in the format projects/* /locations/* /targetHttpsProxies/*.
	This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	'targetSslProxy' may be set. */
	// +optional
	TargetHttpsProxy *string `json:"targetHttpsProxy,omitempty"`

	/* Proxy name must be in the format projects/* /locations/* /targetSslProxies/*.
	This field is part of a union field 'target_proxy': Only one of 'targetHttpsProxy' or
	'targetSslProxy' may be set. */
	// +optional
	TargetSslProxy *string `json:"targetSslProxy,omitempty"`
}

type CertificatemapIpConfigsStatus struct {
	/* An external IP address. */
	// +optional
	IpAddress *string `json:"ipAddress,omitempty"`

	/* A list of ports. */
	// +optional
	Ports []int64 `json:"ports,omitempty"`
}

type CertificateManagerCertificateMapStatus struct {
	/* Conditions represent the latest available observations of the
	   CertificateManagerCertificateMap's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Creation timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format,
	accurate to nanoseconds with up to nine fractional digits.
	Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* A list of target proxies that use this Certificate Map. */
	// +optional
	GclbTargets []CertificatemapGclbTargetsStatus `json:"gclbTargets,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Update timestamp of a Certificate Map. Timestamp is in RFC3339 UTC "Zulu" format,
	accurate to nanoseconds with up to nine fractional digits.
	Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpcertificatemanagercertificatemap;gcpcertificatemanagercertificatemaps
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// CertificateManagerCertificateMap is the Schema for the certificatemanager API
// +k8s:openapi-gen=true
type CertificateManagerCertificateMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CertificateManagerCertificateMapSpec   `json:"spec,omitempty"`
	Status CertificateManagerCertificateMapStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// CertificateManagerCertificateMapList contains a list of CertificateManagerCertificateMap
type CertificateManagerCertificateMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateManagerCertificateMap `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CertificateManagerCertificateMap{}, &CertificateManagerCertificateMapList{})
}
