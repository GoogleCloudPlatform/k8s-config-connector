// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type DatabaseEncryptionConfig struct {
	/* Fully qualified name of the KMS key to use to encrypt this database. This key
	must exist in the same location as the Spanner Database. */
	KmsKeyRef v1alpha1.ResourceRef `json:"kmsKeyRef"`
}

type SpannerDatabaseSpec struct {
	/* Immutable. The dialect of the Cloud Spanner Database.
	If it is not provided, "GOOGLE_STANDARD_SQL" will be used. Possible values: ["GOOGLE_STANDARD_SQL", "POSTGRESQL"]. */
	// +optional
	DatabaseDialect *string `json:"databaseDialect,omitempty"`

	/* An optional list of DDL statements to run inside the newly created
	database. Statements can create tables, indexes, etc. These statements
	execute atomically with the creation of the database: if there is an
	error in any statement, the database is not created. */
	// +optional
	Ddl []string `json:"ddl,omitempty"`

	// +optional
	EnableDropProtection *bool `json:"enableDropProtection,omitempty"`

	/* Immutable. Encryption configuration for the database. */
	// +optional
	EncryptionConfig *DatabaseEncryptionConfig `json:"encryptionConfig,omitempty"`

	/* The instance to create the database on. */
	InstanceRef v1alpha1.ResourceRef `json:"instanceRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* The retention period for the database. The retention period must be between 1 hour
	and 7 days, and can be specified in days, hours, minutes, or seconds. For example,
	the values 1d, 24h, 1440m, and 86400s are equivalent. Default value is 1h.
	If this property is used, you must avoid adding new DDL statements to 'ddl' that
	update the database's version_retention_period. */
	// +optional
	VersionRetentionPeriod *string `json:"versionRetentionPeriod,omitempty"`
}

type SpannerDatabaseStatus struct {
	/* Conditions represent the latest available observations of the
	   SpannerDatabase's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* An explanation of the status of the database. */
	// +optional
	State *string `json:"state,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpspannerdatabase;gcpspannerdatabases
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// SpannerDatabase is the Schema for the spanner API
// +k8s:openapi-gen=true
type SpannerDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SpannerDatabaseSpec   `json:"spec,omitempty"`
	Status SpannerDatabaseStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SpannerDatabaseList contains a list of SpannerDatabase
type SpannerDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpannerDatabase `json:"items"`
}

func init() {
	SchemeBuilder.Register(&SpannerDatabase{}, &SpannerDatabaseList{})
}
