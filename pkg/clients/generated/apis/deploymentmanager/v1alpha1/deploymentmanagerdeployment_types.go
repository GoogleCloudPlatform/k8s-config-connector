// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type DeploymentConfig struct {
	/* The full YAML contents of your configuration file. */
	Content string `json:"content"`
}

type DeploymentImports struct {
	/* The full contents of the template that you want to import. */
	// +optional
	Content *string `json:"content,omitempty"`

	/* The name of the template to import, as declared in the YAML
	configuration. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type DeploymentTarget struct {
	/* The root configuration file to use for this deployment. */
	Config DeploymentConfig `json:"config"`

	/* Specifies import files for this configuration. This can be
	used to import templates or other files. For example, you might
	import a text file in order to use the file in a template. */
	// +optional
	Imports []DeploymentImports `json:"imports,omitempty"`
}

type DeploymentManagerDeploymentSpec struct {
	/* Immutable. Set the policy to use for creating new resources. Only used on
	create and update. Valid values are 'CREATE_OR_ACQUIRE' (default) or
	'ACQUIRE'. If set to 'ACQUIRE' and resources do not already exist,
	the deployment will fail. Note that updating this field does not
	actually affect the deployment, just how it is updated. Default value: "CREATE_OR_ACQUIRE" Possible values: ["ACQUIRE", "CREATE_OR_ACQUIRE"]. */
	// +optional
	CreatePolicy *string `json:"createPolicy,omitempty"`

	/* Immutable. Set the policy to use for deleting new resources on update/delete.
	Valid values are 'DELETE' (default) or 'ABANDON'. If 'DELETE',
	resource is deleted after removal from Deployment Manager. If
	'ABANDON', the resource is only removed from Deployment Manager
	and is not actually deleted. Note that updating this field does not
	actually change the deployment, just how it is updated. Default value: "DELETE" Possible values: ["ABANDON", "DELETE"]. */
	// +optional
	DeletePolicy *string `json:"deletePolicy,omitempty"`

	/* Optional user-provided description of deployment. */
	// +optional
	Description *string `json:"description,omitempty"`

	// +optional
	Preview *bool `json:"preview,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Parameters that define your deployment, including the deployment
	configuration and relevant templates. */
	Target DeploymentTarget `json:"target"`
}

type DeploymentManagerDeploymentStatus struct {
	/* Conditions represent the latest available observations of the
	   DeploymentManagerDeployment's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Unique identifier for deployment. Output only. */
	// +optional
	DeploymentId *string `json:"deploymentId,omitempty"`

	/* Output only. URL of the manifest representing the last manifest that
	was successfully deployed. */
	// +optional
	Manifest *string `json:"manifest,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Output only. Server defined URL for the resource. */
	// +optional
	SelfLink *string `json:"selfLink,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdeploymentmanagerdeployment;gcpdeploymentmanagerdeployments
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DeploymentManagerDeployment is the Schema for the deploymentmanager API
// +k8s:openapi-gen=true
type DeploymentManagerDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DeploymentManagerDeploymentSpec   `json:"spec,omitempty"`
	Status DeploymentManagerDeploymentStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DeploymentManagerDeploymentList contains a list of DeploymentManagerDeployment
type DeploymentManagerDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeploymentManagerDeployment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DeploymentManagerDeployment{}, &DeploymentManagerDeploymentList{})
}
