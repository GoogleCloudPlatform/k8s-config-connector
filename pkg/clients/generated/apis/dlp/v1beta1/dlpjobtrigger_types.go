// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type JobtriggerActions struct {
	/* Enable email notification for project owners and editors on job's completion/failure. */
	// +optional
	JobNotificationEmails *JobtriggerJobNotificationEmails `json:"jobNotificationEmails,omitempty"`

	/* Publish a notification to a pubsub topic. */
	// +optional
	PubSub *JobtriggerPubSub `json:"pubSub,omitempty"`

	/* Publish findings to Cloud Datahub. */
	// +optional
	PublishFindingsToCloudDataCatalog *JobtriggerPublishFindingsToCloudDataCatalog `json:"publishFindingsToCloudDataCatalog,omitempty"`

	/* Publish summary to Cloud Security Command Center (Alpha). */
	// +optional
	PublishSummaryToCscc *JobtriggerPublishSummaryToCscc `json:"publishSummaryToCscc,omitempty"`

	/* Enable Stackdriver metric dlp.googleapis.com/finding_count. */
	// +optional
	PublishToStackdriver *JobtriggerPublishToStackdriver `json:"publishToStackdriver,omitempty"`

	/* Save resulting findings in a provided location. */
	// +optional
	SaveFindings *JobtriggerSaveFindings `json:"saveFindings,omitempty"`
}

type JobtriggerBigQueryOptions struct {
	/* References to fields excluded from scanning. This allows you to skip inspection of entire columns which you know have no findings. */
	// +optional
	ExcludedFields []JobtriggerExcludedFields `json:"excludedFields,omitempty"`

	/* Table fields that may uniquely identify a row within the table. When `actions.saveFindings.outputConfig.table` is specified, the values of columns specified here are available in the output table under `location.content_locations.record_location.record_key.id_values`. Nested fields such as `person.birthdate.year` are allowed. */
	// +optional
	IdentifyingFields []JobtriggerIdentifyingFields `json:"identifyingFields,omitempty"`

	/* Limit scanning only to these fields. */
	// +optional
	IncludedFields []JobtriggerIncludedFields `json:"includedFields,omitempty"`

	/* Max number of rows to scan. If the table has more rows than this value, the rest of the rows are omitted. If not set, or if set to 0, all rows will be scanned. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. */
	// +optional
	RowsLimit *int64 `json:"rowsLimit,omitempty"`

	/* Max percentage of rows to scan. The rest are omitted. The number of rows scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of rows_limit and rows_limit_percent can be specified. Cannot be used in conjunction with TimespanConfig. */
	// +optional
	RowsLimitPercent *int64 `json:"rowsLimitPercent,omitempty"`

	/* Possible values: SAMPLE_METHOD_UNSPECIFIED, TOP, RANDOM_START */
	// +optional
	SampleMethod *string `json:"sampleMethod,omitempty"`

	/* Complete BigQuery table reference. */
	TableReference JobtriggerTableReference `json:"tableReference"`
}

type JobtriggerCloudStorageOptions struct {
	/* Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested. */
	// +optional
	BytesLimitPerFile *int64 `json:"bytesLimitPerFile,omitempty"`

	/* Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested. */
	// +optional
	BytesLimitPerFilePercent *int64 `json:"bytesLimitPerFilePercent,omitempty"`

	/* The set of one or more files to scan. */
	// +optional
	FileSet *JobtriggerFileSet `json:"fileSet,omitempty"`

	/* List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'. */
	// +optional
	FileTypes []string `json:"fileTypes,omitempty"`

	/* Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. */
	// +optional
	FilesLimitPercent *int64 `json:"filesLimitPercent,omitempty"`

	/* Possible values: SAMPLE_METHOD_UNSPECIFIED, TOP, RANDOM_START */
	// +optional
	SampleMethod *string `json:"sampleMethod,omitempty"`
}

type JobtriggerCloudStoragePath struct {
	/* A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt */
	// +optional
	Path *string `json:"path,omitempty"`
}

type JobtriggerCustomInfoTypes struct {
	/* Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType. */
	// +optional
	DetectionRules []JobtriggerDetectionRules `json:"detectionRules,omitempty"`

	/* A list of phrases to detect as a CustomInfoType. */
	// +optional
	Dictionary *JobtriggerDictionary `json:"dictionary,omitempty"`

	/* If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching. Possible values: EXCLUSION_TYPE_UNSPECIFIED, EXCLUSION_TYPE_EXCLUDE */
	// +optional
	ExclusionType *string `json:"exclusionType,omitempty"`

	/* CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type. */
	// +optional
	InfoType *JobtriggerInfoType `json:"infoType,omitempty"`

	/* Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY */
	// +optional
	Likelihood *string `json:"likelihood,omitempty"`

	/* Regular expression based CustomInfoType. */
	// +optional
	Regex *JobtriggerRegex `json:"regex,omitempty"`

	/* Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`. */
	// +optional
	StoredType *JobtriggerStoredType `json:"storedType,omitempty"`

	/* Message for detecting output from deidentification transformations that support reversing. */
	// +optional
	SurrogateType *JobtriggerSurrogateType `json:"surrogateType,omitempty"`
}

type JobtriggerDatastoreOptions struct {
	/* The kind to process. */
	// +optional
	Kind *JobtriggerKind `json:"kind,omitempty"`

	/* A partition ID identifies a grouping of entities. The grouping is always by project namespace ID may be empty. */
	// +optional
	PartitionId *JobtriggerPartitionId `json:"partitionId,omitempty"`
}

type JobtriggerDetectionRules struct {
	/* Hotword-based detection rule. */
	// +optional
	HotwordRule *JobtriggerHotwordRule `json:"hotwordRule,omitempty"`
}

type JobtriggerDictionary struct {
	/* Newline-delimited file of words in Cloud Storage. Only a single file is accepted. */
	// +optional
	CloudStoragePath *JobtriggerCloudStoragePath `json:"cloudStoragePath,omitempty"`

	/* List of words or phrases to search for. */
	// +optional
	WordList *JobtriggerWordList `json:"wordList,omitempty"`
}

type JobtriggerDlpStorage struct {
}

type JobtriggerExcludeInfoTypes struct {
	/* InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and `exclusion_rule` containing `exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address. */
	// +optional
	InfoTypes []JobtriggerInfoTypes `json:"infoTypes,omitempty"`
}

type JobtriggerExcludedFields struct {
	/* Name describing the field. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type JobtriggerExclusionRule struct {
	/* Dictionary which defines the rule. */
	// +optional
	Dictionary *JobtriggerDictionary `json:"dictionary,omitempty"`

	/* Set of infoTypes for which findings would affect this rule. */
	// +optional
	ExcludeInfoTypes *JobtriggerExcludeInfoTypes `json:"excludeInfoTypes,omitempty"`

	/* How the rule is applied, see MatchingType documentation for details. Possible values: MATCHING_TYPE_UNSPECIFIED, MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH */
	// +optional
	MatchingType *string `json:"matchingType,omitempty"`

	/* Regular expression which defines the rule. */
	// +optional
	Regex *JobtriggerRegex `json:"regex,omitempty"`
}

type JobtriggerFileSet struct {
	/* The regex-filtered set of files to scan. Exactly one of `url` or `regex_file_set` must be set. */
	// +optional
	RegexFileSet *JobtriggerRegexFileSet `json:"regexFileSet,omitempty"`

	/* The Cloud Storage url of the file(s) to scan, in the format `gs:///`. Trailing wildcard in the path is allowed. If the url ends in a trailing slash, the bucket or directory represented by the url will be scanned non-recursively (content in sub-directories will not be scanned). This means that `gs://mybucket/` is equivalent to `gs://mybucket/*`, and `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/*`. Exactly one of `url` or `regex_file_set` must be set. */
	// +optional
	Url *string `json:"url,omitempty"`
}

type JobtriggerHotwordRegex struct {
	/* The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included. */
	// +optional
	GroupIndexes []int64 `json:"groupIndexes,omitempty"`

	/* Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub. */
	// +optional
	Pattern *string `json:"pattern,omitempty"`
}

type JobtriggerHotwordRule struct {
	/* Regular expression pattern defining what qualifies as a hotword. */
	// +optional
	HotwordRegex *JobtriggerHotwordRegex `json:"hotwordRegex,omitempty"`

	/* Likelihood adjustment to apply to all matching findings. */
	// +optional
	LikelihoodAdjustment *JobtriggerLikelihoodAdjustment `json:"likelihoodAdjustment,omitempty"`

	/* Proximity of the finding within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be used to match substrings of the finding itself. For example, the certainty of a phone number regex "(d{3}) d{3}-d{4}" could be adjusted upwards if the area code is known to be the local area code of a company office using the hotword regex "(xxx)", where "xxx" is the area code in question. */
	// +optional
	Proximity *JobtriggerProximity `json:"proximity,omitempty"`
}

type JobtriggerHybridOptions struct {
	/* A short description of where the data is coming from. Will be stored once in the job. 256 max length. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* To organize findings, these labels will be added to each finding. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `"environment" : "production"` * `"pipeline" : "etl"` */
	// +optional
	Labels map[string]string `json:"labels,omitempty"`

	/* These are labels that each inspection request must include within their 'finding_labels' map. Request may contain others, but any missing one of these will be rejected. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required. */
	// +optional
	RequiredFindingLabelKeys []string `json:"requiredFindingLabelKeys,omitempty"`

	/* If the container is a table, additional information to make findings meaningful such as the columns that are primary keys. */
	// +optional
	TableOptions *JobtriggerTableOptions `json:"tableOptions,omitempty"`
}

type JobtriggerIdentifyingFields struct {
	/* Name describing the field. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type JobtriggerIncludedFields struct {
	/* Name describing the field. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type JobtriggerInfoType struct {
	/* Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Optional version name for this InfoType. */
	// +optional
	Version *string `json:"version,omitempty"`
}

type JobtriggerInfoTypes struct {
	/* Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`. */
	// +optional
	Name *string `json:"name,omitempty"`

	/* Optional version name for this InfoType. */
	// +optional
	Version *string `json:"version,omitempty"`
}

type JobtriggerInspectConfig struct {
	/* CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more. */
	// +optional
	CustomInfoTypes []JobtriggerCustomInfoTypes `json:"customInfoTypes,omitempty"`

	/* When true, excludes type information of the findings. This is not used for data profiling. */
	// +optional
	ExcludeInfoTypes *bool `json:"excludeInfoTypes,omitempty"`

	/* When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling. */
	// +optional
	IncludeQuote *bool `json:"includeQuote,omitempty"`

	/* Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time. */
	// +optional
	InfoTypes []JobtriggerInfoTypes `json:"infoTypes,omitempty"`

	/* Configuration to control the number of findings returned. This is not used for data profiling. */
	// +optional
	Limits *JobtriggerLimits `json:"limits,omitempty"`

	/* Only returns findings equal or above this threshold. The default is POSSIBLE. See https://cloud.google.com/dlp/docs/likelihood to learn more. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY */
	// +optional
	MinLikelihood *string `json:"minLikelihood,omitempty"`

	/* Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type. */
	// +optional
	RuleSet []JobtriggerRuleSet `json:"ruleSet,omitempty"`
}

type JobtriggerInspectJob struct {
	/* Actions to execute at the completion of the job. */
	// +optional
	Actions []JobtriggerActions `json:"actions,omitempty"`

	/* How and what to scan for. */
	// +optional
	InspectConfig *JobtriggerInspectConfig `json:"inspectConfig,omitempty"`

	// +optional
	InspectTemplateRef *v1alpha1.ResourceRef `json:"inspectTemplateRef,omitempty"`

	/* The data to scan. */
	StorageConfig JobtriggerStorageConfig `json:"storageConfig"`
}

type JobtriggerJobNotificationEmails struct {
}

type JobtriggerKind struct {
	/* The name of the kind. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type JobtriggerLikelihoodAdjustment struct {
	/* Set the likelihood of a finding to a fixed value. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY */
	// +optional
	FixedLikelihood *string `json:"fixedLikelihood,omitempty"`

	/* Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`. */
	// +optional
	RelativeLikelihood *int64 `json:"relativeLikelihood,omitempty"`
}

type JobtriggerLimits struct {
	/* Configuration of findings limit given for specified infoTypes. */
	// +optional
	MaxFindingsPerInfoType []JobtriggerMaxFindingsPerInfoType `json:"maxFindingsPerInfoType,omitempty"`

	/* Max number of findings that will be returned for each item scanned. When set within `InspectJobConfig`, the maximum returned is 2000 regardless if this is set higher. When set within `InspectContentRequest`, this field is ignored. */
	// +optional
	MaxFindingsPerItem *int64 `json:"maxFindingsPerItem,omitempty"`

	/* Max number of findings that will be returned per request/job. When set within `InspectContentRequest`, the maximum returned is 2000 regardless if this is set higher. */
	// +optional
	MaxFindingsPerRequest *int64 `json:"maxFindingsPerRequest,omitempty"`
}

type JobtriggerManual struct {
}

type JobtriggerMaxFindingsPerInfoType struct {
	/* Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit. */
	// +optional
	InfoType *JobtriggerInfoType `json:"infoType,omitempty"`

	/* Max findings limit for the given infoType. */
	// +optional
	MaxFindings *int64 `json:"maxFindings,omitempty"`
}

type JobtriggerOutputConfig struct {
	/* Store findings directly to DLP. If neither this or bigquery is chosen only summary stats of total infotype count will be stored. Quotes will not be stored to dlp findings. If quotes are needed, store to BigQuery. Currently only for inspect jobs. */
	// +optional
	DlpStorage *JobtriggerDlpStorage `json:"dlpStorage,omitempty"`

	/* Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage. Possible values: OUTPUT_SCHEMA_UNSPECIFIED, BASIC_COLUMNS, GCS_COLUMNS, DATASTORE_COLUMNS, BIG_QUERY_COLUMNS, ALL_COLUMNS */
	// +optional
	OutputSchema *string `json:"outputSchema,omitempty"`

	/* Store findings in an existing table or a new table in an existing dataset. If table_id is not set a new one will be generated for you with the following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific timezone will be used for generating the date details. For Inspect, each column in an existing output table must have the same name, type, and mode of a field in the `Finding` object. For Risk, an existing output table should be the output of a previous Risk analysis job run on the same source table, with the same privacy metric and quasi-identifiers. Risk jobs that analyze the same table but compute a different privacy metric, or use different sets of quasi-identifiers, cannot store their results in the same table. */
	// +optional
	Table *JobtriggerTable `json:"table,omitempty"`
}

type JobtriggerPartitionId struct {
	/* If not empty, the ID of the namespace to which the entities belong. */
	// +optional
	NamespaceId *string `json:"namespaceId,omitempty"`

	// +optional
	ProjectRef *v1alpha1.ResourceRef `json:"projectRef,omitempty"`
}

type JobtriggerProximity struct {
	/* Number of characters after the finding to consider. */
	// +optional
	WindowAfter *int64 `json:"windowAfter,omitempty"`

	/* Number of characters before the finding to consider. */
	// +optional
	WindowBefore *int64 `json:"windowBefore,omitempty"`
}

type JobtriggerPubSub struct {
	// +optional
	TopicRef *v1alpha1.ResourceRef `json:"topicRef,omitempty"`
}

type JobtriggerPublishFindingsToCloudDataCatalog struct {
}

type JobtriggerPublishSummaryToCscc struct {
}

type JobtriggerPublishToStackdriver struct {
}

type JobtriggerRegex struct {
	/* The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included. */
	// +optional
	GroupIndexes []int64 `json:"groupIndexes,omitempty"`

	/* Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub. */
	// +optional
	Pattern *string `json:"pattern,omitempty"`
}

type JobtriggerRegexFileSet struct {
	BucketRef v1alpha1.ResourceRef `json:"bucketRef"`

	/* A list of regular expressions matching file paths to exclude. All files in the bucket that match at least one of these regular expressions will be excluded from the scan. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub. */
	// +optional
	ExcludeRegex []string `json:"excludeRegex,omitempty"`

	/* A list of regular expressions matching file paths to include. All files in the bucket that match at least one of these regular expressions will be included in the set of files, except for those that also match an item in `exclude_regex`. Leaving this field empty will match all files by default (this is equivalent to including `.*` in the list). Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub. */
	// +optional
	IncludeRegex []string `json:"includeRegex,omitempty"`
}

type JobtriggerRuleSet struct {
	/* List of infoTypes this rule set is applied to. */
	// +optional
	InfoTypes []JobtriggerInfoTypes `json:"infoTypes,omitempty"`

	/* Set of rules to be applied to infoTypes. The rules are applied in order. */
	// +optional
	Rules []JobtriggerRules `json:"rules,omitempty"`
}

type JobtriggerRules struct {
	/* Exclusion rule. */
	// +optional
	ExclusionRule *JobtriggerExclusionRule `json:"exclusionRule,omitempty"`

	// +optional
	HotwordRule *JobtriggerHotwordRule `json:"hotwordRule,omitempty"`
}

type JobtriggerSaveFindings struct {
	/* Location to store findings outside of DLP. */
	// +optional
	OutputConfig *JobtriggerOutputConfig `json:"outputConfig,omitempty"`
}

type JobtriggerSchedule struct {
	/* With this option a job is started a regular periodic basis. For example: every day (86400 seconds). A scheduled start time will be skipped if the previous execution has not ended when its scheduled time occurs. This value must be set to a time duration greater than or equal to 1 day and can be no longer than 60 days. */
	// +optional
	RecurrencePeriodDuration *string `json:"recurrencePeriodDuration,omitempty"`
}

type JobtriggerStorageConfig struct {
	/* BigQuery options. */
	// +optional
	BigQueryOptions *JobtriggerBigQueryOptions `json:"bigQueryOptions,omitempty"`

	/* Google Cloud Storage options. */
	// +optional
	CloudStorageOptions *JobtriggerCloudStorageOptions `json:"cloudStorageOptions,omitempty"`

	/* Google Cloud Datastore options. */
	// +optional
	DatastoreOptions *JobtriggerDatastoreOptions `json:"datastoreOptions,omitempty"`

	/* Hybrid inspection options. */
	// +optional
	HybridOptions *JobtriggerHybridOptions `json:"hybridOptions,omitempty"`

	// +optional
	TimespanConfig *JobtriggerTimespanConfig `json:"timespanConfig,omitempty"`
}

type JobtriggerStoredType struct {
	/* Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	// +optional
	NameRef *v1alpha1.ResourceRef `json:"nameRef,omitempty"`
}

type JobtriggerSurrogateType struct {
}

type JobtriggerTable struct {
	// +optional
	DatasetRef *v1alpha1.ResourceRef `json:"datasetRef,omitempty"`

	// +optional
	ProjectRef *v1alpha1.ResourceRef `json:"projectRef,omitempty"`

	// +optional
	TableRef *v1alpha1.ResourceRef `json:"tableRef,omitempty"`
}

type JobtriggerTableOptions struct {
	/* The columns that are the primary keys for table objects included in ContentItem. A copy of this cell's value will stored alongside alongside each finding so that the finding can be traced to the specific row it came from. No more than 3 may be provided. */
	// +optional
	IdentifyingFields []JobtriggerIdentifyingFields `json:"identifyingFields,omitempty"`
}

type JobtriggerTableReference struct {
	// +optional
	DatasetRef *v1alpha1.ResourceRef `json:"datasetRef,omitempty"`

	// +optional
	ProjectRef *v1alpha1.ResourceRef `json:"projectRef,omitempty"`

	// +optional
	TableRef *v1alpha1.ResourceRef `json:"tableRef,omitempty"`
}

type JobtriggerTimespanConfig struct {
	/* When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger. */
	// +optional
	EnableAutoPopulationOfTimespanConfig *bool `json:"enableAutoPopulationOfTimespanConfig,omitempty"`

	/* Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied. */
	// +optional
	EndTime *string `json:"endTime,omitempty"`

	/* Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied. */
	// +optional
	StartTime *string `json:"startTime,omitempty"`

	/* Specification of the field containing the timestamp of scanned items. Used for data sources like Datastore and BigQuery. For BigQuery: If this value is not specified and the table was modified between the given start and end times, the entire table will be scanned. If this value is specified, then rows are filtered based on the given start and end times. Rows with a `NULL` value in the provided BigQuery column are skipped. Valid data types of the provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and `DATETIME`. For Datastore: If this value is specified, then entities are filtered based on the given start and end times. If an entity does not contain the provided timestamp property or contains empty or invalid values, then it is included. Valid data types of the provided timestamp property are: `TIMESTAMP`. */
	// +optional
	TimestampField *JobtriggerTimestampField `json:"timestampField,omitempty"`
}

type JobtriggerTimestampField struct {
	/* Name describing the field. */
	// +optional
	Name *string `json:"name,omitempty"`
}

type JobtriggerTriggers struct {
	/* For use with hybrid jobs. Jobs must be manually created and finished. */
	// +optional
	Manual *JobtriggerManual `json:"manual,omitempty"`

	/* Create a job on a repeating basis based on the elapse of time. */
	// +optional
	Schedule *JobtriggerSchedule `json:"schedule,omitempty"`
}

type JobtriggerWordList struct {
	/* Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required] */
	// +optional
	Words []string `json:"words,omitempty"`
}

type DLPJobTriggerSpec struct {
	/* User provided description (max 256 chars) */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Display name (max 100 chars) */
	// +optional
	DisplayName *string `json:"displayName,omitempty"`

	/* For inspect jobs, a snapshot of the configuration. */
	InspectJob JobtriggerInspectJob `json:"inspectJob"`

	/* Immutable. The location of the resource */
	// +optional
	Location *string `json:"location,omitempty"`

	/* Immutable. The Project that this resource belongs to. Only one of [projectRef] may be specified. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. Required. A status for this trigger. Possible values: STATUS_UNSPECIFIED, HEALTHY, PAUSED, CANCELLED */
	Status string `json:"status"`

	/* A list of triggers which will be OR'ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object. */
	Triggers []JobtriggerTriggers `json:"triggers"`
}

type JobtriggerDetailsStatus struct {
	/* A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one "/" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading "." is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a google.protobuf.Type value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the URL, or have them precompiled into a binary to avoid any lookup. Therefore, binary compatibility needs to be preserved on changes to types. (Use versioned type names to manage breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics. */
	// +optional
	TypeUrl *string `json:"typeUrl,omitempty"`

	/* Must be a valid serialized protocol buffer of the above specified type. */
	// +optional
	Value *string `json:"value,omitempty"`
}

type JobtriggerErrorsStatus struct {
	/* Detailed error codes and messages. */
	// +optional
	Details *JobtriggerDetailsStatus `json:"details,omitempty"`

	/* The times the error occurred. */
	// +optional
	Timestamps []string `json:"timestamps,omitempty"`
}

type DLPJobTriggerStatus struct {
	/* Conditions represent the latest available observations of the
	   DLPJobTrigger's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Output only. The creation timestamp of a triggeredJob. */
	// +optional
	CreateTime *string `json:"createTime,omitempty"`

	/* Output only. A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared. */
	// +optional
	Errors []JobtriggerErrorsStatus `json:"errors,omitempty"`

	/* Output only. The timestamp of the last time this trigger executed. */
	// +optional
	LastRunTime *string `json:"lastRunTime,omitempty"`

	/* Output only. The geographic location where this resource is stored. */
	// +optional
	LocationId *string `json:"locationId,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* Output only. The last update timestamp of a triggeredJob. */
	// +optional
	UpdateTime *string `json:"updateTime,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpdlpjobtrigger;gcpdlpjobtriggers
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/dcl2crd=true";"cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// DLPJobTrigger is the Schema for the dlp API
// +k8s:openapi-gen=true
type DLPJobTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DLPJobTriggerSpec   `json:"spec,omitempty"`
	Status DLPJobTriggerStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// DLPJobTriggerList contains a list of DLPJobTrigger
type DLPJobTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DLPJobTrigger `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DLPJobTrigger{}, &DLPJobTriggerList{})
}
