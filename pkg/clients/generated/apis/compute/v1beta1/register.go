// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

// Package v1beta1 contains API Schema definitions for the compute v1beta1 API group.
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen=package,register
// +k8s:conversion-gen=github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/pkg/apis/compute
// +k8s:defaulter-gen=TypeMeta
// +groupName=compute.cnrm.cloud.google.com
package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	// SchemeGroupVersion is the group version used to register these objects.
	SchemeGroupVersion = schema.GroupVersion{Group: "compute.cnrm.cloud.google.com", Version: "v1beta1"}

	// SchemeBuilder is used to add go types to the GroupVersionKind scheme.
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)

	// AddToScheme is a global function that registers this API group & version to a scheme
	localSchemeBuilder = &SchemeBuilder
	AddToScheme        = localSchemeBuilder.AddToScheme

	ComputeAddressGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeAddress",
	}

	ComputeBackendBucketGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeBackendBucket",
	}

	ComputeBackendServiceGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeBackendService",
	}

	ComputeDiskGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeDisk",
	}

	ComputeExternalVPNGatewayGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeExternalVPNGateway",
	}

	ComputeFirewallGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeFirewall",
	}

	ComputeFirewallPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeFirewallPolicy",
	}

	ComputeFirewallPolicyAssociationGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeFirewallPolicyAssociation",
	}

	ComputeFirewallPolicyRuleGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeFirewallPolicyRule",
	}

	ComputeForwardingRuleGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeForwardingRule",
	}

	ComputeHTTPHealthCheckGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeHTTPHealthCheck",
	}

	ComputeHTTPSHealthCheckGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeHTTPSHealthCheck",
	}

	ComputeHealthCheckGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeHealthCheck",
	}

	ComputeImageGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeImage",
	}

	ComputeInstanceGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInstance",
	}

	ComputeInstanceGroupGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInstanceGroup",
	}

	ComputeInstanceGroupManagerGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInstanceGroupManager",
	}

	ComputeInstanceTemplateGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInstanceTemplate",
	}

	ComputeInterconnectAttachmentGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInterconnectAttachment",
	}

	ComputeNetworkGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNetwork",
	}

	ComputeNetworkEndpointGroupGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNetworkEndpointGroup",
	}

	ComputeNetworkFirewallPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    reflect.TypeOf(ComputeNetworkFirewallPolicy{}).Name(),
	}

	ComputeNetworkFirewallPolicyAssociationGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    reflect.TypeOf(ComputeNetworkFirewallPolicyAssociation{}).Name(),
	}

	ComputeNetworkPeeringGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNetworkPeering",
	}

	ComputeNodeGroupGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNodeGroup",
	}

	ComputeNodeTemplateGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNodeTemplate",
	}

	ComputePacketMirroringGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputePacketMirroring",
	}

	ComputeProjectMetadataGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeProjectMetadata",
	}

	ComputeRegionNetworkEndpointGroupGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRegionNetworkEndpointGroup",
	}

	ComputeReservationGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeReservation",
	}

	ComputeResourcePolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeResourcePolicy",
	}

	ComputeRouteGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRoute",
	}

	ComputeRouterGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRouter",
	}

	ComputeRouterInterfaceGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRouterInterface",
	}

	ComputeRouterNATGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRouterNAT",
	}

	ComputeRouterPeerGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRouterPeer",
	}

	ComputeSSLCertificateGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSSLCertificate",
	}

	ComputeSSLPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSSLPolicy",
	}

	ComputeSecurityPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSecurityPolicy",
	}

	ComputeServiceAttachmentGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeServiceAttachment",
	}

	ComputeSharedVPCHostProjectGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSharedVPCHostProject",
	}

	ComputeSharedVPCServiceProjectGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSharedVPCServiceProject",
	}

	ComputeSnapshotGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSnapshot",
	}

	ComputeSubnetworkGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeSubnetwork",
	}

	ComputeTargetGRPCProxyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetGRPCProxy",
	}

	ComputeTargetHTTPProxyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetHTTPProxy",
	}

	ComputeTargetHTTPSProxyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetHTTPSProxy",
	}

	ComputeTargetInstanceGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetInstance",
	}

	ComputeTargetPoolGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetPool",
	}

	ComputeTargetSSLProxyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetSSLProxy",
	}

	ComputeTargetTCPProxyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetTCPProxy",
	}

	ComputeTargetVPNGatewayGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeTargetVPNGateway",
	}

	ComputeURLMapGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeURLMap",
	}

	ComputeVPNGatewayGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeVPNGateway",
	}

	ComputeVPNTunnelGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeVPNTunnel",
	}

	computeAPIVersion = SchemeGroupVersion.String()
)

// Adds the list of known types to the given scheme.
func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&ComputeAddress{},
		&ComputeAddressList{},
		&ComputeBackendBucket{},
		&ComputeBackendBucketList{},
		&ComputeBackendService{},
		&ComputeBackendServiceList{},
		&ComputeDisk{},
		&ComputeDiskList{},
		&ComputeExternalVPNGateway{},
		&ComputeExternalVPNGatewayList{},
		&ComputeFirewall{},
		&ComputeFirewallList{},
		&ComputeFirewallPolicy{},
		&ComputeFirewallPolicyList{},
		&ComputeFirewallPolicyAssociation{},
		&ComputeFirewallPolicyAssociationList{},
		&ComputeFirewallPolicyRule{},
		&ComputeFirewallPolicyRuleList{},
		&ComputeForwardingRule{},
		&ComputeForwardingRuleList{},
		&ComputeHTTPHealthCheck{},
		&ComputeHTTPHealthCheckList{},
		&ComputeHTTPSHealthCheck{},
		&ComputeHTTPSHealthCheckList{},
		&ComputeHealthCheck{},
		&ComputeHealthCheckList{},
		&ComputeImage{},
		&ComputeImageList{},
		&ComputeInstance{},
		&ComputeInstanceList{},
		&ComputeInstanceGroup{},
		&ComputeInstanceGroupList{},
		&ComputeInstanceGroupManager{},
		&ComputeInstanceGroupManagerList{},
		&ComputeInstanceTemplate{},
		&ComputeInstanceTemplateList{},
		&ComputeInterconnectAttachment{},
		&ComputeInterconnectAttachmentList{},
		&ComputeNetwork{},
		&ComputeNetworkList{},
		&ComputeNetworkEndpointGroup{},
		&ComputeNetworkEndpointGroupList{},
		&ComputeNetworkPeering{},
		&ComputeNetworkPeeringList{},
		&ComputeNodeGroup{},
		&ComputeNodeGroupList{},
		&ComputeNodeTemplate{},
		&ComputeNodeTemplateList{},
		&ComputePacketMirroring{},
		&ComputePacketMirroringList{},
		&ComputeProjectMetadata{},
		&ComputeProjectMetadataList{},
		&ComputeRegionNetworkEndpointGroup{},
		&ComputeRegionNetworkEndpointGroupList{},
		&ComputeReservation{},
		&ComputeReservationList{},
		&ComputeResourcePolicy{},
		&ComputeResourcePolicyList{},
		&ComputeRoute{},
		&ComputeRouteList{},
		&ComputeRouter{},
		&ComputeRouterList{},
		&ComputeRouterInterface{},
		&ComputeRouterInterfaceList{},
		&ComputeRouterNAT{},
		&ComputeRouterNATList{},
		&ComputeRouterPeer{},
		&ComputeRouterPeerList{},
		&ComputeSSLCertificate{},
		&ComputeSSLCertificateList{},
		&ComputeSSLPolicy{},
		&ComputeSSLPolicyList{},
		&ComputeSecurityPolicy{},
		&ComputeSecurityPolicyList{},
		&ComputeServiceAttachment{},
		&ComputeServiceAttachmentList{},
		&ComputeSharedVPCHostProject{},
		&ComputeSharedVPCHostProjectList{},
		&ComputeSharedVPCServiceProject{},
		&ComputeSharedVPCServiceProjectList{},
		&ComputeSnapshot{},
		&ComputeSnapshotList{},
		&ComputeSubnetwork{},
		&ComputeSubnetworkList{},
		&ComputeTargetGRPCProxy{},
		&ComputeTargetGRPCProxyList{},
		&ComputeTargetHTTPProxy{},
		&ComputeTargetHTTPProxyList{},
		&ComputeTargetHTTPSProxy{},
		&ComputeTargetHTTPSProxyList{},
		&ComputeTargetInstance{},
		&ComputeTargetInstanceList{},
		&ComputeTargetPool{},
		&ComputeTargetPoolList{},
		&ComputeTargetSSLProxy{},
		&ComputeTargetSSLProxyList{},
		&ComputeTargetTCPProxy{},
		&ComputeTargetTCPProxyList{},
		&ComputeTargetVPNGateway{},
		&ComputeTargetVPNGatewayList{},
		&ComputeURLMap{},
		&ComputeURLMapList{},
		&ComputeVPNGateway{},
		&ComputeVPNGatewayList{},
		&ComputeVPNTunnel{},
		&ComputeVPNTunnelList{},
	)
	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}
