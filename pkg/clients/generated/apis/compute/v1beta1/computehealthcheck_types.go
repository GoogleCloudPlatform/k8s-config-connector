// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1beta1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type HealthcheckGrpcHealthCheck struct {
	/* The gRPC service name for the health check.
	The value of grpcServiceName has the following meanings by convention:
	- Empty serviceName means the overall status of all services at the backend.
	- Non-empty serviceName means the health of that gRPC service, as defined by the owner of the service.
	The grpcServiceName can only be ASCII. */
	// +optional
	GrpcServiceName *string `json:"grpcServiceName,omitempty"`

	/* The port number for the health check request.
	Must be specified if portName and portSpecification are not set
	or if port_specification is USE_FIXED_PORT. Valid values are 1 through 65535. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, gRPC health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`
}

type HealthcheckHttp2HealthCheck struct {
	/* The value of the host header in the HTTP2 health check request.
	If left empty (default value), the public IP on behalf of which this health
	check is performed will be used. */
	// +optional
	Host *string `json:"host,omitempty"`

	/* The TCP port number for the HTTP2 health check request.
	The default value is 443. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, HTTP2 health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`

	/* Specifies the type of proxy header to append before sending data to the
	backend. Default value: "NONE" Possible values: ["NONE", "PROXY_V1"]. */
	// +optional
	ProxyHeader *string `json:"proxyHeader,omitempty"`

	/* The request path of the HTTP2 health check request.
	The default value is /. */
	// +optional
	RequestPath *string `json:"requestPath,omitempty"`

	/* The bytes to match against the beginning of the response data. If left empty
	(the default value), any response will indicate health. The response data
	can only be ASCII. */
	// +optional
	Response *string `json:"response,omitempty"`
}

type HealthcheckHttpHealthCheck struct {
	/* The value of the host header in the HTTP health check request.
	If left empty (default value), the public IP on behalf of which this health
	check is performed will be used. */
	// +optional
	Host *string `json:"host,omitempty"`

	/* The TCP port number for the HTTP health check request.
	The default value is 80. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, HTTP health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`

	/* Specifies the type of proxy header to append before sending data to the
	backend. Default value: "NONE" Possible values: ["NONE", "PROXY_V1"]. */
	// +optional
	ProxyHeader *string `json:"proxyHeader,omitempty"`

	/* The request path of the HTTP health check request.
	The default value is /. */
	// +optional
	RequestPath *string `json:"requestPath,omitempty"`

	/* The bytes to match against the beginning of the response data. If left empty
	(the default value), any response will indicate health. The response data
	can only be ASCII. */
	// +optional
	Response *string `json:"response,omitempty"`
}

type HealthcheckHttpsHealthCheck struct {
	/* The value of the host header in the HTTPS health check request.
	If left empty (default value), the public IP on behalf of which this health
	check is performed will be used. */
	// +optional
	Host *string `json:"host,omitempty"`

	/* The TCP port number for the HTTPS health check request.
	The default value is 443. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, HTTPS health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`

	/* Specifies the type of proxy header to append before sending data to the
	backend. Default value: "NONE" Possible values: ["NONE", "PROXY_V1"]. */
	// +optional
	ProxyHeader *string `json:"proxyHeader,omitempty"`

	/* The request path of the HTTPS health check request.
	The default value is /. */
	// +optional
	RequestPath *string `json:"requestPath,omitempty"`

	/* The bytes to match against the beginning of the response data. If left empty
	(the default value), any response will indicate health. The response data
	can only be ASCII. */
	// +optional
	Response *string `json:"response,omitempty"`
}

type HealthcheckLogConfig struct {
	/* Indicates whether or not to export logs. This is false by default,
	which means no health check logging will be done. */
	// +optional
	Enable *bool `json:"enable,omitempty"`
}

type HealthcheckSslHealthCheck struct {
	/* The TCP port number for the SSL health check request.
	The default value is 443. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, SSL health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`

	/* Specifies the type of proxy header to append before sending data to the
	backend. Default value: "NONE" Possible values: ["NONE", "PROXY_V1"]. */
	// +optional
	ProxyHeader *string `json:"proxyHeader,omitempty"`

	/* The application data to send once the SSL connection has been
	established (default value is empty). If both request and response are
	empty, the connection establishment alone will indicate health. The request
	data can only be ASCII. */
	// +optional
	Request *string `json:"request,omitempty"`

	/* The bytes to match against the beginning of the response data. If left empty
	(the default value), any response will indicate health. The response data
	can only be ASCII. */
	// +optional
	Response *string `json:"response,omitempty"`
}

type HealthcheckTcpHealthCheck struct {
	/* The TCP port number for the TCP health check request.
	The default value is 443. */
	// +optional
	Port *int64 `json:"port,omitempty"`

	/* Port name as defined in InstanceGroup#NamedPort#name. If both port and
	port_name are defined, port takes precedence. */
	// +optional
	PortName *string `json:"portName,omitempty"`

	/* Specifies how port is selected for health checking, can be one of the
	following values:

	* 'USE_FIXED_PORT': The port number in 'port' is used for health checking.

	* 'USE_NAMED_PORT': The 'portName' is used for health checking.

	* 'USE_SERVING_PORT': For NetworkEndpointGroup, the port specified for each
	network endpoint is used for health checking. For other backends, the
	port or named port specified in the Backend Service is used for health
	checking.

	If not specified, TCP health check follows behavior specified in 'port' and
	'portName' fields. Possible values: ["USE_FIXED_PORT", "USE_NAMED_PORT", "USE_SERVING_PORT"]. */
	// +optional
	PortSpecification *string `json:"portSpecification,omitempty"`

	/* Specifies the type of proxy header to append before sending data to the
	backend. Default value: "NONE" Possible values: ["NONE", "PROXY_V1"]. */
	// +optional
	ProxyHeader *string `json:"proxyHeader,omitempty"`

	/* The application data to send once the TCP connection has been
	established (default value is empty). If both request and response are
	empty, the connection establishment alone will indicate health. The request
	data can only be ASCII. */
	// +optional
	Request *string `json:"request,omitempty"`

	/* The bytes to match against the beginning of the response data. If left empty
	(the default value), any response will indicate health. The response data
	can only be ASCII. */
	// +optional
	Response *string `json:"response,omitempty"`
}

type ComputeHealthCheckSpec struct {
	/* How often (in seconds) to send a health check. The default value is 5
	seconds. */
	// +optional
	CheckIntervalSec *int64 `json:"checkIntervalSec,omitempty"`

	/* An optional description of this resource. Provide this property when
	you create the resource. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* A nested object resource. */
	// +optional
	GrpcHealthCheck *HealthcheckGrpcHealthCheck `json:"grpcHealthCheck,omitempty"`

	/* A so-far unhealthy instance will be marked healthy after this many
	consecutive successes. The default value is 2. */
	// +optional
	HealthyThreshold *int64 `json:"healthyThreshold,omitempty"`

	/* A nested object resource. */
	// +optional
	Http2HealthCheck *HealthcheckHttp2HealthCheck `json:"http2HealthCheck,omitempty"`

	/* A nested object resource. */
	// +optional
	HttpHealthCheck *HealthcheckHttpHealthCheck `json:"httpHealthCheck,omitempty"`

	/* A nested object resource. */
	// +optional
	HttpsHealthCheck *HealthcheckHttpsHealthCheck `json:"httpsHealthCheck,omitempty"`

	/* Location represents the geographical location of the ComputeHealthCheck. Specify a region name or "global" for global resources. Reference: GCP definition of regions/zones (https://cloud.google.com/compute/docs/regions-zones/) */
	Location string `json:"location"`

	/* Configure logging on this health check. */
	// +optional
	LogConfig *HealthcheckLogConfig `json:"logConfig,omitempty"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* A nested object resource. */
	// +optional
	SslHealthCheck *HealthcheckSslHealthCheck `json:"sslHealthCheck,omitempty"`

	/* A nested object resource. */
	// +optional
	TcpHealthCheck *HealthcheckTcpHealthCheck `json:"tcpHealthCheck,omitempty"`

	/* How long (in seconds) to wait before claiming failure.
	The default value is 5 seconds.  It is invalid for timeoutSec to have
	greater value than checkIntervalSec. */
	// +optional
	TimeoutSec *int64 `json:"timeoutSec,omitempty"`

	/* A so-far healthy instance will be marked unhealthy after this many
	consecutive failures. The default value is 2. */
	// +optional
	UnhealthyThreshold *int64 `json:"unhealthyThreshold,omitempty"`
}

type ComputeHealthCheckStatus struct {
	/* Conditions represent the latest available observations of the
	   ComputeHealthCheck's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* Creation timestamp in RFC3339 text format. */
	// +optional
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	// +optional
	SelfLink *string `json:"selfLink,omitempty"`

	/* The type of the health check. One of HTTP, HTTPS, TCP, or SSL. */
	// +optional
	Type *string `json:"type,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcpcomputehealthcheck;gcpcomputehealthchecks
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=stable";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// ComputeHealthCheck is the Schema for the compute API
// +k8s:openapi-gen=true
type ComputeHealthCheck struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ComputeHealthCheckSpec   `json:"spec,omitempty"`
	Status ComputeHealthCheckStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ComputeHealthCheckList contains a list of ComputeHealthCheck
type ComputeHealthCheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeHealthCheck `json:"items"`
}

func init() {
	SchemeBuilder.Register(&ComputeHealthCheck{}, &ComputeHealthCheckList{})
}
