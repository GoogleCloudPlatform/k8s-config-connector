// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

// Package v1alpha1 contains API Schema definitions for the compute v1alpha1 API group.
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen=package,register
// +k8s:conversion-gen=github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/pkg/apis/compute
// +k8s:defaulter-gen=TypeMeta
// +groupName=compute.cnrm.cloud.google.com
package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	// SchemeGroupVersion is the group version used to register these objects.
	SchemeGroupVersion = schema.GroupVersion{Group: "compute.cnrm.cloud.google.com", Version: "v1beta1"}

	// SchemeBuilder is used to add go types to the GroupVersionKind scheme.
	SchemeBuilder = runtime.NewSchemeBuilder(addKnownTypes)

	// AddToScheme is a global function that registers this API group & version to a scheme
	localSchemeBuilder = &SchemeBuilder
	AddToScheme        = localSchemeBuilder.AddToScheme

	ComputeAutoscalerGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeAutoscaler",
	}

	ComputeBackendBucketSignedURLKeyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeBackendBucketSignedURLKey",
	}

	ComputeBackendServiceSignedURLKeyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeBackendServiceSignedURLKey",
	}

	ComputeDiskResourcePolicyAttachmentGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeDiskResourcePolicyAttachment",
	}

	ComputeGlobalNetworkEndpointGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeGlobalNetworkEndpoint",
	}

	ComputeGlobalNetworkEndpointGroupGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeGlobalNetworkEndpointGroup",
	}

	ComputeInstanceGroupNamedPortGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeInstanceGroupNamedPort",
	}

	ComputeMachineImageGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeMachineImage",
	}

	ComputeManagedSSLCertificateGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeManagedSSLCertificate",
	}

	ComputeNetworkEndpointGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNetworkEndpoint",
	}

	ComputeNetworkPeeringRoutesConfigGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeNetworkPeeringRoutesConfig",
	}

	ComputeOrganizationSecurityPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeOrganizationSecurityPolicy",
	}

	ComputeOrganizationSecurityPolicyAssociationGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeOrganizationSecurityPolicyAssociation",
	}

	ComputeOrganizationSecurityPolicyRuleGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeOrganizationSecurityPolicyRule",
	}

	ComputePerInstanceConfigGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputePerInstanceConfig",
	}

	ComputeRegionAutoscalerGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRegionAutoscaler",
	}

	ComputeRegionDiskResourcePolicyAttachmentGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRegionDiskResourcePolicyAttachment",
	}

	ComputeRegionPerInstanceConfigGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRegionPerInstanceConfig",
	}

	ComputeRegionSSLPolicyGVK = schema.GroupVersionKind{
		Group:   SchemeGroupVersion.Group,
		Version: SchemeGroupVersion.Version,
		Kind:    "ComputeRegionSSLPolicy",
	}

	computeAPIVersion = SchemeGroupVersion.String()
)

// Adds the list of known types to the given scheme.
func addKnownTypes(scheme *runtime.Scheme) error {
	scheme.AddKnownTypes(SchemeGroupVersion,
		&ComputeAutoscaler{},
		&ComputeAutoscalerList{},
		&ComputeBackendBucketSignedURLKey{},
		&ComputeBackendBucketSignedURLKeyList{},
		&ComputeBackendServiceSignedURLKey{},
		&ComputeBackendServiceSignedURLKeyList{},
		&ComputeDiskResourcePolicyAttachment{},
		&ComputeDiskResourcePolicyAttachmentList{},
		&ComputeGlobalNetworkEndpoint{},
		&ComputeGlobalNetworkEndpointList{},
		&ComputeGlobalNetworkEndpointGroup{},
		&ComputeGlobalNetworkEndpointGroupList{},
		&ComputeInstanceGroupNamedPort{},
		&ComputeInstanceGroupNamedPortList{},
		&ComputeMachineImage{},
		&ComputeMachineImageList{},
		&ComputeManagedSSLCertificate{},
		&ComputeManagedSSLCertificateList{},
		&ComputeNetworkEndpoint{},
		&ComputeNetworkEndpointList{},
		&ComputeNetworkPeeringRoutesConfig{},
		&ComputeNetworkPeeringRoutesConfigList{},
		&ComputeOrganizationSecurityPolicy{},
		&ComputeOrganizationSecurityPolicyList{},
		&ComputeOrganizationSecurityPolicyAssociation{},
		&ComputeOrganizationSecurityPolicyAssociationList{},
		&ComputeOrganizationSecurityPolicyRule{},
		&ComputeOrganizationSecurityPolicyRuleList{},
		&ComputePerInstanceConfig{},
		&ComputePerInstanceConfigList{},
		&ComputeRegionAutoscaler{},
		&ComputeRegionAutoscalerList{},
		&ComputeRegionDiskResourcePolicyAttachment{},
		&ComputeRegionDiskResourcePolicyAttachmentList{},
		&ComputeRegionPerInstanceConfig{},
		&ComputeRegionPerInstanceConfigList{},
		&ComputeRegionSSLPolicy{},
		&ComputeRegionSSLPolicyList{},
	)
	metav1.AddToGroupVersion(scheme, SchemeGroupVersion)
	return nil
}
