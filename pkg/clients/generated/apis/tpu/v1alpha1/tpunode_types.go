// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Config Connector and manual
//     changes will be clobbered when the file is regenerated.
//
// ----------------------------------------------------------------------------

// *** DISCLAIMER ***
// Config Connector's go-client for CRDs is currently in ALPHA, which means
// that future versions of the go-client may include breaking changes.
// Please try it out and give us feedback!

package v1alpha1

import (
	"github.com/GoogleCloudPlatform/k8s-config-connector/pkg/clients/generated/apis/k8s/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type NodeSchedulingConfig struct {
	/* Immutable. Defines whether the TPU instance is preemptible. */
	Preemptible bool `json:"preemptible"`
}

type TPUNodeSpec struct {
	/* Immutable. The type of hardware accelerators associated with this node. */
	AcceleratorType string `json:"acceleratorType"`

	/* Immutable. The CIDR block that the TPU node will use when selecting an IP
	address. This CIDR block must be a /29 block; the Compute Engine
	networks API forbids a smaller block, and using a larger block would
	be wasteful (a node can only consume one IP address).

	Errors will occur if the CIDR block has already been used for a
	currently existing TPU node, the CIDR block conflicts with any
	subnetworks in the user's provided network, or the provided network
	is peered with another network that is using that CIDR block. */
	// +optional
	CidrBlock *string `json:"cidrBlock,omitempty"`

	/* Immutable. The user-supplied description of the TPU. Maximum of 512 characters. */
	// +optional
	Description *string `json:"description,omitempty"`

	/* Immutable. The name of a network to peer the TPU node to. It must be a
	preexisting Compute Engine network inside of the project on which
	this API has been activated. If none is provided, "default" will be
	used. */
	// +optional
	Network *string `json:"network,omitempty"`

	/* The project that this resource belongs to. */
	ProjectRef v1alpha1.ResourceRef `json:"projectRef"`

	/* Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default. */
	// +optional
	ResourceID *string `json:"resourceID,omitempty"`

	/* Immutable. Sets the scheduling options for this TPU instance. */
	// +optional
	SchedulingConfig *NodeSchedulingConfig `json:"schedulingConfig,omitempty"`

	/* The version of Tensorflow running in the Node. */
	TensorflowVersion string `json:"tensorflowVersion"`

	/* Immutable. Whether the VPC peering for the node is set up through Service Networking API.
	The VPC Peering should be set up before provisioning the node. If this field is set,
	cidr_block field should not be specified. If the network that you want to peer the
	TPU Node to is a Shared VPC network, the node must be created with this this field enabled. */
	// +optional
	UseServiceNetworking *bool `json:"useServiceNetworking,omitempty"`

	/* Immutable. The GCP location for the TPU. If it is not provided, the provider zone is used. */
	Zone string `json:"zone"`
}

type NodeNetworkEndpointsStatus struct {
	/* The IP address of this network endpoint. */
	// +optional
	IpAddress *string `json:"ipAddress,omitempty"`

	/* The port of this network endpoint. */
	// +optional
	Port *int64 `json:"port,omitempty"`
}

type TPUNodeStatus struct {
	/* Conditions represent the latest available observations of the
	   TPUNode's current state. */
	Conditions []v1alpha1.Condition `json:"conditions,omitempty"`
	/* The network endpoints where TPU workers can be accessed and sent work.
	It is recommended that Tensorflow clients of the node first reach out
	to the first (index 0) entry. */
	// +optional
	NetworkEndpoints []NodeNetworkEndpointsStatus `json:"networkEndpoints,omitempty"`

	/* ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource. */
	// +optional
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	/* The service account used to run the tensor flow services within the
	node. To share resources, including Google Cloud Storage data, with
	the Tensorflow job running in the Node, this account must have
	permissions to that data. */
	// +optional
	ServiceAccount *string `json:"serviceAccount,omitempty"`
}

// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:categories=gcp,shortName=gcptpunode;gcptpunodes
// +kubebuilder:subresource:status
// +kubebuilder:metadata:labels="cnrm.cloud.google.com/managed-by-kcc=true";"cnrm.cloud.google.com/stability-level=alpha";"cnrm.cloud.google.com/system=true";"cnrm.cloud.google.com/tf2crd=true"
// +kubebuilder:printcolumn:name="Age",JSONPath=".metadata.creationTimestamp",type="date"
// +kubebuilder:printcolumn:name="Ready",JSONPath=".status.conditions[?(@.type=='Ready')].status",type="string",description="When 'True', the most recent reconcile of the resource succeeded"
// +kubebuilder:printcolumn:name="Status",JSONPath=".status.conditions[?(@.type=='Ready')].reason",type="string",description="The reason for the value in 'Ready'"
// +kubebuilder:printcolumn:name="Status Age",JSONPath=".status.conditions[?(@.type=='Ready')].lastTransitionTime",type="date",description="The last transition time for the value in 'Status'"

// TPUNode is the Schema for the tpu API
// +k8s:openapi-gen=true
type TPUNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   TPUNodeSpec   `json:"spec,omitempty"`
	Status TPUNodeStatus `json:"status,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// TPUNodeList contains a list of TPUNode
type TPUNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TPUNode `json:"items"`
}

func init() {
	SchemeBuilder.Register(&TPUNode{}, &TPUNodeList{})
}
