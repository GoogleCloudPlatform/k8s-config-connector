# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
kind: Project
metadata:
  name: project-${uniqueId}
  annotations:
    cnrm.cloud.google.com/deletion-policy: abandon
spec:
  resourceID: ${projectId}
  organizationRef:
    external: ${TEST_ORG_ID}
  name: ${projectId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeNetwork
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computenetwork-${uniqueId}
spec:
  routingMode: REGIONAL
  autoCreateSubnetworks: false
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: computesubnetwork-${uniqueId}
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
spec:
  ipCidrRange: 10.2.0.0/28
  region: us-central1
  networkRef:
    name: computenetwork-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: computesubnetwork-proxy-${uniqueId}
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
spec:
  ipCidrRange: 10.3.0.0/26
  region: us-central1
  purpose: GLOBAL_MANAGED_PROXY
  role: ACTIVE
  networkRef:
    name: computenetwork-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeAddress
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: "${projectId}"
  name: computeaddress-${uniqueId}
spec:
  addressType: INTERNAL
  location: us-central1
  ipVersion: IPV4
  purpose: SHARED_LOADBALANCER_VIP
  subnetworkRef:
    name: computesubnetwork-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeHealthCheck
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computehealthcheck-${uniqueId}
spec:
  httpHealthCheck:
    port: 80
  location: global
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeInstanceGroup
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computeinstancegroup-${uniqueId}
spec:
  zone: us-central1-a
  networkRef:
    name: computenetwork-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeBackendService
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computebackendservice-${uniqueId}
spec:
  healthChecks:
  - healthCheckRef:
      name: computehealthcheck-${uniqueId}
  loadBalancingScheme: INTERNAL_MANAGED
  location: global
  protocol: HTTP
  backend:
  - balancingMode: UTILIZATION
    group:
      instanceGroupRef:
        name: computeinstancegroup-${uniqueId}
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeURLMap
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computeurlmap-${uniqueId}
spec:
  defaultService:
    backendServiceRef:
      name: computebackendservice-${uniqueId}
  location: global
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeTargetHTTPProxy
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computetargethttpproxy-${uniqueId}
spec:
  urlMapRef:
    name: computeurlmap-${uniqueId}
  location: global
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeForwardingRule
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: computeforwardingrule-${uniqueId}
spec:
  loadBalancingScheme: INTERNAL_MANAGED
  target:
    targetHTTPProxyRef:
      name: computetargethttpproxy-${uniqueId}
  ipAddress:
    addressRef:
      name: computeaddress-${uniqueId}
  ipProtocol: "TCP"
  location: global
  networkRef:
    name: computenetwork-${uniqueId}
  subnetworkRef:
    name: computesubnetwork-${uniqueId}
  portRange: '80-80'
  allowGlobalAccess: true
---
apiVersion: dns.cnrm.cloud.google.com/v1beta1
kind: DNSManagedZone
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${projectId}
  name: dnsmanagedzone-${uniqueId}
spec:
  dnsName: "cnrm-dns-example-${uniqueId}.com."
  privateVisibilityConfig:
    networks:
      - networkRef:
          name: computenetwork-${uniqueId}
