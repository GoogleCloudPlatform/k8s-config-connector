#!/usr/bin/env bash
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

REPO_ROOT="$(git rev-parse --show-toplevel)"
cd ${REPO_ROOT}

# Pick a likely unique version tag
export IMAGE_TAG=dev-$(date +%Y%m%dT%H%M%S)

# We will side load our images into kind
export IMAGE_PREFIX=registry.kind/

kind create cluster --name smoketest

dev/tasks/build-images

kind load --name smoketest docker-image ${IMAGE_PREFIX}operator:${IMAGE_TAG}

dev/tasks/deploy-to-kube

# Create namespace
NS=config-control
echo "Creating namespace ${NS}"
kubectl create ns ${NS} --dry-run=client -oyaml | kubectl apply --server-side -f -

# echo "Creating ConfigConnectorContext in namespace ${NS} (with fake google service account)"
# cat <<EOF | kubectl apply --server-side -f -
# apiVersion: core.cnrm.cloud.google.com/v1beta1
# kind: ConfigConnectorContext
# metadata:
#   # you can only have one ConfigConnectorContext per namespace
#   name: configconnectorcontext.core.cnrm.cloud.google.com
#   namespace: ${NS}
# spec:
#   googleServiceAccount: "fake@fake.iam.gserviceaccount.com"
#   stateIntoSpec: Absent
# EOF

# echo "Waiting for KCC bound to namespace ${NS} to become ready"
# We don't wait, because prom-to-sd is currently crashing
#kubectl wait -n cnrm-system --for=condition=Ready -l cnrm.cloud.google.com/scoped-namespace=${NS} pod

echo "Creating StorageBucket in namespace ${NS}"
cat <<EOF | kubectl apply -f -
apiVersion: storage.cnrm.cloud.google.com/v1beta1
kind: StorageBucket
metadata:
  name: "kcc-test-${NS}"
  namespace: "${NS}"
  annotations:
    cnrm.cloud.google.com/project-id: "test-project-1"
spec:
  lifecycleRule:
    - action:
        type: Delete
      condition:
        age: 7
        withState: ANY
  versioning:
    enabled: true
  uniformBucketLevelAccess: true
EOF

echo "Waiting for StorageBucket reconciliation"
# Wait for StorageBucket creation attempt
# We can't kubectl wait for ready, because we currently expect this to fail because we haven't set up IAM permissions
# Instead we wait for the condition of _type_ Ready, but don't wait for status=True
kubectl wait storagebucket -n ${NS} kcc-test-config-control --for=jsonpath='.status.conditions[].type=Ready'


kubectl describe storagebucket -n ${NS}
