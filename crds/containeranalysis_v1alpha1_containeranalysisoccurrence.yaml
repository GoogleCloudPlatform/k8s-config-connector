# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cnrm.cloud.google.com/version: 1.124.0
  creationTimestamp: null
  labels:
    cnrm.cloud.google.com/managed-by-kcc: "true"
    cnrm.cloud.google.com/stability-level: alpha
    cnrm.cloud.google.com/system: "true"
    cnrm.cloud.google.com/tf2crd: "true"
  name: containeranalysisoccurrences.containeranalysis.cnrm.cloud.google.com
spec:
  group: containeranalysis.cnrm.cloud.google.com
  names:
    categories:
    - gcp
    kind: ContainerAnalysisOccurrence
    plural: containeranalysisoccurrences
    shortNames:
    - gcpcontaineranalysisoccurrence
    - gcpcontaineranalysisoccurrences
    singular: containeranalysisoccurrence
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: When 'True', the most recent reconcile of the resource succeeded
      jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - description: The reason for the value in 'Ready'
      jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Status
      type: string
    - description: The last transition time for the value in 'Status'
      jsonPath: .status.conditions[?(@.type=='Ready')].lastTransitionTime
      name: Status Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'apiVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              attestation:
                description: |-
                  Occurrence that represents a single "attestation". The authenticity
                  of an attestation can be verified using the attached signature.
                  If the verifier trusts the public key of the signer, then verifying
                  the signature is sufficient to establish trust. In this circumstance,
                  the authority to which this attestation is attached is primarily
                  useful for lookup (how to find this attestation if you already
                  know the authority and artifact to be verified) and intent (for
                  which authority this attestation was intended to sign.
                properties:
                  serializedPayload:
                    description: |-
                      The serialized payload that is verified by one or
                      more signatures. A base64-encoded string.
                    type: string
                  signatures:
                    description: |-
                      One or more signatures over serializedPayload.
                      Verifier implementations should consider this attestation
                      message verified if at least one signature verifies
                      serializedPayload. See Signature in common.proto for more
                      details on signature structure and verification.
                    items:
                      properties:
                        publicKeyId:
                          description: |-
                            The identifier for the public key that verifies this
                            signature. MUST be an RFC3986 conformant
                            URI. * When possible, the key id should be an
                            immutable reference, such as a cryptographic digest.
                            Examples of valid values:

                            * OpenPGP V4 public key fingerprint. See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr
                              for more details on this scheme.
                                * 'openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA'
                            * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization):
                                * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU".
                          type: string
                        signature:
                          description: |-
                            The content of the signature, an opaque bytestring.
                            The payload that this signature verifies MUST be
                            unambiguously provided with the Signature during
                            verification. A wrapper message might provide the
                            payload explicitly. Alternatively, a message might
                            have a canonical serialization that can always be
                            unambiguously computed to derive the payload.
                          type: string
                      required:
                      - publicKeyId
                      type: object
                    type: array
                required:
                - serializedPayload
                - signatures
                type: object
              noteName:
                description: |-
                  Immutable. The analysis note associated with this occurrence, in the form of
                  projects/[PROJECT]/notes/[NOTE_ID]. This field can be used as a
                  filter in list requests.
                type: string
              projectRef:
                description: The project that this resource belongs to.
                oneOf:
                - not:
                    required:
                    - external
                  required:
                  - name
                - not:
                    anyOf:
                    - required:
                      - name
                    - required:
                      - namespace
                  required:
                  - external
                properties:
                  external:
                    description: 'Allowed value: The `name` field of a `Project` resource.'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                type: object
              remediation:
                description: A description of actions that can be taken to remedy
                  the note.
                type: string
              resourceID:
                description: Immutable. Optional. The service-generated name of the
                  resource. Used for acquisition only. Leave unset to create a new
                  resource.
                type: string
              resourceUri:
                description: |-
                  Immutable. Required. Immutable. A URI that represents the resource for which
                  the occurrence applies. For example,
                  https://gcr.io/project/image@sha256:123abc for a Docker image.
                type: string
            required:
            - attestation
            - noteName
            - projectRef
            - resourceUri
            type: object
          status:
            properties:
              conditions:
                description: Conditions represent the latest available observation
                  of the resource's current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      type: string
                    message:
                      description: Human-readable message indicating details about
                        last transition.
                      type: string
                    reason:
                      description: Unique, one-word, CamelCase reason for the condition's
                        last transition.
                      type: string
                    status:
                      description: Status is the status of the condition. Can be True,
                        False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the condition.
                      type: string
                  type: object
                type: array
              createTime:
                description: The time when the repository was created.
                type: string
              kind:
                description: |-
                  The note kind which explicitly denotes which of the occurrence
                  details are specified. This field can be used as a filter in list
                  requests.
                type: string
              name:
                description: The name of the occurrence.
                type: string
              observedGeneration:
                description: ObservedGeneration is the generation of the resource
                  that was most recently observed by the Config Connector controller.
                  If this is equal to metadata.generation, then that means that the
                  current reported status reflects the most recent desired state of
                  the resource.
                type: integer
              updateTime:
                description: The time when the repository was last updated.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
