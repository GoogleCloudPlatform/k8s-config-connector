// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum EventarcAlphaChannelStateEnum {
  EventarcAlphaChannelStateEnumNO_VALUE_DO_NOT_USE = 0;
  EventarcAlphaChannelStateEnumSTATE_UNSPECIFIED = 1;
  EventarcAlphaChannelStateEnumPENDING = 2;
  EventarcAlphaChannelStateEnumACTIVE = 3;
  EventarcAlphaChannelStateEnumINACTIVE = 4;
}

message EventarcAlphaChannel {
  string name = 1;
  string uid = 2;
  string create_time = 3;
  string update_time = 4;
  string third_party_provider = 5;
  string pubsub_topic = 6;
  EventarcAlphaChannelStateEnum state = 7;
  string activation_token = 8;
  string crypto_key_name = 9;
  string project = 10;
  string location = 11;
}

message ApplyEventarcAlphaChannelRequest {
  EventarcAlphaChannel resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteEventarcAlphaChannelRequest {
  string service_account_file = 1;
  EventarcAlphaChannel resource = 2;
}

message ListEventarcAlphaChannelRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListEventarcAlphaChannelResponse {
  repeated EventarcAlphaChannel items = 1;
}

service EventarcAlphaChannelService {
  rpc ApplyEventarcAlphaChannel(ApplyEventarcAlphaChannelRequest) returns (EventarcAlphaChannel);
  rpc DeleteEventarcAlphaChannel(DeleteEventarcAlphaChannelRequest) returns (google.protobuf.Empty);
  rpc ListEventarcAlphaChannel(ListEventarcAlphaChannelRequest) returns (ListEventarcAlphaChannelResponse);
}
