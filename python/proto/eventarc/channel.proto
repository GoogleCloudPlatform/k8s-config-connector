// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum EventarcChannelStateEnum {
  EventarcChannelStateEnumNO_VALUE_DO_NOT_USE = 0;
  EventarcChannelStateEnumSTATE_UNSPECIFIED = 1;
  EventarcChannelStateEnumPENDING = 2;
  EventarcChannelStateEnumACTIVE = 3;
  EventarcChannelStateEnumINACTIVE = 4;
}

message EventarcChannel {
  string name = 1;
  string uid = 2;
  string create_time = 3;
  string update_time = 4;
  string third_party_provider = 5;
  string pubsub_topic = 6;
  EventarcChannelStateEnum state = 7;
  string activation_token = 8;
  string crypto_key_name = 9;
  string project = 10;
  string location = 11;
}

message ApplyEventarcChannelRequest {
  EventarcChannel resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteEventarcChannelRequest {
  string service_account_file = 1;
  EventarcChannel resource = 2;
}

message ListEventarcChannelRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListEventarcChannelResponse {
  repeated EventarcChannel items = 1;
}

service EventarcChannelService {
  rpc ApplyEventarcChannel(ApplyEventarcChannelRequest) returns (EventarcChannel);
  rpc DeleteEventarcChannel(DeleteEventarcChannelRequest) returns (google.protobuf.Empty);
  rpc ListEventarcChannel(ListEventarcChannelRequest) returns (ListEventarcChannelResponse);
}
