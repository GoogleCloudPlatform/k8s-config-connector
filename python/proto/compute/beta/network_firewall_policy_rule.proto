// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTagsStateEnum {
  ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTagsStateEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTagsStateEnumEFFECTIVE = 1;
  ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTagsStateEnumINEFFECTIVE = 2;
}

enum ComputeBetaNetworkFirewallPolicyRuleDirectionEnum {
  ComputeBetaNetworkFirewallPolicyRuleDirectionEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeBetaNetworkFirewallPolicyRuleDirectionEnumINGRESS = 1;
  ComputeBetaNetworkFirewallPolicyRuleDirectionEnumEGRESS = 2;
}

enum ComputeBetaNetworkFirewallPolicyRuleTargetSecureTagsStateEnum {
  ComputeBetaNetworkFirewallPolicyRuleTargetSecureTagsStateEnumNO_VALUE_DO_NOT_USE = 0;
  ComputeBetaNetworkFirewallPolicyRuleTargetSecureTagsStateEnumEFFECTIVE = 1;
  ComputeBetaNetworkFirewallPolicyRuleTargetSecureTagsStateEnumINEFFECTIVE = 2;
}

message ComputeBetaNetworkFirewallPolicyRule {
  string description = 1;
  string rule_name = 2;
  int64 priority = 3;
  string location = 4;
  ComputeBetaNetworkFirewallPolicyRuleMatch match = 5;
  string action = 6;
  ComputeBetaNetworkFirewallPolicyRuleDirectionEnum direction = 7;
  bool enable_logging = 8;
  int64 rule_tuple_count = 9;
  repeated string target_service_accounts = 10;
  repeated ComputeBetaNetworkFirewallPolicyRuleTargetSecureTags target_secure_tags = 11;
  bool disabled = 12;
  string kind = 13;
  string firewall_policy = 14;
  string project = 15;
}

message ComputeBetaNetworkFirewallPolicyRuleMatch {
  repeated string src_ip_ranges = 1;
  repeated string dest_ip_ranges = 2;
  repeated ComputeBetaNetworkFirewallPolicyRuleMatchLayer4Configs layer4_configs = 3;
  repeated ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTags src_secure_tags = 4;
  repeated string src_region_codes = 5;
  repeated string dest_region_codes = 6;
  repeated string src_threat_intelligences = 7;
  repeated string dest_threat_intelligences = 8;
  repeated string src_fqdns = 9;
  repeated string dest_fqdns = 10;
  repeated string src_address_groups = 11;
  repeated string dest_address_groups = 12;
}

message ComputeBetaNetworkFirewallPolicyRuleMatchLayer4Configs {
  string ip_protocol = 1;
  repeated string ports = 2;
}

message ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTags {
  string name = 1;
  ComputeBetaNetworkFirewallPolicyRuleMatchSrcSecureTagsStateEnum state = 2;
}

message ComputeBetaNetworkFirewallPolicyRuleTargetSecureTags {
  string name = 1;
  ComputeBetaNetworkFirewallPolicyRuleTargetSecureTagsStateEnum state = 2;
}

message ApplyComputeBetaNetworkFirewallPolicyRuleRequest {
  ComputeBetaNetworkFirewallPolicyRule resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteComputeBetaNetworkFirewallPolicyRuleRequest {
  string service_account_file = 1;
  ComputeBetaNetworkFirewallPolicyRule resource = 2;
}

message ListComputeBetaNetworkFirewallPolicyRuleRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
  string FirewallPolicy = 4;
}

message ListComputeBetaNetworkFirewallPolicyRuleResponse {
  repeated ComputeBetaNetworkFirewallPolicyRule items = 1;
}

service ComputeBetaNetworkFirewallPolicyRuleService {
  rpc ApplyComputeBetaNetworkFirewallPolicyRule(ApplyComputeBetaNetworkFirewallPolicyRuleRequest) returns (ComputeBetaNetworkFirewallPolicyRule);
  rpc DeleteComputeBetaNetworkFirewallPolicyRule(DeleteComputeBetaNetworkFirewallPolicyRuleRequest) returns (google.protobuf.Empty);
  rpc ListComputeBetaNetworkFirewallPolicyRule(ListComputeBetaNetworkFirewallPolicyRuleRequest) returns (ListComputeBetaNetworkFirewallPolicyRuleResponse);
}
