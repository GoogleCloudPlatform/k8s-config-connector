// Copyright 2021 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";

enum DnsManagedZoneDnssecConfigNonExistenceEnum {
  DnsManagedZoneDnssecConfigNonExistenceEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneDnssecConfigNonExistenceEnumnsec = 1;
  DnsManagedZoneDnssecConfigNonExistenceEnumnsec3 = 2;
}

enum DnsManagedZoneDnssecConfigStateEnum {
  DnsManagedZoneDnssecConfigStateEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneDnssecConfigStateEnumoff = 1;
  DnsManagedZoneDnssecConfigStateEnumon = 2;
  DnsManagedZoneDnssecConfigStateEnumtransfer = 3;
}

enum DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnum {
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumecdsap256sha256 = 1;
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumecdsap384sha384 = 2;
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumrsasha1 = 3;
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumrsasha256 = 4;
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnumrsasha512 = 5;
}

enum DnsManagedZoneDnssecConfigDefaultKeySpecsKeyTypeEnum {
  DnsManagedZoneDnssecConfigDefaultKeySpecsKeyTypeEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneDnssecConfigDefaultKeySpecsKeyTypeEnumkeySigning = 1;
  DnsManagedZoneDnssecConfigDefaultKeySpecsKeyTypeEnumzoneSigning = 2;
}

enum DnsManagedZoneVisibilityEnum {
  DnsManagedZoneVisibilityEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneVisibilityEnumprivate = 1;
  DnsManagedZoneVisibilityEnumpublic = 2;
}

enum DnsManagedZoneForwardingConfigTargetNameServersForwardingPathEnum {
  DnsManagedZoneForwardingConfigTargetNameServersForwardingPathEnumNO_VALUE_DO_NOT_USE = 0;
  DnsManagedZoneForwardingConfigTargetNameServersForwardingPathEnumdefault = 1;
  DnsManagedZoneForwardingConfigTargetNameServersForwardingPathEnumprivate = 2;
}

message DnsManagedZone {
  string description = 1;
  string dns_name = 2;
  DnsManagedZoneDnssecConfig dnssec_config = 3;
  string name = 4;
  repeated string name_servers = 5;
  map<string, string> labels = 6;
  DnsManagedZoneVisibilityEnum visibility = 7;
  DnsManagedZonePrivateVisibilityConfig private_visibility_config = 8;
  DnsManagedZoneForwardingConfig forwarding_config = 9;
  bool reverse_lookup = 10;
  DnsManagedZonePeeringConfig peering_config = 11;
  string project = 12;
}

message DnsManagedZoneDnssecConfig {
  string kind = 1;
  DnsManagedZoneDnssecConfigNonExistenceEnum non_existence = 2;
  DnsManagedZoneDnssecConfigStateEnum state = 3;
  repeated DnsManagedZoneDnssecConfigDefaultKeySpecs default_key_specs = 4;
}

message DnsManagedZoneDnssecConfigDefaultKeySpecs {
  DnsManagedZoneDnssecConfigDefaultKeySpecsAlgorithmEnum algorithm = 1;
  int64 key_length = 2;
  DnsManagedZoneDnssecConfigDefaultKeySpecsKeyTypeEnum key_type = 3;
  string kind = 4;
}

message DnsManagedZonePrivateVisibilityConfig {
  repeated DnsManagedZonePrivateVisibilityConfigNetworks networks = 1;
}

message DnsManagedZonePrivateVisibilityConfigNetworks {
  string network_url = 1;
}

message DnsManagedZoneForwardingConfig {
  repeated DnsManagedZoneForwardingConfigTargetNameServers target_name_servers = 1;
}

message DnsManagedZoneForwardingConfigTargetNameServers {
  string ipv4_address = 1;
  DnsManagedZoneForwardingConfigTargetNameServersForwardingPathEnum forwarding_path = 2;
}

message DnsManagedZonePeeringConfig {
  DnsManagedZonePeeringConfigTargetNetwork target_network = 1;
}

message DnsManagedZonePeeringConfigTargetNetwork {
  string network_url = 1;
}

message ApplyDnsManagedZoneRequest {
  DnsManagedZone resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteDnsManagedZoneRequest {
  string service_account_file = 1;
  DnsManagedZone resource = 2;
}

message ListDnsManagedZoneRequest {
  string service_account_file = 1;
  string Project = 2;
}

message ListDnsManagedZoneResponse {
  repeated DnsManagedZone items = 1;
}

service DnsManagedZoneService {
  rpc ApplyDnsManagedZone(ApplyDnsManagedZoneRequest) returns (DnsManagedZone);
  rpc DeleteDnsManagedZone(DeleteDnsManagedZoneRequest) returns (google.protobuf.Empty);
  rpc ListDnsManagedZone(ListDnsManagedZoneRequest) returns (ListDnsManagedZoneResponse);
}
