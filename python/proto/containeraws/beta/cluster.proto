// Copyright 2024 Google LLC. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
// All generated protos should be opaque, with "xxx_hidden_" prepended to their field names.


package dcl;

import "proto/connector/sdk.proto";
import "proto/empty.proto";


enum ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnum {
  ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnumVOLUME_TYPE_UNSPECIFIED = 1;
  ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnumGP2 = 2;
  ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnumGP3 = 3;
}

enum ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnum {
  ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnumVOLUME_TYPE_UNSPECIFIED = 1;
  ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnumGP2 = 2;
  ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnumGP3 = 3;
}

enum ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnum {
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnumTENANCY_UNSPECIFIED = 1;
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnumDEFAULT = 2;
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnumDEDICATED = 3;
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnumHOST = 4;
}

enum ContainerawsBetaClusterStateEnum {
  ContainerawsBetaClusterStateEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterStateEnumSTATE_UNSPECIFIED = 1;
  ContainerawsBetaClusterStateEnumPROVISIONING = 2;
  ContainerawsBetaClusterStateEnumRUNNING = 3;
  ContainerawsBetaClusterStateEnumRECONCILING = 4;
  ContainerawsBetaClusterStateEnumSTOPPING = 5;
  ContainerawsBetaClusterStateEnumERROR = 6;
  ContainerawsBetaClusterStateEnumDEGRADED = 7;
}

enum ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnum {
  ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnumCOMPONENT_UNSPECIFIED = 1;
  ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnumSYSTEM_COMPONENTS = 2;
  ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnumWORKLOADS = 3;
}

enum ContainerawsBetaClusterBinaryAuthorizationEvaluationModeEnum {
  ContainerawsBetaClusterBinaryAuthorizationEvaluationModeEnumNO_VALUE_DO_NOT_USE = 0;
  ContainerawsBetaClusterBinaryAuthorizationEvaluationModeEnumDISABLED = 1;
  ContainerawsBetaClusterBinaryAuthorizationEvaluationModeEnumPROJECT_SINGLETON_POLICY_ENFORCE = 2;
}

message ContainerawsBetaCluster {
  string name = 1;
  string description = 2;
  ContainerawsBetaClusterNetworking networking = 3;
  string aws_region = 4;
  ContainerawsBetaClusterControlPlane control_plane = 5;
  ContainerawsBetaClusterAuthorization authorization = 6;
  ContainerawsBetaClusterStateEnum state = 7;
  string endpoint = 8;
  string uid = 9;
  bool reconciling = 10;
  string create_time = 11;
  string update_time = 12;
  string etag = 13;
  map<string, string> annotations = 14;
  ContainerawsBetaClusterWorkloadIdentityConfig workload_identity_config = 15;
  string project = 16;
  string location = 17;
  ContainerawsBetaClusterFleet fleet = 18;
  ContainerawsBetaClusterLoggingConfig logging_config = 19;
  ContainerawsBetaClusterMonitoringConfig monitoring_config = 20;
  ContainerawsBetaClusterBinaryAuthorization binary_authorization = 21;
}

message ContainerawsBetaClusterNetworking {
  string vpc_id = 1;
  repeated string pod_address_cidr_blocks = 2;
  repeated string service_address_cidr_blocks = 3;
  bool per_node_pool_sg_rules_disabled = 4;
}

message ContainerawsBetaClusterControlPlane {
  string version = 1;
  string instance_type = 2;
  ContainerawsBetaClusterControlPlaneSshConfig ssh_config = 3;
  repeated string subnet_ids = 4;
  ContainerawsBetaClusterControlPlaneConfigEncryption config_encryption = 5;
  repeated string security_group_ids = 6;
  string iam_instance_profile = 7;
  ContainerawsBetaClusterControlPlaneRootVolume root_volume = 8;
  ContainerawsBetaClusterControlPlaneMainVolume main_volume = 9;
  ContainerawsBetaClusterControlPlaneDatabaseEncryption database_encryption = 10;
  map<string, string> tags = 11;
  ContainerawsBetaClusterControlPlaneAwsServicesAuthentication aws_services_authentication = 12;
  ContainerawsBetaClusterControlPlaneProxyConfig proxy_config = 13;
  ContainerawsBetaClusterControlPlaneInstancePlacement instance_placement = 14;
}

message ContainerawsBetaClusterControlPlaneSshConfig {
  string ec2_key_pair = 1;
}

message ContainerawsBetaClusterControlPlaneConfigEncryption {
  string kms_key_arn = 1;
}

message ContainerawsBetaClusterControlPlaneRootVolume {
  int64 size_gib = 1;
  ContainerawsBetaClusterControlPlaneRootVolumeVolumeTypeEnum volume_type = 2;
  int64 iops = 3;
  int64 throughput = 4;
  string kms_key_arn = 5;
}

message ContainerawsBetaClusterControlPlaneMainVolume {
  int64 size_gib = 1;
  ContainerawsBetaClusterControlPlaneMainVolumeVolumeTypeEnum volume_type = 2;
  int64 iops = 3;
  int64 throughput = 4;
  string kms_key_arn = 5;
}

message ContainerawsBetaClusterControlPlaneDatabaseEncryption {
  string kms_key_arn = 1;
}

message ContainerawsBetaClusterControlPlaneAwsServicesAuthentication {
  string role_arn = 1;
  string role_session_name = 2;
}

message ContainerawsBetaClusterControlPlaneProxyConfig {
  string secret_arn = 1;
  string secret_version = 2;
}

message ContainerawsBetaClusterControlPlaneInstancePlacement {
  ContainerawsBetaClusterControlPlaneInstancePlacementTenancyEnum tenancy = 1;
}

message ContainerawsBetaClusterAuthorization {
  repeated ContainerawsBetaClusterAuthorizationAdminUsers admin_users = 1;
  repeated ContainerawsBetaClusterAuthorizationAdminGroups admin_groups = 2;
}

message ContainerawsBetaClusterAuthorizationAdminUsers {
  string username = 1;
}

message ContainerawsBetaClusterAuthorizationAdminGroups {
  string group = 1;
}

message ContainerawsBetaClusterWorkloadIdentityConfig {
  string issuer_uri = 1;
  string workload_pool = 2;
  string identity_provider = 3;
}

message ContainerawsBetaClusterFleet {
  string project = 1;
  string membership = 2;
}

message ContainerawsBetaClusterLoggingConfig {
  ContainerawsBetaClusterLoggingConfigComponentConfig component_config = 1;
}

message ContainerawsBetaClusterLoggingConfigComponentConfig {
  repeated ContainerawsBetaClusterLoggingConfigComponentConfigEnableComponentsEnum enable_components = 1;
}

message ContainerawsBetaClusterMonitoringConfig {
  ContainerawsBetaClusterMonitoringConfigManagedPrometheusConfig managed_prometheus_config = 1;
}

message ContainerawsBetaClusterMonitoringConfigManagedPrometheusConfig {
  bool enabled = 1;
}

message ContainerawsBetaClusterBinaryAuthorization {
  ContainerawsBetaClusterBinaryAuthorizationEvaluationModeEnum evaluation_mode = 1;
}

message ApplyContainerawsBetaClusterRequest {
  ContainerawsBetaCluster resource = 1;
  repeated LifecycleDirective lifecycle_directives = 2;
  string service_account_file = 3;
}

message DeleteContainerawsBetaClusterRequest {
  string service_account_file = 1;
  ContainerawsBetaCluster resource = 2;
}

message ListContainerawsBetaClusterRequest {
  string service_account_file = 1;
  string Project = 2;
  string Location = 3;
}

message ListContainerawsBetaClusterResponse {
  repeated ContainerawsBetaCluster items = 1;
}

service ContainerawsBetaClusterService {
  rpc ApplyContainerawsBetaCluster(ApplyContainerawsBetaClusterRequest) returns (ContainerawsBetaCluster);
  rpc DeleteContainerawsBetaCluster(DeleteContainerawsBetaClusterRequest) returns (google.protobuf.Empty);
  rpc ListContainerawsBetaCluster(ListContainerawsBetaClusterRequest) returns (ListContainerawsBetaClusterResponse);
}
