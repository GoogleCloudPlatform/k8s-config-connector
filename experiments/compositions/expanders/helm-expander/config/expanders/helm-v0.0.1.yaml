# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: helm-v0.0.1
  namespace: system
  labels:
    control-plane: expander-helm-v0.0.1
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: helm-v0.0.1
    app.kubernetes.io/component: expanders
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/part-of: composition
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: expander-helm-v0.0.1
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: expander
      labels:
        control-plane: expander-helm-v0.0.1
    spec:
      # (user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #           - key: kubernetes.io/arch
      #             operator: In
      #             values:
      #               - amd64
      #               - arm64
      #               - ppc64le
      #               - s390x
      #           - key: kubernetes.io/os
      #             operator: In
      #             values:
      #               - linux
      #securityContext:
      #  runAsNonRoot: true
        # (user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. OpenShift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /expander
        args:
        - --port=8443
        image: expander-helm:v0.0.1
        #imagePullPolicy: Always
        name: helm
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - "ALL"
        # (user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 128Mi
      #serviceAccountName: helm-expander
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: expander-helm
    app.kubernetes.io/created-by: composition
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: service
    app.kubernetes.io/part-of: composition
    app.kubernetes.io/instance: helm-v0.0.1
    app.kubernetes.io/component: expanders
  name: helm-v0-0-1
  namespace: system
spec:
  # type: LoadBalancer
  # Useful when testing the expander pod inside a kind cluster
  #
  # kubectl get nodes -o wide
  # NAME                 STATUS   ROLES                  AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION          CONTAINER-RUNTIME
  # kind-control-plane   Ready    control-plane,master   22m   v1.21.1   172.17.0.5    <none>        Ubuntu 21.04   6.6.15-2rodete2-amd64   containerd://1.5.2
  #                                                                       ^^^^^^^^
  # kubectl get service -n composition-system composition-helm-v0-0-1
  # NAME                         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
  # composition-helm-v0-0-1   LoadBalancer   10.96.154.242   <pending>     8443:30066/TCP   19m
  #                                                                                 ^^^^
  # 
  # run tests:
  # cd expanders/helm
  # go test -v --addr=172.17.0.5:30066
  #

  #type: LoadBalancer
  ports:
  - name: grpc
    port: 8443
    protocol: TCP
    targetPort: 8443
  selector:
    control-plane: expander-helm-v0.0.1