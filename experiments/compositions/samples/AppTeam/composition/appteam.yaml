# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: composition.google.com/v1alpha1
kind: Composition
metadata:
  name: appteams
  namespace: default
spec:
  inputAPIGroup: appteams.facade.facade
  namespaceMode: explicit
  expanders:
  - type: jinja2
    version: v0.0.1
    name: project
    template: |
      {% set hostProject = 'allotrope-barni' %}
      {% set managedProject = appteams.spec.project %}
      # https://github.com/GoogleCloudPlatform/blueprints/tree/main/catalog/project
      apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
      kind: Project
      metadata:
        name: {{ managedProject }}
        namespace: {{ appteams.metadata.namespace }}
        #annotations:
        #  cnrm.cloud.google.com/auto-create-network: "false"
        labels:
          createdby: "composition-appteam"
      spec:
        name: {{ managedProject }}
        billingAccountRef:
          external: "010E8D-490B6B-088E1C"
        folderRef:
          external: "722947980017"
  - type: jinja2
    name: namespace
    version: v0.0.1
    template: |
      {% set hostProject = 'allotrope-barni' %}
      {% set managedProject = appteams.spec.project %}
      {% set namespace = appteams.spec.project %}
      # Create namespace in the Kubernetes cluster to manage KCC resources in this project
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ namespace }}
        annotations:
          cnrm.cloud.google.com/project-id: {{ managedProject }}
  - type: jinja2
    name: setup-kcc
    version: v0.0.1
    template: |
      {% set hostProject = 'allotrope-barni' %}
      {% set managedProject = appteams.spec.project %}
      {% set namespace = appteams.spec.project %}
      # Enable KCC for this namespace
      apiVersion: core.cnrm.cloud.google.com/v1beta1
      kind: ConfigConnectorContext
      metadata:
        name: configconnectorcontext.core.cnrm.cloud.google.com
        namespace: {{ namespace }}
      spec:
        googleServiceAccount: kcc-{{ managedProject }}@{{ hostProject }}.iam.gserviceaccount.com
      ---
      # Create GCP ServiceAccount for use by KCC to manage resources in this project
      apiVersion: iam.cnrm.cloud.google.com/v1beta1
      kind: IAMServiceAccount
      metadata:
        name: kcc-{{ managedProject }}
        namespace: {{ appteams.metadata.namespace }}
        #annotations:
          #cnrm.cloud.google.com/project-id: {{ hostProject }}
          #cnrm.cloud.google.com/ignore-clusterless: "true"
      spec:
        displayName: kcc-{{ managedProject }}
      ---
      # Allow KCC's Kubernetes Service Account to use the GCP ServiceAccount
      apiVersion: iam.cnrm.cloud.google.com/v1beta1
      kind: IAMPartialPolicy
      metadata:
        name: {{ managedProject }}-sa-workload-identity-binding
        namespace: {{ appteams.metadata.namespace }}
      spec:
        resourceRef:
          name: kcc-{{ managedProject }}
          apiVersion: iam.cnrm.cloud.google.com/v1beta1
          kind: IAMServiceAccount
        bindings:
          - role: roles/iam.workloadIdentityUser
            members:
              - member: serviceAccount:{{ hostProject }}.svc.id.goog[cnrm-system/cnrm-controller-manager-{{ managedProject }}]
  - type: jinja2
    name: project-owner
    version: v0.0.1
    template: |
      {% set hostProject = 'allotrope-barni' %}
      {% set managedProject = appteams.spec.project %}
      {% set namespace = appteams.spec.project %}
      # Grant KCC owner of this project
      apiVersion: iam.cnrm.cloud.google.com/v1beta1
      kind: IAMPartialPolicy
      metadata:
        name: kcc-owners-permissions-{{ managedProject }}
        namespace: {{ appteams.metadata.namespace }}
        #annotations:
        #  cnrm.cloud.google.com/project-id: {{ hostProject }}
        #  cnrm.cloud.google.com/ignore-clusterless: "true"
      spec:
        resourceRef:
          apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
          kind: Project
          external: {{ managedProject }}
        bindings:
          - role: roles/owner
            members:
              - member: serviceAccount:kcc-{{ managedProject }}@{{ hostProject }}.iam.gserviceaccount.com
              - member: user:barni@google.com
  - type: jinja2
    name: bucket
    version: v0.0.1
    template: |
      {% set managedProject = appteams.spec.project %}
      {% set namespace = appteams.spec.project %}
      apiVersion: storage.cnrm.cloud.google.com/v1beta1
      kind: StorageBucket
      metadata:
        name: test-bucket-{{ managedProject }}
        namespace: {{ namespace }}
        annotations:
          cnrm.cloud.google.com/project-id: {{ managedProject }}
      spec:
        location: us-central1
        storageClass: standard
        uniformBucketLevelAccess: true
        versioning:
          enabled: false
  - type: jinja2
    name: compositions-context
    version: v0.0.1
    template: |
      {% set managedProject = appteams.spec.project %}
      {% set namespace = appteams.spec.project %}
      apiVersion: composition.google.com/v1alpha1
      kind: Context
      metadata:
        name: context
        namespace: {{ namespace }}
      spec:
        project: {{ managedProject }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: composition-facade
rules:
- apiGroups:
  - facade.facade
  resources:
  - '*'
  verbs:
  - get
  - list
  - patch
  - update
  - watch
  - create
  - delete
- apiGroups:
  - facade.facade
  resources:
  - "*/status"
  verbs:
  - get
  - update
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: composition-facade
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: composition-facade
subjects:
- kind: ServiceAccount
  name: composition-controller-manager
  namespace: composition-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: appteams.facade.facade
spec:
  group: facade.facade
  names:
    kind: AppTeam
    listKind: AppTeamList
    plural: appteams
    singular: appteam
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: AppTeam is the Schema for the appteams API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: AppTeamSpec defines the desired state of AppTeam
            properties:
              project:
                type: string
            required:
            - project
            type: object
          status:
            description: AppTeamStatus defines the observed state of AppTeam
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}