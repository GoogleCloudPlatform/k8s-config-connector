# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: composition.google.com/v1alpha1
kind: Facade
metadata:
  name: attachedeks
  namespace: default
spec:
  facadeKind: AttachedEKS
  openAPIV3Schema:
    description: AttachedEKS defines the parameters for attaching EKS cluster to GCP.
    properties:
      adminUsers:
        items:
          type: string
        type: array
      attachedPlatformVersion:
        type: string
      awsAvilibilityZones:
        items:
          properties:
            privateSubnet:
              type: string
            publicSubnet:
              type: string
            surffix:
              type: string
          type: object
        type: array
      awsRegion:
        type: string
      awsAccessIdentity:
        type: string
      gcpProjectNumber:
        type: string
      gcpRegion:
        type: string
      kubernetesVersion:
        type: string
    type: object
---
apiVersion: composition.google.com/v1alpha1
kind: GetterConfiguration
metadata:
  name: eks-issuer
  namespace: default
spec:
  valuesFrom:
  - name: issuer
    resourceRef:
      group: ""
      version: v1
      kind: ConfigMap
      resource: configmaps
      nameSuffix: "-issuer"
    fieldRef:
    - path: ".data.oidc"
      as: url
---
apiVersion: composition.google.com/v1alpha1
kind: Composition
metadata:
  name: compo-eks-1
  namespace: default
spec:
  inputAPIGroup: attachedekses.facade.compositions.google.com
  expanders:
  - type: jinja2
    version: v0.0.1
    name: create-vpc
    template: |
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: VPC
      metadata:
        name: {{ attachedekses.metadata.name }}-vpc
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        cidrBlocks: 
        - "10.0.0.0/16"
        enableDNSSupport: true
        enableDNSHostnames: true
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-vpc
  - type: jinja2
    version: v0.0.1
    name: create-route-tables
    template: |
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: InternetGateway
      metadata:
        name: {{ attachedekses.metadata.name }}-igw
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        vpcRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-vpc
        # routeTableRefs:
        # - from: 
        #     name: {{ attachedekses.metadata.name }}-public-rt
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-igw
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      metadata:
        name: {{ attachedekses.metadata.name }}-public-rt
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        vpcRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-vpc
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-public-rt
        routes:
        - destinationCIDRBlock: "0.0.0.0/0"
          gatewayRef: 
            from: 
              name: {{ attachedekses.metadata.name }}-igw
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: RouteTable
      metadata:
        name: {{ attachedekses.metadata.name }}-private-rt
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        vpcRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-vpc
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-private-rt
  - type: jinja2
    version: v0.0.1
    name: create-subnets
    template: |
      {% for zone in attachedekses.spec.awsAvilibilityZones %}
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: {{ attachedekses.metadata.name }}-public-{{ zone.surffix }}
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        vpcRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-vpc
        availabilityZone: {{ attachedekses.spec.awsRegion }}{{ zone.surffix }}
        cidrBlock: {{ zone.publicSubnet }}
        mapPublicIPOnLaunch: true
        routeTableRefs:
          - from: 
              name: {{ attachedekses.metadata.name }}-public-rt
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-public-{{ zone.surffix }}
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: Subnet
      metadata:
        name: {{ attachedekses.metadata.name }}-private-{{ zone.surffix }}
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        vpcRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-vpc
        availabilityZone: {{ attachedekses.spec.awsRegion }}{{ zone.surffix }}
        cidrBlock: {{ zone.privateSubnet }}
        routeTableRefs:
          - from: 
              name: {{ attachedekses.metadata.name }}-private-rt
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-private-{{ zone.surffix }}
      ---
      {% endfor %}
  - type: jinja2
    version: v0.0.1
    name: create-nat
    template: |
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: ElasticIPAddress
      metadata:
        name: {{ attachedekses.metadata.name }}-nat-ip
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-nat-ip
      ---
      apiVersion: ec2.services.k8s.aws/v1alpha1
      kind: NATGateway
      metadata:
        name: {{ attachedekses.metadata.name }}-nat
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        allocationRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-nat-ip
        subnetRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-public-{{ attachedekses.spec.awsAvilibilityZones[0].surffix }}
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-nat
  - type: jinja2
    version: v0.0.1
    name: create-role
    template: |
      ---
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: {{ attachedekses.metadata.name }}-cluster-role
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        name: {{ attachedekses.metadata.name }}-cluster-role
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "eks.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        policies:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-cluster-role
      ---
      apiVersion: iam.services.k8s.aws/v1alpha1
      kind: Role
      metadata:
        name: {{ attachedekses.metadata.name }}-node-role
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        name: {{ attachedekses.metadata.name }}-node-role
        assumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
        policies:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        tags:
          - key: Name
            value: {{ attachedekses.metadata.name }}-node-role
  - type: jinja2
    version: v0.0.1
    name: create-eks-cluster
    template: |
      ---
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Cluster
      metadata:
        name: {{ attachedekses.metadata.name }}-cluster
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        name: {{ attachedekses.metadata.name }}-cluster
        version: "1.28"
        roleRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-cluster-role
        accessConfig:
          authenticationMode: "API_AND_CONFIG_MAP"
        resourcesVPCConfig:
          endpointPrivateAccess: true
          endpointPublicAccess: true
          subnetRefs:
          {% for zone in attachedekses.spec.awsAvilibilityZones %}
          - from: 
              name: {{ attachedekses.metadata.name }}-public-{{ zone.surffix }}
          {% endfor %}
      ---
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: Nodegroup
      metadata:
        name: {{ attachedekses.metadata.name }}-np
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        name: {{ attachedekses.metadata.name }}-np
        clusterName: {{ attachedekses.metadata.name }}-cluster
        subnetRefs:
        {% for zone in attachedekses.spec.awsAvilibilityZones %}
        - from: 
            name: {{ attachedekses.metadata.name }}-public-{{ zone.surffix }}
        {% endfor %}
        nodeRoleRef: 
          from: 
            name: {{ attachedekses.metadata.name }}-node-role
        scalingConfig:
          minSize: 1
          maxSize: 2
          desiredSize: 1
        version: "1.28"
      ---
      apiVersion: eks.services.k8s.aws/v1alpha1
      kind: AccessEntry
      metadata:
        name: {{ attachedekses.metadata.name }}-access
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        clusterName: {{ attachedekses.metadata.name }}-cluster
        principalARN: {{ attachedekses.spec.awsAccessIdentity }}
        accessPolicies:
        - policyARN: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          accessScope:
            type: cluster
        kubernetesGroups: 
        - defaultUsers
      ---
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: {{ attachedekses.metadata.name }}-issuer
        namespace: {{ attachedekses.metadata.namespace }}
      data: {}
      ---
  - type: jinja2
    version: v0.0.1
    name: export-eks-data
    template: |
      ---
      apiVersion: services.k8s.aws/v1alpha1
      kind: FieldExport
      metadata:
        name: {{ attachedekses.metadata.name }}-export
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        from: 
          path: ".status.identity.oidc.issuer"
          resource: 
            group: eks.services.k8s.aws
            kind: Cluster
            name: {{ attachedekses.metadata.name }}-cluster
        to: 
          key: oidc
          kind: configmap
          name: {{ attachedekses.metadata.name }}-issuer
          namespace: {{ attachedekses.metadata.namespace }}
      ---
  - type: getter
    version: v0.0.1
    name: eks-issuer
    template: ""
    configref:
      name: eks-issuer
      namespace: default
  - type: jinja2
    version: v0.0.1
    name: attach
    template: |
      apiVersion: containerattached.cnrm.cloud.google.com/v1beta1
      kind: ContainerAttachedCluster
      metadata:
        name: {{ attachedekses.metadata.name }}-attached
        namespace: {{ attachedekses.metadata.namespace }}
      spec:
        resourceID: {{ attachedekses.metadata.name }}
        location: {{ attachedekses.spec.gcpRegion }}
        projectRef:
          external: {{ context.spec.project }}
        description: "Test composition with EKS"
        distribution: eks
        oidcConfig:
          issuerUrl: {{ values.issuer.url }}
        platformVersion: {{ attachedekses.spec.attachedPlatformVersion }}
        fleet:
          projectRef:
            external: "projects/{{ attachedekses.spec.gcpProjectNumber }}"
        authorization:
          adminUsers: {{ attachedekses.spec.adminUsers }}


