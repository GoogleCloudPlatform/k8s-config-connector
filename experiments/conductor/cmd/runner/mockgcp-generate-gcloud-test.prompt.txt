I am trying to create a test case for mockgcp.

A good test case for mockgcp does the basic operations on a GCP resource by using gcloud to create, list, describe and delete the resource.  It can also do a simple update.

For example, if asked to create a mockgcp test for the gcloud commands under `gcloud pubsub topics`, we create the file mockpubsub/testdata/topic/crud/script.yaml with the following contents:

```script.yaml
- exec: gcloud pubsub topics create test-${uniqueId}
- exec: gcloud pubsub topics describe test-${uniqueId}
- exec: gcloud pubsub topics delete test-${uniqueId}
```

Or to create mockgcp test for the gcloud commands under `gcloud storage buckets` we create the file mockstorage/testdata/bucket/crud/script.yaml with the following contents:

```script.yaml
- exec: gcloud storage buckets create gs://test-${uniqueId}
- exec: gcloud storage buckets describe gs://test-${uniqueId}
- exec: gcloud storage buckets delete gs://test-${uniqueId}
```

Depended resources must be created first and prepended with -pre and cleaned up at the end prepended with -post.  Example pre and post usage:
```script.yaml
- pre: gcloud pubsub topics create test-topic-${uniqueId} --project=${projectId}
- exec: gcloud asset feeds create test-${uniqueId} --pubsub-topic=projects/${projectId}/topics/test-topic-${uniqueId} --project=${projectId}
- exec: gcloud asset feeds describe test-${uniqueId} --project=${projectId}
- exec: gcloud asset feeds update test-${uniqueId} --project=${projectId} --content-type=resource
- exec: gcloud asset feeds delete test-${uniqueId} --project=${projectId}
- post: gcloud pubsub topics delete test-topic-${uniqueId} --project=${projectId}
```

Some hints:

* You should use the CreateFile method to create the script.yaml file in the appropriate directory.  You can use ListFilesInWorkspace to make sure that you are creating a test in a new directory.

* You can run the help command to see the available subcommands, for example you might run `gcloud pubsub topics --help`.
If you want to see the flags for any individual commands, you can run the help for them also, for example you might run `gcloud pubsub topics create --help`.

* You should run the help command for each command you output, to verify the flags and arguments of the commands.

* If you must specify a project, use the --project flag with this variable ${projectId}, for example `gcloud pubsub topics create test-${uniqueId} --project=${projectId}`.

* If you must use project in a resource path, use this variable ${projectId}, for example `gcloud data-catalog tags create --entry=projects/${projectId}/locations/us-central1/entryGroups/test-entry-group/entries/test-entry-${uniqueId} --tag=test-tag-${uniqueId}`

* The allowed variables are:
  * ${projectId} - The project ID to use for the test.
  * ${uniqueId} - A unique ID to use for the test.
  * ${BILLING_ACCOUNT_ID} - The billing account ID to use for the test.
  * ${organizationId} - The organization ID if mandatory in the command.
  * ${projectNumber} - The project number to use for the test.

* If the resource requires dependent resources, you should create them in the same script.yaml file.

* Depended resources must be created first and prepended with -pre

* Depended resources must be cleaned up at the end prepended with -post

* Most importantly make sure that all required parameters and flags are included in the commands

Please create a test case for the gcloud commands under `{{ .GcloudCommand }}`
Please create the test case in the file `mock{{ .Group }}/testdata/{{ .Resource }}/crud/script.yaml`

When you have completed, please output the name of the test script you have created, in a JSON format like this:

{ "path_to_created_test": "mock{{ .Group }}/testdata/{{ .Resource }}/crud/script.yaml" }

