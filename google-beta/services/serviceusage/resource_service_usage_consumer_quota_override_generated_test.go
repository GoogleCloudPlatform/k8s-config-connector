// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package serviceusage_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckServiceUsageConsumerQuotaOverrideDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideExample(context),
			},
			{
				ResourceName:            "google_service_usage_consumer_quota_override.override",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"force", "service", "metric", "limit"},
			},
		},
	})
}

func testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "my_project" {
  provider   = google-beta
  name       = "tf-test-project"
  project_id = "quota%{random_suffix}"
  org_id     = "%{org_id}"
}

resource "google_service_usage_consumer_quota_override" "override" {
  provider       = google-beta
  project        = google_project.my_project.project_id
  service        = "servicemanagement.googleapis.com"
  metric         = urlencode("servicemanagement.googleapis.com/default_requests")
  limit          = urlencode("/min/project")
  override_value = "95"
  force          = true
}
`, context)
}

func TestAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideZeroValueExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckServiceUsageConsumerQuotaOverrideDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideZeroValueExample(context),
			},
			{
				ResourceName:            "google_service_usage_consumer_quota_override.override",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"force", "service", "metric", "limit"},
			},
		},
	})
}

func testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideZeroValueExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "my_project" {
  provider   = google-beta
  name       = "tf-test-project"
  project_id = "quota%{random_suffix}"
  org_id     = "%{org_id}"
}

resource "google_service_usage_consumer_quota_override" "override" {
  provider       = google-beta
  project        = google_project.my_project.project_id
  service        = "servicemanagement.googleapis.com"
  metric         = urlencode("servicemanagement.googleapis.com/default_requests")
  limit          = urlencode("/min/project")
  override_value = "0"
  force          = true
}
`, context)
}

func TestAccServiceUsageConsumerQuotaOverride_regionConsumerQuotaOverrideExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckServiceUsageConsumerQuotaOverrideDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccServiceUsageConsumerQuotaOverride_regionConsumerQuotaOverrideExample(context),
			},
			{
				ResourceName:            "google_service_usage_consumer_quota_override.override",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"force", "service", "metric", "limit"},
			},
		},
	})
}

func testAccServiceUsageConsumerQuotaOverride_regionConsumerQuotaOverrideExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "my_project" {
  provider   = google-beta
  name       = "tf-test-project"
  project_id = "quota%{random_suffix}"
  org_id     = "%{org_id}"
}

resource "google_service_usage_consumer_quota_override" "override" {
  provider       = google-beta
  dimensions = {
    region = "us-central1"
  }
  project        = google_project.my_project.project_id
  service        = "compute.googleapis.com"
  metric         = urlencode("compute.googleapis.com/n2_cpus")
  limit          = urlencode("/project/region")
  override_value = "8"
  force          = true
}
`, context)
}

func TestAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideCustomDimensionExample(t *testing.T) {
	t.Parallel()

	context := map[string]interface{}{
		"org_id":        envvar.GetTestOrgFromEnv(t),
		"random_suffix": acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckServiceUsageConsumerQuotaOverrideDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideCustomDimensionExample(context),
			},
			{
				ResourceName:            "google_service_usage_consumer_quota_override.override",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"force", "service", "metric", "limit"},
			},
		},
	})
}

func testAccServiceUsageConsumerQuotaOverride_consumerQuotaOverrideCustomDimensionExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_project" "my_project" {
  provider   = google-beta
  name       = "tf-test-project"
  project_id = "quota%{random_suffix}"
  org_id     = "%{org_id}"
}

resource "google_service_usage_consumer_quota_override" "override" {
  provider       = google-beta
  project        = google_project.my_project.project_id
  service        = "libraryagent.googleapis.com"
  metric         = urlencode("libraryagent.googleapis.com/borrows")
  limit          = urlencode("/author/project")
  override_value = "1"
  force          = true
  dimensions = {
    author = "larry"
  }
}
`, context)
}

func testAccCheckServiceUsageConsumerQuotaOverrideDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_service_usage_consumer_quota_override" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{ServiceUsageBasePath}}projects/{{project}}/services/{{service}}/consumerQuotaMetrics/{{metric}}/limits/{{limit}}/consumerOverrides/")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				// Sometimes the API returns an empty response instead of erroring, treat empty as nonexistent
				if len(res) != 0 {
					return fmt.Errorf("ServiceUsageConsumerQuotaOverride still exists at %s", url)
				}
			}
		}

		return nil
	}
}
