// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataform

import (
	"fmt"
	"log"
	"reflect"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ResourceDataformRepositoryReleaseConfig() *schema.Resource {
	return &schema.Resource{
		Create: resourceDataformRepositoryReleaseConfigCreate,
		Read:   resourceDataformRepositoryReleaseConfigRead,
		Update: resourceDataformRepositoryReleaseConfigUpdate,
		Delete: resourceDataformRepositoryReleaseConfigDelete,

		Importer: &schema.ResourceImporter{
			State: resourceDataformRepositoryReleaseConfigImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(20 * time.Minute),
			Update: schema.DefaultTimeout(20 * time.Minute),
			Delete: schema.DefaultTimeout(20 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"git_commitish": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository.`,
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The release's name.`,
			},
			"code_compilation_config": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: `Optional. If set, fields of codeCompilationConfig override the default compilation settings that are specified in dataform.json.`,
				MaxItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"assertion_schema": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The default schema (BigQuery dataset ID) for assertions.`,
						},
						"database_suffix": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The suffix that should be appended to all database (Google Cloud project ID) names.`,
						},
						"default_database": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The default database (Google Cloud project ID).`,
						},
						"default_location": {
							Type:     schema.TypeString,
							Optional: true,
							Description: `Optional. The default BigQuery location to use. Defaults to "US".
See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.`,
						},
						"default_schema": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The default schema (BigQuery dataset ID).`,
						},
						"schema_suffix": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.`,
						},
						"table_prefix": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: `Optional. The prefix that should be prepended to all table names.`,
						},
						"vars": {
							Type:     schema.TypeMap,
							Optional: true,
							Description: `Optional. User-defined variables that are made available to project code during compilation.
An object containing a list of "key": value pairs.
Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.`,
							Elem: &schema.Schema{Type: schema.TypeString},
						},
					},
				},
			},
			"cron_schedule": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. Optional schedule (in cron format) for automatic creation of compilation results.`,
			},
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `A reference to the region`,
			},
			"repository": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: `A reference to the Dataform repository`,
			},
			"time_zone": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Optional. Specifies the time zone to be used when interpreting cronSchedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.`,
			},
			"recent_scheduled_release_records": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Records of the 10 most recent scheduled release attempts, ordered in in descending order of releaseTime. Updated whenever automatic creation of a compilation result is triggered by cronSchedule.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"compilation_result": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the created compilation result, if one was successfully created. Must be in the format projects/*/locations/*/repositories/*/compilationResults/*.`,
						},
						"error_status": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"code": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The status code, which should be an enum value of google.rpc.Code.`,
									},
									"message": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.`,
									},
								},
							},
						},
						"release_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The timestamp of this release attempt.`,
						},
					},
				},
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceDataformRepositoryReleaseConfigCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	nameProp, err := expandDataformRepositoryReleaseConfigName(d.Get("name"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	gitCommitishProp, err := expandDataformRepositoryReleaseConfigGitCommitish(d.Get("git_commitish"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("git_commitish"); !tpgresource.IsEmptyValue(reflect.ValueOf(gitCommitishProp)) && (ok || !reflect.DeepEqual(v, gitCommitishProp)) {
		obj["gitCommitish"] = gitCommitishProp
	}
	cronScheduleProp, err := expandDataformRepositoryReleaseConfigCronSchedule(d.Get("cron_schedule"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cron_schedule"); !tpgresource.IsEmptyValue(reflect.ValueOf(cronScheduleProp)) && (ok || !reflect.DeepEqual(v, cronScheduleProp)) {
		obj["cronSchedule"] = cronScheduleProp
	}
	timeZoneProp, err := expandDataformRepositoryReleaseConfigTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(timeZoneProp)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	codeCompilationConfigProp, err := expandDataformRepositoryReleaseConfigCodeCompilationConfig(d.Get("code_compilation_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("code_compilation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(codeCompilationConfigProp)) && (ok || !reflect.DeepEqual(v, codeCompilationConfigProp)) {
		obj["codeCompilationConfig"] = codeCompilationConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataformBasePath}}projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs?releaseConfigId={{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new RepositoryReleaseConfig: %#v", obj)
	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RepositoryReleaseConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "POST",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
	})
	if err != nil {
		return fmt.Errorf("Error creating RepositoryReleaseConfig: %s", err)
	}

	// Store the ID now
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating RepositoryReleaseConfig %q: %#v", d.Id(), res)

	return resourceDataformRepositoryReleaseConfigRead(d, meta)
}

func resourceDataformRepositoryReleaseConfigRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataformBasePath}}projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RepositoryReleaseConfig: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("DataformRepositoryReleaseConfig %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}

	if err := d.Set("name", flattenDataformRepositoryReleaseConfigName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}
	if err := d.Set("git_commitish", flattenDataformRepositoryReleaseConfigGitCommitish(res["gitCommitish"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}
	if err := d.Set("cron_schedule", flattenDataformRepositoryReleaseConfigCronSchedule(res["cronSchedule"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}
	if err := d.Set("time_zone", flattenDataformRepositoryReleaseConfigTimeZone(res["timeZone"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}
	if err := d.Set("code_compilation_config", flattenDataformRepositoryReleaseConfigCodeCompilationConfig(res["codeCompilationConfig"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}
	if err := d.Set("recent_scheduled_release_records", flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecords(res["recentScheduledReleaseRecords"], d, config)); err != nil {
		return fmt.Errorf("Error reading RepositoryReleaseConfig: %s", err)
	}

	return nil
}

func resourceDataformRepositoryReleaseConfigUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RepositoryReleaseConfig: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	gitCommitishProp, err := expandDataformRepositoryReleaseConfigGitCommitish(d.Get("git_commitish"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("git_commitish"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, gitCommitishProp)) {
		obj["gitCommitish"] = gitCommitishProp
	}
	cronScheduleProp, err := expandDataformRepositoryReleaseConfigCronSchedule(d.Get("cron_schedule"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("cron_schedule"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, cronScheduleProp)) {
		obj["cronSchedule"] = cronScheduleProp
	}
	timeZoneProp, err := expandDataformRepositoryReleaseConfigTimeZone(d.Get("time_zone"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("time_zone"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, timeZoneProp)) {
		obj["timeZone"] = timeZoneProp
	}
	codeCompilationConfigProp, err := expandDataformRepositoryReleaseConfigCodeCompilationConfig(d.Get("code_compilation_config"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("code_compilation_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, codeCompilationConfigProp)) {
		obj["codeCompilationConfig"] = codeCompilationConfigProp
	}

	url, err := tpgresource.ReplaceVars(d, config, "{{DataformBasePath}}projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating RepositoryReleaseConfig %q: %#v", d.Id(), obj)

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutUpdate),
	})

	if err != nil {
		return fmt.Errorf("Error updating RepositoryReleaseConfig %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating RepositoryReleaseConfig %q: %#v", d.Id(), res)
	}

	return resourceDataformRepositoryReleaseConfigRead(d, meta)
}

func resourceDataformRepositoryReleaseConfigDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*transport_tpg.Config)
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for RepositoryReleaseConfig: %s", err)
	}
	billingProject = project

	url, err := tpgresource.ReplaceVars(d, config, "{{DataformBasePath}}projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting RepositoryReleaseConfig %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "DELETE",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutDelete),
	})
	if err != nil {
		return transport_tpg.HandleNotFoundError(err, d, "RepositoryReleaseConfig")
	}

	log.Printf("[DEBUG] Finished deleting RepositoryReleaseConfig %q: %#v", d.Id(), res)
	return nil
}

func resourceDataformRepositoryReleaseConfigImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*transport_tpg.Config)
	if err := tpgresource.ParseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/repositories/(?P<repository>[^/]+)/releaseConfigs/(?P<name>[^/]+)",
		"(?P<project>[^/]+)/(?P<region>[^/]+)/(?P<repository>[^/]+)/(?P<name>[^/]+)",
		"(?P<region>[^/]+)/(?P<repository>[^/]+)/(?P<name>[^/]+)",
		"(?P<repository>[^/]+)/(?P<name>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := tpgresource.ReplaceVars(d, config, "projects/{{project}}/locations/{{region}}/repositories/{{repository}}/releaseConfigs/{{name}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenDataformRepositoryReleaseConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenDataformRepositoryReleaseConfigGitCommitish(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCronSchedule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["default_database"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(original["defaultDatabase"], d, config)
	transformed["default_schema"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(original["defaultSchema"], d, config)
	transformed["default_location"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(original["defaultLocation"], d, config)
	transformed["assertion_schema"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(original["assertionSchema"], d, config)
	transformed["vars"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigVars(original["vars"], d, config)
	transformed["database_suffix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(original["databaseSuffix"], d, config)
	transformed["schema_suffix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(original["schemaSuffix"], d, config)
	transformed["table_prefix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(original["tablePrefix"], d, config)
	return []interface{}{transformed}
}
func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigVars(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecords(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"release_time":       flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsReleaseTime(original["releaseTime"], d, config),
			"compilation_result": flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsCompilationResult(original["compilationResult"], d, config),
			"error_status":       flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatus(original["errorStatus"], d, config),
		})
	}
	return transformed
}
func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsReleaseTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsCompilationResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusCode(original["code"], d, config)
	transformed["message"] =
		flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusMessage(original["message"], d, config)
	return []interface{}{transformed}
}
func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func expandDataformRepositoryReleaseConfigName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigGitCommitish(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCronSchedule(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigTimeZone(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDefaultDatabase, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(original["default_database"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultDatabase); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultDatabase"] = transformedDefaultDatabase
	}

	transformedDefaultSchema, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(original["default_schema"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultSchema"] = transformedDefaultSchema
	}

	transformedDefaultLocation, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(original["default_location"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDefaultLocation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["defaultLocation"] = transformedDefaultLocation
	}

	transformedAssertionSchema, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(original["assertion_schema"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAssertionSchema); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["assertionSchema"] = transformedAssertionSchema
	}

	transformedVars, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigVars(original["vars"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVars); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vars"] = transformedVars
	}

	transformedDatabaseSuffix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(original["database_suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseSuffix"] = transformedDatabaseSuffix
	}

	transformedSchemaSuffix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(original["schema_suffix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSchemaSuffix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["schemaSuffix"] = transformedSchemaSuffix
	}

	transformedTablePrefix, err := expandDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(original["table_prefix"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTablePrefix); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tablePrefix"] = transformedTablePrefix
	}

	return transformed, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigVars(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
