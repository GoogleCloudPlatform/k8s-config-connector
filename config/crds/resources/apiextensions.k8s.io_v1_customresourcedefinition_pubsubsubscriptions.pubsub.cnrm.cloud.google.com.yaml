apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cnrm.cloud.google.com/version: 0.0.0-dev
  creationTimestamp: null
  labels:
    cnrm.cloud.google.com/managed-by-kcc: "true"
    cnrm.cloud.google.com/stability-level: stable
    cnrm.cloud.google.com/system: "true"
    cnrm.cloud.google.com/tf2crd: "true"
  name: pubsubsubscriptions.pubsub.cnrm.cloud.google.com
spec:
  group: pubsub.cnrm.cloud.google.com
  names:
    categories:
    - gcp
    kind: PubSubSubscription
    plural: pubsubsubscriptions
    shortNames:
    - gcppubsubsubscription
    - gcppubsubsubscriptions
    singular: pubsubsubscription
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: When 'True', the most recent reconcile of the resource succeeded
      jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: Ready
      type: string
    - description: The reason for the value in 'Ready'
      jsonPath: .status.conditions[?(@.type=='Ready')].reason
      name: Status
      type: string
    - description: The last transition time for the value in 'Status'
      jsonPath: .status.conditions[?(@.type=='Ready')].lastTransitionTime
      name: Status Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            description: 'apiVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
            type: string
          kind:
            description: 'kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              ackDeadlineSeconds:
                description: |-
                  This value is the maximum time after a subscriber receives a message
                  before the subscriber should acknowledge the message. After message
                  delivery but before the ack deadline expires and before the message is
                  acknowledged, it is an outstanding message and will not be delivered
                  again during that time (on a best-effort basis).

                  For pull subscriptions, this value is used as the initial value for
                  the ack deadline. To override this value for a given message, call
                  subscriptions.modifyAckDeadline with the corresponding ackId if using
                  pull. The minimum custom deadline you can specify is 10 seconds. The
                  maximum custom deadline you can specify is 600 seconds (10 minutes).
                  If this parameter is 0, a default value of 10 seconds is used.

                  For push delivery, this value is also used to set the request timeout
                  for the call to the push endpoint.

                  If the subscriber never acknowledges the message, the Pub/Sub system
                  will eventually redeliver the message.
                type: integer
              bigqueryConfig:
                description: |-
                  If delivery to BigQuery is used with this subscription, this field is used to configure it.
                  Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
                  If all three are empty, then the subscriber will pull and ack messages using API methods.
                properties:
                  dropUnknownFields:
                    description: |-
                      When true and useTopicSchema is true, any fields that are a part of the topic schema that are not part of the BigQuery table schema are dropped when writing to BigQuery.
                      Otherwise, the schemas must be kept in sync and any messages with extra fields are not written and remain in the subscription's backlog.
                    type: boolean
                  tableRef:
                    description: The name of the table to which to write data.
                    oneOf:
                    - not:
                        required:
                        - external
                      required:
                      - name
                    - not:
                        anyOf:
                        - required:
                          - name
                        - required:
                          - namespace
                      required:
                      - external
                    properties:
                      external:
                        description: 'Allowed value: string of the format `{{project}}.{{dataset_id}}.{{value}}`,
                          where {{value}} is the `name` field of a `BigQueryTable`
                          resource.'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                    type: object
                  useTopicSchema:
                    description: When true, use the topic's schema as the columns
                      to write to in BigQuery, if it exists.
                    type: boolean
                  writeMetadata:
                    description: |-
                      When true, write the subscription name, messageId, publishTime, attributes, and orderingKey to additional columns in the table.
                      The subscription name, messageId, and publishTime fields are put in their own columns while all other message properties (other than data) are written to a JSON object in the attributes column.
                    type: boolean
                required:
                - tableRef
                type: object
              cloudStorageConfig:
                description: |-
                  If delivery to Cloud Storage is used with this subscription, this field is used to configure it.
                  Either pushConfig, bigQueryConfig or cloudStorageConfig can be set, but not combined.
                  If all three are empty, then the subscriber will pull and ack messages using API methods.
                properties:
                  avroConfig:
                    description: If set, message data will be written to Cloud Storage
                      in Avro format.
                    properties:
                      writeMetadata:
                        description: When true, write the subscription name, messageId,
                          publishTime, attributes, and orderingKey as additional fields
                          in the output.
                        type: boolean
                    type: object
                  bucketRef:
                    description: User-provided name for the Cloud Storage bucket.
                      The bucket must be created by the user. The bucket name must
                      be without any prefix like "gs://".
                    oneOf:
                    - not:
                        required:
                        - external
                      required:
                      - name
                    - not:
                        anyOf:
                        - required:
                          - name
                        - required:
                          - namespace
                      required:
                      - external
                    properties:
                      external:
                        description: 'Allowed value: The `name` field of a `StorageBucket`
                          resource.'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                    type: object
                  filenamePrefix:
                    description: User-provided prefix for Cloud Storage filename.
                    type: string
                  filenameSuffix:
                    description: User-provided suffix for Cloud Storage filename.
                      Must not end in "/".
                    type: string
                  maxBytes:
                    description: |-
                      The maximum bytes that can be written to a Cloud Storage file before a new file is created. Min 1 KB, max 10 GiB.
                      The maxBytes limit may be exceeded in cases where messages are larger than the limit.
                    type: integer
                  maxDuration:
                    description: |-
                      The maximum duration that can elapse before a new Cloud Storage file is created. Min 1 minute, max 10 minutes, default 5 minutes.
                      May not exceed the subscription's acknowledgement deadline.
                      A duration in seconds with up to nine fractional digits, ending with 's'. Example: "3.5s".
                    type: string
                  state:
                    description: An output-only field that indicates whether or not
                      the subscription can receive messages.
                    type: string
                required:
                - bucketRef
                type: object
              deadLetterPolicy:
                description: |-
                  A policy that specifies the conditions for dead lettering messages in
                  this subscription. If dead_letter_policy is not set, dead lettering
                  is disabled.

                  The Cloud Pub/Sub service account associated with this subscription's
                  parent project (i.e.,
                  service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
                  permission to Acknowledge() messages on this subscription.
                properties:
                  deadLetterTopicRef:
                    oneOf:
                    - not:
                        required:
                        - external
                      required:
                      - name
                    - not:
                        anyOf:
                        - required:
                          - name
                        - required:
                          - namespace
                      required:
                      - external
                    properties:
                      external:
                        description: 'Allowed value: string of the format `projects/{{project}}/topics/{{value}}`,
                          where {{value}} is the `name` field of a `PubSubTopic` resource.'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                    type: object
                  maxDeliveryAttempts:
                    description: |-
                      The maximum number of delivery attempts for any message. The value must be
                      between 5 and 100.

                      The number of delivery attempts is defined as 1 + (the sum of number of
                      NACKs and number of times the acknowledgement deadline has been exceeded for the message).

                      A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
                      client libraries may automatically extend ack_deadlines.

                      This field will be honored on a best effort basis.

                      If this parameter is 0, a default value of 5 is used.
                    type: integer
                type: object
              enableExactlyOnceDelivery:
                description: |-
                  If 'true', Pub/Sub provides the following guarantees for the delivery
                  of a message with a given value of messageId on this Subscriptions':

                  - The message sent to a subscriber is guaranteed not to be resent before the message's acknowledgement deadline expires.

                  - An acknowledged message will not be resent to a subscriber.

                  Note that subscribers may still receive multiple copies of a message when 'enable_exactly_once_delivery'
                  is true if the message was published multiple times by a publisher client. These copies are considered distinct by Pub/Sub and have distinct messageId values.
                type: boolean
              enableMessageOrdering:
                description: |-
                  Immutable. If 'true', messages published with the same orderingKey in PubsubMessage will be delivered to
                  the subscribers in the order in which they are received by the Pub/Sub system. Otherwise, they
                  may be delivered in any order.
                type: boolean
              expirationPolicy:
                description: |-
                  A policy that specifies the conditions for this subscription's expiration.
                  A subscription is considered active as long as any connected subscriber
                  is successfully consuming messages from the subscription or is issuing
                  operations on the subscription. If expirationPolicy is not set, a default
                  policy with ttl of 31 days will be used.  If it is set but ttl is "", the
                  resource never expires.  The minimum allowed value for expirationPolicy.ttl
                  is 1 day.
                properties:
                  ttl:
                    description: |-
                      Specifies the "time-to-live" duration for an associated resource. The
                      resource expires if it is not active for a period of ttl.
                      If ttl is set to "", the associated resource never expires.
                      A duration in seconds with up to nine fractional digits, terminated by 's'.
                      Example - "3.5s".
                    type: string
                required:
                - ttl
                type: object
              filter:
                description: |-
                  Immutable. The subscription only delivers the messages that match the filter.
                  Pub/Sub automatically acknowledges the messages that don't match the filter. You can filter messages
                  by their attributes. The maximum length of a filter is 256 bytes. After creating the subscription,
                  you can't modify the filter.
                type: string
              messageRetentionDuration:
                description: |-
                  How long to retain unacknowledged messages in the subscription's
                  backlog, from the moment a message is published. If
                  retain_acked_messages is true, then this also configures the retention
                  of acknowledged messages, and thus configures how far back in time a
                  subscriptions.seek can be done. Defaults to 7 days. Cannot be more
                  than 7 days ('"604800s"') or less than 10 minutes ('"600s"').

                  A duration in seconds with up to nine fractional digits, terminated
                  by 's'. Example: '"600.5s"'.
                type: string
              pushConfig:
                description: |-
                  If push delivery is used with this subscription, this field is used to
                  configure it. An empty pushConfig signifies that the subscriber will
                  pull and ack messages using API methods.
                properties:
                  attributes:
                    additionalProperties:
                      type: string
                    description: |-
                      Endpoint configuration attributes.

                      Every endpoint has a set of API supported attributes that can
                      be used to control different aspects of the message delivery.

                      The currently supported attribute is x-goog-version, which you
                      can use to change the format of the pushed message. This
                      attribute indicates the version of the data expected by
                      the endpoint. This controls the shape of the pushed message
                      (i.e., its fields and metadata). The endpoint version is
                      based on the version of the Pub/Sub API.

                      If not present during the subscriptions.create call,
                      it will default to the version of the API used to make
                      such call. If not present during a subscriptions.modifyPushConfig
                      call, its value will not be changed. subscriptions.get
                      calls will always return a valid version, even if the
                      subscription was created without this attribute.

                      The possible values for this attribute are:

                      - v1beta1: uses the push format defined in the v1beta1 Pub/Sub API.
                      - v1 or v1beta2: uses the push format defined in the v1 Pub/Sub API.
                    type: object
                  noWrapper:
                    description: |-
                      When set, the payload to the push endpoint is not wrapped.Sets the
                      'data' field as the HTTP body for delivery.
                    properties:
                      writeMetadata:
                        description: |-
                          When true, writes the Pub/Sub message metadata to
                          'x-goog-pubsub-<KEY>:<VAL>' headers of the HTTP request. Writes the
                          Pub/Sub message attributes to '<KEY>:<VAL>' headers of the HTTP request.
                        type: boolean
                    required:
                    - writeMetadata
                    type: object
                  oidcToken:
                    description: |-
                      If specified, Pub/Sub will generate and attach an OIDC JWT token as
                      an Authorization header in the HTTP request for every pushed message.
                    properties:
                      audience:
                        description: |-
                          Audience to be used when generating OIDC token. The audience claim
                          identifies the recipients that the JWT is intended for. The audience
                          value is a single case-sensitive string. Having multiple values (array)
                          for the audience field is not supported. More info about the OIDC JWT
                          token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
                          Note: if not specified, the Push endpoint URL will be used.
                        type: string
                      serviceAccountEmail:
                        description: |-
                          Service account email to be used for generating the OIDC token.
                          The caller (for subscriptions.create, subscriptions.patch, and
                          subscriptions.modifyPushConfig RPCs) must have the
                          iam.serviceAccounts.actAs permission for the service account.
                        type: string
                    required:
                    - serviceAccountEmail
                    type: object
                  pushEndpoint:
                    description: |-
                      A URL locating the endpoint to which messages should be pushed.
                      For example, a Webhook endpoint might use
                      "https://example.com/push".
                    type: string
                required:
                - pushEndpoint
                type: object
              resourceID:
                description: Immutable. Optional. The name of the resource. Used for
                  creation and acquisition. When unset, the value of `metadata.name`
                  is used as the default.
                type: string
              retainAckedMessages:
                description: |-
                  Indicates whether to retain acknowledged messages. If 'true', then
                  messages are not expunged from the subscription's backlog, even if
                  they are acknowledged, until they fall out of the
                  messageRetentionDuration window.
                type: boolean
              retryPolicy:
                description: |-
                  A policy that specifies how Pub/Sub retries message delivery for this subscription.

                  If not set, the default retry policy is applied. This generally implies that messages will be retried as soon as possible for healthy subscribers.
                  RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded events for a given message.
                properties:
                  maximumBackoff:
                    description: |-
                      The maximum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 600 seconds.
                      A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
                    type: string
                  minimumBackoff:
                    description: |-
                      The minimum delay between consecutive deliveries of a given message. Value should be between 0 and 600 seconds. Defaults to 10 seconds.
                      A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
                    type: string
                type: object
              topicRef:
                description: Reference to a PubSubTopic.
                oneOf:
                - not:
                    required:
                    - external
                  required:
                  - name
                - not:
                    anyOf:
                    - required:
                      - name
                    - required:
                      - namespace
                  required:
                  - external
                properties:
                  external:
                    description: 'Allowed value: string of the format `projects/{{project}}/topics/{{value}}`,
                      where {{value}} is the `name` field of a `PubSubTopic` resource.'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                type: object
            required:
            - topicRef
            type: object
          status:
            properties:
              conditions:
                description: Conditions represent the latest available observation
                  of the resource's current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status
                        to another.
                      type: string
                    message:
                      description: Human-readable message indicating details about
                        last transition.
                      type: string
                    reason:
                      description: Unique, one-word, CamelCase reason for the condition's
                        last transition.
                      type: string
                    status:
                      description: Status is the status of the condition. Can be True,
                        False, Unknown.
                      type: string
                    type:
                      description: Type is the type of the condition.
                      type: string
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the generation of the resource
                  that was most recently observed by the Config Connector controller.
                  If this is equal to metadata.generation, then that means that the
                  current reported status reflects the most recent desired state of
                  the resource.
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
