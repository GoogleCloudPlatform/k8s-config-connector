diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/resourcemanager/resource_google_folder.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/resourcemanager/resource_google_folder.go
index 856e09b83..34624045c 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/resourcemanager/resource_google_folder.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/resourcemanager/resource_google_folder.go
@@ -4,7 +4,9 @@ package google
 
 import (
 	"encoding/json"
+	"errors"
 	"fmt"
+	"log"
 	"strings"
 	"time"
 
@@ -14,6 +16,8 @@ import (
 	resourceManagerV3 "google.golang.org/api/cloudresourcemanager/v3"
 )
 
+var activeFolderNotFoundError = errors.New("active folder not found")
+
 func ResourceGoogleFolder() *schema.Resource {
 	return &schema.Resource{
 		Create: resourceGoogleFolderCreate,
@@ -33,12 +37,16 @@ func ResourceGoogleFolder() *schema.Resource {
 		},
 
 		Schema: map[string]*schema.Schema{
-			// Format is either folders/{folder_id} or organizations/{org_id}.
-			"parent": {
+			"parent_org_id": {
 				Type:        schema.TypeString,
-				Required:    true,
-				Description: `The resource name of the parent Folder or Organization. Must be of the form folders/{folder_id} or organizations/{org_id}.`,
+				Optional:    true,
+				Description: `The organization id of the parent Organization. Exactly one of parent_org_id or parent_folder must be specified.`,
 			},
+			"parent_folder_id": {
+				Type:        schema.TypeString,
+				Optional:    true,
+				Description: `The folder id of the parent Folder. Exactly one of parent_org_id or parent_folder_id must be specified.`,
+ 			},
 			// Must be unique amongst its siblings.
 			"display_name": {
 				Type:        schema.TypeString,
@@ -80,7 +88,22 @@ func resourceGoogleFolderCreate(d *schema.ResourceData, meta interface{}) error
 	}
 
 	displayName := d.Get("display_name").(string)
-	parent := d.Get("parent").(string)
+	parent, err := getParentID(d)
+	if err != nil {
+		return fmt.Errorf("Error getting parent for folder '%s': %s", displayName, err)
+	}
+	// Check if there's an ACTIVE folder with the given display_name in the
+	// given parent first before trying to create a new folder. This allows
+	// users to acquire existing folders by specifying the folder's
+	// display_name and parent.
+	folder, err := getActiveFolderByDisplayName(displayName, parent, userAgent, config)
+	if err != nil && !errors.Is(err, activeFolderNotFoundError) {
+		return fmt.Errorf("Error checking if folder '%s' in '%s' exists: %s", displayName, parent, err)
+	} else if err == nil {
+		// An ACTIVE folder with the given display_name in the given parent is found.
+		d.SetId(folder.Name)
+		return resourceGoogleFolderRead(d, meta)
+	}
 
 	var op *resourceManagerV3.Operation
 	err = transport_tpg.Retry(transport_tpg.RetryOptions{
@@ -139,6 +162,13 @@ func resourceGoogleFolderRead(d *schema.ResourceData, meta interface{}) error {
 		return transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("Folder Not Found : %s", d.Id()))
 	}
 
+	// If the folder has been deleted from outside Terraform, remove it from state file.
+	if folder.State != "ACTIVE" {
+		log.Printf("[WARN] Removing folder '%s' because its state is '%s' (requires 'ACTIVE').", d.Id(), folder.State)
+		d.SetId("")
+		return nil
+	}
+
 	if err := d.Set("name", folder.Name); err != nil {
 		return fmt.Errorf("Error setting name: %s", err)
 	}
@@ -146,9 +176,6 @@ func resourceGoogleFolderRead(d *schema.ResourceData, meta interface{}) error {
 	if err := d.Set("folder_id", folderId); err != nil {
 		return fmt.Errorf("Error setting folder_id: %s", err)
 	}
-	if err := d.Set("parent", folder.Parent); err != nil {
-		return fmt.Errorf("Error setting parent: %s", err)
-	}
 	if err := d.Set("display_name", folder.DisplayName); err != nil {
 		return fmt.Errorf("Error setting display_name: %s", err)
 	}
@@ -159,6 +186,20 @@ func resourceGoogleFolderRead(d *schema.ResourceData, meta interface{}) error {
 		return fmt.Errorf("Error setting create_time: %s", err)
 	}
 
+	if strings.HasPrefix(folder.Parent, "organizations/") {
+		orgId := strings.TrimPrefix(folder.Parent, "organizations/")
+		if err := d.Set("parent_org_id", orgId); err != nil {
+			return fmt.Errorf("Error setting parent_org_id: %s", err)
+		}
+	} else if strings.HasPrefix(folder.Parent, "folders/") {
+		folderId := strings.TrimPrefix(folder.Parent, "folders/")
+		if err := d.Set("parent_folder_id", folderId); err != nil {
+			return fmt.Errorf("Error setting parent_folder_id: %s", err)
+		}
+	} else {
+		return fmt.Errorf("Error reading folder '%s' since its parent '%s' has an unrecognizable format.", folder.DisplayName, folder.Parent)
+	}
+
 	return nil
 }
 
@@ -185,11 +226,14 @@ func resourceGoogleFolderUpdate(d *schema.ResourceData, meta interface{}) error
 		}
 	}
 
-	if d.HasChange("parent") {
-		newParent := d.Get("parent").(string)
+	if d.HasChange("parent_org_id") || d.HasChange("parent_folder_id") {
+		newParent, err := getParentID(d)
+		if err != nil {
+			return fmt.Errorf("Error getting parent for folder '%s': %s", displayName, err)
+		}
 
 		var op *resourceManagerV3.Operation
-		err := transport_tpg.Retry(transport_tpg.RetryOptions{
+		err = transport_tpg.Retry(transport_tpg.RetryOptions{
 			RetryFunc: func() error {
 				var reqErr error
 				op, reqErr = config.NewResourceManagerV3Client(userAgent).Folders.Move(d.Id(), &resourceManagerV3.MoveFolderRequest{
@@ -260,6 +304,7 @@ func resourceGoogleFolderImportState(d *schema.ResourceData, m interface{}) ([]*
 	}
 
 	d.SetId(id)
+	d.Set("name", id)
 
 	return []*schema.ResourceData{d}, nil
 }
@@ -281,3 +326,40 @@ func getGoogleFolder(folderName, userAgent string, d *schema.ResourceData, confi
 	}
 	return folder, nil
 }
+
+func getActiveFolderByDisplayName(displayName, parent, userAgent string, config *transport_tpg.Config) (*resourceManagerV3.Folder, error) {
+	pageToken := ""
+	for ok := true; ok; ok = pageToken != "" {
+		query := fmt.Sprintf("state=ACTIVE AND parent=%s AND displayName=\"%s\"", parent, displayName)
+		searchResponse, err := config.NewResourceManagerV3Client(userAgent).Folders.Search().Query(query).PageToken(pageToken).Do()
+		if err != nil {
+			if transport_tpg.IsGoogleApiErrorWithCode(err, 404) {
+				return nil, activeFolderNotFoundError
+			}
+			return nil, fmt.Errorf("error searching for folders with query '%v': %v", query, err)
+		}
+		for _, folder := range searchResponse.Folders {
+			if folder.DisplayName == displayName {
+				return folder, nil
+			}
+		}
+		pageToken = searchResponse.NextPageToken
+	}
+	return nil, activeFolderNotFoundError
+}
+
+func getParentID(d *schema.ResourceData) (string, error) {
+	orgId := d.Get("parent_org_id").(string)
+	folderId := d.Get("parent_folder_id").(string)
+
+	if orgId != "" && folderId != "" {
+		return "", fmt.Errorf("'parent_org_id' and 'parent_folder_id' cannot be both set.")
+	}
+	if orgId != "" {
+		return "organizations/" + orgId, nil
+	}
+	if folderId != "" {
+		return "folders/" + folderId, nil
+	}
+	return "", fmt.Errorf("exactly one of 'parent_org_id' or 'parent_folder_id' must be specified.")
+}
