diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_node_pool.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_node_pool.go
index 441a99237..0094511d2 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_node_pool.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_node_pool.go
@@ -131,7 +131,7 @@ var schemaNodePool = map[string]*schema.Schema{
 		Type:        schema.TypeList,
 		Optional:    true,
 		MaxItems:    1,
-		Description: `Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.`,
+		Description: `Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.`,
 		Elem: &schema.Resource{
 			Schema: map[string]*schema.Schema{
 				"min_node_count": {
@@ -776,12 +776,13 @@ func resourceContainerNodePoolExists(d *schema.ResourceData, meta interface{}) (
 func resourceContainerNodePoolStateImporter(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
 	config := meta.(*transport_tpg.Config)
 
-	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
-	if err != nil {
-		return nil, err
+	idRegexes := []string{
+		"projects/(?P<project>[^/]+)/zones/(?P<location>[^/]+)/clusters/(?P<cluster>[^/]+)/nodePools/(?P<name>[^/]+)",
+		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/clusters/(?P<cluster>[^/]+)/nodePools/(?P<name>[^/]+)",
+		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<cluster>[^/]+)/(?P<name>[^/]+)",
+		"(?P<location>[^/]+)/(?P<cluster>[^/]+)/(?P<name>[^/]+)",
 	}
-
-	if err := tpgresource.ParseImportId([]string{"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/clusters/(?P<cluster>[^/]+)/nodePools/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<cluster>[^/]+)/(?P<name>[^/]+)", "(?P<location>[^/]+)/(?P<cluster>[^/]+)/(?P<name>[^/]+)"}, d, config); err != nil {
+	if err := tpgresource.ParseImportId(idRegexes, d, config); err != nil {
 		return nil, err
 	}
 
@@ -792,26 +793,6 @@ func resourceContainerNodePoolStateImporter(d *schema.ResourceData, meta interfa
 
 	d.SetId(id)
 
-	project, err := tpgresource.GetProject(d, config)
-	if err != nil {
-		return nil, err
-	}
-
-	nodePoolInfo, err := extractNodePoolInformation(d, config)
-	if err != nil {
-		return nil, err
-	}
-
-	//Check cluster is in running state
-	_, err = containerClusterAwaitRestingState(config, nodePoolInfo.project, nodePoolInfo.location, nodePoolInfo.cluster, userAgent, d.Timeout(schema.TimeoutCreate))
-	if err != nil {
-		return nil, err
-	}
-
-	if _, err := containerNodePoolAwaitRestingState(config, d.Id(), project, userAgent, d.Timeout(schema.TimeoutCreate)); err != nil {
-		return nil, err
-	}
-
 	return []*schema.ResourceData{d}, nil
 }
 
@@ -1156,14 +1137,23 @@ func nodePoolUpdate(d *schema.ResourceData, meta interface{}, nodePoolInfo *Node
 		}
 		if v, ok := d.GetOk(prefix + "autoscaling"); ok {
 			autoscaling := v.([]interface{})[0].(map[string]interface{})
-			update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
-				Enabled:           true,
-				MinNodeCount:      int64(autoscaling["min_node_count"].(int)),
-				MaxNodeCount:      int64(autoscaling["max_node_count"].(int)),
-				TotalMinNodeCount: int64(autoscaling["total_min_node_count"].(int)),
-				TotalMaxNodeCount: int64(autoscaling["total_max_node_count"].(int)),
-				LocationPolicy:    autoscaling["location_policy"].(string),
-				ForceSendFields:   []string{"MinNodeCount", "TotalMinNodeCount"},
+			// disable autoscaling if both min/max node counts are set to 0
+			minNodeCount := autoscaling["min_node_count"].(int)
+			maxNodeCount := autoscaling["max_node_count"].(int)
+			if (minNodeCount == 0) && (maxNodeCount == 0) {
+				update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
+					Enabled: false,
+				}
+			} else {
+				update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
+					Enabled:           true,
+					MinNodeCount:      int64(minNodeCount),
+					MaxNodeCount:      int64(maxNodeCount),
+					TotalMinNodeCount: int64(autoscaling["total_min_node_count"].(int)),
+					TotalMaxNodeCount: int64(autoscaling["total_max_node_count"].(int)),
+					LocationPolicy:    autoscaling["location_policy"].(string),
+					ForceSendFields:   []string{"MinNodeCount", "TotalMinNodeCount"},
+				}
 			}
 		} else {
 			update.DesiredNodePoolAutoscaling = &container.NodePoolAutoscaling{
