diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_cluster.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_cluster.go
index da9bc8449..dff9ffa1a 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_cluster.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/resource_container_cluster.go
@@ -547,7 +547,6 @@ func ResourceContainerCluster() *schema.Resource {
 									"disk_type": {
 										Type:             schema.TypeString,
 										Optional:         true,
-										Default:          "pd-standard",
 										Description:      `Type of the disk attached to each node.`,
 										DiffSuppressFunc: suppressDiffForAutopilot,
 										ValidateFunc:     validation.StringInSlice([]string{"pd-standard", "pd-ssd", "pd-balanced"}, false),
@@ -807,43 +806,11 @@ func ResourceContainerCluster() *schema.Resource {
 			},
 
 			"enable_tpu": {
-				Type:          schema.TypeBool,
-				Optional:      true,
-				ForceNew:      true,
-				Description:   `Whether to enable Cloud TPU resources in this cluster.`,
-				ConflictsWith: []string{"tpu_config"},
-				Computed:      true,
-				// TODO: deprecate when tpu_config is correctly returned by the API
-				// Deprecated: "Deprecated in favor of tpu_config",
-			},
-
-			"tpu_config": {
-				Type:        schema.TypeList,
+				Type:        schema.TypeBool,
 				Optional:    true,
-				Computed:    true,
-				MaxItems:    1,
-				Description: `TPU configuration for the cluster.`,
-				Elem: &schema.Resource{
-					Schema: map[string]*schema.Schema{
-						"enabled": {
-							Type:        schema.TypeBool,
-							Required:    true,
-							ForceNew:    true,
-							Description: `Whether Cloud TPU integration is enabled or not`,
-						},
-						"ipv4_cidr_block": {
-							Type:        schema.TypeString,
-							Computed:    true,
-							Description: `IPv4 CIDR block reserved for Cloud TPU in the VPC.`,
-						},
-						"use_service_networking": {
-							Type:        schema.TypeBool,
-							Optional:    true,
-							ForceNew:    true,
-							Description: `Whether to use service networking for Cloud TPU or not`,
-						},
-					},
-				},
+				ForceNew:    true,
+				Description: `Whether to enable Cloud TPU resources in this cluster.`,
+				Default:     false,
 			},
 
 			"enable_legacy_abac": {
@@ -1182,15 +1149,35 @@ func ResourceContainerCluster() *schema.Resource {
 				Optional:    true,
 				MaxItems:    1,
 				Computed:    true,
+				Deprecated:  `Basic authentication was removed for GKE cluster versions >= 1.19.`,
 				Description: `The authentication information for accessing the Kubernetes master. Some values in this block are only returned by the API if your service account has permission to get credentials for your GKE cluster. If you see an unexpected diff unsetting your client cert, ensure you have the container.clusters.getCredentials permission.`,
 				Elem: &schema.Resource{
 					Schema: map[string]*schema.Schema{
+						// Preserve basic authentication until GKE version 1.19 has reached end of life.
+						// https://cloud.google.com/kubernetes-engine/docs/release-schedule#schedule_for_static_no_channel_versions
+						"password": {
+							Type:         schema.TypeString,
+							Optional:     true,
+							AtLeastOneOf: []string{"master_auth.0.password", "master_auth.0.username", "master_auth.0.client_certificate_config"},
+							Sensitive:    true,
+							Description:  `The password to use for HTTP basic authentication when accessing the Kubernetes master endpoint.`,
+						},
+
+						"username": {
+							Type:         schema.TypeString,
+							Optional:     true,
+							AtLeastOneOf: []string{"master_auth.0.password", "master_auth.0.username", "master_auth.0.client_certificate_config"},
+							Description:  `The username to use for HTTP basic authentication when accessing the Kubernetes master endpoint. If not present basic auth will be disabled.`,
+						},
+
 						"client_certificate_config": {
-							Type:        schema.TypeList,
-							MaxItems:    1,
-							Required:    true,
-							ForceNew:    true,
-							Description: `Whether client certificate authorization is enabled for this cluster.`,
+							Type:         schema.TypeList,
+							MaxItems:     1,
+							Optional:     true,
+							Computed:     true,
+							AtLeastOneOf: []string{"master_auth.0.password", "master_auth.0.username", "master_auth.0.client_certificate_config"},
+							ForceNew:     true,
+							Description:  `Whether client certificate authorization is enabled for this cluster.`,
 							Elem: &schema.Resource{
 								Schema: map[string]*schema.Schema{
 									"issue_client_certificate": {
@@ -2136,10 +2123,6 @@ func resourceContainerClusterCreate(d *schema.ResourceData, meta interface{}) er
 		cluster.IdentityServiceConfig = expandIdentityServiceConfig(v)
 	}
 
-	if v, ok := d.GetOk("tpu_config"); ok {
-		cluster.TpuConfig = expandContainerClusterTpuConfig(v)
-	}
-
 	if v, ok := d.GetOk("resource_usage_export_config"); ok {
 		cluster.ResourceUsageExportConfig = expandResourceUsageExportConfig(v)
 	}
@@ -3262,6 +3245,45 @@ func resourceContainerClusterUpdate(d *schema.ResourceData, meta interface{}) er
 		log.Printf("[INFO] GKE cluster %s Notification Config has been updated to %#v", d.Id(), req.Update.DesiredNotificationConfig)
 	}
 
+	if d.HasChange("master_auth") {
+		var req *container.SetMasterAuthRequest
+		if ma, ok := d.GetOk("master_auth"); ok {
+			req = &container.SetMasterAuthRequest{
+				Action: "SET_USERNAME",
+				Update: expandMasterAuth(ma),
+			}
+		} else {
+			req = &container.SetMasterAuthRequest{
+				Action: "SET_USERNAME",
+				Update: &container.MasterAuth{
+					Username: "admin",
+				},
+			}
+		}
+
+		updateF := func() error {
+			name := containerClusterFullName(project, location, clusterName)
+			clusterSetMasterAuthCall := config.NewContainerClient(userAgent).Projects.Locations.Clusters.SetMasterAuth(name, req)
+			if config.UserProjectOverride {
+				clusterSetMasterAuthCall.Header().Add("X-Goog-User-Project", project)
+			}
+			op, err := clusterSetMasterAuthCall.Do()
+			if err != nil {
+				return err
+			}
+
+			// Wait until it's updated
+			return ContainerOperationWait(config, op, project, location, "updating master auth", userAgent, d.Timeout(schema.TimeoutUpdate))
+		}
+
+		// Call update serially.
+		if err := transport_tpg.LockedCall(lockKey, updateF); err != nil {
+			return err
+		}
+
+		log.Printf("[INFO] GKE cluster %s: master auth has been updated", d.Id())
+	}
+
 	if d.HasChange("vertical_pod_autoscaling") {
 		if ac, ok := d.GetOk("vertical_pod_autoscaling"); ok {
 			req := &container.UpdateClusterRequest{
@@ -3964,7 +3986,7 @@ func expandIPAllocationPolicy(configured interface{}, networkingMode string) (*c
 		}
 		return &container.IPAllocationPolicy{
 			UseIpAliases:    false,
-			UseRoutes:       true,
+			UseRoutes:       networkingMode == "ROUTES",
 			StackType:       "IPV4",
 			ForceSendFields: []string{"UseIpAliases"},
 		}, nil
@@ -4387,7 +4409,10 @@ func expandMasterAuth(configured interface{}) *container.MasterAuth {
 	}
 
 	masterAuth := l[0].(map[string]interface{})
-	result := &container.MasterAuth{}
+	result := &container.MasterAuth{
+		Username: masterAuth["username"].(string),
+		Password: masterAuth["password"].(string),
+	}
 
 	if v, ok := masterAuth["client_certificate_config"]; ok {
 		if len(v.([]interface{})) > 0 {
@@ -4719,19 +4744,6 @@ func expandMonitoringConfig(configured interface{}) *container.MonitoringConfig
 	return mc
 }
 
-func expandContainerClusterTpuConfig(configured interface{}) *container.TpuConfig {
-	l := configured.([]interface{})
-	if len(l) == 0 || l[0] == nil {
-		return nil
-	}
-
-	config := l[0].(map[string]interface{})
-	return &container.TpuConfig{
-		Enabled:              config["enabled"].(bool),
-		UseServiceNetworking: config["use_service_networking"].(bool),
-	}
-}
-
 func expandContainerClusterAuthenticatorGroupsConfig(configured interface{}) *container.AuthenticatorGroupsConfig {
 	l := configured.([]interface{})
 	if len(l) == 0 || l[0] == nil {
@@ -5220,6 +5232,8 @@ func flattenMasterAuth(ma *container.MasterAuth) []map[string]interface{} {
 	}
 	masterAuth := []map[string]interface{}{
 		{
+			"username":               ma.Username,
+			"password":               ma.Password,
 			"client_certificate":     ma.ClientCertificate,
 			"client_key":             ma.ClientKey,
 			"cluster_ca_certificate": ma.ClusterCaCertificate,
@@ -5530,12 +5544,18 @@ func flattenNodePoolAutoConfigNetworkTags(c *container.NetworkTags) []map[string
 func resourceContainerClusterStateImporter(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
 	config := meta.(*transport_tpg.Config)
 
-	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
-	if err != nil {
-		return nil, err
-	}
+	//userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
+	//if err != nil {
+	//	return nil, err
+	//}
 
-	if err := tpgresource.ParseImportId([]string{"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/clusters/(?P<name>[^/]+)", "(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)", "(?P<location>[^/]+)/(?P<name>[^/]+)"}, d, config); err != nil {
+	idRegexes := []string{
+		"projects/(?P<project>[^/]+)/zones/(?P<location>[^/]+)/clusters/(?P<name>[^/]+)",
+		"projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/clusters/(?P<name>[^/]+)",
+		"(?P<project>[^/]+)/(?P<location>[^/]+)/(?P<name>[^/]+)",
+		"(?P<location>[^/]+)/(?P<name>[^/]+)",
+	}
+	if err := tpgresource.ParseImportId(idRegexes, d, config); err != nil {
 		return nil, err
 	}
 	project, err := tpgresource.GetProject(d, config)
@@ -5553,9 +5573,9 @@ func resourceContainerClusterStateImporter(d *schema.ResourceData, meta interfac
 	if err := d.Set("location", location); err != nil {
 		return nil, fmt.Errorf("Error setting location: %s", err)
 	}
-	if _, err := containerClusterAwaitRestingState(config, project, location, clusterName, userAgent, d.Timeout(schema.TimeoutCreate)); err != nil {
-		return nil, err
-	}
+	//if _, err := containerClusterAwaitRestingState(config, project, location, clusterName, userAgent, d.Timeout(schema.TimeoutCreate)); err != nil {
+	//	return nil, err
+	//}
 
 	d.SetId(containerClusterFullName(project, location, clusterName))

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_cluster_test.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_cluster_test.go
index 72aa2c52e..291591981 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_cluster_test.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_container_cluster_test.go
@@ -3512,30 +3512,6 @@ func TestAccContainerCluster_withGatewayApiConfig(t *testing.T) {
 	})
 }
 
-func TestAccContainerCluster_withTPUConfig(t *testing.T) {
-	t.Parallel()
-
-	clusterName := fmt.Sprintf("tf-test-cluster-%s", acctest.RandString(t, 10))
-	containerNetName := fmt.Sprintf("tf-test-container-net-%s", acctest.RandString(t, 10))
-	acctest.VcrTest(t, resource.TestCase{
-		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
-		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
-		CheckDestroy:             testAccCheckContainerClusterDestroyProducer(t),
-		Steps: []resource.TestStep{
-			{
-				Config: testAccContainerCluster_withTPUConfig(containerNetName, clusterName),
-			},
-			{
-				ResourceName:      "google_container_cluster.with_tpu_config",
-				ImportState:       true,
-				ImportStateVerify: true,
-				// TODO: remove when tpu_config can be read from the API
-				ImportStateVerifyIgnore: []string{"tpu_config"},
-			},
-		},
-	})
-}
-
 func TestAccContainerCluster_withProtectConfig(t *testing.T) {
 	t.Parallel()
 
@@ -7462,62 +7438,6 @@ resource "google_container_cluster" "primary" {
 `, name, name, name)
 }
 
-func testAccContainerCluster_withTPUConfig(network, cluster string) string {
-	return fmt.Sprintf(`
-resource "google_compute_network" "container_network" {
-	name                    = "%s"
-	auto_create_subnetworks = false
-}
-
-resource "google_compute_subnetwork" "container_subnetwork" {
-	name                     = google_compute_network.container_network.name
-	network                  = google_compute_network.container_network.name
-	ip_cidr_range            = "10.0.36.0/24"
-	region                   = "us-central1"
-	private_ip_google_access = true
-
-	secondary_ip_range {
-		range_name    = "pod"
-		ip_cidr_range = "10.0.0.0/19"
-	}
-
-	secondary_ip_range {
-		range_name    = "svc"
-		ip_cidr_range = "10.0.32.0/22"
-	}
-}
-
-resource "google_container_cluster" "with_tpu_config" {
-	name               = "%s"
-	location           = "us-central1-a"
-	initial_node_count = 1
-
-
-	tpu_config {
-		enabled                = true
-		use_service_networking = true
-	}
-
-	network         = google_compute_network.container_network.name
-	subnetwork      = google_compute_subnetwork.container_subnetwork.name
-	networking_mode = "VPC_NATIVE"
-
-	private_cluster_config {
-		enable_private_endpoint = true
-		enable_private_nodes    = true
-		master_ipv4_cidr_block  = "10.42.0.0/28"
-	}
-	master_authorized_networks_config {
-	}
-
-	ip_allocation_policy {
-		cluster_secondary_range_name  = google_compute_subnetwork.container_subnetwork.secondary_ip_range[0].range_name
-		services_secondary_range_name = google_compute_subnetwork.container_subnetwork.secondary_ip_range[1].range_name
-	}
-}
-`, network, cluster)
-}
-
 func testAccContainerCluster_failedCreation(cluster, project string) string {
 	return fmt.Sprintf(`
 resource "google_container_cluster" "primary" {
