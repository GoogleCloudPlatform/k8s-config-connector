# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_artifact_registry_repository.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_artifact_registry_repository.go
index 087911715..f87ec3ecd 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_artifact_registry_repository.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/resource_artifact_registry_repository.go
@@ -18,6 +18,7 @@ import (
 	"fmt"
 	"log"
 	"reflect"
+	"strings"
 	"time"
 
 	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
@@ -281,12 +282,6 @@ func resourceArtifactRegistryRepositoryUpdate(d *schema.ResourceData, meta inter
 	billingProject = project
 
 	obj := make(map[string]interface{})
-	formatProp, err := expandArtifactRegistryRepositoryFormat(d.Get("format"), d, config)
-	if err != nil {
-		return err
-	} else if v, ok := d.GetOkExists("format"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, formatProp)) {
-		obj["format"] = formatProp
-	}
 	descriptionProp, err := expandArtifactRegistryRepositoryDescription(d.Get("description"), d, config)
 	if err != nil {
 		return err
@@ -299,12 +294,6 @@ func resourceArtifactRegistryRepositoryUpdate(d *schema.ResourceData, meta inter
 	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
 		obj["labels"] = labelsProp
 	}
-	kmsKeyNameProp, err := expandArtifactRegistryRepositoryKmsKeyName(d.Get("kms_key_name"), d, config)
-	if err != nil {
-		return err
-	} else if v, ok := d.GetOkExists("kms_key_name"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, kmsKeyNameProp)) {
-		obj["kmsKeyName"] = kmsKeyNameProp
-	}
 
 	url, err := tpgresource.ReplaceVars(d, config, "{{ArtifactRegistryBasePath}}projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}")
 	if err != nil {
@@ -312,13 +301,28 @@ func resourceArtifactRegistryRepositoryUpdate(d *schema.ResourceData, meta inter
 	}
 
 	log.Printf("[DEBUG] Updating Repository %q: %#v", d.Id(), obj)
+	updateMask := []string{}
+
+	if d.HasChange("description") {
+		updateMask = append(updateMask, "description")
+	}
+
+	if d.HasChange("labels") {
+		updateMask = append(updateMask, "labels")
+	}
+	// updateMask is a URL parameter but not present in the schema, so replaceVars
+	// won't set it
+	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
+	if err != nil {
+		return err
+	}
 
 	// err == nil indicates that the billing_project value was found
 	if bp, err := getBillingProject(d, config); err == nil {
 		billingProject = bp
 	}
 
-	res, err := sendRequestWithTimeout(config, "PUT", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))
+	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))
 
 	if err != nil {
 		return fmt.Errorf("Error updating Repository %q: %s", d.Id(), err)
@@ -326,14 +330,6 @@ func resourceArtifactRegistryRepositoryUpdate(d *schema.ResourceData, meta inter
 		log.Printf("[DEBUG] Finished updating Repository %q: %#v", d.Id(), res)
 	}
 
-	err = artifactRegistryOperationWaitTime(
-		config, res, project, "Updating Repository", userAgent,
-		d.Timeout(schema.TimeoutUpdate))
-
-	if err != nil {
-		return err
-	}
-
 	return resourceArtifactRegistryRepositoryRead(d, meta)
 }
 
