# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

diff --git a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/node_config.go b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/node_config.go
index a0a740bd8..a990653dd 100644
--- a/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/node_config.go
+++ b/third_party/github.com/hashicorp/terraform-provider-google-beta/google-beta/services/container/node_config.go
@@ -280,9 +280,18 @@ func schemaNodeConfig() *schema.Schema {
 					Description: `The workload metadata configuration for this node.`,
 					Elem: &schema.Resource{
 						Schema: map[string]*schema.Schema{
+							"node_metadata": {
+								Type:         schema.TypeString,
+								Optional:     true,
+								Computed:     true,
+								Deprecated:   "Deprecated in favor of mode.",
+								ValidateFunc: validation.StringInSlice([]string{"UNSPECIFIED", "SECURE", "EXPOSE", "GKE_METADATA_SERVER"}, false),
+								Description:  `NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.`,
+							},
 							"mode": {
 								Type:         schema.TypeString,
-								Required:     true,
+								Optional:     true,
+								Computed:     true,
 								ValidateFunc: validation.StringInSlice([]string{"MODE_UNSPECIFIED", "GCE_METADATA", "GKE_METADATA"}, false),
 								Description:  `Mode is the configuration for how to expose metadata to workloads running on the node.`,
 							},
@@ -540,6 +549,10 @@ func expandWorkloadMetadataConfig(v interface{}) *container.WorkloadMetadataConf
 		wmc.Mode = v.(string)
 	}
 
+	if v, ok := cfg["node_metadata"]; ok {
+		wmc.NodeMetadata = v.(string)
+	}
+
 	return wmc
 }
 
@@ -685,7 +698,8 @@ func flattenWorkloadMetadataConfig(c *container.WorkloadMetadataConfig) []map[st
 	result := []map[string]interface{}{}
 	if c != nil {
 		result = append(result, map[string]interface{}{
-			"mode": c.Mode,
+			"mode":          c.Mode,
+			"node_metadata": c.NodeMetadata,
 		})
 	}
 	return result
