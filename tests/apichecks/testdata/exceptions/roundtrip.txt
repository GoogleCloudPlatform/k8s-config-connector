[round_trip] crd=alloydbclusters.alloydb.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						... // 7 identical entries
  						"location":                {Description: "Immutable. The location where the alloydb cluster should reside.", Type: "string"},
  						"maintenanceUpdatePolicy": {Description: "Optional. The maintenance update policy determines when to allow"..., Type: "object", Properties: {"maintenanceWindows": {Description: "Preferred windows to perform maintenance. Currently limited to 1.", Type: "array", Items: &{Schema: &{Type: "object", Required: {"day", "startTime"}, Properties: {"day": {Description: "Preferred day of the week for maintenance, e.g. MONDAY, TUESDAY,"..., Type: "string"}, "startTime": {Description: "Preferred time to start the maintenance operation on the specifi"..., Type: "object", Properties: {"hours": {Description: "Hours of day in 24 hour format. Should be from 0 to 23. An API m"..., Type: "integer", Format: "int32"}, "minutes": {Description: "Minutes of hour of day. Must be from 0 to 59.", Type: "integer", Format: "int32"}, "nanos": {Description: "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.", Type: "integer", Format: "int32"}, "seconds": {Description: "Seconds of minutes of the time. Must normally be from 0 to 59. A"..., Type: "integer", Format: "int32"}}}}}}}}},
  						"networkConfig": {
  							... // 26 identical fields
  							AnyOf: nil,
  							Not:   nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"allocatedIpRange": {Description: "Optional. Name of the allocated IP range for the private IP Allo"..., Type: "string"},
  								"networkRef": {
  									ID:     "",
  									Schema: "",
  									Ref:    nil,
  									Description: strings.Join({
- 										"Optional. ",
  										"The resource link for the VPC network in which cluster resources",
  										" are created and from which they are accessible via Private IP. ",
  										... // 184 identical bytes
  									}, ""),
  									Type:   "object",
  									Format: "",
  									... // 38 identical fields
  								},
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  						"networkRef": {
  							ID:     "",
  							Schema: "",
  							Ref:    nil,
  							Description: strings.Join({
- 								"Required. ",
  								"The resource link for the VPC network in which cluster resources",
  								" are created and from which they are accessible via Private IP. ",
  								... // 225 identical bytes
  							}, ""),
  							Type:   "object",
  							Format: "",
  							... // 38 identical fields
  						},
  						"projectRef": {Description: "The project that this resource belongs to.", Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `projectID` field of a project, when not managed by Config C"..., Type: "string"}, "kind": {Description: "The kind of the Project resource; optional but must be `Project`"..., Type: "string"}, "name": {Description: "The `name` field of a `Project` resource.", Type: "string"}, "namespace": {Description: "The `namespace` field of a `Project` resource.", Type: "string"}}, ...},
  						"resourceID": {Description: "The AlloyDBCluster name. If not given, the metadata.name will be"..., Type: "string"},
  						... // 3 identical entries
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {Description: "AlloyDBClusterStatus defines the config connector machine state "..., Type: "object", Properties: {"backupSource": {Description: "Output only. Cluster created from backup.", Type: "array", Items: &{Schema: &{Type: "object", Properties: {"backupName": {Description: "The name of the backup resource.", Type: "string"}}}}}, "conditions": {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}}, "continuousBackupInfo": {Description: "Output only. Continuous backup properties for this cluster.", Type: "array", Items: &{Schema: &{Type: "object", Properties: {"earliestRestorableTime": {Description: "Output only. The earliest restorable time that can be restored t"..., Type: "string"}, "enabledTime": {Description: "Output only. When ContinuousBackup was most recently enabled. Se"..., Type: "string"}, "encryptionInfo": {Description: "Output only. The encryption information for the WALs and backups"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"encryptionType": {Description: "Output only. Type of encryption.", Type: "string"}, "kmsKeyVersions": {Description: "Output only. Cloud KMS key versions that are being used to prote"..., Type: "array", Items: &{Schema: &{Type: "string"}}}}}}}, "schedule": {Description: "Output only. Days of the week on which a continuous backup is ta"..., Type: "array", Items: &{Schema: &{Type: "string"}}}}}}}, "databaseVersion": {Description: "The database engine major version. This is an output-only field "..., Type: "string"}, ...}},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources: &v1.CustomResourceSubresources{
- 		Status: nil,
+ 		Status: s"&CustomResourceSubresourceStatus{}",
  		Scale:  nil,
  	},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=apigatewayapis.apigateway.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"displayName": {Description: "Optional. Display name.", Type: "string"},
  						"labels":      {Description: "Optional. Resource labels to represent user-provided metadata. R"..., Type: "object", AdditionalProperties: &{Allows: true, Schema: &{Type: "string"}}},
  						"managedService": {
  							... // 41 identical fields
  							XListType:    nil,
  							XMapType:     nil,
- 							XValidations: nil,
+ 							XValidations: v1.ValidationRules{{Rule: "self == oldSelf", Message: "the field is immutable"}},
  						},
  						"projectRef": {Description: " Optional. The project that this resource belongs to.", Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `projectID` field of a project, when not managed by Config C"..., Type: "string"}, "kind": {Description: "The kind of the Project resource; optional but must be `Project`"..., Type: "string"}, "name": {Description: "The `name` field of a `Project` resource.", Type: "string"}, "namespace": {Description: "The `namespace` field of a `Project` resource.", Type: "string"}}, ...},
  						"resourceID": {Description: "The APIGatewayAPI name. If not given, the metadata.name will be "..., Type: "string"},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {Description: "APIGatewayAPIStatus defines the config connector machine state o"..., Type: "object", Properties: {"conditions": {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}}, "externalRef": {Description: "A unique specifier for the APIGatewayAPI resource in GCP.", Type: "string"}, "observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"}, "observedState": {Description: "ObservedState is the state of the resource as most recently obse"..., Type: "object", Properties: {"createTime": {Description: "Created time.", Type: "string"}, "name": {Description: "Resource name of the API. Format: projects/{project}/locations/g"..., Type: "string"}, "state": {Description: " State of the API.", Type: "string"}, "updateTime": {Description: "Updated time.", Type: "string"}}}}},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=bigquerydatatransferconfigs.bigquerydatatransfer.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						... // 12 identical entries
  						"schedule":        {Description: "Data transfer schedule.\n If the data source does not support a c"..., Type: "string"},
  						"scheduleOptions": {Description: "Options customizing the data transfer schedule.", Type: "object", Properties: {"disableAutoScheduling": {Description: "If true, automatic scheduling of data transfer runs for this con"..., Type: "boolean"}, "endTime": {Description: "Defines time to stop scheduling transfer runs. A transfer run ca"..., Type: "string"}, "startTime": {Description: "Specifies time to start scheduling transfer runs. The first run "..., Type: "string"}}},
+ 						"scheduleOptionsV2": {
+ 							Description: `Options customizing different types of data transfer schedule. This field replaces "schedule" and "schedule_options" fields. Sch`...,
+ 							Type:        "object",
+ 							Properties: map[string]v1.JSONSchemaProps{
+ 								"eventDrivenSchedule": {
+ 									Description: "Event driven transfer schedule o"...,
+ 									Type:        "object",
+ 									Properties:  map[string]v1.JSONSchemaProps{...},
+ 								},
+ 								"manualSchedule": {Description: "Manual transfer schedule. If set"..., Type: "object"},
+ 								"timeBasedSchedule": {
+ 									Description: "Time based transfer schedule opt"...,
+ 									Type:        "object",
+ 									Properties:  map[string]v1.JSONSchemaProps{...},
+ 								},
+ 							},
+ 						},
  						"serviceAccountRef": {Description: "Service account email. If this field is set, the transfer config"..., Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `email` field of an `IAMServiceAccount` resource.", Type: "string"}, "name": {Description: "Name of the referent. More info: https://kubernetes.io/docs/conc"..., Type: "string"}, "namespace": {Description: "Namespace of the referent. More info: https://kubernetes.io/docs"..., Type: "string"}}, ...},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"conditions":         {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}},
  						"externalRef":        {Description: "A unique specifier for the BigQueryDataTransferConfig resource i"..., Type: "string"},
  						"observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"},
  						"observedState": {
  							... // 26 identical fields
  							AnyOf: nil,
  							Not:   nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"datasetRegion": {Description: "Output only. Region in which BigQuery dataset is located.", Type: "string"},
+ 								"error": {
+ 									Description: "Output only. Error code with detailed information about reason of the latest config failure.",
+ 									Type:        "object",
+ 									Properties: map[string]v1.JSONSchemaProps{
+ 										"code": {
+ 											Description: "The status code, which should be"...,
+ 											Type:        "integer",
+ 											Format:      "int32",
+ 										},
+ 										"message": {Description: "A developer-facing error message"..., Type: "string"},
+ 									},
+ 								},
  								"name":        {Description: "Identifier. The resource name of the transfer config. Transfer c"..., Type: "string"},
  								"nextRunTime": {Description: "Output only. Next time when data transfer will run.", Type: "string"},
  								... // 4 identical entries
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=certificatemanagerdnsauthorizations.certificatemanager.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"description": {Description: "A human-readable description of the resource.", Type: "string"},
  						"domain":      {Description: "Immutable. A domain which is being authorized. A DnsAuthorizatio"..., Type: "string", XValidations: {{Rule: "self == oldSelf", Message: "Domain field is immutable"}}},
+ 						"location": {
+ 							Description: `Immutable. Optional. Location represents the geographical location of the DnsAuthorization. If not specified, "global" is used.`,
+ 							Type:        "string",
+ 						},
  						"projectRef": {Description: "The project that this resource belongs to.", Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `projectID` field of a project, when not managed by Config C"..., Type: "string"}, "kind": {Description: "The kind of the Project resource; optional but must be `Project`"..., Type: "string"}, "name": {Description: "The `name` field of a `Project` resource.", Type: "string"}, "namespace": {Description: "The `namespace` field of a `Project` resource.", Type: "string"}}, ...},
  						"resourceID": {Description: "Optional. The name of the resource. Used for creation and acquis"..., Type: "string"},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"conditions": {Description: "Conditions represent the latest available observations of the Ce"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}},
  						"dnsResourceRecord": {
  							... // 21 identical fields
  							MinProperties: nil,
  							Required:      nil,
  							Items: &v1.JSONSchemaPropsOrArray{
  								Schema: &v1.JSONSchemaProps{
  									... // 26 identical fields
  									AnyOf: nil,
  									Not:   nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"data": {
  											ID:     "",
  											Schema: "",
  											Ref:    nil,
  											Description: strings.Join({
+ 												"Output only. ",
  												"Data of the DNS Resource Record.",
  											}, ""),
  											Type:   "string",
  											Format: "",
  											... // 38 identical fields
  										},
  										"name": {
  											ID:     "",
  											Schema: "",
  											Ref:    nil,
  											Description: strings.Join({
+ 												"Output only. ",
  												"Fully qualified name of the DNS Resource Record. ",
- 												"E.g. '",
+ 												"e.g. `",
  												"_acme-challenge.example.com",
- 												"'.",
+ 												"`",
  											}, ""),
  											Type:   "string",
  											Format: "",
  											... // 38 identical fields
  										},
  										"type": {
  											ID:     "",
  											Schema: "",
  											Ref:    nil,
  											Description: strings.Join({
- 												"Type of the DNS Resource Record",
+ 												"Output only. Type of the DNS Resource Record. Currently always s",
+ 												`et to "CNAME"`,
  												".",
  											}, ""),
  											Type:   "string",
  											Format: "",
  											... // 38 identical fields
  										},
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  								JSONSchemas: nil,
  							},
  							AllOf: nil,
  							OneOf: nil,
  							... // 18 identical fields
  						},
+ 						"externalRef": {
+ 							Description: "A unique specifier for the CertificateManagerDNSAuthorization resource in GCP.",
+ 							Type:        "string",
+ 						},
  						"observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=cloudbuildworkerpools.cloudbuild.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"displayName": {
  							ID:          "",
  							Schema:      "",
  							Ref:         nil,
- 							Description: "",
+ 							Description: "A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.",
  							Type:        "string",
  							Format:      "",
  							... // 38 identical fields
  						},
  						"location": {Type: "string"},
- 						"name":     {Type: "string"},
  						"privatePoolV1Config": {
  							ID:          "",
  							Schema:      "",
  							Ref:         nil,
- 							Description: "",
+ 							Description: "Legacy Private Pool configuration.",
  							Type:        "object",
  							Format:      "",
  							... // 20 identical fields
  							AnyOf: nil,
  							Not:   nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"networkConfig": {
  									ID:          "",
  									Schema:      "",
  									Ref:         nil,
- 									Description: "",
+ 									Description: "Network configuration for the pool.",
  									Type:        "object",
  									Format:      "",
  									... // 14 identical fields
  									MaxProperties: nil,
  									MinProperties: nil,
- 									Required:      []string{"peeredNetworkRef"},
+ 									Required:      nil,
  									Items:         nil,
  									AllOf:         nil,
  									OneOf:         nil,
  									AnyOf:         nil,
  									Not:           nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"egressOption": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Option to configure network egress for the workers.",
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  										"peeredNetworkIPRange": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range start"...,
  											Type:        "string",
  											Format:      "",
  											... // 35 identical fields
  											XListType:    nil,
  											XMapType:     nil,
- 											XValidations: nil,
+ 											XValidations: v1.ValidationRules{{Rule: "self == oldSelf", Message: "the field is immutable"}},
  										},
  										"peeredNetworkRef": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network.",
  											Type:        "object",
  											Format:      "",
  											... // 35 identical fields
  											XListType:    nil,
  											XMapType:     nil,
- 											XValidations: nil,
+ 											XValidations: v1.ValidationRules{{Rule: "self == oldSelf", Message: "the field is immutable"}},
  										},
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  								"workerConfig": {
  									ID:          "",
  									Schema:      "",
  									Ref:         nil,
- 									Description: "",
+ 									Description: "Machine configuration for the workers in the pool.",
  									Type:        "object",
  									Format:      "",
  									... // 20 identical fields
  									AnyOf: nil,
  									Not:   nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"diskSizeGb": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.",
  											Type:        "integer",
  											Format:      "int64",
  											... // 38 identical fields
  										},
  										"machineType": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.",
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  						"projectRef": {Description: "The Project that this resource belongs to.", Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `projectID` field of a project, when not managed by Config C"..., Type: "string"}, "kind": {Description: "The kind of the Project resource; optional but must be `Project`"..., Type: "string"}, "name": {Description: "The `name` field of a `Project` resource.", Type: "string"}, "namespace": {Description: "The `namespace` field of a `Project` resource.", Type: "string"}}, ...},
  						"resourceID": {
  							ID:          "",
  							Schema:      "",
  							Ref:         nil,
- 							Description: "",
+ 							Description: "The GCP resource identifier. If not given, the metadata.name will be used.",
  							Type:        "string",
  							Format:      "",
  							... // 38 identical fields
  						},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"conditions": {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}},
+ 						"externalRef": {
+ 							Description: "A unique Config Connector specifier for the resource in GCP.",
+ 							Type:        "string",
+ 						},
  						"observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"},
  						"observedState": {
  							... // 20 identical fields
  							MaxProperties: nil,
  							MinProperties: nil,
- 							Required:      nil,
+ 							Required:      []string{"workerConfig"},
  							Items:         nil,
  							AllOf:         nil,
  							OneOf:         nil,
  							AnyOf:         nil,
  							Not:           nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"createTime": {Description: "The creation timestamp of the workerpool.", Type: "string", Format: "date-time"},
+ 								"etag": {
+ 									Description: "The Checksum computed by the server, using weak indicator.",
+ 									Type:        "string",
+ 								},
  								"networkConfig": {
  									ID:          "",
  									Schema:      "",
  									Ref:         nil,
- 									Description: "",
+ 									Description: "Network configuration for the pool.",
  									Type:        "object",
  									Format:      "",
  									... // 20 identical fields
  									AnyOf: nil,
  									Not:   nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"egressOption": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Option to configure network egress for the workers.",
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  										"peeredNetwork": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network.",
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  										"peeredNetworkIPRange": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range start"...,
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  								"updateTime": {Description: "The last update timestamp of the workerpool.", Type: "string", Format: "date-time"},
  								"workerConfig": {
  									ID:          "",
  									Schema:      "",
  									Ref:         nil,
- 									Description: "",
+ 									Description: "Machine configuration for the workers in the pool.",
  									Type:        "object",
  									Format:      "",
  									... // 20 identical fields
  									AnyOf: nil,
  									Not:   nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"diskSizeGb": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.",
  											Type:        "integer",
  											Format:      "int64",
  											... // 38 identical fields
  										},
  										"machineType": {
  											ID:          "",
  											Schema:      "",
  											Ref:         nil,
- 											Description: "",
+ 											Description: "Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.",
  											Type:        "string",
  											Format:      "",
  											... // 38 identical fields
  										},
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: nil,
  	SelectableFields:         nil,
  }

---
[round_trip] crd=notebookinstances.notebooks.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				... // 2 identical entries
  				"metadata": {Type: "object"},
  				"spec":     {Description: "NotebookInstanceSpec defines the desired state of NotebookInstance", Type: "object", Required: {"projectRef", "zone"}, Properties: {"acceleratorConfig": {Description: "The hardware accelerator used on this instance. If you use accel"..., Type: "object", Properties: {"coreCount": {Description: "Count of cores of this accelerator.", Type: "integer", Format: "int64"}, "type": {Description: "Type of this accelerator.", Type: "string"}}}, "bootDiskSizeGB": {Description: "Input only. The size of the boot disk in GB attached to this ins"..., Type: "integer", Format: "int64"}, "bootDiskType": {Description: "Input only. The type of the boot disk attached to this instance,"..., Type: "string"}, "canIPForward": {Description: "Optional. Flag to enable ip forwarding or not, default false/off"..., Type: "boolean"}, ...}, ...},
  				"status": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"conditions":         {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}},
  						"externalRef":        {Description: "A unique specifier for the NotebookInstance resource in GCP.", Type: "string"},
  						"observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"},
  						"observedState": {
  							... // 26 identical fields
  							AnyOf: nil,
  							Not:   nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"createTime": {Description: "Output only. Instance creation time.", Type: "string"},
  								"creator":    {Description: "Output only. Email address of entity that sent original CreateIn"..., Type: "string"},
  								"disks":      {Description: "Output only. Attached disks to notebook instance.", Type: "array", Items: &{Schema: &{Type: "object", Properties: {"autoDelete": {Description: "Indicates whether the disk will be auto-deleted when the instanc"..., Type: "boolean"}, "boot": {Description: "Indicates that this is a boot disk. The virtual machine will use"..., Type: "boolean"}, "deviceName": {Description: "Indicates a unique device name of your choice that is reflected "..., Type: "string"}, "diskSizeGB": {Description: "Indicates the size of the disk in base-2 GB.", Type: "integer", Format: "int64"}, ...}}}},
- 								"name": {
- 									Description: "Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
- 									Type:        "string",
- 								},
  								"proxyURI":   {Description: "Output only. The proxy endpoint that is used to access the Jupyt"..., Type: "string"},
  								"state":      {Description: "Output only. The state of this instance.", Type: "string"},
  								"updateTime": {Description: "Output only. Instance update time.", Type: "string"},
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=privilegedaccessmanagerentitlements.privilegedaccessmanager.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "APIVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "Kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						... // 8 identical entries
  						"projectRef":                   {Description: "Immutable. The Project that this resource belongs to. One and on"..., Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "The `projectID` field of a project, when not managed by Config C"..., Type: "string"}, "kind": {Description: "The kind of the Project resource; optional but must be `Project`"..., Type: "string"}, "name": {Description: "The `name` field of a `Project` resource.", Type: "string"}, "namespace": {Description: "The `namespace` field of a `Project` resource.", Type: "string"}}, ...},
  						"requesterJustificationConfig": {Description: "Required. The manner in which the requester should provide a jus"..., Type: "object", Properties: {"notMandatory": {Description: "NotMandatory justification type means the justification isn't re"..., Type: "object", XPreserveUnknownFields: &true}, "unstructured": {Description: "Unstructured justification type means the justification is in th"..., Type: "object", XPreserveUnknownFields: &true}}},
  						"resourceID": {
  							ID:     "",
  							Schema: "",
  							Ref:    nil,
  							Description: strings.Join({
+ 								"Immutable. ",
  								"The PrivilegedAccessManagerEntitlement name. If not given, the '",
  								"metadata.name' will be used.",
  							}, ""),
  							Type:   "string",
  							Format: "",
  							... // 38 identical fields
  						},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {Description: "PrivilegedAccessManagerEntitlementStatus defines the config conn"..., Type: "object", Properties: {"conditions": {Description: "Conditions represent the latest available observations of the ob"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}}, "externalRef": {Description: "A unique specifier for the PrivilegedAccessManagerEntitlement re"..., Type: "string"}, "observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer", Format: "int64"}, "observedState": {Description: "ObservedState is the state of the resource as most recently obse"..., Type: "object", Properties: {"createTime": {Description: "Output only. Create time stamp.", Type: "string"}, "etag": {Description: "An 'etag' is used for optimistic concurrency control as a way to"..., Type: "string"}, "state": {Description: "Output only. Current state of this entitlement.", Type: "string"}, "updateTime": {Description: "Output only. Update time stamp.", Type: "string"}}}}},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }

---
[round_trip] crd=vertexaiindexes.vertexai.cnrm.cloud.google.com version=:   &v1.CustomResourceDefinitionVersion{
  	... // 3 identical fields
  	Deprecated:         false,
  	DeprecationWarning: nil,
  	Schema: &v1.CustomResourceValidation{
  		OpenAPIV3Schema: &v1.JSONSchemaProps{
  			... // 26 identical fields
  			AnyOf: nil,
  			Not:   nil,
  			Properties: map[string]v1.JSONSchemaProps{
  				"apiVersion": {Description: "apiVersion defines the versioned schema of this representation o"..., Type: "string"},
  				"kind":       {Description: "kind is a string value representing the REST resource this objec"..., Type: "string"},
  				"metadata":   {Type: "object"},
  				"spec": {
  					... // 26 identical fields
  					AnyOf: nil,
  					Not:   nil,
  					Properties: map[string]v1.JSONSchemaProps{
  						"description":       {Description: "The description of the Index.", Type: "string"},
  						"displayName":       {Description: "The display name of the Index. The name can be up to 128 charact"..., Type: "string"},
  						"indexUpdateMethod": {Description: "Immutable. The update method to use with this Index. The value m"..., Type: "string"},
  						"metadata": {
  							... // 26 identical fields
  							AnyOf: nil,
  							Not:   nil,
  							Properties: map[string]v1.JSONSchemaProps{
  								"config": {
  									... // 26 identical fields
  									AnyOf: nil,
  									Not:   nil,
  									Properties: map[string]v1.JSONSchemaProps{
  										"algorithmConfig": {
  											... // 26 identical fields
  											AnyOf: nil,
  											Not:   nil,
  											Properties: map[string]v1.JSONSchemaProps{
  												"bruteForceConfig": {
  													... // 35 identical fields
  													Example:                nil,
  													Nullable:               false,
- 													XPreserveUnknownFields: &true,
+ 													XPreserveUnknownFields: nil,
  													XEmbeddedResource:      false,
  													XIntOrString:           false,
  													... // 4 identical fields
  												},
  												"treeAhConfig": {Description: "Configuration options for using the tree-AH algorithm (Shallow t"..., Type: "object", Properties: {"leafNodeEmbeddingCount": {Description: "Number of embeddings on each leaf node. The default value is 100"..., Type: "integer"}, "leafNodesToSearchPercent": {Description: "The default percentage of leaf nodes that any query may be searc"..., Type: "integer"}}},
  											},
  											AdditionalProperties: nil,
  											PatternProperties:    nil,
  											... // 13 identical fields
  										},
  										"approximateNeighborsCount": {Description: "The default number of neighbors to find via approximate search b"..., Type: "integer"},
  										"dimensions":                {Description: "The number of dimensions of the input vectors.", Type: "integer"},
  										... // 3 identical entries
  									},
  									AdditionalProperties: nil,
  									PatternProperties:    nil,
  									... // 13 identical fields
  								},
  								"contentsDeltaUri": {Description: "Allows creating or replacing the contents of the Matching Engine"..., Type: "string"},
  							},
  							AdditionalProperties: nil,
  							PatternProperties:    nil,
  							... // 13 identical fields
  						},
  						"projectRef": {Description: "The project that this resource belongs to.", Type: "object", OneOf: {{Required: {"name"}, Not: &{Required: {"external"}}}, {Required: {"external"}, Not: &{AnyOf: {{Required: {"name"}}, {Required: {"namespace"}}}}}}, Properties: {"external": {Description: "Allowed value: The `name` field of a `Project` resource.", Type: "string"}, "name": {Description: "Name of the referent. More info: https://kubernetes.io/docs/conc"..., Type: "string"}, "namespace": {Description: "Namespace of the referent. More info: https://kubernetes.io/docs"..., Type: "string"}}, ...},
  						"region":     {Description: "Immutable. The region of the index. eg us-central1.", Type: "string"},
  						"resourceID": {Description: "Immutable. Optional. The service-generated name of the resource."..., Type: "string"},
  					},
  					AdditionalProperties: nil,
  					PatternProperties:    nil,
  					... // 13 identical fields
  				},
  				"status": {Type: "object", Properties: {"conditions": {Description: "Conditions represent the latest available observation of the res"..., Type: "array", Items: &{Schema: &{Type: "object", Properties: {"lastTransitionTime": {Description: "Last time the condition transitioned from one status to another.", Type: "string"}, "message": {Description: "Human-readable message indicating details about last transition.", Type: "string"}, "reason": {Description: "Unique, one-word, CamelCase reason for the condition's last tran"..., Type: "string"}, "status": {Description: "Status is the status of the condition. Can be True, False, Unknown.", Type: "string"}, ...}}}}, "observedGeneration": {Description: "ObservedGeneration is the generation of the resource that was mo"..., Type: "integer"}, "observedState": {Description: "The observed state of the underlying GCP resource.", Type: "object", Properties: {"createTime": {Description: `The timestamp of when the Index was created in RFC3339 UTC "Zulu`..., Type: "string"}, "indexStats": {Description: "Stats of the index resource.", Type: "array", Items: &{Schema: &{Type: "object", Properties: {"shardsCount": {Description: "The number of shards in the Index.", Type: "integer"}, "vectorsCount": {Description: "The number of vectors in the Index.", Type: "string"}}}}}, "metadataSchemaUri": {Description: "Points to a YAML file stored on Google Cloud Storage describing "..., Type: "string"}, "name": {Description: "The resource name of the Index.", Type: "string"}}}}},
  			},
  			AdditionalProperties: nil,
  			PatternProperties:    nil,
  			... // 13 identical fields
  		},
  	},
  	Subresources:             &{Status: &{}},
  	AdditionalPrinterColumns: {{Name: "Age", Type: "date", JSONPath: ".metadata.creationTimestamp"}, {Name: "Ready", Type: "string", Description: "When 'True', the most recent reconcile of the resource succeeded", JSONPath: ".status.conditions[?(@.type=='Ready')].status"}, {Name: "Status", Type: "string", Description: "The reason for the value in 'Ready'", JSONPath: ".status.conditions[?(@.type=='Ready')].reason"}, {Name: "Status Age", Type: "date", Description: "The last transition time for the value in 'Status'", JSONPath: ".status.conditions[?(@.type=='Ready')].lastTransitionTime"}},
  	SelectableFields:         nil,
  }
