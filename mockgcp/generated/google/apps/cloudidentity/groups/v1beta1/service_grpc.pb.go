// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: google/apps/cloudidentity/groups/v1beta1/service.proto

package groupspb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomersServerClient is the client API for CustomersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersServerClient interface {
}

type customersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersServerClient(cc grpc.ClientConnInterface) CustomersServerClient {
	return &customersServerClient{cc}
}

// CustomersServerServer is the server API for CustomersServer service.
// All implementations must embed UnimplementedCustomersServerServer
// for forward compatibility
type CustomersServerServer interface {
	mustEmbedUnimplementedCustomersServerServer()
}

// UnimplementedCustomersServerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServerServer struct {
}

func (UnimplementedCustomersServerServer) mustEmbedUnimplementedCustomersServerServer() {}

// UnsafeCustomersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServerServer will
// result in compilation errors.
type UnsafeCustomersServerServer interface {
	mustEmbedUnimplementedCustomersServerServer()
}

func RegisterCustomersServerServer(s grpc.ServiceRegistrar, srv CustomersServerServer) {
	s.RegisterService(&CustomersServer_ServiceDesc, srv)
}

// CustomersServer_ServiceDesc is the grpc.ServiceDesc for CustomersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.CustomersServer",
	HandlerType: (*CustomersServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// CustomersUserinvitationsServerClient is the client API for CustomersUserinvitationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersUserinvitationsServerClient interface {
	// Cancels a UserInvitation that was already sent.
	CancelCustomersUserinvitation(ctx context.Context, in *CancelCustomersUserinvitationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.
	GetCustomersUserinvitation(ctx context.Context, in *GetCustomersUserinvitationRequest, opts ...grpc.CallOption) (*UserInvitation, error)
	// Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.
	IsInvitableUserCustomersUserinvitation(ctx context.Context, in *IsInvitableUserCustomersUserinvitationRequest, opts ...grpc.CallOption) (*IsInvitableUserResponse, error)
	// Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.
	ListCustomersUserinvitations(ctx context.Context, in *ListCustomersUserinvitationsRequest, opts ...grpc.CallOption) (*ListUserInvitationsResponse, error)
	// Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.
	SendCustomersUserinvitation(ctx context.Context, in *SendCustomersUserinvitationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type customersUserinvitationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersUserinvitationsServerClient(cc grpc.ClientConnInterface) CustomersUserinvitationsServerClient {
	return &customersUserinvitationsServerClient{cc}
}

func (c *customersUserinvitationsServerClient) CancelCustomersUserinvitation(ctx context.Context, in *CancelCustomersUserinvitationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/CancelCustomersUserinvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersUserinvitationsServerClient) GetCustomersUserinvitation(ctx context.Context, in *GetCustomersUserinvitationRequest, opts ...grpc.CallOption) (*UserInvitation, error) {
	out := new(UserInvitation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/GetCustomersUserinvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersUserinvitationsServerClient) IsInvitableUserCustomersUserinvitation(ctx context.Context, in *IsInvitableUserCustomersUserinvitationRequest, opts ...grpc.CallOption) (*IsInvitableUserResponse, error) {
	out := new(IsInvitableUserResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/IsInvitableUserCustomersUserinvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersUserinvitationsServerClient) ListCustomersUserinvitations(ctx context.Context, in *ListCustomersUserinvitationsRequest, opts ...grpc.CallOption) (*ListUserInvitationsResponse, error) {
	out := new(ListUserInvitationsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/ListCustomersUserinvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersUserinvitationsServerClient) SendCustomersUserinvitation(ctx context.Context, in *SendCustomersUserinvitationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/SendCustomersUserinvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersUserinvitationsServerServer is the server API for CustomersUserinvitationsServer service.
// All implementations must embed UnimplementedCustomersUserinvitationsServerServer
// for forward compatibility
type CustomersUserinvitationsServerServer interface {
	// Cancels a UserInvitation that was already sent.
	CancelCustomersUserinvitation(context.Context, *CancelCustomersUserinvitationRequest) (*longrunningpb.Operation, error)
	// Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.
	GetCustomersUserinvitation(context.Context, *GetCustomersUserinvitationRequest) (*UserInvitation, error)
	// Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.
	IsInvitableUserCustomersUserinvitation(context.Context, *IsInvitableUserCustomersUserinvitationRequest) (*IsInvitableUserResponse, error)
	// Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.
	ListCustomersUserinvitations(context.Context, *ListCustomersUserinvitationsRequest) (*ListUserInvitationsResponse, error)
	// Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.
	SendCustomersUserinvitation(context.Context, *SendCustomersUserinvitationRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedCustomersUserinvitationsServerServer()
}

// UnimplementedCustomersUserinvitationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersUserinvitationsServerServer struct {
}

func (UnimplementedCustomersUserinvitationsServerServer) CancelCustomersUserinvitation(context.Context, *CancelCustomersUserinvitationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCustomersUserinvitation not implemented")
}
func (UnimplementedCustomersUserinvitationsServerServer) GetCustomersUserinvitation(context.Context, *GetCustomersUserinvitationRequest) (*UserInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomersUserinvitation not implemented")
}
func (UnimplementedCustomersUserinvitationsServerServer) IsInvitableUserCustomersUserinvitation(context.Context, *IsInvitableUserCustomersUserinvitationRequest) (*IsInvitableUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInvitableUserCustomersUserinvitation not implemented")
}
func (UnimplementedCustomersUserinvitationsServerServer) ListCustomersUserinvitations(context.Context, *ListCustomersUserinvitationsRequest) (*ListUserInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomersUserinvitations not implemented")
}
func (UnimplementedCustomersUserinvitationsServerServer) SendCustomersUserinvitation(context.Context, *SendCustomersUserinvitationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCustomersUserinvitation not implemented")
}
func (UnimplementedCustomersUserinvitationsServerServer) mustEmbedUnimplementedCustomersUserinvitationsServerServer() {
}

// UnsafeCustomersUserinvitationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersUserinvitationsServerServer will
// result in compilation errors.
type UnsafeCustomersUserinvitationsServerServer interface {
	mustEmbedUnimplementedCustomersUserinvitationsServerServer()
}

func RegisterCustomersUserinvitationsServerServer(s grpc.ServiceRegistrar, srv CustomersUserinvitationsServerServer) {
	s.RegisterService(&CustomersUserinvitationsServer_ServiceDesc, srv)
}

func _CustomersUserinvitationsServer_CancelCustomersUserinvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCustomersUserinvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersUserinvitationsServerServer).CancelCustomersUserinvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/CancelCustomersUserinvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersUserinvitationsServerServer).CancelCustomersUserinvitation(ctx, req.(*CancelCustomersUserinvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersUserinvitationsServer_GetCustomersUserinvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomersUserinvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersUserinvitationsServerServer).GetCustomersUserinvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/GetCustomersUserinvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersUserinvitationsServerServer).GetCustomersUserinvitation(ctx, req.(*GetCustomersUserinvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersUserinvitationsServer_IsInvitableUserCustomersUserinvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInvitableUserCustomersUserinvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersUserinvitationsServerServer).IsInvitableUserCustomersUserinvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/IsInvitableUserCustomersUserinvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersUserinvitationsServerServer).IsInvitableUserCustomersUserinvitation(ctx, req.(*IsInvitableUserCustomersUserinvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersUserinvitationsServer_ListCustomersUserinvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomersUserinvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersUserinvitationsServerServer).ListCustomersUserinvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/ListCustomersUserinvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersUserinvitationsServerServer).ListCustomersUserinvitations(ctx, req.(*ListCustomersUserinvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomersUserinvitationsServer_SendCustomersUserinvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCustomersUserinvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersUserinvitationsServerServer).SendCustomersUserinvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer/SendCustomersUserinvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersUserinvitationsServerServer).SendCustomersUserinvitation(ctx, req.(*SendCustomersUserinvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomersUserinvitationsServer_ServiceDesc is the grpc.ServiceDesc for CustomersUserinvitationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomersUserinvitationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.CustomersUserinvitationsServer",
	HandlerType: (*CustomersUserinvitationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelCustomersUserinvitation",
			Handler:    _CustomersUserinvitationsServer_CancelCustomersUserinvitation_Handler,
		},
		{
			MethodName: "GetCustomersUserinvitation",
			Handler:    _CustomersUserinvitationsServer_GetCustomersUserinvitation_Handler,
		},
		{
			MethodName: "IsInvitableUserCustomersUserinvitation",
			Handler:    _CustomersUserinvitationsServer_IsInvitableUserCustomersUserinvitation_Handler,
		},
		{
			MethodName: "ListCustomersUserinvitations",
			Handler:    _CustomersUserinvitationsServer_ListCustomersUserinvitations_Handler,
		},
		{
			MethodName: "SendCustomersUserinvitation",
			Handler:    _CustomersUserinvitationsServer_SendCustomersUserinvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// DevicesServerClient is the client API for DevicesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesServerClient interface {
	// Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
	CancelWipeDevice(ctx context.Context, in *CancelWipeDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
	CreateDevice(ctx context.Context, in *CreateDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified device.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves the specified device.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// Lists/Searches devices.
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Wipes all data on the specified device.
	WipeDevice(ctx context.Context, in *WipeDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type devicesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesServerClient(cc grpc.ClientConnInterface) DevicesServerClient {
	return &devicesServerClient{cc}
}

func (c *devicesServerClient) CancelWipeDevice(ctx context.Context, in *CancelWipeDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/CancelWipeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServerClient) CreateDevice(ctx context.Context, in *CreateDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServerClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServerClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServerClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesServerClient) WipeDevice(ctx context.Context, in *WipeDeviceServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/WipeDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesServerServer is the server API for DevicesServer service.
// All implementations must embed UnimplementedDevicesServerServer
// for forward compatibility
type DevicesServerServer interface {
	// Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
	CancelWipeDevice(context.Context, *CancelWipeDeviceServiceRequest) (*longrunningpb.Operation, error)
	// Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
	CreateDevice(context.Context, *CreateDeviceServiceRequest) (*longrunningpb.Operation, error)
	// Deletes the specified device.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*longrunningpb.Operation, error)
	// Retrieves the specified device.
	GetDevice(context.Context, *GetDeviceRequest) (*Device, error)
	// Lists/Searches devices.
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Wipes all data on the specified device.
	WipeDevice(context.Context, *WipeDeviceServiceRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedDevicesServerServer()
}

// UnimplementedDevicesServerServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesServerServer struct {
}

func (UnimplementedDevicesServerServer) CancelWipeDevice(context.Context, *CancelWipeDeviceServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWipeDevice not implemented")
}
func (UnimplementedDevicesServerServer) CreateDevice(context.Context, *CreateDeviceServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDevicesServerServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDevicesServerServer) GetDevice(context.Context, *GetDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDevicesServerServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDevicesServerServer) WipeDevice(context.Context, *WipeDeviceServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WipeDevice not implemented")
}
func (UnimplementedDevicesServerServer) mustEmbedUnimplementedDevicesServerServer() {}

// UnsafeDevicesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesServerServer will
// result in compilation errors.
type UnsafeDevicesServerServer interface {
	mustEmbedUnimplementedDevicesServerServer()
}

func RegisterDevicesServerServer(s grpc.ServiceRegistrar, srv DevicesServerServer) {
	s.RegisterService(&DevicesServer_ServiceDesc, srv)
}

func _DevicesServer_CancelWipeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWipeDeviceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).CancelWipeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/CancelWipeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).CancelWipeDevice(ctx, req.(*CancelWipeDeviceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesServer_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).CreateDevice(ctx, req.(*CreateDeviceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesServer_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesServer_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesServer_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesServer_WipeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeDeviceServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesServerServer).WipeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesServer/WipeDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesServerServer).WipeDevice(ctx, req.(*WipeDeviceServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesServer_ServiceDesc is the grpc.ServiceDesc for DevicesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.DevicesServer",
	HandlerType: (*DevicesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelWipeDevice",
			Handler:    _DevicesServer_CancelWipeDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DevicesServer_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DevicesServer_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DevicesServer_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DevicesServer_ListDevices_Handler,
		},
		{
			MethodName: "WipeDevice",
			Handler:    _DevicesServer_WipeDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// DevicesDeviceUsersServerClient is the client API for DevicesDeviceUsersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesDeviceUsersServerClient interface {
	// Approves device to access user data.
	ApproveDevicesDeviceUser(ctx context.Context, in *ApproveDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Blocks device from accessing user data
	BlockDevicesDeviceUser(ctx context.Context, in *BlockDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
	CancelWipeDevicesDeviceUser(ctx context.Context, in *CancelWipeDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the specified DeviceUser. This also revokes the user's access to device data.
	DeleteDevicesDeviceUser(ctx context.Context, in *DeleteDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves the specified DeviceUser
	GetDevicesDeviceUser(ctx context.Context, in *GetDevicesDeviceUserRequest, opts ...grpc.CallOption) (*DeviceUser, error)
	// Lists/Searches DeviceUsers.
	ListDevicesDeviceUsers(ctx context.Context, in *ListDevicesDeviceUsersRequest, opts ...grpc.CallOption) (*ListDeviceUsersResponse, error)
	// Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.
	LookupDevicesDeviceUser(ctx context.Context, in *LookupDevicesDeviceUserRequest, opts ...grpc.CallOption) (*LookupSelfDeviceUsersResponse, error)
	// Wipes the user's account on a device.
	WipeDevicesDeviceUser(ctx context.Context, in *WipeDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type devicesDeviceUsersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesDeviceUsersServerClient(cc grpc.ClientConnInterface) DevicesDeviceUsersServerClient {
	return &devicesDeviceUsersServerClient{cc}
}

func (c *devicesDeviceUsersServerClient) ApproveDevicesDeviceUser(ctx context.Context, in *ApproveDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/ApproveDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) BlockDevicesDeviceUser(ctx context.Context, in *BlockDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/BlockDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) CancelWipeDevicesDeviceUser(ctx context.Context, in *CancelWipeDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/CancelWipeDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) DeleteDevicesDeviceUser(ctx context.Context, in *DeleteDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/DeleteDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) GetDevicesDeviceUser(ctx context.Context, in *GetDevicesDeviceUserRequest, opts ...grpc.CallOption) (*DeviceUser, error) {
	out := new(DeviceUser)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/GetDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) ListDevicesDeviceUsers(ctx context.Context, in *ListDevicesDeviceUsersRequest, opts ...grpc.CallOption) (*ListDeviceUsersResponse, error) {
	out := new(ListDeviceUsersResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/ListDevicesDeviceUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) LookupDevicesDeviceUser(ctx context.Context, in *LookupDevicesDeviceUserRequest, opts ...grpc.CallOption) (*LookupSelfDeviceUsersResponse, error) {
	out := new(LookupSelfDeviceUsersResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/LookupDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersServerClient) WipeDevicesDeviceUser(ctx context.Context, in *WipeDevicesDeviceUserRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/WipeDevicesDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesDeviceUsersServerServer is the server API for DevicesDeviceUsersServer service.
// All implementations must embed UnimplementedDevicesDeviceUsersServerServer
// for forward compatibility
type DevicesDeviceUsersServerServer interface {
	// Approves device to access user data.
	ApproveDevicesDeviceUser(context.Context, *ApproveDevicesDeviceUserRequest) (*longrunningpb.Operation, error)
	// Blocks device from accessing user data
	BlockDevicesDeviceUser(context.Context, *BlockDevicesDeviceUserRequest) (*longrunningpb.Operation, error)
	// Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
	CancelWipeDevicesDeviceUser(context.Context, *CancelWipeDevicesDeviceUserRequest) (*longrunningpb.Operation, error)
	// Deletes the specified DeviceUser. This also revokes the user's access to device data.
	DeleteDevicesDeviceUser(context.Context, *DeleteDevicesDeviceUserRequest) (*longrunningpb.Operation, error)
	// Retrieves the specified DeviceUser
	GetDevicesDeviceUser(context.Context, *GetDevicesDeviceUserRequest) (*DeviceUser, error)
	// Lists/Searches DeviceUsers.
	ListDevicesDeviceUsers(context.Context, *ListDevicesDeviceUsersRequest) (*ListDeviceUsersResponse, error)
	// Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.
	LookupDevicesDeviceUser(context.Context, *LookupDevicesDeviceUserRequest) (*LookupSelfDeviceUsersResponse, error)
	// Wipes the user's account on a device.
	WipeDevicesDeviceUser(context.Context, *WipeDevicesDeviceUserRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedDevicesDeviceUsersServerServer()
}

// UnimplementedDevicesDeviceUsersServerServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesDeviceUsersServerServer struct {
}

func (UnimplementedDevicesDeviceUsersServerServer) ApproveDevicesDeviceUser(context.Context, *ApproveDevicesDeviceUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) BlockDevicesDeviceUser(context.Context, *BlockDevicesDeviceUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) CancelWipeDevicesDeviceUser(context.Context, *CancelWipeDevicesDeviceUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWipeDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) DeleteDevicesDeviceUser(context.Context, *DeleteDevicesDeviceUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) GetDevicesDeviceUser(context.Context, *GetDevicesDeviceUserRequest) (*DeviceUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) ListDevicesDeviceUsers(context.Context, *ListDevicesDeviceUsersRequest) (*ListDeviceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevicesDeviceUsers not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) LookupDevicesDeviceUser(context.Context, *LookupDevicesDeviceUserRequest) (*LookupSelfDeviceUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) WipeDevicesDeviceUser(context.Context, *WipeDevicesDeviceUserRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WipeDevicesDeviceUser not implemented")
}
func (UnimplementedDevicesDeviceUsersServerServer) mustEmbedUnimplementedDevicesDeviceUsersServerServer() {
}

// UnsafeDevicesDeviceUsersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesDeviceUsersServerServer will
// result in compilation errors.
type UnsafeDevicesDeviceUsersServerServer interface {
	mustEmbedUnimplementedDevicesDeviceUsersServerServer()
}

func RegisterDevicesDeviceUsersServerServer(s grpc.ServiceRegistrar, srv DevicesDeviceUsersServerServer) {
	s.RegisterService(&DevicesDeviceUsersServer_ServiceDesc, srv)
}

func _DevicesDeviceUsersServer_ApproveDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).ApproveDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/ApproveDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).ApproveDevicesDeviceUser(ctx, req.(*ApproveDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_BlockDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).BlockDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/BlockDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).BlockDevicesDeviceUser(ctx, req.(*BlockDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_CancelWipeDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWipeDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).CancelWipeDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/CancelWipeDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).CancelWipeDevicesDeviceUser(ctx, req.(*CancelWipeDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_DeleteDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).DeleteDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/DeleteDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).DeleteDevicesDeviceUser(ctx, req.(*DeleteDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_GetDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).GetDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/GetDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).GetDevicesDeviceUser(ctx, req.(*GetDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_ListDevicesDeviceUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesDeviceUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).ListDevicesDeviceUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/ListDevicesDeviceUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).ListDevicesDeviceUsers(ctx, req.(*ListDevicesDeviceUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_LookupDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).LookupDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/LookupDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).LookupDevicesDeviceUser(ctx, req.(*LookupDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersServer_WipeDevicesDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeDevicesDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersServerServer).WipeDevicesDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer/WipeDevicesDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersServerServer).WipeDevicesDeviceUser(ctx, req.(*WipeDevicesDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesDeviceUsersServer_ServiceDesc is the grpc.ServiceDesc for DevicesDeviceUsersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesDeviceUsersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersServer",
	HandlerType: (*DevicesDeviceUsersServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproveDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_ApproveDevicesDeviceUser_Handler,
		},
		{
			MethodName: "BlockDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_BlockDevicesDeviceUser_Handler,
		},
		{
			MethodName: "CancelWipeDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_CancelWipeDevicesDeviceUser_Handler,
		},
		{
			MethodName: "DeleteDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_DeleteDevicesDeviceUser_Handler,
		},
		{
			MethodName: "GetDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_GetDevicesDeviceUser_Handler,
		},
		{
			MethodName: "ListDevicesDeviceUsers",
			Handler:    _DevicesDeviceUsersServer_ListDevicesDeviceUsers_Handler,
		},
		{
			MethodName: "LookupDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_LookupDevicesDeviceUser_Handler,
		},
		{
			MethodName: "WipeDevicesDeviceUser",
			Handler:    _DevicesDeviceUsersServer_WipeDevicesDeviceUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// DevicesDeviceUsersClientStatesServerClient is the client API for DevicesDeviceUsersClientStatesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevicesDeviceUsersClientStatesServerClient interface {
	// Gets the client state for the device user
	GetDevicesDeviceUsersClientState(ctx context.Context, in *GetDevicesDeviceUsersClientStateRequest, opts ...grpc.CallOption) (*ClientState, error)
	// Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
	PatchDevicesDeviceUsersClientState(ctx context.Context, in *PatchDevicesDeviceUsersClientStateRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type devicesDeviceUsersClientStatesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDevicesDeviceUsersClientStatesServerClient(cc grpc.ClientConnInterface) DevicesDeviceUsersClientStatesServerClient {
	return &devicesDeviceUsersClientStatesServerClient{cc}
}

func (c *devicesDeviceUsersClientStatesServerClient) GetDevicesDeviceUsersClientState(ctx context.Context, in *GetDevicesDeviceUsersClientStateRequest, opts ...grpc.CallOption) (*ClientState, error) {
	out := new(ClientState)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersClientStatesServer/GetDevicesDeviceUsersClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *devicesDeviceUsersClientStatesServerClient) PatchDevicesDeviceUsersClientState(ctx context.Context, in *PatchDevicesDeviceUsersClientStateRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersClientStatesServer/PatchDevicesDeviceUsersClientState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevicesDeviceUsersClientStatesServerServer is the server API for DevicesDeviceUsersClientStatesServer service.
// All implementations must embed UnimplementedDevicesDeviceUsersClientStatesServerServer
// for forward compatibility
type DevicesDeviceUsersClientStatesServerServer interface {
	// Gets the client state for the device user
	GetDevicesDeviceUsersClientState(context.Context, *GetDevicesDeviceUsersClientStateRequest) (*ClientState, error)
	// Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
	PatchDevicesDeviceUsersClientState(context.Context, *PatchDevicesDeviceUsersClientStateRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedDevicesDeviceUsersClientStatesServerServer()
}

// UnimplementedDevicesDeviceUsersClientStatesServerServer must be embedded to have forward compatible implementations.
type UnimplementedDevicesDeviceUsersClientStatesServerServer struct {
}

func (UnimplementedDevicesDeviceUsersClientStatesServerServer) GetDevicesDeviceUsersClientState(context.Context, *GetDevicesDeviceUsersClientStateRequest) (*ClientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesDeviceUsersClientState not implemented")
}
func (UnimplementedDevicesDeviceUsersClientStatesServerServer) PatchDevicesDeviceUsersClientState(context.Context, *PatchDevicesDeviceUsersClientStateRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDevicesDeviceUsersClientState not implemented")
}
func (UnimplementedDevicesDeviceUsersClientStatesServerServer) mustEmbedUnimplementedDevicesDeviceUsersClientStatesServerServer() {
}

// UnsafeDevicesDeviceUsersClientStatesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevicesDeviceUsersClientStatesServerServer will
// result in compilation errors.
type UnsafeDevicesDeviceUsersClientStatesServerServer interface {
	mustEmbedUnimplementedDevicesDeviceUsersClientStatesServerServer()
}

func RegisterDevicesDeviceUsersClientStatesServerServer(s grpc.ServiceRegistrar, srv DevicesDeviceUsersClientStatesServerServer) {
	s.RegisterService(&DevicesDeviceUsersClientStatesServer_ServiceDesc, srv)
}

func _DevicesDeviceUsersClientStatesServer_GetDevicesDeviceUsersClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesDeviceUsersClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersClientStatesServerServer).GetDevicesDeviceUsersClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersClientStatesServer/GetDevicesDeviceUsersClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersClientStatesServerServer).GetDevicesDeviceUsersClientState(ctx, req.(*GetDevicesDeviceUsersClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DevicesDeviceUsersClientStatesServer_PatchDevicesDeviceUsersClientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDevicesDeviceUsersClientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevicesDeviceUsersClientStatesServerServer).PatchDevicesDeviceUsersClientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersClientStatesServer/PatchDevicesDeviceUsersClientState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevicesDeviceUsersClientStatesServerServer).PatchDevicesDeviceUsersClientState(ctx, req.(*PatchDevicesDeviceUsersClientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevicesDeviceUsersClientStatesServer_ServiceDesc is the grpc.ServiceDesc for DevicesDeviceUsersClientStatesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevicesDeviceUsersClientStatesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.DevicesDeviceUsersClientStatesServer",
	HandlerType: (*DevicesDeviceUsersClientStatesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevicesDeviceUsersClientState",
			Handler:    _DevicesDeviceUsersClientStatesServer_GetDevicesDeviceUsersClientState_Handler,
		},
		{
			MethodName: "PatchDevicesDeviceUsersClientState",
			Handler:    _DevicesDeviceUsersClientStatesServer_PatchDevicesDeviceUsersClientState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// GroupsServerClient is the client API for GroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServerClient interface {
	// Creates a `Group`.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a `Group`.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves a `Group`.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Get Security Settings
	GetSecuritySettingsGroup(ctx context.Context, in *GetSecuritySettingsGroupRequest, opts ...grpc.CallOption) (*SecuritySettings, error)
	// Lists the `Group` resources under a customer or namespace.
	ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.
	LookupGroup(ctx context.Context, in *LookupGroupRequest, opts ...grpc.CallOption) (*LookupGroupNameResponse, error)
	// Updates a `Group`.
	PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Searches for `Group` resources matching a specified query.
	SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupsResponse, error)
	// Update Security Settings
	UpdateSecuritySettingsGroup(ctx context.Context, in *UpdateSecuritySettingsGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type groupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServerClient(cc grpc.ClientConnInterface) GroupsServerClient {
	return &groupsServerClient{cc}
}

func (c *groupsServerClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) GetSecuritySettingsGroup(ctx context.Context, in *GetSecuritySettingsGroupRequest, opts ...grpc.CallOption) (*SecuritySettings, error) {
	out := new(SecuritySettings)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/GetSecuritySettingsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) ListGroups(ctx context.Context, in *ListGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) LookupGroup(ctx context.Context, in *LookupGroupRequest, opts ...grpc.CallOption) (*LookupGroupNameResponse, error) {
	out := new(LookupGroupNameResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/LookupGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) PatchGroup(ctx context.Context, in *PatchGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/PatchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) SearchGroup(ctx context.Context, in *SearchGroupRequest, opts ...grpc.CallOption) (*SearchGroupsResponse, error) {
	out := new(SearchGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/SearchGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServerClient) UpdateSecuritySettingsGroup(ctx context.Context, in *UpdateSecuritySettingsGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/UpdateSecuritySettingsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServerServer is the server API for GroupsServer service.
// All implementations must embed UnimplementedGroupsServerServer
// for forward compatibility
type GroupsServerServer interface {
	// Creates a `Group`.
	CreateGroup(context.Context, *CreateGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a `Group`.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*longrunningpb.Operation, error)
	// Retrieves a `Group`.
	GetGroup(context.Context, *GetGroupRequest) (*Group, error)
	// Get Security Settings
	GetSecuritySettingsGroup(context.Context, *GetSecuritySettingsGroupRequest) (*SecuritySettings, error)
	// Lists the `Group` resources under a customer or namespace.
	ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error)
	// Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.
	LookupGroup(context.Context, *LookupGroupRequest) (*LookupGroupNameResponse, error)
	// Updates a `Group`.
	PatchGroup(context.Context, *PatchGroupRequest) (*longrunningpb.Operation, error)
	// Searches for `Group` resources matching a specified query.
	SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupsResponse, error)
	// Update Security Settings
	UpdateSecuritySettingsGroup(context.Context, *UpdateSecuritySettingsGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedGroupsServerServer()
}

// UnimplementedGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServerServer struct {
}

func (UnimplementedGroupsServerServer) CreateGroup(context.Context, *CreateGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServerServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupsServerServer) GetGroup(context.Context, *GetGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedGroupsServerServer) GetSecuritySettingsGroup(context.Context, *GetSecuritySettingsGroupRequest) (*SecuritySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecuritySettingsGroup not implemented")
}
func (UnimplementedGroupsServerServer) ListGroups(context.Context, *ListGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedGroupsServerServer) LookupGroup(context.Context, *LookupGroupRequest) (*LookupGroupNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupGroup not implemented")
}
func (UnimplementedGroupsServerServer) PatchGroup(context.Context, *PatchGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGroup not implemented")
}
func (UnimplementedGroupsServerServer) SearchGroup(context.Context, *SearchGroupRequest) (*SearchGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroup not implemented")
}
func (UnimplementedGroupsServerServer) UpdateSecuritySettingsGroup(context.Context, *UpdateSecuritySettingsGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecuritySettingsGroup not implemented")
}
func (UnimplementedGroupsServerServer) mustEmbedUnimplementedGroupsServerServer() {}

// UnsafeGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServerServer will
// result in compilation errors.
type UnsafeGroupsServerServer interface {
	mustEmbedUnimplementedGroupsServerServer()
}

func RegisterGroupsServerServer(s grpc.ServiceRegistrar, srv GroupsServerServer) {
	s.RegisterService(&GroupsServer_ServiceDesc, srv)
}

func _GroupsServer_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_GetSecuritySettingsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecuritySettingsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).GetSecuritySettingsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/GetSecuritySettingsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).GetSecuritySettingsGroup(ctx, req.(*GetSecuritySettingsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).ListGroups(ctx, req.(*ListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_LookupGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).LookupGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/LookupGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).LookupGroup(ctx, req.(*LookupGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_PatchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).PatchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/PatchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).PatchGroup(ctx, req.(*PatchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_SearchGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).SearchGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/SearchGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).SearchGroup(ctx, req.(*SearchGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsServer_UpdateSecuritySettingsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecuritySettingsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServerServer).UpdateSecuritySettingsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsServer/UpdateSecuritySettingsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServerServer).UpdateSecuritySettingsGroup(ctx, req.(*UpdateSecuritySettingsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsServer_ServiceDesc is the grpc.ServiceDesc for GroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.GroupsServer",
	HandlerType: (*GroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupsServer_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupsServer_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupsServer_GetGroup_Handler,
		},
		{
			MethodName: "GetSecuritySettingsGroup",
			Handler:    _GroupsServer_GetSecuritySettingsGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _GroupsServer_ListGroups_Handler,
		},
		{
			MethodName: "LookupGroup",
			Handler:    _GroupsServer_LookupGroup_Handler,
		},
		{
			MethodName: "PatchGroup",
			Handler:    _GroupsServer_PatchGroup_Handler,
		},
		{
			MethodName: "SearchGroup",
			Handler:    _GroupsServer_SearchGroup_Handler,
		},
		{
			MethodName: "UpdateSecuritySettingsGroup",
			Handler:    _GroupsServer_UpdateSecuritySettingsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// GroupsMembershipsServerClient is the client API for GroupsMembershipsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsMembershipsServerClient interface {
	// Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.
	CheckTransitiveMembershipGroupsMembership(ctx context.Context, in *CheckTransitiveMembershipGroupsMembershipRequest, opts ...grpc.CallOption) (*CheckTransitiveMembershipResponse, error)
	// Creates a `Membership`.
	CreateGroupsMembership(ctx context.Context, in *CreateGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a `Membership`.
	DeleteGroupsMembership(ctx context.Context, in *DeleteGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves a `Membership`.
	GetGroupsMembership(ctx context.Context, in *GetGroupsMembershipRequest, opts ...grpc.CallOption) (*Membership, error)
	// Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.
	GetMembershipGraphGroupsMembership(ctx context.Context, in *GetMembershipGraphGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists the `Membership`s within a `Group`.
	ListGroupsMemberships(ctx context.Context, in *ListGroupsMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error)
	// Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.
	LookupGroupsMembership(ctx context.Context, in *LookupGroupsMembershipRequest, opts ...grpc.CallOption) (*LookupMembershipNameResponse, error)
	// Modifies the `MembershipRole`s of a `Membership`.
	ModifyMembershipRolesGroupsMembership(ctx context.Context, in *ModifyMembershipRolesGroupsMembershipRequest, opts ...grpc.CallOption) (*ModifyMembershipRolesResponse, error)
	// Searches direct groups of a member.
	SearchDirectGroupsGroupsMembership(ctx context.Context, in *SearchDirectGroupsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchDirectGroupsResponse, error)
	// Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
	SearchTransitiveGroupsGroupsMembership(ctx context.Context, in *SearchTransitiveGroupsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchTransitiveGroupsResponse, error)
	// Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
	SearchTransitiveMembershipsGroupsMembership(ctx context.Context, in *SearchTransitiveMembershipsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchTransitiveMembershipsResponse, error)
}

type groupsMembershipsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsMembershipsServerClient(cc grpc.ClientConnInterface) GroupsMembershipsServerClient {
	return &groupsMembershipsServerClient{cc}
}

func (c *groupsMembershipsServerClient) CheckTransitiveMembershipGroupsMembership(ctx context.Context, in *CheckTransitiveMembershipGroupsMembershipRequest, opts ...grpc.CallOption) (*CheckTransitiveMembershipResponse, error) {
	out := new(CheckTransitiveMembershipResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/CheckTransitiveMembershipGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) CreateGroupsMembership(ctx context.Context, in *CreateGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/CreateGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) DeleteGroupsMembership(ctx context.Context, in *DeleteGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/DeleteGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) GetGroupsMembership(ctx context.Context, in *GetGroupsMembershipRequest, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/GetGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) GetMembershipGraphGroupsMembership(ctx context.Context, in *GetMembershipGraphGroupsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/GetMembershipGraphGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) ListGroupsMemberships(ctx context.Context, in *ListGroupsMembershipsRequest, opts ...grpc.CallOption) (*ListMembershipsResponse, error) {
	out := new(ListMembershipsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/ListGroupsMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) LookupGroupsMembership(ctx context.Context, in *LookupGroupsMembershipRequest, opts ...grpc.CallOption) (*LookupMembershipNameResponse, error) {
	out := new(LookupMembershipNameResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/LookupGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) ModifyMembershipRolesGroupsMembership(ctx context.Context, in *ModifyMembershipRolesGroupsMembershipRequest, opts ...grpc.CallOption) (*ModifyMembershipRolesResponse, error) {
	out := new(ModifyMembershipRolesResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/ModifyMembershipRolesGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) SearchDirectGroupsGroupsMembership(ctx context.Context, in *SearchDirectGroupsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchDirectGroupsResponse, error) {
	out := new(SearchDirectGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchDirectGroupsGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) SearchTransitiveGroupsGroupsMembership(ctx context.Context, in *SearchTransitiveGroupsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchTransitiveGroupsResponse, error) {
	out := new(SearchTransitiveGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchTransitiveGroupsGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsMembershipsServerClient) SearchTransitiveMembershipsGroupsMembership(ctx context.Context, in *SearchTransitiveMembershipsGroupsMembershipRequest, opts ...grpc.CallOption) (*SearchTransitiveMembershipsResponse, error) {
	out := new(SearchTransitiveMembershipsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchTransitiveMembershipsGroupsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsMembershipsServerServer is the server API for GroupsMembershipsServer service.
// All implementations must embed UnimplementedGroupsMembershipsServerServer
// for forward compatibility
type GroupsMembershipsServerServer interface {
	// Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.
	CheckTransitiveMembershipGroupsMembership(context.Context, *CheckTransitiveMembershipGroupsMembershipRequest) (*CheckTransitiveMembershipResponse, error)
	// Creates a `Membership`.
	CreateGroupsMembership(context.Context, *CreateGroupsMembershipRequest) (*longrunningpb.Operation, error)
	// Deletes a `Membership`.
	DeleteGroupsMembership(context.Context, *DeleteGroupsMembershipRequest) (*longrunningpb.Operation, error)
	// Retrieves a `Membership`.
	GetGroupsMembership(context.Context, *GetGroupsMembershipRequest) (*Membership, error)
	// Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.
	GetMembershipGraphGroupsMembership(context.Context, *GetMembershipGraphGroupsMembershipRequest) (*longrunningpb.Operation, error)
	// Lists the `Membership`s within a `Group`.
	ListGroupsMemberships(context.Context, *ListGroupsMembershipsRequest) (*ListMembershipsResponse, error)
	// Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.
	LookupGroupsMembership(context.Context, *LookupGroupsMembershipRequest) (*LookupMembershipNameResponse, error)
	// Modifies the `MembershipRole`s of a `Membership`.
	ModifyMembershipRolesGroupsMembership(context.Context, *ModifyMembershipRolesGroupsMembershipRequest) (*ModifyMembershipRolesResponse, error)
	// Searches direct groups of a member.
	SearchDirectGroupsGroupsMembership(context.Context, *SearchDirectGroupsGroupsMembershipRequest) (*SearchDirectGroupsResponse, error)
	// Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.
	SearchTransitiveGroupsGroupsMembership(context.Context, *SearchTransitiveGroupsGroupsMembershipRequest) (*SearchTransitiveGroupsResponse, error)
	// Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.
	SearchTransitiveMembershipsGroupsMembership(context.Context, *SearchTransitiveMembershipsGroupsMembershipRequest) (*SearchTransitiveMembershipsResponse, error)
	mustEmbedUnimplementedGroupsMembershipsServerServer()
}

// UnimplementedGroupsMembershipsServerServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsMembershipsServerServer struct {
}

func (UnimplementedGroupsMembershipsServerServer) CheckTransitiveMembershipGroupsMembership(context.Context, *CheckTransitiveMembershipGroupsMembershipRequest) (*CheckTransitiveMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransitiveMembershipGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) CreateGroupsMembership(context.Context, *CreateGroupsMembershipRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) DeleteGroupsMembership(context.Context, *DeleteGroupsMembershipRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) GetGroupsMembership(context.Context, *GetGroupsMembershipRequest) (*Membership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) GetMembershipGraphGroupsMembership(context.Context, *GetMembershipGraphGroupsMembershipRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembershipGraphGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) ListGroupsMemberships(context.Context, *ListGroupsMembershipsRequest) (*ListMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupsMemberships not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) LookupGroupsMembership(context.Context, *LookupGroupsMembershipRequest) (*LookupMembershipNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) ModifyMembershipRolesGroupsMembership(context.Context, *ModifyMembershipRolesGroupsMembershipRequest) (*ModifyMembershipRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyMembershipRolesGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) SearchDirectGroupsGroupsMembership(context.Context, *SearchDirectGroupsGroupsMembershipRequest) (*SearchDirectGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDirectGroupsGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) SearchTransitiveGroupsGroupsMembership(context.Context, *SearchTransitiveGroupsGroupsMembershipRequest) (*SearchTransitiveGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransitiveGroupsGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) SearchTransitiveMembershipsGroupsMembership(context.Context, *SearchTransitiveMembershipsGroupsMembershipRequest) (*SearchTransitiveMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTransitiveMembershipsGroupsMembership not implemented")
}
func (UnimplementedGroupsMembershipsServerServer) mustEmbedUnimplementedGroupsMembershipsServerServer() {
}

// UnsafeGroupsMembershipsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsMembershipsServerServer will
// result in compilation errors.
type UnsafeGroupsMembershipsServerServer interface {
	mustEmbedUnimplementedGroupsMembershipsServerServer()
}

func RegisterGroupsMembershipsServerServer(s grpc.ServiceRegistrar, srv GroupsMembershipsServerServer) {
	s.RegisterService(&GroupsMembershipsServer_ServiceDesc, srv)
}

func _GroupsMembershipsServer_CheckTransitiveMembershipGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTransitiveMembershipGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).CheckTransitiveMembershipGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/CheckTransitiveMembershipGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).CheckTransitiveMembershipGroupsMembership(ctx, req.(*CheckTransitiveMembershipGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_CreateGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).CreateGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/CreateGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).CreateGroupsMembership(ctx, req.(*CreateGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_DeleteGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).DeleteGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/DeleteGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).DeleteGroupsMembership(ctx, req.(*DeleteGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_GetGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).GetGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/GetGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).GetGroupsMembership(ctx, req.(*GetGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_GetMembershipGraphGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembershipGraphGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).GetMembershipGraphGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/GetMembershipGraphGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).GetMembershipGraphGroupsMembership(ctx, req.(*GetMembershipGraphGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_ListGroupsMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).ListGroupsMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/ListGroupsMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).ListGroupsMemberships(ctx, req.(*ListGroupsMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_LookupGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).LookupGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/LookupGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).LookupGroupsMembership(ctx, req.(*LookupGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_ModifyMembershipRolesGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMembershipRolesGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).ModifyMembershipRolesGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/ModifyMembershipRolesGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).ModifyMembershipRolesGroupsMembership(ctx, req.(*ModifyMembershipRolesGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_SearchDirectGroupsGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDirectGroupsGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).SearchDirectGroupsGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchDirectGroupsGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).SearchDirectGroupsGroupsMembership(ctx, req.(*SearchDirectGroupsGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_SearchTransitiveGroupsGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTransitiveGroupsGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).SearchTransitiveGroupsGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchTransitiveGroupsGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).SearchTransitiveGroupsGroupsMembership(ctx, req.(*SearchTransitiveGroupsGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsMembershipsServer_SearchTransitiveMembershipsGroupsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTransitiveMembershipsGroupsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsMembershipsServerServer).SearchTransitiveMembershipsGroupsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer/SearchTransitiveMembershipsGroupsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsMembershipsServerServer).SearchTransitiveMembershipsGroupsMembership(ctx, req.(*SearchTransitiveMembershipsGroupsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsMembershipsServer_ServiceDesc is the grpc.ServiceDesc for GroupsMembershipsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsMembershipsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.GroupsMembershipsServer",
	HandlerType: (*GroupsMembershipsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTransitiveMembershipGroupsMembership",
			Handler:    _GroupsMembershipsServer_CheckTransitiveMembershipGroupsMembership_Handler,
		},
		{
			MethodName: "CreateGroupsMembership",
			Handler:    _GroupsMembershipsServer_CreateGroupsMembership_Handler,
		},
		{
			MethodName: "DeleteGroupsMembership",
			Handler:    _GroupsMembershipsServer_DeleteGroupsMembership_Handler,
		},
		{
			MethodName: "GetGroupsMembership",
			Handler:    _GroupsMembershipsServer_GetGroupsMembership_Handler,
		},
		{
			MethodName: "GetMembershipGraphGroupsMembership",
			Handler:    _GroupsMembershipsServer_GetMembershipGraphGroupsMembership_Handler,
		},
		{
			MethodName: "ListGroupsMemberships",
			Handler:    _GroupsMembershipsServer_ListGroupsMemberships_Handler,
		},
		{
			MethodName: "LookupGroupsMembership",
			Handler:    _GroupsMembershipsServer_LookupGroupsMembership_Handler,
		},
		{
			MethodName: "ModifyMembershipRolesGroupsMembership",
			Handler:    _GroupsMembershipsServer_ModifyMembershipRolesGroupsMembership_Handler,
		},
		{
			MethodName: "SearchDirectGroupsGroupsMembership",
			Handler:    _GroupsMembershipsServer_SearchDirectGroupsGroupsMembership_Handler,
		},
		{
			MethodName: "SearchTransitiveGroupsGroupsMembership",
			Handler:    _GroupsMembershipsServer_SearchTransitiveGroupsGroupsMembership_Handler,
		},
		{
			MethodName: "SearchTransitiveMembershipsGroupsMembership",
			Handler:    _GroupsMembershipsServer_SearchTransitiveMembershipsGroupsMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// InboundSamlSsoProfilesServerClient is the client API for InboundSamlSsoProfilesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboundSamlSsoProfilesServerClient interface {
	// Creates an InboundSamlSsoProfile for a customer. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	CreateInboundSamlSsoProfile(ctx context.Context, in *CreateInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an InboundSamlSsoProfile.
	DeleteInboundSamlSsoProfile(ctx context.Context, in *DeleteInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an InboundSamlSsoProfile.
	GetInboundSamlSsoProfile(ctx context.Context, in *GetInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*InboundSamlSsoProfile, error)
	// Lists InboundSamlSsoProfiles for a customer.
	ListInboundSamlSsoProfiles(ctx context.Context, in *ListInboundSamlSsoProfilesRequest, opts ...grpc.CallOption) (*ListInboundSamlSsoProfilesResponse, error)
	// Updates an InboundSamlSsoProfile. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	PatchInboundSamlSsoProfile(ctx context.Context, in *PatchInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type inboundSamlSsoProfilesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewInboundSamlSsoProfilesServerClient(cc grpc.ClientConnInterface) InboundSamlSsoProfilesServerClient {
	return &inboundSamlSsoProfilesServerClient{cc}
}

func (c *inboundSamlSsoProfilesServerClient) CreateInboundSamlSsoProfile(ctx context.Context, in *CreateInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/CreateInboundSamlSsoProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesServerClient) DeleteInboundSamlSsoProfile(ctx context.Context, in *DeleteInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/DeleteInboundSamlSsoProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesServerClient) GetInboundSamlSsoProfile(ctx context.Context, in *GetInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*InboundSamlSsoProfile, error) {
	out := new(InboundSamlSsoProfile)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/GetInboundSamlSsoProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesServerClient) ListInboundSamlSsoProfiles(ctx context.Context, in *ListInboundSamlSsoProfilesRequest, opts ...grpc.CallOption) (*ListInboundSamlSsoProfilesResponse, error) {
	out := new(ListInboundSamlSsoProfilesResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/ListInboundSamlSsoProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesServerClient) PatchInboundSamlSsoProfile(ctx context.Context, in *PatchInboundSamlSsoProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/PatchInboundSamlSsoProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboundSamlSsoProfilesServerServer is the server API for InboundSamlSsoProfilesServer service.
// All implementations must embed UnimplementedInboundSamlSsoProfilesServerServer
// for forward compatibility
type InboundSamlSsoProfilesServerServer interface {
	// Creates an InboundSamlSsoProfile for a customer. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	CreateInboundSamlSsoProfile(context.Context, *CreateInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error)
	// Deletes an InboundSamlSsoProfile.
	DeleteInboundSamlSsoProfile(context.Context, *DeleteInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error)
	// Gets an InboundSamlSsoProfile.
	GetInboundSamlSsoProfile(context.Context, *GetInboundSamlSsoProfileRequest) (*InboundSamlSsoProfile, error)
	// Lists InboundSamlSsoProfiles for a customer.
	ListInboundSamlSsoProfiles(context.Context, *ListInboundSamlSsoProfilesRequest) (*ListInboundSamlSsoProfilesResponse, error)
	// Updates an InboundSamlSsoProfile. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	PatchInboundSamlSsoProfile(context.Context, *PatchInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedInboundSamlSsoProfilesServerServer()
}

// UnimplementedInboundSamlSsoProfilesServerServer must be embedded to have forward compatible implementations.
type UnimplementedInboundSamlSsoProfilesServerServer struct {
}

func (UnimplementedInboundSamlSsoProfilesServerServer) CreateInboundSamlSsoProfile(context.Context, *CreateInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundSamlSsoProfile not implemented")
}
func (UnimplementedInboundSamlSsoProfilesServerServer) DeleteInboundSamlSsoProfile(context.Context, *DeleteInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundSamlSsoProfile not implemented")
}
func (UnimplementedInboundSamlSsoProfilesServerServer) GetInboundSamlSsoProfile(context.Context, *GetInboundSamlSsoProfileRequest) (*InboundSamlSsoProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundSamlSsoProfile not implemented")
}
func (UnimplementedInboundSamlSsoProfilesServerServer) ListInboundSamlSsoProfiles(context.Context, *ListInboundSamlSsoProfilesRequest) (*ListInboundSamlSsoProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSamlSsoProfiles not implemented")
}
func (UnimplementedInboundSamlSsoProfilesServerServer) PatchInboundSamlSsoProfile(context.Context, *PatchInboundSamlSsoProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInboundSamlSsoProfile not implemented")
}
func (UnimplementedInboundSamlSsoProfilesServerServer) mustEmbedUnimplementedInboundSamlSsoProfilesServerServer() {
}

// UnsafeInboundSamlSsoProfilesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboundSamlSsoProfilesServerServer will
// result in compilation errors.
type UnsafeInboundSamlSsoProfilesServerServer interface {
	mustEmbedUnimplementedInboundSamlSsoProfilesServerServer()
}

func RegisterInboundSamlSsoProfilesServerServer(s grpc.ServiceRegistrar, srv InboundSamlSsoProfilesServerServer) {
	s.RegisterService(&InboundSamlSsoProfilesServer_ServiceDesc, srv)
}

func _InboundSamlSsoProfilesServer_CreateInboundSamlSsoProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundSamlSsoProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesServerServer).CreateInboundSamlSsoProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/CreateInboundSamlSsoProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesServerServer).CreateInboundSamlSsoProfile(ctx, req.(*CreateInboundSamlSsoProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesServer_DeleteInboundSamlSsoProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundSamlSsoProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesServerServer).DeleteInboundSamlSsoProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/DeleteInboundSamlSsoProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesServerServer).DeleteInboundSamlSsoProfile(ctx, req.(*DeleteInboundSamlSsoProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesServer_GetInboundSamlSsoProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundSamlSsoProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesServerServer).GetInboundSamlSsoProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/GetInboundSamlSsoProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesServerServer).GetInboundSamlSsoProfile(ctx, req.(*GetInboundSamlSsoProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesServer_ListInboundSamlSsoProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSamlSsoProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesServerServer).ListInboundSamlSsoProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/ListInboundSamlSsoProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesServerServer).ListInboundSamlSsoProfiles(ctx, req.(*ListInboundSamlSsoProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesServer_PatchInboundSamlSsoProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInboundSamlSsoProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesServerServer).PatchInboundSamlSsoProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer/PatchInboundSamlSsoProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesServerServer).PatchInboundSamlSsoProfile(ctx, req.(*PatchInboundSamlSsoProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InboundSamlSsoProfilesServer_ServiceDesc is the grpc.ServiceDesc for InboundSamlSsoProfilesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InboundSamlSsoProfilesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesServer",
	HandlerType: (*InboundSamlSsoProfilesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInboundSamlSsoProfile",
			Handler:    _InboundSamlSsoProfilesServer_CreateInboundSamlSsoProfile_Handler,
		},
		{
			MethodName: "DeleteInboundSamlSsoProfile",
			Handler:    _InboundSamlSsoProfilesServer_DeleteInboundSamlSsoProfile_Handler,
		},
		{
			MethodName: "GetInboundSamlSsoProfile",
			Handler:    _InboundSamlSsoProfilesServer_GetInboundSamlSsoProfile_Handler,
		},
		{
			MethodName: "ListInboundSamlSsoProfiles",
			Handler:    _InboundSamlSsoProfilesServer_ListInboundSamlSsoProfiles_Handler,
		},
		{
			MethodName: "PatchInboundSamlSsoProfile",
			Handler:    _InboundSamlSsoProfilesServer_PatchInboundSamlSsoProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// InboundSamlSsoProfilesIdpCredentialsServerClient is the client API for InboundSamlSsoProfilesIdpCredentialsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboundSamlSsoProfilesIdpCredentialsServerClient interface {
	// Adds an IdpCredential. Up to 2 credentials are allowed. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	AddInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *AddInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an IdpCredential.
	DeleteInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *DeleteInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an IdpCredential.
	GetInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *GetInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*IdpCredential, error)
	// Returns a list of IdpCredentials in an InboundSamlSsoProfile.
	ListInboundSamlSsoProfilesIdpCredentials(ctx context.Context, in *ListInboundSamlSsoProfilesIdpCredentialsRequest, opts ...grpc.CallOption) (*ListIdpCredentialsResponse, error)
}

type inboundSamlSsoProfilesIdpCredentialsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewInboundSamlSsoProfilesIdpCredentialsServerClient(cc grpc.ClientConnInterface) InboundSamlSsoProfilesIdpCredentialsServerClient {
	return &inboundSamlSsoProfilesIdpCredentialsServerClient{cc}
}

func (c *inboundSamlSsoProfilesIdpCredentialsServerClient) AddInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *AddInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/AddInboundSamlSsoProfilesIdpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesIdpCredentialsServerClient) DeleteInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *DeleteInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/DeleteInboundSamlSsoProfilesIdpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesIdpCredentialsServerClient) GetInboundSamlSsoProfilesIdpCredential(ctx context.Context, in *GetInboundSamlSsoProfilesIdpCredentialRequest, opts ...grpc.CallOption) (*IdpCredential, error) {
	out := new(IdpCredential)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/GetInboundSamlSsoProfilesIdpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSamlSsoProfilesIdpCredentialsServerClient) ListInboundSamlSsoProfilesIdpCredentials(ctx context.Context, in *ListInboundSamlSsoProfilesIdpCredentialsRequest, opts ...grpc.CallOption) (*ListIdpCredentialsResponse, error) {
	out := new(ListIdpCredentialsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/ListInboundSamlSsoProfilesIdpCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboundSamlSsoProfilesIdpCredentialsServerServer is the server API for InboundSamlSsoProfilesIdpCredentialsServer service.
// All implementations must embed UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer
// for forward compatibility
type InboundSamlSsoProfilesIdpCredentialsServerServer interface {
	// Adds an IdpCredential. Up to 2 credentials are allowed. When the target customer has enabled [Multi-party approval for sensitive actions](https://support.google.com/a/answer/13790448), the `Operation` in the response will have `"done": false`, it will not have a response, and the metadata will have `"state": "awaiting-multi-party-approval"`.
	AddInboundSamlSsoProfilesIdpCredential(context.Context, *AddInboundSamlSsoProfilesIdpCredentialRequest) (*longrunningpb.Operation, error)
	// Deletes an IdpCredential.
	DeleteInboundSamlSsoProfilesIdpCredential(context.Context, *DeleteInboundSamlSsoProfilesIdpCredentialRequest) (*longrunningpb.Operation, error)
	// Gets an IdpCredential.
	GetInboundSamlSsoProfilesIdpCredential(context.Context, *GetInboundSamlSsoProfilesIdpCredentialRequest) (*IdpCredential, error)
	// Returns a list of IdpCredentials in an InboundSamlSsoProfile.
	ListInboundSamlSsoProfilesIdpCredentials(context.Context, *ListInboundSamlSsoProfilesIdpCredentialsRequest) (*ListIdpCredentialsResponse, error)
	mustEmbedUnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer()
}

// UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer must be embedded to have forward compatible implementations.
type UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer struct {
}

func (UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer) AddInboundSamlSsoProfilesIdpCredential(context.Context, *AddInboundSamlSsoProfilesIdpCredentialRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInboundSamlSsoProfilesIdpCredential not implemented")
}
func (UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer) DeleteInboundSamlSsoProfilesIdpCredential(context.Context, *DeleteInboundSamlSsoProfilesIdpCredentialRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundSamlSsoProfilesIdpCredential not implemented")
}
func (UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer) GetInboundSamlSsoProfilesIdpCredential(context.Context, *GetInboundSamlSsoProfilesIdpCredentialRequest) (*IdpCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundSamlSsoProfilesIdpCredential not implemented")
}
func (UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer) ListInboundSamlSsoProfilesIdpCredentials(context.Context, *ListInboundSamlSsoProfilesIdpCredentialsRequest) (*ListIdpCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSamlSsoProfilesIdpCredentials not implemented")
}
func (UnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer) mustEmbedUnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer() {
}

// UnsafeInboundSamlSsoProfilesIdpCredentialsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboundSamlSsoProfilesIdpCredentialsServerServer will
// result in compilation errors.
type UnsafeInboundSamlSsoProfilesIdpCredentialsServerServer interface {
	mustEmbedUnimplementedInboundSamlSsoProfilesIdpCredentialsServerServer()
}

func RegisterInboundSamlSsoProfilesIdpCredentialsServerServer(s grpc.ServiceRegistrar, srv InboundSamlSsoProfilesIdpCredentialsServerServer) {
	s.RegisterService(&InboundSamlSsoProfilesIdpCredentialsServer_ServiceDesc, srv)
}

func _InboundSamlSsoProfilesIdpCredentialsServer_AddInboundSamlSsoProfilesIdpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInboundSamlSsoProfilesIdpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).AddInboundSamlSsoProfilesIdpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/AddInboundSamlSsoProfilesIdpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).AddInboundSamlSsoProfilesIdpCredential(ctx, req.(*AddInboundSamlSsoProfilesIdpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesIdpCredentialsServer_DeleteInboundSamlSsoProfilesIdpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundSamlSsoProfilesIdpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).DeleteInboundSamlSsoProfilesIdpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/DeleteInboundSamlSsoProfilesIdpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).DeleteInboundSamlSsoProfilesIdpCredential(ctx, req.(*DeleteInboundSamlSsoProfilesIdpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesIdpCredentialsServer_GetInboundSamlSsoProfilesIdpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundSamlSsoProfilesIdpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).GetInboundSamlSsoProfilesIdpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/GetInboundSamlSsoProfilesIdpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).GetInboundSamlSsoProfilesIdpCredential(ctx, req.(*GetInboundSamlSsoProfilesIdpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSamlSsoProfilesIdpCredentialsServer_ListInboundSamlSsoProfilesIdpCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSamlSsoProfilesIdpCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).ListInboundSamlSsoProfilesIdpCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer/ListInboundSamlSsoProfilesIdpCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSamlSsoProfilesIdpCredentialsServerServer).ListInboundSamlSsoProfilesIdpCredentials(ctx, req.(*ListInboundSamlSsoProfilesIdpCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InboundSamlSsoProfilesIdpCredentialsServer_ServiceDesc is the grpc.ServiceDesc for InboundSamlSsoProfilesIdpCredentialsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InboundSamlSsoProfilesIdpCredentialsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.InboundSamlSsoProfilesIdpCredentialsServer",
	HandlerType: (*InboundSamlSsoProfilesIdpCredentialsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInboundSamlSsoProfilesIdpCredential",
			Handler:    _InboundSamlSsoProfilesIdpCredentialsServer_AddInboundSamlSsoProfilesIdpCredential_Handler,
		},
		{
			MethodName: "DeleteInboundSamlSsoProfilesIdpCredential",
			Handler:    _InboundSamlSsoProfilesIdpCredentialsServer_DeleteInboundSamlSsoProfilesIdpCredential_Handler,
		},
		{
			MethodName: "GetInboundSamlSsoProfilesIdpCredential",
			Handler:    _InboundSamlSsoProfilesIdpCredentialsServer_GetInboundSamlSsoProfilesIdpCredential_Handler,
		},
		{
			MethodName: "ListInboundSamlSsoProfilesIdpCredentials",
			Handler:    _InboundSamlSsoProfilesIdpCredentialsServer_ListInboundSamlSsoProfilesIdpCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// InboundSsoAssignmentsServerClient is the client API for InboundSsoAssignmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboundSsoAssignmentsServerClient interface {
	// Creates an InboundSsoAssignment for users and devices in a `Customer` under a given `Group` or `OrgUnit`.
	CreateInboundSsoAssignment(ctx context.Context, in *CreateInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an InboundSsoAssignment. To disable SSO, Create (or Update) an assignment that has `sso_mode` == `SSO_OFF`.
	DeleteInboundSsoAssignment(ctx context.Context, in *DeleteInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an InboundSsoAssignment.
	GetInboundSsoAssignment(ctx context.Context, in *GetInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*InboundSsoAssignment, error)
	// Lists the InboundSsoAssignments for a `Customer`.
	ListInboundSsoAssignments(ctx context.Context, in *ListInboundSsoAssignmentsRequest, opts ...grpc.CallOption) (*ListInboundSsoAssignmentsResponse, error)
	// Updates an InboundSsoAssignment. The body of this request is the `inbound_sso_assignment` field and the `update_mask` is relative to that. For example: a PATCH to `/v1beta1/inboundSsoAssignments/0abcdefg1234567&update_mask=rank` with a body of `{ "rank": 1 }` moves that (presumably group-targeted) SSO assignment to the highest priority and shifts any other group-targeted assignments down in priority.
	PatchInboundSsoAssignment(ctx context.Context, in *PatchInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type inboundSsoAssignmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewInboundSsoAssignmentsServerClient(cc grpc.ClientConnInterface) InboundSsoAssignmentsServerClient {
	return &inboundSsoAssignmentsServerClient{cc}
}

func (c *inboundSsoAssignmentsServerClient) CreateInboundSsoAssignment(ctx context.Context, in *CreateInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/CreateInboundSsoAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSsoAssignmentsServerClient) DeleteInboundSsoAssignment(ctx context.Context, in *DeleteInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/DeleteInboundSsoAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSsoAssignmentsServerClient) GetInboundSsoAssignment(ctx context.Context, in *GetInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*InboundSsoAssignment, error) {
	out := new(InboundSsoAssignment)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/GetInboundSsoAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSsoAssignmentsServerClient) ListInboundSsoAssignments(ctx context.Context, in *ListInboundSsoAssignmentsRequest, opts ...grpc.CallOption) (*ListInboundSsoAssignmentsResponse, error) {
	out := new(ListInboundSsoAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/ListInboundSsoAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundSsoAssignmentsServerClient) PatchInboundSsoAssignment(ctx context.Context, in *PatchInboundSsoAssignmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/PatchInboundSsoAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InboundSsoAssignmentsServerServer is the server API for InboundSsoAssignmentsServer service.
// All implementations must embed UnimplementedInboundSsoAssignmentsServerServer
// for forward compatibility
type InboundSsoAssignmentsServerServer interface {
	// Creates an InboundSsoAssignment for users and devices in a `Customer` under a given `Group` or `OrgUnit`.
	CreateInboundSsoAssignment(context.Context, *CreateInboundSsoAssignmentRequest) (*longrunningpb.Operation, error)
	// Deletes an InboundSsoAssignment. To disable SSO, Create (or Update) an assignment that has `sso_mode` == `SSO_OFF`.
	DeleteInboundSsoAssignment(context.Context, *DeleteInboundSsoAssignmentRequest) (*longrunningpb.Operation, error)
	// Gets an InboundSsoAssignment.
	GetInboundSsoAssignment(context.Context, *GetInboundSsoAssignmentRequest) (*InboundSsoAssignment, error)
	// Lists the InboundSsoAssignments for a `Customer`.
	ListInboundSsoAssignments(context.Context, *ListInboundSsoAssignmentsRequest) (*ListInboundSsoAssignmentsResponse, error)
	// Updates an InboundSsoAssignment. The body of this request is the `inbound_sso_assignment` field and the `update_mask` is relative to that. For example: a PATCH to `/v1beta1/inboundSsoAssignments/0abcdefg1234567&update_mask=rank` with a body of `{ "rank": 1 }` moves that (presumably group-targeted) SSO assignment to the highest priority and shifts any other group-targeted assignments down in priority.
	PatchInboundSsoAssignment(context.Context, *PatchInboundSsoAssignmentRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedInboundSsoAssignmentsServerServer()
}

// UnimplementedInboundSsoAssignmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedInboundSsoAssignmentsServerServer struct {
}

func (UnimplementedInboundSsoAssignmentsServerServer) CreateInboundSsoAssignment(context.Context, *CreateInboundSsoAssignmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInboundSsoAssignment not implemented")
}
func (UnimplementedInboundSsoAssignmentsServerServer) DeleteInboundSsoAssignment(context.Context, *DeleteInboundSsoAssignmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInboundSsoAssignment not implemented")
}
func (UnimplementedInboundSsoAssignmentsServerServer) GetInboundSsoAssignment(context.Context, *GetInboundSsoAssignmentRequest) (*InboundSsoAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInboundSsoAssignment not implemented")
}
func (UnimplementedInboundSsoAssignmentsServerServer) ListInboundSsoAssignments(context.Context, *ListInboundSsoAssignmentsRequest) (*ListInboundSsoAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInboundSsoAssignments not implemented")
}
func (UnimplementedInboundSsoAssignmentsServerServer) PatchInboundSsoAssignment(context.Context, *PatchInboundSsoAssignmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInboundSsoAssignment not implemented")
}
func (UnimplementedInboundSsoAssignmentsServerServer) mustEmbedUnimplementedInboundSsoAssignmentsServerServer() {
}

// UnsafeInboundSsoAssignmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboundSsoAssignmentsServerServer will
// result in compilation errors.
type UnsafeInboundSsoAssignmentsServerServer interface {
	mustEmbedUnimplementedInboundSsoAssignmentsServerServer()
}

func RegisterInboundSsoAssignmentsServerServer(s grpc.ServiceRegistrar, srv InboundSsoAssignmentsServerServer) {
	s.RegisterService(&InboundSsoAssignmentsServer_ServiceDesc, srv)
}

func _InboundSsoAssignmentsServer_CreateInboundSsoAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInboundSsoAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSsoAssignmentsServerServer).CreateInboundSsoAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/CreateInboundSsoAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSsoAssignmentsServerServer).CreateInboundSsoAssignment(ctx, req.(*CreateInboundSsoAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSsoAssignmentsServer_DeleteInboundSsoAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInboundSsoAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSsoAssignmentsServerServer).DeleteInboundSsoAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/DeleteInboundSsoAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSsoAssignmentsServerServer).DeleteInboundSsoAssignment(ctx, req.(*DeleteInboundSsoAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSsoAssignmentsServer_GetInboundSsoAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInboundSsoAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSsoAssignmentsServerServer).GetInboundSsoAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/GetInboundSsoAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSsoAssignmentsServerServer).GetInboundSsoAssignment(ctx, req.(*GetInboundSsoAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSsoAssignmentsServer_ListInboundSsoAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInboundSsoAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSsoAssignmentsServerServer).ListInboundSsoAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/ListInboundSsoAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSsoAssignmentsServerServer).ListInboundSsoAssignments(ctx, req.(*ListInboundSsoAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundSsoAssignmentsServer_PatchInboundSsoAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInboundSsoAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundSsoAssignmentsServerServer).PatchInboundSsoAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer/PatchInboundSsoAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundSsoAssignmentsServerServer).PatchInboundSsoAssignment(ctx, req.(*PatchInboundSsoAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InboundSsoAssignmentsServer_ServiceDesc is the grpc.ServiceDesc for InboundSsoAssignmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InboundSsoAssignmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.InboundSsoAssignmentsServer",
	HandlerType: (*InboundSsoAssignmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInboundSsoAssignment",
			Handler:    _InboundSsoAssignmentsServer_CreateInboundSsoAssignment_Handler,
		},
		{
			MethodName: "DeleteInboundSsoAssignment",
			Handler:    _InboundSsoAssignmentsServer_DeleteInboundSsoAssignment_Handler,
		},
		{
			MethodName: "GetInboundSsoAssignment",
			Handler:    _InboundSsoAssignmentsServer_GetInboundSsoAssignment_Handler,
		},
		{
			MethodName: "ListInboundSsoAssignments",
			Handler:    _InboundSsoAssignmentsServer_ListInboundSsoAssignments_Handler,
		},
		{
			MethodName: "PatchInboundSsoAssignment",
			Handler:    _InboundSsoAssignmentsServer_PatchInboundSsoAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// OrgUnitsServerClient is the client API for OrgUnitsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgUnitsServerClient interface {
}

type orgUnitsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgUnitsServerClient(cc grpc.ClientConnInterface) OrgUnitsServerClient {
	return &orgUnitsServerClient{cc}
}

// OrgUnitsServerServer is the server API for OrgUnitsServer service.
// All implementations must embed UnimplementedOrgUnitsServerServer
// for forward compatibility
type OrgUnitsServerServer interface {
	mustEmbedUnimplementedOrgUnitsServerServer()
}

// UnimplementedOrgUnitsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrgUnitsServerServer struct {
}

func (UnimplementedOrgUnitsServerServer) mustEmbedUnimplementedOrgUnitsServerServer() {}

// UnsafeOrgUnitsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgUnitsServerServer will
// result in compilation errors.
type UnsafeOrgUnitsServerServer interface {
	mustEmbedUnimplementedOrgUnitsServerServer()
}

func RegisterOrgUnitsServerServer(s grpc.ServiceRegistrar, srv OrgUnitsServerServer) {
	s.RegisterService(&OrgUnitsServer_ServiceDesc, srv)
}

// OrgUnitsServer_ServiceDesc is the grpc.ServiceDesc for OrgUnitsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgUnitsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.OrgUnitsServer",
	HandlerType: (*OrgUnitsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// OrgUnitsMembershipsServerClient is the client API for OrgUnitsMembershipsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgUnitsMembershipsServerClient interface {
	// List OrgMembership resources in an OrgUnit treated as 'parent'. Parent format: orgUnits/{$orgUnitId} where `$orgUnitId` is the `orgUnitId` from the [Admin SDK `OrgUnit` resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/orgunits)
	ListOrgUnitsMemberships(ctx context.Context, in *ListOrgUnitsMembershipsRequest, opts ...grpc.CallOption) (*ListOrgMembershipsResponse, error)
	// Move an OrgMembership to a new OrgUnit. NOTE: This is an atomic copy-and-delete. The resource will have a new copy under the destination OrgUnit and be deleted from the source OrgUnit. The resource can only be searched under the destination OrgUnit afterwards.
	MoveOrgUnitsMembership(ctx context.Context, in *MoveOrgUnitsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type orgUnitsMembershipsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgUnitsMembershipsServerClient(cc grpc.ClientConnInterface) OrgUnitsMembershipsServerClient {
	return &orgUnitsMembershipsServerClient{cc}
}

func (c *orgUnitsMembershipsServerClient) ListOrgUnitsMemberships(ctx context.Context, in *ListOrgUnitsMembershipsRequest, opts ...grpc.CallOption) (*ListOrgMembershipsResponse, error) {
	out := new(ListOrgMembershipsResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.OrgUnitsMembershipsServer/ListOrgUnitsMemberships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgUnitsMembershipsServerClient) MoveOrgUnitsMembership(ctx context.Context, in *MoveOrgUnitsMembershipRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.OrgUnitsMembershipsServer/MoveOrgUnitsMembership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgUnitsMembershipsServerServer is the server API for OrgUnitsMembershipsServer service.
// All implementations must embed UnimplementedOrgUnitsMembershipsServerServer
// for forward compatibility
type OrgUnitsMembershipsServerServer interface {
	// List OrgMembership resources in an OrgUnit treated as 'parent'. Parent format: orgUnits/{$orgUnitId} where `$orgUnitId` is the `orgUnitId` from the [Admin SDK `OrgUnit` resource](https://developers.google.com/admin-sdk/directory/reference/rest/v1/orgunits)
	ListOrgUnitsMemberships(context.Context, *ListOrgUnitsMembershipsRequest) (*ListOrgMembershipsResponse, error)
	// Move an OrgMembership to a new OrgUnit. NOTE: This is an atomic copy-and-delete. The resource will have a new copy under the destination OrgUnit and be deleted from the source OrgUnit. The resource can only be searched under the destination OrgUnit afterwards.
	MoveOrgUnitsMembership(context.Context, *MoveOrgUnitsMembershipRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrgUnitsMembershipsServerServer()
}

// UnimplementedOrgUnitsMembershipsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrgUnitsMembershipsServerServer struct {
}

func (UnimplementedOrgUnitsMembershipsServerServer) ListOrgUnitsMemberships(context.Context, *ListOrgUnitsMembershipsRequest) (*ListOrgMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgUnitsMemberships not implemented")
}
func (UnimplementedOrgUnitsMembershipsServerServer) MoveOrgUnitsMembership(context.Context, *MoveOrgUnitsMembershipRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveOrgUnitsMembership not implemented")
}
func (UnimplementedOrgUnitsMembershipsServerServer) mustEmbedUnimplementedOrgUnitsMembershipsServerServer() {
}

// UnsafeOrgUnitsMembershipsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgUnitsMembershipsServerServer will
// result in compilation errors.
type UnsafeOrgUnitsMembershipsServerServer interface {
	mustEmbedUnimplementedOrgUnitsMembershipsServerServer()
}

func RegisterOrgUnitsMembershipsServerServer(s grpc.ServiceRegistrar, srv OrgUnitsMembershipsServerServer) {
	s.RegisterService(&OrgUnitsMembershipsServer_ServiceDesc, srv)
}

func _OrgUnitsMembershipsServer_ListOrgUnitsMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgUnitsMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitsMembershipsServerServer).ListOrgUnitsMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.OrgUnitsMembershipsServer/ListOrgUnitsMemberships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitsMembershipsServerServer).ListOrgUnitsMemberships(ctx, req.(*ListOrgUnitsMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgUnitsMembershipsServer_MoveOrgUnitsMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveOrgUnitsMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgUnitsMembershipsServerServer).MoveOrgUnitsMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.OrgUnitsMembershipsServer/MoveOrgUnitsMembership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgUnitsMembershipsServerServer).MoveOrgUnitsMembership(ctx, req.(*MoveOrgUnitsMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgUnitsMembershipsServer_ServiceDesc is the grpc.ServiceDesc for OrgUnitsMembershipsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgUnitsMembershipsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.OrgUnitsMembershipsServer",
	HandlerType: (*OrgUnitsMembershipsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrgUnitsMemberships",
			Handler:    _OrgUnitsMembershipsServer_ListOrgUnitsMemberships_Handler,
		},
		{
			MethodName: "MoveOrgUnitsMembership",
			Handler:    _OrgUnitsMembershipsServer_MoveOrgUnitsMembership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}

// PoliciesServerClient is the client API for PoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliciesServerClient interface {
	// Get a Policy
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	// List Policies
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
}

type policiesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesServerClient(cc grpc.ClientConnInterface) PoliciesServerClient {
	return &policiesServerClient{cc}
}

func (c *policiesServerClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.PoliciesServer/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.apps.cloudidentity.groups.v1beta1.PoliciesServer/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServerServer is the server API for PoliciesServer service.
// All implementations must embed UnimplementedPoliciesServerServer
// for forward compatibility
type PoliciesServerServer interface {
	// Get a Policy
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	// List Policies
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
	mustEmbedUnimplementedPoliciesServerServer()
}

// UnimplementedPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedPoliciesServerServer struct {
}

func (UnimplementedPoliciesServerServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPoliciesServerServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPoliciesServerServer) mustEmbedUnimplementedPoliciesServerServer() {}

// UnsafePoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliciesServerServer will
// result in compilation errors.
type UnsafePoliciesServerServer interface {
	mustEmbedUnimplementedPoliciesServerServer()
}

func RegisterPoliciesServerServer(s grpc.ServiceRegistrar, srv PoliciesServerServer) {
	s.RegisterService(&PoliciesServer_ServiceDesc, srv)
}

func _PoliciesServer_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.PoliciesServer/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.apps.cloudidentity.groups.v1beta1.PoliciesServer/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoliciesServer_ServiceDesc is the grpc.ServiceDesc for PoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.apps.cloudidentity.groups.v1beta1.PoliciesServer",
	HandlerType: (*PoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _PoliciesServer_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _PoliciesServer_ListPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/apps/cloudidentity/groups/v1beta1/service.proto",
}
