// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: google/cloud/dns/v1/service.proto

package dnspb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Change represents a set of `ResourceRecordSet` additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the `ResourceRecordSets` in a `ManagedZone`. The current state of the `ManagedZone` is the sum effect of applying all `Change` elements in the `Changes` collection in sequence.
type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which ResourceRecordSets to add?
	Additions []*ResourceRecordSet `protobuf:"bytes,1,rep,name=additions" json:"additions,omitempty"`
	// Which ResourceRecordSets to remove? Must match existing data exactly.
	Deletions []*ResourceRecordSet `protobuf:"bytes,2,rep,name=deletions" json:"deletions,omitempty"`
	// Unique identifier for the resource; defined by the server (output only).
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// If the DNS queries for the zone will be served.
	IsServing *bool   `protobuf:"varint,4,opt,name=is_serving,json=isServing" json:"is_serving,omitempty"`
	Kind      *string `protobuf:"bytes,5,opt,name=kind" json:"kind,omitempty"`
	// The time that this operation was started by the server (output only). This is in RFC3339 text format.
	StartTime *string `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
	Status *string `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *Change) GetAdditions() []*ResourceRecordSet {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *Change) GetDeletions() []*ResourceRecordSet {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *Change) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Change) GetIsServing() bool {
	if x != nil && x.IsServing != nil {
		return *x.IsServing
	}
	return false
}

func (x *Change) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Change) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *Change) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

// The response to a request to enumerate Changes to a ResourceRecordSets collection.
type ChangesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested changes.
	Changes []*Change `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
	// Type of resource.
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *ChangesListResponse) Reset() {
	*x = ChangesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesListResponse) ProtoMessage() {}

func (x *ChangesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesListResponse.ProtoReflect.Descriptor instead.
func (*ChangesListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChangesListResponse) GetChanges() []*Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *ChangesListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ChangesListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// A DNSSEC key pair.
type DnsKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
	Algorithm *string `protobuf:"bytes,1,opt,name=algorithm" json:"algorithm,omitempty"`
	// The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
	CreationTime *string `protobuf:"bytes,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
	Digests []*DnsKeyDigest `protobuf:"bytes,4,rep,name=digests" json:"digests,omitempty"`
	// Unique identifier for the resource; defined by the server (output only).
	Id *string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	// Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
	IsActive *bool `protobuf:"varint,6,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// Length of the key in bits. Specified at creation time, and then immutable.
	KeyLength *uint32 `protobuf:"varint,7,opt,name=key_length,json=keyLength" json:"key_length,omitempty"`
	// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
	KeyTag *int32  `protobuf:"varint,8,opt,name=key_tag,json=keyTag" json:"key_tag,omitempty"`
	Kind   *string `protobuf:"bytes,9,opt,name=kind" json:"kind,omitempty"`
	// Base64 encoded public half of this key. Output only.
	PublicKey *string `protobuf:"bytes,10,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	// One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
	Type *string `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
}

func (x *DnsKey) Reset() {
	*x = DnsKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKey) ProtoMessage() {}

func (x *DnsKey) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKey.ProtoReflect.Descriptor instead.
func (*DnsKey) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *DnsKey) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *DnsKey) GetCreationTime() string {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return ""
}

func (x *DnsKey) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DnsKey) GetDigests() []*DnsKeyDigest {
	if x != nil {
		return x.Digests
	}
	return nil
}

func (x *DnsKey) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DnsKey) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *DnsKey) GetKeyLength() uint32 {
	if x != nil && x.KeyLength != nil {
		return *x.KeyLength
	}
	return 0
}

func (x *DnsKey) GetKeyTag() int32 {
	if x != nil && x.KeyTag != nil {
		return *x.KeyTag
	}
	return 0
}

func (x *DnsKey) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *DnsKey) GetPublicKey() string {
	if x != nil && x.PublicKey != nil {
		return *x.PublicKey
	}
	return ""
}

func (x *DnsKey) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type DnsKeyDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
	Digest *string `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	// Specifies the algorithm used to calculate this digest.
	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (x *DnsKeyDigest) Reset() {
	*x = DnsKeyDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeyDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeyDigest) ProtoMessage() {}

func (x *DnsKeyDigest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeyDigest.ProtoReflect.Descriptor instead.
func (*DnsKeyDigest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *DnsKeyDigest) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *DnsKeyDigest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
type DnsKeySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String mnemonic specifying the DNSSEC algorithm of this key.
	Algorithm *string `protobuf:"bytes,1,opt,name=algorithm" json:"algorithm,omitempty"`
	// Length of the keys in bits.
	KeyLength *uint32 `protobuf:"varint,2,opt,name=key_length,json=keyLength" json:"key_length,omitempty"`
	// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
	KeyType *string `protobuf:"bytes,3,opt,name=key_type,json=keyType" json:"key_type,omitempty"`
	Kind    *string `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
}

func (x *DnsKeySpec) Reset() {
	*x = DnsKeySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeySpec) ProtoMessage() {}

func (x *DnsKeySpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeySpec.ProtoReflect.Descriptor instead.
func (*DnsKeySpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *DnsKeySpec) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *DnsKeySpec) GetKeyLength() uint32 {
	if x != nil && x.KeyLength != nil {
		return *x.KeyLength
	}
	return 0
}

func (x *DnsKeySpec) GetKeyType() string {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return ""
}

func (x *DnsKeySpec) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

// The response to a request to enumerate DnsKeys in a ManagedZone.
type DnsKeysListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested resources.
	DnsKeys []*DnsKey `protobuf:"bytes,1,rep,name=dns_keys,json=dnsKeys" json:"dns_keys,omitempty"`
	// Type of resource.
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *DnsKeysListResponse) Reset() {
	*x = DnsKeysListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsKeysListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsKeysListResponse) ProtoMessage() {}

func (x *DnsKeysListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsKeysListResponse.ProtoReflect.Descriptor instead.
func (*DnsKeysListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *DnsKeysListResponse) GetDnsKeys() []*DnsKey {
	if x != nil {
		return x.DnsKeys
	}
	return nil
}

func (x *DnsKeysListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *DnsKeysListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *Expr) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Expr) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *Expr) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Expr) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration for logging of each type of permission.
	AuditLogConfigs []*GoogleIamV1AuditLogConfig `protobuf:"bytes,1,rep,name=audit_log_configs,json=auditLogConfigs" json:"audit_log_configs,omitempty"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (x *GoogleIamV1AuditConfig) Reset() {
	*x = GoogleIamV1AuditConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GoogleIamV1AuditConfig) GetAuditLogConfigs() []*GoogleIamV1AuditLogConfig {
	if x != nil {
		return x.AuditLogConfigs
	}
	return nil
}

func (x *GoogleIamV1AuditConfig) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `protobuf:"bytes,1,rep,name=exempted_members,json=exemptedMembers" json:"exempted_members,omitempty"`
	// The log type that this config enables.
	LogType *string `protobuf:"bytes,2,opt,name=log_type,json=logType" json:"log_type,omitempty"`
}

func (x *GoogleIamV1AuditLogConfig) Reset() {
	*x = GoogleIamV1AuditLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditLogConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditLogConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditLogConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GoogleIamV1AuditLogConfig) GetExemptedMembers() []string {
	if x != nil {
		return x.ExemptedMembers
	}
	return nil
}

func (x *GoogleIamV1AuditLogConfig) GetLogType() string {
	if x != nil && x.LogType != nil {
		return *x.LogType
	}
	return ""
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `protobuf:"bytes,1,opt,name=condition" json:"condition,omitempty"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role *string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
}

func (x *GoogleIamV1Binding) Reset() {
	*x = GoogleIamV1Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Binding) ProtoMessage() {}

func (x *GoogleIamV1Binding) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Binding.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Binding) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *GoogleIamV1Binding) GetCondition() *Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GoogleIamV1Binding) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GoogleIamV1Binding) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

// Request message for `GetIamPolicy` method.
type GoogleIamV1GetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.
	Options *GoogleIamV1GetPolicyOptions `protobuf:"bytes,1,opt,name=options" json:"options,omitempty"`
}

func (x *GoogleIamV1GetIamPolicyRequest) Reset() {
	*x = GoogleIamV1GetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1GetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1GetIamPolicyRequest) ProtoMessage() {}

func (x *GoogleIamV1GetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1GetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1GetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *GoogleIamV1GetIamPolicyRequest) GetOptions() *GoogleIamV1GetPolicyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Encapsulates settings provided to GetIamPolicy.
type GoogleIamV1GetPolicyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	RequestedPolicyVersion *int32 `protobuf:"varint,1,opt,name=requested_policy_version,json=requestedPolicyVersion" json:"requested_policy_version,omitempty"`
}

func (x *GoogleIamV1GetPolicyOptions) Reset() {
	*x = GoogleIamV1GetPolicyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1GetPolicyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1GetPolicyOptions) ProtoMessage() {}

func (x *GoogleIamV1GetPolicyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1GetPolicyOptions.ProtoReflect.Descriptor instead.
func (*GoogleIamV1GetPolicyOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *GoogleIamV1GetPolicyOptions) GetRequestedPolicyVersion() int32 {
	if x != nil && x.RequestedPolicyVersion != nil {
		return *x.RequestedPolicyVersion
	}
	return 0
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type GoogleIamV1Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []*GoogleIamV1AuditConfig `protobuf:"bytes,1,rep,name=audit_configs,json=auditConfigs" json:"audit_configs,omitempty"`
	// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
	Bindings []*GoogleIamV1Binding `protobuf:"bytes,2,rep,name=bindings" json:"bindings,omitempty"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag []byte `protobuf:"bytes,3,opt,name=etag" json:"etag,omitempty"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *GoogleIamV1Policy) Reset() {
	*x = GoogleIamV1Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Policy) ProtoMessage() {}

func (x *GoogleIamV1Policy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Policy.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Policy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *GoogleIamV1Policy) GetAuditConfigs() []*GoogleIamV1AuditConfig {
	if x != nil {
		return x.AuditConfigs
	}
	return nil
}

func (x *GoogleIamV1Policy) GetBindings() []*GoogleIamV1Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *GoogleIamV1Policy) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *GoogleIamV1Policy) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Request message for `SetIamPolicy` method.
type GoogleIamV1SetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.
	Policy *GoogleIamV1Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask *string `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (x *GoogleIamV1SetIamPolicyRequest) Reset() {
	*x = GoogleIamV1SetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1SetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1SetIamPolicyRequest) ProtoMessage() {}

func (x *GoogleIamV1SetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1SetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1SetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *GoogleIamV1SetIamPolicyRequest) GetPolicy() *GoogleIamV1Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *GoogleIamV1SetIamPolicyRequest) GetUpdateMask() string {
	if x != nil && x.UpdateMask != nil {
		return *x.UpdateMask
	}
	return ""
}

// Request message for `TestIamPermissions` method.
type GoogleIamV1TestIamPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsRequest) Reset() {
	*x = GoogleIamV1TestIamPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsRequest) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *GoogleIamV1TestIamPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Response message for `TestIamPermissions` method.
type GoogleIamV1TestIamPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
	Permissions []string `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsResponse) Reset() {
	*x = GoogleIamV1TestIamPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsResponse) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *GoogleIamV1TestIamPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
type ManagedZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudLoggingConfig *ManagedZoneCloudLoggingConfig `protobuf:"bytes,1,opt,name=cloud_logging_config,json=cloudLoggingConfig" json:"cloud_logging_config,omitempty"`
	// The time that this resource was created on the server. This is in RFC3339 text format. Output only.
	CreationTime *string `protobuf:"bytes,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The DNS name of this managed zone, for instance "example.com.".
	DnsName *string `protobuf:"bytes,4,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	// DNSSEC configuration.
	DnssecConfig *ManagedZoneDnsSecConfig `protobuf:"bytes,5,opt,name=dnssec_config,json=dnssecConfig" json:"dnssec_config,omitempty"`
	// The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to.
	ForwardingConfig *ManagedZoneForwardingConfig `protobuf:"bytes,6,opt,name=forwarding_config,json=forwardingConfig" json:"forwarding_config,omitempty"`
	// Unique identifier for the resource; defined by the server (output only)
	Id   *uint64 `protobuf:"varint,7,opt,name=id" json:"id,omitempty"`
	Kind *string `protobuf:"bytes,8,opt,name=kind" json:"kind,omitempty"`
	// User labels.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
	Name *string `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	// Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
	NameServerSet *string `protobuf:"bytes,11,opt,name=name_server_set,json=nameServerSet" json:"name_server_set,omitempty"`
	// Delegate your managed_zone to these virtual name servers; defined by the server (output only)
	NameServers []string `protobuf:"bytes,12,rep,name=name_servers,json=nameServers" json:"name_servers,omitempty"`
	// The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with.
	PeeringConfig *ManagedZonePeeringConfig `protobuf:"bytes,13,opt,name=peering_config,json=peeringConfig" json:"peering_config,omitempty"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateVisibilityConfig *ManagedZonePrivateVisibilityConfig `protobuf:"bytes,14,opt,name=private_visibility_config,json=privateVisibilityConfig" json:"private_visibility_config,omitempty"`
	// The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS resolves reverse lookup queries using automatically configured records for VPC resources. This only applies to networks listed under private_visibility_config.
	ReverseLookupConfig *ManagedZoneReverseLookupConfig `protobuf:"bytes,15,opt,name=reverse_lookup_config,json=reverseLookupConfig" json:"reverse_lookup_config,omitempty"`
	// This field links to the associated service directory namespace. Do not set this field for public zones or forwarding zones.
	ServiceDirectoryConfig *ManagedZoneServiceDirectoryConfig `protobuf:"bytes,16,opt,name=service_directory_config,json=serviceDirectoryConfig" json:"service_directory_config,omitempty"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Visibility *string `protobuf:"bytes,17,opt,name=visibility" json:"visibility,omitempty"`
}

func (x *ManagedZone) Reset() {
	*x = ManagedZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZone) ProtoMessage() {}

func (x *ManagedZone) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZone.ProtoReflect.Descriptor instead.
func (*ManagedZone) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *ManagedZone) GetCloudLoggingConfig() *ManagedZoneCloudLoggingConfig {
	if x != nil {
		return x.CloudLoggingConfig
	}
	return nil
}

func (x *ManagedZone) GetCreationTime() string {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return ""
}

func (x *ManagedZone) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ManagedZone) GetDnsName() string {
	if x != nil && x.DnsName != nil {
		return *x.DnsName
	}
	return ""
}

func (x *ManagedZone) GetDnssecConfig() *ManagedZoneDnsSecConfig {
	if x != nil {
		return x.DnssecConfig
	}
	return nil
}

func (x *ManagedZone) GetForwardingConfig() *ManagedZoneForwardingConfig {
	if x != nil {
		return x.ForwardingConfig
	}
	return nil
}

func (x *ManagedZone) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ManagedZone) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZone) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ManagedZone) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ManagedZone) GetNameServerSet() string {
	if x != nil && x.NameServerSet != nil {
		return *x.NameServerSet
	}
	return ""
}

func (x *ManagedZone) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

func (x *ManagedZone) GetPeeringConfig() *ManagedZonePeeringConfig {
	if x != nil {
		return x.PeeringConfig
	}
	return nil
}

func (x *ManagedZone) GetPrivateVisibilityConfig() *ManagedZonePrivateVisibilityConfig {
	if x != nil {
		return x.PrivateVisibilityConfig
	}
	return nil
}

func (x *ManagedZone) GetReverseLookupConfig() *ManagedZoneReverseLookupConfig {
	if x != nil {
		return x.ReverseLookupConfig
	}
	return nil
}

func (x *ManagedZone) GetServiceDirectoryConfig() *ManagedZoneServiceDirectoryConfig {
	if x != nil {
		return x.ServiceDirectoryConfig
	}
	return nil
}

func (x *ManagedZone) GetVisibility() string {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return ""
}

// Cloud Logging configurations for publicly visible zones.
type ManagedZoneCloudLoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
	EnableLogging *bool   `protobuf:"varint,1,opt,name=enable_logging,json=enableLogging" json:"enable_logging,omitempty"`
	Kind          *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *ManagedZoneCloudLoggingConfig) Reset() {
	*x = ManagedZoneCloudLoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneCloudLoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneCloudLoggingConfig) ProtoMessage() {}

func (x *ManagedZoneCloudLoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneCloudLoggingConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneCloudLoggingConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *ManagedZoneCloudLoggingConfig) GetEnableLogging() bool {
	if x != nil && x.EnableLogging != nil {
		return *x.EnableLogging
	}
	return false
}

func (x *ManagedZoneCloudLoggingConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type ManagedZoneDnsSecConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []*DnsKeySpec `protobuf:"bytes,1,rep,name=default_key_specs,json=defaultKeySpecs" json:"default_key_specs,omitempty"`
	Kind            *string       `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence *string `protobuf:"bytes,3,opt,name=non_existence,json=nonExistence" json:"non_existence,omitempty"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State *string `protobuf:"bytes,4,opt,name=state" json:"state,omitempty"`
}

func (x *ManagedZoneDnsSecConfig) Reset() {
	*x = ManagedZoneDnsSecConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneDnsSecConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneDnsSecConfig) ProtoMessage() {}

func (x *ManagedZoneDnsSecConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneDnsSecConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneDnsSecConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *ManagedZoneDnsSecConfig) GetDefaultKeySpecs() []*DnsKeySpec {
	if x != nil {
		return x.DefaultKeySpecs
	}
	return nil
}

func (x *ManagedZoneDnsSecConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZoneDnsSecConfig) GetNonExistence() string {
	if x != nil && x.NonExistence != nil {
		return *x.NonExistence
	}
	return ""
}

func (x *ManagedZoneDnsSecConfig) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

type ManagedZoneForwardingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
	TargetNameServers []*ManagedZoneForwardingConfigNameServerTarget `protobuf:"bytes,2,rep,name=target_name_servers,json=targetNameServers" json:"target_name_servers,omitempty"`
}

func (x *ManagedZoneForwardingConfig) Reset() {
	*x = ManagedZoneForwardingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneForwardingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneForwardingConfig) ProtoMessage() {}

func (x *ManagedZoneForwardingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneForwardingConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneForwardingConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *ManagedZoneForwardingConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZoneForwardingConfig) GetTargetNameServers() []*ManagedZoneForwardingConfigNameServerTarget {
	if x != nil {
		return x.TargetNameServers
	}
	return nil
}

type ManagedZoneForwardingConfigNameServerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully qualified domain name for the forwarding target.
	DomainName *string `protobuf:"bytes,1,opt,name=domain_name,json=domainName" json:"domain_name,omitempty"`
	// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *string `protobuf:"bytes,2,opt,name=forwarding_path,json=forwardingPath" json:"forwarding_path,omitempty"`
	// IPv4 address of a target name server.
	Ipv4Address *string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address *string `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	Kind        *string `protobuf:"bytes,5,opt,name=kind" json:"kind,omitempty"`
}

func (x *ManagedZoneForwardingConfigNameServerTarget) Reset() {
	*x = ManagedZoneForwardingConfigNameServerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneForwardingConfigNameServerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneForwardingConfigNameServerTarget) ProtoMessage() {}

func (x *ManagedZoneForwardingConfigNameServerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneForwardingConfigNameServerTarget.ProtoReflect.Descriptor instead.
func (*ManagedZoneForwardingConfigNameServerTarget) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetDomainName() string {
	if x != nil && x.DomainName != nil {
		return *x.DomainName
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetForwardingPath() string {
	if x != nil && x.ForwardingPath != nil {
		return *x.ForwardingPath
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

func (x *ManagedZoneForwardingConfigNameServerTarget) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type ManagedZoneOperationsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource.
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// The operation resources.
	Operations []*Operation `protobuf:"bytes,3,rep,name=operations" json:"operations,omitempty"`
}

func (x *ManagedZoneOperationsListResponse) Reset() {
	*x = ManagedZoneOperationsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneOperationsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneOperationsListResponse) ProtoMessage() {}

func (x *ManagedZoneOperationsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneOperationsListResponse.ProtoReflect.Descriptor instead.
func (*ManagedZoneOperationsListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *ManagedZoneOperationsListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZoneOperationsListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ManagedZoneOperationsListResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ManagedZonePeeringConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The network with which to peer.
	TargetNetwork *ManagedZonePeeringConfigTargetNetwork `protobuf:"bytes,2,opt,name=target_network,json=targetNetwork" json:"target_network,omitempty"`
}

func (x *ManagedZonePeeringConfig) Reset() {
	*x = ManagedZonePeeringConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePeeringConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePeeringConfig) ProtoMessage() {}

func (x *ManagedZonePeeringConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePeeringConfig.ProtoReflect.Descriptor instead.
func (*ManagedZonePeeringConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *ManagedZonePeeringConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZonePeeringConfig) GetTargetNetwork() *ManagedZonePeeringConfigTargetNetwork {
	if x != nil {
		return x.TargetNetwork
	}
	return nil
}

type ManagedZonePeeringConfigTargetNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
	DeactivateTime *string `protobuf:"bytes,1,opt,name=deactivate_time,json=deactivateTime" json:"deactivate_time,omitempty"`
	Kind           *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// The fully qualified URL of the VPC network to forward queries to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl *string `protobuf:"bytes,3,opt,name=network_url,json=networkUrl" json:"network_url,omitempty"`
}

func (x *ManagedZonePeeringConfigTargetNetwork) Reset() {
	*x = ManagedZonePeeringConfigTargetNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePeeringConfigTargetNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePeeringConfigTargetNetwork) ProtoMessage() {}

func (x *ManagedZonePeeringConfigTargetNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePeeringConfigTargetNetwork.ProtoReflect.Descriptor instead.
func (*ManagedZonePeeringConfigTargetNetwork) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetDeactivateTime() string {
	if x != nil && x.DeactivateTime != nil {
		return *x.DeactivateTime
	}
	return ""
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZonePeeringConfigTargetNetwork) GetNetworkUrl() string {
	if x != nil && x.NetworkUrl != nil {
		return *x.NetworkUrl
	}
	return ""
}

type ManagedZonePrivateVisibilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of Google Kubernetes Engine clusters that can see this zone.
	GkeClusters []*ManagedZonePrivateVisibilityConfigGKECluster `protobuf:"bytes,1,rep,name=gke_clusters,json=gkeClusters" json:"gke_clusters,omitempty"`
	Kind        *string                                         `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// The list of VPC networks that can see this zone.
	Networks []*ManagedZonePrivateVisibilityConfigNetwork `protobuf:"bytes,3,rep,name=networks" json:"networks,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfig) Reset() {
	*x = ManagedZonePrivateVisibilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfig) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfig.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *ManagedZonePrivateVisibilityConfig) GetGkeClusters() []*ManagedZonePrivateVisibilityConfigGKECluster {
	if x != nil {
		return x.GkeClusters
	}
	return nil
}

func (x *ManagedZonePrivateVisibilityConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfig) GetNetworks() []*ManagedZonePrivateVisibilityConfigNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ManagedZonePrivateVisibilityConfigGKECluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `protobuf:"bytes,1,opt,name=gke_cluster_name,json=gkeClusterName" json:"gke_cluster_name,omitempty"`
	Kind           *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) Reset() {
	*x = ManagedZonePrivateVisibilityConfigGKECluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfigGKECluster) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfigGKECluster.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfigGKECluster) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) GetGkeClusterName() string {
	if x != nil && x.GkeClusterName != nil {
		return *x.GkeClusterName
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfigGKECluster) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type ManagedZonePrivateVisibilityConfigNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The fully qualified URL of the VPC network to bind to. Format this URL like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl *string `protobuf:"bytes,2,opt,name=network_url,json=networkUrl" json:"network_url,omitempty"`
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) Reset() {
	*x = ManagedZonePrivateVisibilityConfigNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonePrivateVisibilityConfigNetwork) ProtoMessage() {}

func (x *ManagedZonePrivateVisibilityConfigNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonePrivateVisibilityConfigNetwork.ProtoReflect.Descriptor instead.
func (*ManagedZonePrivateVisibilityConfigNetwork) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZonePrivateVisibilityConfigNetwork) GetNetworkUrl() string {
	if x != nil && x.NetworkUrl != nil {
		return *x.NetworkUrl
	}
	return ""
}

type ManagedZoneReverseLookupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
}

func (x *ManagedZoneReverseLookupConfig) Reset() {
	*x = ManagedZoneReverseLookupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneReverseLookupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneReverseLookupConfig) ProtoMessage() {}

func (x *ManagedZoneReverseLookupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneReverseLookupConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneReverseLookupConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *ManagedZoneReverseLookupConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

// Contains information about Service Directory-backed zones.
type ManagedZoneServiceDirectoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// Contains information about the namespace associated with the zone.
	Namespace *ManagedZoneServiceDirectoryConfigNamespace `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *ManagedZoneServiceDirectoryConfig) Reset() {
	*x = ManagedZoneServiceDirectoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneServiceDirectoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneServiceDirectoryConfig) ProtoMessage() {}

func (x *ManagedZoneServiceDirectoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneServiceDirectoryConfig.ProtoReflect.Descriptor instead.
func (*ManagedZoneServiceDirectoryConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{28}
}

func (x *ManagedZoneServiceDirectoryConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfig) GetNamespace() *ManagedZoneServiceDirectoryConfigNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type ManagedZoneServiceDirectoryConfigNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
	DeletionTime *string `protobuf:"bytes,1,opt,name=deletion_time,json=deletionTime" json:"deletion_time,omitempty"`
	Kind         *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// The fully qualified URL of the namespace associated with the zone. Format must be `https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}`
	NamespaceUrl *string `protobuf:"bytes,3,opt,name=namespace_url,json=namespaceUrl" json:"namespace_url,omitempty"`
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) Reset() {
	*x = ManagedZoneServiceDirectoryConfigNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZoneServiceDirectoryConfigNamespace) ProtoMessage() {}

func (x *ManagedZoneServiceDirectoryConfigNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZoneServiceDirectoryConfigNamespace.ProtoReflect.Descriptor instead.
func (*ManagedZoneServiceDirectoryConfigNamespace) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{29}
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetDeletionTime() string {
	if x != nil && x.DeletionTime != nil {
		return *x.DeletionTime
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZoneServiceDirectoryConfigNamespace) GetNamespaceUrl() string {
	if x != nil && x.NamespaceUrl != nil {
		return *x.NamespaceUrl
	}
	return ""
}

type ManagedZonesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource.
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The managed zone resources.
	ManagedZones []*ManagedZone `protobuf:"bytes,2,rep,name=managed_zones,json=managedZones" json:"managed_zones,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *ManagedZonesListResponse) Reset() {
	*x = ManagedZonesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedZonesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedZonesListResponse) ProtoMessage() {}

func (x *ManagedZonesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedZonesListResponse.ProtoReflect.Descriptor instead.
func (*ManagedZonesListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{30}
}

func (x *ManagedZonesListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ManagedZonesListResponse) GetManagedZones() []*ManagedZone {
	if x != nil {
		return x.ManagedZones
	}
	return nil
}

func (x *ManagedZonesListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only populated if the operation targeted a DnsKey (output only).
	DnsKeyContext *OperationDnsKeyContext `protobuf:"bytes,1,opt,name=dns_key_context,json=dnsKeyContext" json:"dns_key_context,omitempty"`
	// Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
	Id   *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Kind *string `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	// The time that this operation was started by the server. This is in RFC3339 text format (output only).
	StartTime *string `protobuf:"bytes,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
	Status *string `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	// Type of the operation. Operations include insert, update, and delete (output only).
	Type *string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	// User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)
	User *string `protobuf:"bytes,7,opt,name=user" json:"user,omitempty"`
	// Only populated if the operation targeted a ManagedZone (output only).
	ZoneContext *OperationManagedZoneContext `protobuf:"bytes,8,opt,name=zone_context,json=zoneContext" json:"zone_context,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{31}
}

func (x *Operation) GetDnsKeyContext() *OperationDnsKeyContext {
	if x != nil {
		return x.DnsKeyContext
	}
	return nil
}

func (x *Operation) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Operation) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Operation) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *Operation) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Operation) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Operation) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *Operation) GetZoneContext() *OperationManagedZoneContext {
	if x != nil {
		return x.ZoneContext
	}
	return nil
}

type OperationDnsKeyContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The post-operation DnsKey resource.
	NewValue *DnsKey `protobuf:"bytes,1,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	// The pre-operation DnsKey resource.
	OldValue *DnsKey `protobuf:"bytes,2,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *OperationDnsKeyContext) Reset() {
	*x = OperationDnsKeyContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationDnsKeyContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationDnsKeyContext) ProtoMessage() {}

func (x *OperationDnsKeyContext) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationDnsKeyContext.ProtoReflect.Descriptor instead.
func (*OperationDnsKeyContext) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{32}
}

func (x *OperationDnsKeyContext) GetNewValue() *DnsKey {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *OperationDnsKeyContext) GetOldValue() *DnsKey {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type OperationManagedZoneContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The post-operation ManagedZone resource.
	NewValue *ManagedZone `protobuf:"bytes,1,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	// The pre-operation ManagedZone resource.
	OldValue *ManagedZone `protobuf:"bytes,2,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *OperationManagedZoneContext) Reset() {
	*x = OperationManagedZoneContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationManagedZoneContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationManagedZoneContext) ProtoMessage() {}

func (x *OperationManagedZoneContext) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationManagedZoneContext.ProtoReflect.Descriptor instead.
func (*OperationManagedZoneContext) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{33}
}

func (x *OperationManagedZoneContext) GetNewValue() *ManagedZone {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *OperationManagedZoneContext) GetOldValue() *ManagedZone {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type PoliciesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource.
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// The policy resources.
	Policies []*Policy `protobuf:"bytes,3,rep,name=policies" json:"policies,omitempty"`
}

func (x *PoliciesListResponse) Reset() {
	*x = PoliciesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesListResponse) ProtoMessage() {}

func (x *PoliciesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesListResponse.ProtoReflect.Descriptor instead.
func (*PoliciesListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{34}
}

func (x *PoliciesListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *PoliciesListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *PoliciesListResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PoliciesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
}

func (x *PoliciesPatchResponse) Reset() {
	*x = PoliciesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesPatchResponse) ProtoMessage() {}

func (x *PoliciesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesPatchResponse.ProtoReflect.Descriptor instead.
func (*PoliciesPatchResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{35}
}

func (x *PoliciesPatchResponse) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type PoliciesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *Policy `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
}

func (x *PoliciesUpdateResponse) Reset() {
	*x = PoliciesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoliciesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoliciesUpdateResponse) ProtoMessage() {}

func (x *PoliciesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoliciesUpdateResponse.ProtoReflect.Descriptor instead.
func (*PoliciesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{36}
}

func (x *PoliciesUpdateResponse) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

// A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	AlternativeNameServerConfig *PolicyAlternativeNameServerConfig `protobuf:"bytes,1,opt,name=alternative_name_server_config,json=alternativeNameServerConfig" json:"alternative_name_server_config,omitempty"`
	// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// Configurations related to DNS64 for this Policy.
	Dns64Config *PolicyDns64Config `protobuf:"bytes,3,opt,name=dns64_config,json=dns64Config" json:"dns64_config,omitempty"`
	// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
	EnableInboundForwarding *bool `protobuf:"varint,4,opt,name=enable_inbound_forwarding,json=enableInboundForwarding" json:"enable_inbound_forwarding,omitempty"`
	// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
	EnableLogging *bool `protobuf:"varint,5,opt,name=enable_logging,json=enableLogging" json:"enable_logging,omitempty"`
	// Unique identifier for the resource; defined by the server (output only).
	Id   *uint64 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
	Kind *string `protobuf:"bytes,7,opt,name=kind" json:"kind,omitempty"`
	// User-assigned name for this policy.
	Name *string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	// List of network names specifying networks to which this policy is applied.
	Networks []*PolicyNetwork `protobuf:"bytes,9,rep,name=networks" json:"networks,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{37}
}

func (x *Policy) GetAlternativeNameServerConfig() *PolicyAlternativeNameServerConfig {
	if x != nil {
		return x.AlternativeNameServerConfig
	}
	return nil
}

func (x *Policy) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Policy) GetDns64Config() *PolicyDns64Config {
	if x != nil {
		return x.Dns64Config
	}
	return nil
}

func (x *Policy) GetEnableInboundForwarding() bool {
	if x != nil && x.EnableInboundForwarding != nil {
		return *x.EnableInboundForwarding
	}
	return false
}

func (x *Policy) GetEnableLogging() bool {
	if x != nil && x.EnableLogging != nil {
		return *x.EnableLogging
	}
	return false
}

func (x *Policy) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Policy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Policy) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Policy) GetNetworks() []*PolicyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type PolicyAlternativeNameServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
	TargetNameServers []*PolicyAlternativeNameServerConfigTargetNameServer `protobuf:"bytes,2,rep,name=target_name_servers,json=targetNameServers" json:"target_name_servers,omitempty"`
}

func (x *PolicyAlternativeNameServerConfig) Reset() {
	*x = PolicyAlternativeNameServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAlternativeNameServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAlternativeNameServerConfig) ProtoMessage() {}

func (x *PolicyAlternativeNameServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAlternativeNameServerConfig.ProtoReflect.Descriptor instead.
func (*PolicyAlternativeNameServerConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{38}
}

func (x *PolicyAlternativeNameServerConfig) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfig) GetTargetNameServers() []*PolicyAlternativeNameServerConfigTargetNameServer {
	if x != nil {
		return x.TargetNameServers
	}
	return nil
}

type PolicyAlternativeNameServerConfigTargetNameServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
	ForwardingPath *string `protobuf:"bytes,1,opt,name=forwarding_path,json=forwardingPath" json:"forwarding_path,omitempty"`
	// IPv4 address to forward queries to.
	Ipv4Address *string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
	Ipv6Address *string `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	Kind        *string `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) Reset() {
	*x = PolicyAlternativeNameServerConfigTargetNameServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyAlternativeNameServerConfigTargetNameServer) ProtoMessage() {}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyAlternativeNameServerConfigTargetNameServer.ProtoReflect.Descriptor instead.
func (*PolicyAlternativeNameServerConfigTargetNameServer) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{39}
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetForwardingPath() string {
	if x != nil && x.ForwardingPath != nil {
		return *x.ForwardingPath
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

func (x *PolicyAlternativeNameServerConfigTargetNameServer) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

// DNS64 policies
type PolicyDns64Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The scope to which DNS64 config will be applied to.
	Scope *PolicyDns64ConfigScope `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
}

func (x *PolicyDns64Config) Reset() {
	*x = PolicyDns64Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDns64Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDns64Config) ProtoMessage() {}

func (x *PolicyDns64Config) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDns64Config.ProtoReflect.Descriptor instead.
func (*PolicyDns64Config) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{40}
}

func (x *PolicyDns64Config) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *PolicyDns64Config) GetScope() *PolicyDns64ConfigScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

type PolicyDns64ConfigScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls whether DNS64 is enabled globally at the network level.
	AllQueries *bool   `protobuf:"varint,1,opt,name=all_queries,json=allQueries" json:"all_queries,omitempty"`
	Kind       *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *PolicyDns64ConfigScope) Reset() {
	*x = PolicyDns64ConfigScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyDns64ConfigScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDns64ConfigScope) ProtoMessage() {}

func (x *PolicyDns64ConfigScope) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDns64ConfigScope.ProtoReflect.Descriptor instead.
func (*PolicyDns64ConfigScope) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{41}
}

func (x *PolicyDns64ConfigScope) GetAllQueries() bool {
	if x != nil && x.AllQueries != nil {
		return *x.AllQueries
	}
	return false
}

func (x *PolicyDns64ConfigScope) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type PolicyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
	NetworkUrl *string `protobuf:"bytes,2,opt,name=network_url,json=networkUrl" json:"network_url,omitempty"`
}

func (x *PolicyNetwork) Reset() {
	*x = PolicyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyNetwork) ProtoMessage() {}

func (x *PolicyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyNetwork.ProtoReflect.Descriptor instead.
func (*PolicyNetwork) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{42}
}

func (x *PolicyNetwork) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *PolicyNetwork) GetNetworkUrl() string {
	if x != nil && x.NetworkUrl != nil {
		return *x.NetworkUrl
	}
	return ""
}

// A project resource. The project is a top level container for resources including Cloud DNS ManagedZones. Projects can be created only in the APIs console.
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User assigned unique identifier for the resource (output only).
	Id   *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Kind *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Unique numeric identifier for the resource; defined by the server (output only).
	Number *uint64 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	// Quotas assigned to this project (output only).
	Quota *Quota `protobuf:"bytes,4,opt,name=quota" json:"quota,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{43}
}

func (x *Project) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Project) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Project) GetNumber() uint64 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Project) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

// Limits associated with a Project.
type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum allowed number of DnsKeys per ManagedZone.
	DnsKeysPerManagedZone *int32 `protobuf:"varint,1,opt,name=dns_keys_per_managed_zone,json=dnsKeysPerManagedZone" json:"dns_keys_per_managed_zone,omitempty"`
	// Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.
	GkeClustersPerManagedZone *int32 `protobuf:"varint,2,opt,name=gke_clusters_per_managed_zone,json=gkeClustersPerManagedZone" json:"gke_clusters_per_managed_zone,omitempty"`
	// Maximum allowed number of GKE clusters per policy.
	GkeClustersPerPolicy *int32 `protobuf:"varint,3,opt,name=gke_clusters_per_policy,json=gkeClustersPerPolicy" json:"gke_clusters_per_policy,omitempty"`
	// Maximum allowed number of GKE clusters per response policy.
	GkeClustersPerResponsePolicy       *int32 `protobuf:"varint,4,opt,name=gke_clusters_per_response_policy,json=gkeClustersPerResponsePolicy" json:"gke_clusters_per_response_policy,omitempty"`
	InternetHealthChecksPerManagedZone *int32 `protobuf:"varint,5,opt,name=internet_health_checks_per_managed_zone,json=internetHealthChecksPerManagedZone" json:"internet_health_checks_per_managed_zone,omitempty"`
	// Maximum allowed number of items per routing policy.
	ItemsPerRoutingPolicy *int32  `protobuf:"varint,6,opt,name=items_per_routing_policy,json=itemsPerRoutingPolicy" json:"items_per_routing_policy,omitempty"`
	Kind                  *string `protobuf:"bytes,7,opt,name=kind" json:"kind,omitempty"`
	// Maximum allowed number of managed zones in the project.
	ManagedZones *int32 `protobuf:"varint,8,opt,name=managed_zones,json=managedZones" json:"managed_zones,omitempty"`
	// Maximum allowed number of managed zones which can be attached to a GKE cluster.
	ManagedZonesPerGkeCluster *int32 `protobuf:"varint,9,opt,name=managed_zones_per_gke_cluster,json=managedZonesPerGkeCluster" json:"managed_zones_per_gke_cluster,omitempty"`
	// Maximum allowed number of managed zones which can be attached to a network.
	ManagedZonesPerNetwork *int32 `protobuf:"varint,10,opt,name=managed_zones_per_network,json=managedZonesPerNetwork" json:"managed_zones_per_network,omitempty"`
	// Maximum number of nameservers per delegation, meant to prevent abuse
	NameserversPerDelegation *int32 `protobuf:"varint,11,opt,name=nameservers_per_delegation,json=nameserversPerDelegation" json:"nameservers_per_delegation,omitempty"`
	// Maximum allowed number of networks to which a privately scoped zone can be attached.
	NetworksPerManagedZone *int32 `protobuf:"varint,12,opt,name=networks_per_managed_zone,json=networksPerManagedZone" json:"networks_per_managed_zone,omitempty"`
	// Maximum allowed number of networks per policy.
	NetworksPerPolicy *int32 `protobuf:"varint,13,opt,name=networks_per_policy,json=networksPerPolicy" json:"networks_per_policy,omitempty"`
	// Maximum allowed number of networks per response policy.
	NetworksPerResponsePolicy *int32 `protobuf:"varint,14,opt,name=networks_per_response_policy,json=networksPerResponsePolicy" json:"networks_per_response_policy,omitempty"`
	// Maximum allowed number of consumer peering zones per target network owned by this producer project
	PeeringZonesPerTargetNetwork *int32 `protobuf:"varint,15,opt,name=peering_zones_per_target_network,json=peeringZonesPerTargetNetwork" json:"peering_zones_per_target_network,omitempty"`
	// Maximum allowed number of policies per project.
	Policies *int32 `protobuf:"varint,16,opt,name=policies" json:"policies,omitempty"`
	// Maximum allowed number of ResourceRecords per ResourceRecordSet.
	ResourceRecordsPerRrset *int32 `protobuf:"varint,17,opt,name=resource_records_per_rrset,json=resourceRecordsPerRrset" json:"resource_records_per_rrset,omitempty"`
	// Maximum allowed number of response policies per project.
	ResponsePolicies *int32 `protobuf:"varint,18,opt,name=response_policies,json=responsePolicies" json:"response_policies,omitempty"`
	// Maximum allowed number of rules per response policy.
	ResponsePolicyRulesPerResponsePolicy *int32 `protobuf:"varint,19,opt,name=response_policy_rules_per_response_policy,json=responsePolicyRulesPerResponsePolicy" json:"response_policy_rules_per_response_policy,omitempty"`
	// Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.
	RrsetAdditionsPerChange *int32 `protobuf:"varint,20,opt,name=rrset_additions_per_change,json=rrsetAdditionsPerChange" json:"rrset_additions_per_change,omitempty"`
	// Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.
	RrsetDeletionsPerChange *int32 `protobuf:"varint,21,opt,name=rrset_deletions_per_change,json=rrsetDeletionsPerChange" json:"rrset_deletions_per_change,omitempty"`
	// Maximum allowed number of ResourceRecordSets per zone in the project.
	RrsetsPerManagedZone *int32 `protobuf:"varint,22,opt,name=rrsets_per_managed_zone,json=rrsetsPerManagedZone" json:"rrsets_per_managed_zone,omitempty"`
	// Maximum allowed number of target name servers per managed forwarding zone.
	TargetNameServersPerManagedZone *int32 `protobuf:"varint,23,opt,name=target_name_servers_per_managed_zone,json=targetNameServersPerManagedZone" json:"target_name_servers_per_managed_zone,omitempty"`
	// Maximum allowed number of alternative target name servers per policy.
	TargetNameServersPerPolicy *int32 `protobuf:"varint,24,opt,name=target_name_servers_per_policy,json=targetNameServersPerPolicy" json:"target_name_servers_per_policy,omitempty"`
	// Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
	TotalRrdataSizePerChange *int32 `protobuf:"varint,25,opt,name=total_rrdata_size_per_change,json=totalRrdataSizePerChange" json:"total_rrdata_size_per_change,omitempty"`
	// DNSSEC algorithm and key length types that can be used for DnsKeys.
	WhitelistedKeySpecs []*DnsKeySpec `protobuf:"bytes,26,rep,name=whitelisted_key_specs,json=whitelistedKeySpecs" json:"whitelisted_key_specs,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{44}
}

func (x *Quota) GetDnsKeysPerManagedZone() int32 {
	if x != nil && x.DnsKeysPerManagedZone != nil {
		return *x.DnsKeysPerManagedZone
	}
	return 0
}

func (x *Quota) GetGkeClustersPerManagedZone() int32 {
	if x != nil && x.GkeClustersPerManagedZone != nil {
		return *x.GkeClustersPerManagedZone
	}
	return 0
}

func (x *Quota) GetGkeClustersPerPolicy() int32 {
	if x != nil && x.GkeClustersPerPolicy != nil {
		return *x.GkeClustersPerPolicy
	}
	return 0
}

func (x *Quota) GetGkeClustersPerResponsePolicy() int32 {
	if x != nil && x.GkeClustersPerResponsePolicy != nil {
		return *x.GkeClustersPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetInternetHealthChecksPerManagedZone() int32 {
	if x != nil && x.InternetHealthChecksPerManagedZone != nil {
		return *x.InternetHealthChecksPerManagedZone
	}
	return 0
}

func (x *Quota) GetItemsPerRoutingPolicy() int32 {
	if x != nil && x.ItemsPerRoutingPolicy != nil {
		return *x.ItemsPerRoutingPolicy
	}
	return 0
}

func (x *Quota) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *Quota) GetManagedZones() int32 {
	if x != nil && x.ManagedZones != nil {
		return *x.ManagedZones
	}
	return 0
}

func (x *Quota) GetManagedZonesPerGkeCluster() int32 {
	if x != nil && x.ManagedZonesPerGkeCluster != nil {
		return *x.ManagedZonesPerGkeCluster
	}
	return 0
}

func (x *Quota) GetManagedZonesPerNetwork() int32 {
	if x != nil && x.ManagedZonesPerNetwork != nil {
		return *x.ManagedZonesPerNetwork
	}
	return 0
}

func (x *Quota) GetNameserversPerDelegation() int32 {
	if x != nil && x.NameserversPerDelegation != nil {
		return *x.NameserversPerDelegation
	}
	return 0
}

func (x *Quota) GetNetworksPerManagedZone() int32 {
	if x != nil && x.NetworksPerManagedZone != nil {
		return *x.NetworksPerManagedZone
	}
	return 0
}

func (x *Quota) GetNetworksPerPolicy() int32 {
	if x != nil && x.NetworksPerPolicy != nil {
		return *x.NetworksPerPolicy
	}
	return 0
}

func (x *Quota) GetNetworksPerResponsePolicy() int32 {
	if x != nil && x.NetworksPerResponsePolicy != nil {
		return *x.NetworksPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetPeeringZonesPerTargetNetwork() int32 {
	if x != nil && x.PeeringZonesPerTargetNetwork != nil {
		return *x.PeeringZonesPerTargetNetwork
	}
	return 0
}

func (x *Quota) GetPolicies() int32 {
	if x != nil && x.Policies != nil {
		return *x.Policies
	}
	return 0
}

func (x *Quota) GetResourceRecordsPerRrset() int32 {
	if x != nil && x.ResourceRecordsPerRrset != nil {
		return *x.ResourceRecordsPerRrset
	}
	return 0
}

func (x *Quota) GetResponsePolicies() int32 {
	if x != nil && x.ResponsePolicies != nil {
		return *x.ResponsePolicies
	}
	return 0
}

func (x *Quota) GetResponsePolicyRulesPerResponsePolicy() int32 {
	if x != nil && x.ResponsePolicyRulesPerResponsePolicy != nil {
		return *x.ResponsePolicyRulesPerResponsePolicy
	}
	return 0
}

func (x *Quota) GetRrsetAdditionsPerChange() int32 {
	if x != nil && x.RrsetAdditionsPerChange != nil {
		return *x.RrsetAdditionsPerChange
	}
	return 0
}

func (x *Quota) GetRrsetDeletionsPerChange() int32 {
	if x != nil && x.RrsetDeletionsPerChange != nil {
		return *x.RrsetDeletionsPerChange
	}
	return 0
}

func (x *Quota) GetRrsetsPerManagedZone() int32 {
	if x != nil && x.RrsetsPerManagedZone != nil {
		return *x.RrsetsPerManagedZone
	}
	return 0
}

func (x *Quota) GetTargetNameServersPerManagedZone() int32 {
	if x != nil && x.TargetNameServersPerManagedZone != nil {
		return *x.TargetNameServersPerManagedZone
	}
	return 0
}

func (x *Quota) GetTargetNameServersPerPolicy() int32 {
	if x != nil && x.TargetNameServersPerPolicy != nil {
		return *x.TargetNameServersPerPolicy
	}
	return 0
}

func (x *Quota) GetTotalRrdataSizePerChange() int32 {
	if x != nil && x.TotalRrdataSizePerChange != nil {
		return *x.TotalRrdataSizePerChange
	}
	return 0
}

func (x *Quota) GetWhitelistedKeySpecs() []*DnsKeySpec {
	if x != nil {
		return x.WhitelistedKeySpecs
	}
	return nil
}

// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
type RRSetRoutingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geo *RRSetRoutingPolicyGeoPolicy `protobuf:"bytes,1,opt,name=geo" json:"geo,omitempty"`
	// The fully qualified URL of the HealthCheck to use for this RRSetRoutingPolicy. Format this URL like `https://www.googleapis.com/compute/v1/projects/{project}/global/healthChecks/{healthCheck}`. https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks
	HealthCheck   *string                                `protobuf:"bytes,2,opt,name=health_check,json=healthCheck" json:"health_check,omitempty"`
	Kind          *string                                `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	PrimaryBackup *RRSetRoutingPolicyPrimaryBackupPolicy `protobuf:"bytes,4,opt,name=primary_backup,json=primaryBackup" json:"primary_backup,omitempty"`
	Wrr           *RRSetRoutingPolicyWrrPolicy           `protobuf:"bytes,5,opt,name=wrr" json:"wrr,omitempty"`
}

func (x *RRSetRoutingPolicy) Reset() {
	*x = RRSetRoutingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{45}
}

func (x *RRSetRoutingPolicy) GetGeo() *RRSetRoutingPolicyGeoPolicy {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetHealthCheck() string {
	if x != nil && x.HealthCheck != nil {
		return *x.HealthCheck
	}
	return ""
}

func (x *RRSetRoutingPolicy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicy) GetPrimaryBackup() *RRSetRoutingPolicyPrimaryBackupPolicy {
	if x != nil {
		return x.PrimaryBackup
	}
	return nil
}

func (x *RRSetRoutingPolicy) GetWrr() *RRSetRoutingPolicyWrrPolicy {
	if x != nil {
		return x.Wrr
	}
	return nil
}

// Configures a `RRSetRoutingPolicy` that routes based on the geo location of the querying user.
type RRSetRoutingPolicyGeoPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
	EnableFencing *bool `protobuf:"varint,1,opt,name=enable_fencing,json=enableFencing" json:"enable_fencing,omitempty"`
	// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
	Items []*RRSetRoutingPolicyGeoPolicyGeoPolicyItem `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	Kind  *string                                     `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
}

func (x *RRSetRoutingPolicyGeoPolicy) Reset() {
	*x = RRSetRoutingPolicyGeoPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyGeoPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyGeoPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyGeoPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyGeoPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyGeoPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{46}
}

func (x *RRSetRoutingPolicyGeoPolicy) GetEnableFencing() bool {
	if x != nil && x.EnableFencing != nil {
		return *x.EnableFencing
	}
	return false
}

func (x *RRSetRoutingPolicyGeoPolicy) GetItems() []*RRSetRoutingPolicyGeoPolicyGeoPolicyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

// ResourceRecordSet data for one geo location.
type RRSetRoutingPolicyGeoPolicyGeoPolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with `rrdata` within this item.
	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,1,opt,name=health_checked_targets,json=healthCheckedTargets" json:"health_checked_targets,omitempty"`
	Kind                 *string                               `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
	Location *string  `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Rrdatas  []string `protobuf:"bytes,4,rep,name=rrdatas" json:"rrdatas,omitempty"`
	// DNSSEC generated signatures for all the `rrdata` within this item. When using health-checked targets for DNSSEC-enabled zones, you can only use at most one health-checked IP address per item.
	SignatureRrdatas []string `protobuf:"bytes,5,rep,name=signature_rrdatas,json=signatureRrdatas" json:"signature_rrdatas,omitempty"`
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) Reset() {
	*x = RRSetRoutingPolicyGeoPolicyGeoPolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyGeoPolicyGeoPolicyItem) ProtoMessage() {}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyGeoPolicyGeoPolicyItem.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyGeoPolicyGeoPolicyItem) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{47}
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetHealthCheckedTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.HealthCheckedTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyGeoPolicyGeoPolicyItem) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Set either `internal_load_balancer` or `external_endpoints`. Do not set both.
type RRSetRoutingPolicyHealthCheckTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Internet IP addresses to be health checked. The format matches the format of ResourceRecordSet.rrdata as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
	ExternalEndpoints []string `protobuf:"bytes,1,rep,name=external_endpoints,json=externalEndpoints" json:"external_endpoints,omitempty"`
	// Configuration for internal load balancers to be health checked.
	InternalLoadBalancers []*RRSetRoutingPolicyLoadBalancerTarget `protobuf:"bytes,2,rep,name=internal_load_balancers,json=internalLoadBalancers" json:"internal_load_balancers,omitempty"`
}

func (x *RRSetRoutingPolicyHealthCheckTargets) Reset() {
	*x = RRSetRoutingPolicyHealthCheckTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyHealthCheckTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyHealthCheckTargets) ProtoMessage() {}

func (x *RRSetRoutingPolicyHealthCheckTargets) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyHealthCheckTargets.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyHealthCheckTargets) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{48}
}

func (x *RRSetRoutingPolicyHealthCheckTargets) GetExternalEndpoints() []string {
	if x != nil {
		return x.ExternalEndpoints
	}
	return nil
}

func (x *RRSetRoutingPolicyHealthCheckTargets) GetInternalLoadBalancers() []*RRSetRoutingPolicyLoadBalancerTarget {
	if x != nil {
		return x.InternalLoadBalancers
	}
	return nil
}

// The configuration for an individual load balancer to health check.
type RRSetRoutingPolicyLoadBalancerTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The frontend IP address of the load balancer to health check.
	IpAddress *string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	// The protocol of the load balancer to health check.
	IpProtocol *string `protobuf:"bytes,2,opt,name=ip_protocol,json=ipProtocol" json:"ip_protocol,omitempty"`
	Kind       *string `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer.
	LoadBalancerType *string `protobuf:"bytes,4,opt,name=load_balancer_type,json=loadBalancerType" json:"load_balancer_type,omitempty"`
	// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`.
	NetworkUrl *string `protobuf:"bytes,5,opt,name=network_url,json=networkUrl" json:"network_url,omitempty"`
	// The configured port of the load balancer.
	Port *string `protobuf:"bytes,6,opt,name=port" json:"port,omitempty"`
	// The project ID in which the load balancer is located.
	Project *string `protobuf:"bytes,7,opt,name=project" json:"project,omitempty"`
	// The region in which the load balancer is located.
	Region *string `protobuf:"bytes,8,opt,name=region" json:"region,omitempty"`
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) Reset() {
	*x = RRSetRoutingPolicyLoadBalancerTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyLoadBalancerTarget) ProtoMessage() {}

func (x *RRSetRoutingPolicyLoadBalancerTarget) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyLoadBalancerTarget.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyLoadBalancerTarget) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{49}
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetIpProtocol() string {
	if x != nil && x.IpProtocol != nil {
		return *x.IpProtocol
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetLoadBalancerType() string {
	if x != nil && x.LoadBalancerType != nil {
		return *x.LoadBalancerType
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetNetworkUrl() string {
	if x != nil && x.NetworkUrl != nil {
		return *x.NetworkUrl
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *RRSetRoutingPolicyLoadBalancerTarget) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
type RRSetRoutingPolicyPrimaryBackupPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to `BACKUP`, this policy essentially becomes a geo routing policy.
	BackupGeoTargets *RRSetRoutingPolicyGeoPolicy `protobuf:"bytes,1,opt,name=backup_geo_targets,json=backupGeoTargets" json:"backup_geo_targets,omitempty"`
	Kind             *string                      `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	// Endpoints that are health checked before making the routing decision. Unhealthy endpoints are omitted from the results. If all endpoints are unhealthy, we serve a response based on the `backup_geo_targets`.
	PrimaryTargets *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,3,opt,name=primary_targets,json=primaryTargets" json:"primary_targets,omitempty"`
	// When serving state is `PRIMARY`, this field provides the option of sending a small percentage of the traffic to the backup targets.
	TrickleTraffic *float64 `protobuf:"fixed64,4,opt,name=trickle_traffic,json=trickleTraffic" json:"trickle_traffic,omitempty"`
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) Reset() {
	*x = RRSetRoutingPolicyPrimaryBackupPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyPrimaryBackupPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyPrimaryBackupPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyPrimaryBackupPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{50}
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetBackupGeoTargets() *RRSetRoutingPolicyGeoPolicy {
	if x != nil {
		return x.BackupGeoTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetPrimaryTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.PrimaryTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyPrimaryBackupPolicy) GetTrickleTraffic() float64 {
	if x != nil && x.TrickleTraffic != nil {
		return *x.TrickleTraffic
	}
	return 0
}

// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
type RRSetRoutingPolicyWrrPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RRSetRoutingPolicyWrrPolicyWrrPolicyItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Kind  *string                                     `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *RRSetRoutingPolicyWrrPolicy) Reset() {
	*x = RRSetRoutingPolicyWrrPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyWrrPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyWrrPolicy) ProtoMessage() {}

func (x *RRSetRoutingPolicyWrrPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyWrrPolicy.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyWrrPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{51}
}

func (x *RRSetRoutingPolicyWrrPolicy) GetItems() []*RRSetRoutingPolicyWrrPolicyWrrPolicyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

// A routing block which contains the routing information for one WRR item.
type RRSetRoutingPolicyWrrPolicyWrrPolicyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoints that are health checked before making the routing decision. The unhealthy endpoints are omitted from the result. If all endpoints within a bucket are unhealthy, we choose a different bucket (sampled with respect to its weight) for responding. If DNSSEC is enabled for this zone, only one of `rrdata` or `health_checked_targets` can be set.
	HealthCheckedTargets *RRSetRoutingPolicyHealthCheckTargets `protobuf:"bytes,1,opt,name=health_checked_targets,json=healthCheckedTargets" json:"health_checked_targets,omitempty"`
	Kind                 *string                               `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
	Rrdatas              []string                              `protobuf:"bytes,3,rep,name=rrdatas" json:"rrdatas,omitempty"`
	// DNSSEC generated signatures for all the `rrdata` within this item. When using health-checked targets for DNSSEC-enabled zones, you can only use at most one health-checked IP address per item.
	SignatureRrdatas []string `protobuf:"bytes,4,rep,name=signature_rrdatas,json=signatureRrdatas" json:"signature_rrdatas,omitempty"`
	// The weight corresponding to this `WrrPolicyItem` object. When multiple `WrrPolicyItem` objects are configured, the probability of returning an `WrrPolicyItem` object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
	Weight *float64 `protobuf:"fixed64,5,opt,name=weight" json:"weight,omitempty"`
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) Reset() {
	*x = RRSetRoutingPolicyWrrPolicyWrrPolicyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRSetRoutingPolicyWrrPolicyWrrPolicyItem) ProtoMessage() {}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRSetRoutingPolicyWrrPolicyWrrPolicyItem.ProtoReflect.Descriptor instead.
func (*RRSetRoutingPolicyWrrPolicyWrrPolicyItem) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{52}
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetHealthCheckedTargets() *RRSetRoutingPolicyHealthCheckTargets {
	if x != nil {
		return x.HealthCheckedTargets
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

func (x *RRSetRoutingPolicyWrrPolicyWrrPolicyItem) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

// A unit of data that is returned by the DNS servers.
type ResourceRecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// For example, www.example.com.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Configures dynamic query responses based on either the geo location of the querying user or a weighted round robin based routing policy. A valid `ResourceRecordSet` contains only `rrdata` (for static resolution) or a `routing_policy` (for dynamic resolution).
	RoutingPolicy *RRSetRoutingPolicy `protobuf:"bytes,3,opt,name=routing_policy,json=routingPolicy" json:"routing_policy,omitempty"`
	// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
	Rrdatas []string `protobuf:"bytes,4,rep,name=rrdatas" json:"rrdatas,omitempty"`
	// As defined in RFC 4034 (section 3.2).
	SignatureRrdatas []string `protobuf:"bytes,5,rep,name=signature_rrdatas,json=signatureRrdatas" json:"signature_rrdatas,omitempty"`
	// Number of seconds that this `ResourceRecordSet` can be cached by resolvers.
	Ttl *int32 `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	// The identifier of a supported record type. See the list of Supported DNS record types.
	Type *string `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
}

func (x *ResourceRecordSet) Reset() {
	*x = ResourceRecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordSet) ProtoMessage() {}

func (x *ResourceRecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordSet.ProtoReflect.Descriptor instead.
func (*ResourceRecordSet) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{53}
}

func (x *ResourceRecordSet) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResourceRecordSet) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceRecordSet) GetRoutingPolicy() *RRSetRoutingPolicy {
	if x != nil {
		return x.RoutingPolicy
	}
	return nil
}

func (x *ResourceRecordSet) GetRrdatas() []string {
	if x != nil {
		return x.Rrdatas
	}
	return nil
}

func (x *ResourceRecordSet) GetSignatureRrdatas() []string {
	if x != nil {
		return x.SignatureRrdatas
	}
	return nil
}

func (x *ResourceRecordSet) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *ResourceRecordSet) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ResourceRecordSetsDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceRecordSetsDeleteResponse) Reset() {
	*x = ResourceRecordSetsDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordSetsDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordSetsDeleteResponse) ProtoMessage() {}

func (x *ResourceRecordSetsDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordSetsDeleteResponse.ProtoReflect.Descriptor instead.
func (*ResourceRecordSetsDeleteResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{54}
}

type ResourceRecordSetsListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of resource.
	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// The resource record set resources.
	Rrsets []*ResourceRecordSet `protobuf:"bytes,3,rep,name=rrsets" json:"rrsets,omitempty"`
}

func (x *ResourceRecordSetsListResponse) Reset() {
	*x = ResourceRecordSetsListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRecordSetsListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRecordSetsListResponse) ProtoMessage() {}

func (x *ResourceRecordSetsListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRecordSetsListResponse.ProtoReflect.Descriptor instead.
func (*ResourceRecordSetsListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{55}
}

func (x *ResourceRecordSetsListResponse) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResourceRecordSetsListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ResourceRecordSetsListResponse) GetRrsets() []*ResourceRecordSet {
	if x != nil {
		return x.Rrsets
	}
	return nil
}

type ResponsePoliciesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// The Response Policy resources.
	ResponsePolicies []*ResponsePolicy `protobuf:"bytes,2,rep,name=response_policies,json=responsePolicies" json:"response_policies,omitempty"`
}

func (x *ResponsePoliciesListResponse) Reset() {
	*x = ResponsePoliciesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesListResponse) ProtoMessage() {}

func (x *ResponsePoliciesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesListResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{56}
}

func (x *ResponsePoliciesListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ResponsePoliciesListResponse) GetResponsePolicies() []*ResponsePolicy {
	if x != nil {
		return x.ResponsePolicies
	}
	return nil
}

type ResponsePoliciesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicy *ResponsePolicy `protobuf:"bytes,1,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *ResponsePoliciesPatchResponse) Reset() {
	*x = ResponsePoliciesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesPatchResponse) ProtoMessage() {}

func (x *ResponsePoliciesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesPatchResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesPatchResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{57}
}

func (x *ResponsePoliciesPatchResponse) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type ResponsePoliciesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicy *ResponsePolicy `protobuf:"bytes,1,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *ResponsePoliciesUpdateResponse) Reset() {
	*x = ResponsePoliciesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePoliciesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePoliciesUpdateResponse) ProtoMessage() {}

func (x *ResponsePoliciesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePoliciesUpdateResponse.ProtoReflect.Descriptor instead.
func (*ResponsePoliciesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{58}
}

func (x *ResponsePoliciesUpdateResponse) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

// A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
type ResponsePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-provided description for this Response Policy.
	Description *string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// The list of Google Kubernetes Engine clusters to which this response policy is applied.
	GkeClusters []*ResponsePolicyGKECluster `protobuf:"bytes,2,rep,name=gke_clusters,json=gkeClusters" json:"gke_clusters,omitempty"`
	// Unique identifier for the resource; defined by the server (output only).
	Id   *int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	Kind *string `protobuf:"bytes,4,opt,name=kind" json:"kind,omitempty"`
	// User labels.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// List of network names specifying networks to which this policy is applied.
	Networks []*ResponsePolicyNetwork `protobuf:"bytes,6,rep,name=networks" json:"networks,omitempty"`
	// User assigned name for this Response Policy.
	ResponsePolicyName *string `protobuf:"bytes,7,opt,name=response_policy_name,json=responsePolicyName" json:"response_policy_name,omitempty"`
}

func (x *ResponsePolicy) Reset() {
	*x = ResponsePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicy) ProtoMessage() {}

func (x *ResponsePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicy.ProtoReflect.Descriptor instead.
func (*ResponsePolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{59}
}

func (x *ResponsePolicy) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ResponsePolicy) GetGkeClusters() []*ResponsePolicyGKECluster {
	if x != nil {
		return x.GkeClusters
	}
	return nil
}

func (x *ResponsePolicy) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ResponsePolicy) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResponsePolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResponsePolicy) GetNetworks() []*ResponsePolicyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ResponsePolicy) GetResponsePolicyName() string {
	if x != nil && x.ResponsePolicyName != nil {
		return *x.ResponsePolicyName
	}
	return ""
}

type ResponsePolicyGKECluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
	GkeClusterName *string `protobuf:"bytes,1,opt,name=gke_cluster_name,json=gkeClusterName" json:"gke_cluster_name,omitempty"`
	Kind           *string `protobuf:"bytes,2,opt,name=kind" json:"kind,omitempty"`
}

func (x *ResponsePolicyGKECluster) Reset() {
	*x = ResponsePolicyGKECluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyGKECluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyGKECluster) ProtoMessage() {}

func (x *ResponsePolicyGKECluster) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyGKECluster.ProtoReflect.Descriptor instead.
func (*ResponsePolicyGKECluster) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{60}
}

func (x *ResponsePolicyGKECluster) GetGkeClusterName() string {
	if x != nil && x.GkeClusterName != nil {
		return *x.GkeClusterName
	}
	return ""
}

func (x *ResponsePolicyGKECluster) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

type ResponsePolicyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The fully qualified URL of the VPC network to bind to. This should be formatted like `https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}`
	NetworkUrl *string `protobuf:"bytes,2,opt,name=network_url,json=networkUrl" json:"network_url,omitempty"`
}

func (x *ResponsePolicyNetwork) Reset() {
	*x = ResponsePolicyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyNetwork) ProtoMessage() {}

func (x *ResponsePolicyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyNetwork.ProtoReflect.Descriptor instead.
func (*ResponsePolicyNetwork) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{61}
}

func (x *ResponsePolicyNetwork) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResponsePolicyNetwork) GetNetworkUrl() string {
	if x != nil && x.NetworkUrl != nil {
		return *x.NetworkUrl
	}
	return ""
}

// A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
type ResponsePolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Answer this query with a behavior rather than DNS data.
	Behavior *string `protobuf:"bytes,1,opt,name=behavior" json:"behavior,omitempty"`
	// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
	DnsName *string `protobuf:"bytes,2,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	Kind    *string `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	// Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name; in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.
	LocalData *ResponsePolicyRuleLocalData `protobuf:"bytes,4,opt,name=local_data,json=localData" json:"local_data,omitempty"`
	// An identifier for this rule. Must be unique with the ResponsePolicy.
	RuleName *string `protobuf:"bytes,5,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
}

func (x *ResponsePolicyRule) Reset() {
	*x = ResponsePolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRule) ProtoMessage() {}

func (x *ResponsePolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRule.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRule) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{62}
}

func (x *ResponsePolicyRule) GetBehavior() string {
	if x != nil && x.Behavior != nil {
		return *x.Behavior
	}
	return ""
}

func (x *ResponsePolicyRule) GetDnsName() string {
	if x != nil && x.DnsName != nil {
		return *x.DnsName
	}
	return ""
}

func (x *ResponsePolicyRule) GetKind() string {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ""
}

func (x *ResponsePolicyRule) GetLocalData() *ResponsePolicyRuleLocalData {
	if x != nil {
		return x.LocalData
	}
	return nil
}

func (x *ResponsePolicyRule) GetRuleName() string {
	if x != nil && x.RuleName != nil {
		return *x.RuleName
	}
	return ""
}

type ResponsePolicyRuleLocalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
	LocalDatas []*ResourceRecordSet `protobuf:"bytes,1,rep,name=local_datas,json=localDatas" json:"local_datas,omitempty"`
}

func (x *ResponsePolicyRuleLocalData) Reset() {
	*x = ResponsePolicyRuleLocalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRuleLocalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRuleLocalData) ProtoMessage() {}

func (x *ResponsePolicyRuleLocalData) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRuleLocalData.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRuleLocalData) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{63}
}

func (x *ResponsePolicyRuleLocalData) GetLocalDatas() []*ResourceRecordSet {
	if x != nil {
		return x.LocalDatas
	}
	return nil
}

type ResponsePolicyRulesListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field indicates that more results are available beyond the last page displayed. To fetch the results, make another list request and use this value as your page token. This lets you retrieve the complete contents of a very large collection one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You can't retrieve a consistent snapshot of a collection larger than the maximum page size.
	NextPageToken *string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
	// The Response Policy Rule resources.
	ResponsePolicyRules []*ResponsePolicyRule `protobuf:"bytes,2,rep,name=response_policy_rules,json=responsePolicyRules" json:"response_policy_rules,omitempty"`
}

func (x *ResponsePolicyRulesListResponse) Reset() {
	*x = ResponsePolicyRulesListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesListResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesListResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesListResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{64}
}

func (x *ResponsePolicyRulesListResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

func (x *ResponsePolicyRulesListResponse) GetResponsePolicyRules() []*ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRules
	}
	return nil
}

type ResponsePolicyRulesPatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,1,opt,name=response_policy_rule,json=responsePolicyRule" json:"response_policy_rule,omitempty"`
}

func (x *ResponsePolicyRulesPatchResponse) Reset() {
	*x = ResponsePolicyRulesPatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesPatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesPatchResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesPatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesPatchResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesPatchResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{65}
}

func (x *ResponsePolicyRulesPatchResponse) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type ResponsePolicyRulesUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,1,opt,name=response_policy_rule,json=responsePolicyRule" json:"response_policy_rule,omitempty"`
}

func (x *ResponsePolicyRulesUpdateResponse) Reset() {
	*x = ResponsePolicyRulesUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePolicyRulesUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePolicyRulesUpdateResponse) ProtoMessage() {}

func (x *ResponsePolicyRulesUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePolicyRulesUpdateResponse.ProtoReflect.Descriptor instead.
func (*ResponsePolicyRulesUpdateResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{66}
}

func (x *ResponsePolicyRulesUpdateResponse) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type CreateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	Change            *Change `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
}

func (x *CreateChangeRequest) Reset() {
	*x = CreateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChangeRequest) ProtoMessage() {}

func (x *CreateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChangeRequest.ProtoReflect.Descriptor instead.
func (*CreateChangeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{67}
}

func (x *CreateChangeRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreateChangeRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *CreateChangeRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreateChangeRequest) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

type GetChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeId          *string `protobuf:"bytes,1,opt,name=change_id,json=changeId" json:"change_id,omitempty"`
	ClientOperationId *string `protobuf:"bytes,2,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,3,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Project           *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
}

func (x *GetChangeRequest) Reset() {
	*x = GetChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangeRequest) ProtoMessage() {}

func (x *GetChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangeRequest.ProtoReflect.Descriptor instead.
func (*GetChangeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{68}
}

func (x *GetChangeRequest) GetChangeId() string {
	if x != nil && x.ChangeId != nil {
		return *x.ChangeId
	}
	return ""
}

func (x *GetChangeRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetChangeRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *GetChangeRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type ListChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone *string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	MaxResults  *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken   *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project     *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	SortBy      *string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy" json:"sort_by,omitempty"`
	SortOrder   *string `protobuf:"bytes,6,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
}

func (x *ListChangesRequest) Reset() {
	*x = ListChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangesRequest) ProtoMessage() {}

func (x *ListChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangesRequest.ProtoReflect.Descriptor instead.
func (*ListChangesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{69}
}

func (x *ListChangesRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *ListChangesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListChangesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListChangesRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *ListChangesRequest) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

func (x *ListChangesRequest) GetSortOrder() string {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return ""
}

type GetDnsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	DigestType        *string `protobuf:"bytes,2,opt,name=digest_type,json=digestType" json:"digest_type,omitempty"`
	DnsKeyId          *string `protobuf:"bytes,3,opt,name=dns_key_id,json=dnsKeyId" json:"dns_key_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,4,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Project           *string `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
}

func (x *GetDnsKeyRequest) Reset() {
	*x = GetDnsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsKeyRequest) ProtoMessage() {}

func (x *GetDnsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsKeyRequest.ProtoReflect.Descriptor instead.
func (*GetDnsKeyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{70}
}

func (x *GetDnsKeyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetDnsKeyRequest) GetDigestType() string {
	if x != nil && x.DigestType != nil {
		return *x.DigestType
	}
	return ""
}

func (x *GetDnsKeyRequest) GetDnsKeyId() string {
	if x != nil && x.DnsKeyId != nil {
		return *x.DnsKeyId
	}
	return ""
}

func (x *GetDnsKeyRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *GetDnsKeyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type ListDnsKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DigestType  *string `protobuf:"bytes,1,opt,name=digest_type,json=digestType" json:"digest_type,omitempty"`
	ManagedZone *string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	MaxResults  *int32  `protobuf:"varint,3,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken   *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project     *string `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
}

func (x *ListDnsKeysRequest) Reset() {
	*x = ListDnsKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDnsKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsKeysRequest) ProtoMessage() {}

func (x *ListDnsKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsKeysRequest.ProtoReflect.Descriptor instead.
func (*ListDnsKeysRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{71}
}

func (x *ListDnsKeysRequest) GetDigestType() string {
	if x != nil && x.DigestType != nil {
		return *x.DigestType
	}
	return ""
}

func (x *ListDnsKeysRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *ListDnsKeysRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListDnsKeysRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListDnsKeysRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type GetManagedZoneOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Operation         *string `protobuf:"bytes,3,opt,name=operation" json:"operation,omitempty"`
	Project           *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
}

func (x *GetManagedZoneOperationRequest) Reset() {
	*x = GetManagedZoneOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagedZoneOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagedZoneOperationRequest) ProtoMessage() {}

func (x *GetManagedZoneOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagedZoneOperationRequest.ProtoReflect.Descriptor instead.
func (*GetManagedZoneOperationRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{72}
}

func (x *GetManagedZoneOperationRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetManagedZoneOperationRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *GetManagedZoneOperationRequest) GetOperation() string {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return ""
}

func (x *GetManagedZoneOperationRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type ListManagedZoneOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone *string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	MaxResults  *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken   *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project     *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	SortBy      *string `protobuf:"bytes,5,opt,name=sort_by,json=sortBy" json:"sort_by,omitempty"`
}

func (x *ListManagedZoneOperationsRequest) Reset() {
	*x = ListManagedZoneOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListManagedZoneOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListManagedZoneOperationsRequest) ProtoMessage() {}

func (x *ListManagedZoneOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListManagedZoneOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListManagedZoneOperationsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{73}
}

func (x *ListManagedZoneOperationsRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *ListManagedZoneOperationsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListManagedZoneOperationsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListManagedZoneOperationsRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *ListManagedZoneOperationsRequest) GetSortBy() string {
	if x != nil && x.SortBy != nil {
		return *x.SortBy
	}
	return ""
}

type CreateManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string      `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string      `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ManagedZone       *ManagedZone `protobuf:"bytes,3,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
}

func (x *CreateManagedZoneRequest) Reset() {
	*x = CreateManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateManagedZoneRequest) ProtoMessage() {}

func (x *CreateManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*CreateManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{74}
}

func (x *CreateManagedZoneRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreateManagedZoneRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreateManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type DeleteManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *DeleteManagedZoneRequest) Reset() {
	*x = DeleteManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteManagedZoneRequest) ProtoMessage() {}

func (x *DeleteManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{75}
}

func (x *DeleteManagedZoneRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *DeleteManagedZoneRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteManagedZoneRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type GetManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *GetManagedZoneRequest) Reset() {
	*x = GetManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManagedZoneRequest) ProtoMessage() {}

func (x *GetManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*GetManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{76}
}

func (x *GetManagedZoneRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetManagedZoneRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetManagedZoneRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type ListManagedZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsName    *string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	MaxResults *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project    *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
}

func (x *ListManagedZonesRequest) Reset() {
	*x = ListManagedZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListManagedZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListManagedZonesRequest) ProtoMessage() {}

func (x *ListManagedZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListManagedZonesRequest.ProtoReflect.Descriptor instead.
func (*ListManagedZonesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{77}
}

func (x *ListManagedZonesRequest) GetDnsName() string {
	if x != nil && x.DnsName != nil {
		return *x.DnsName
	}
	return ""
}

func (x *ListManagedZonesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListManagedZonesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListManagedZonesRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type PatchManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string      `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string      `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	ManagedZone       *ManagedZone `protobuf:"bytes,4,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
}

func (x *PatchManagedZoneRequest) Reset() {
	*x = PatchManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchManagedZoneRequest) ProtoMessage() {}

func (x *PatchManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*PatchManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{78}
}

func (x *PatchManagedZoneRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *PatchManagedZoneRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PatchManagedZoneRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *PatchManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type UpdateManagedZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string      `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string      `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	ManagedZone       *ManagedZone `protobuf:"bytes,4,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
}

func (x *UpdateManagedZoneRequest) Reset() {
	*x = UpdateManagedZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateManagedZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateManagedZoneRequest) ProtoMessage() {}

func (x *UpdateManagedZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateManagedZoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateManagedZoneRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{79}
}

func (x *UpdateManagedZoneRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *UpdateManagedZoneRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateManagedZoneRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *UpdateManagedZoneRequest) GetManagedZone() *ManagedZone {
	if x != nil {
		return x.ManagedZone
	}
	return nil
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Policy            *Policy `protobuf:"bytes,3,opt,name=policy" json:"policy,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{80}
}

func (x *CreatePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreatePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{81}
}

func (x *DeletePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *DeletePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeletePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{82}
}

func (x *GetPolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetPolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetPolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResults *int32  `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project    *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{83}
}

func (x *ListPoliciesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListPoliciesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPoliciesRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type PatchPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	Policy            *Policy `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
}

func (x *PatchPolicyRequest) Reset() {
	*x = PatchPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchPolicyRequest) ProtoMessage() {}

func (x *PatchPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchPolicyRequest.ProtoReflect.Descriptor instead.
func (*PatchPolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{84}
}

func (x *PatchPolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *PatchPolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PatchPolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *PatchPolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	Policy            *Policy `protobuf:"bytes,4,opt,name=policy" json:"policy,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{85}
}

func (x *UpdatePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *UpdatePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdatePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *UpdatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Name              *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{86}
}

func (x *GetProjectRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetProjectRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CreateResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string            `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string            `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Project           *string            `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	ResourceRecordSet *ResourceRecordSet `protobuf:"bytes,4,opt,name=resource_record_set,json=resourceRecordSet" json:"resource_record_set,omitempty"`
}

func (x *CreateResourceRecordSetRequest) Reset() {
	*x = CreateResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceRecordSetRequest) ProtoMessage() {}

func (x *CreateResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{87}
}

func (x *CreateResourceRecordSetRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreateResourceRecordSetRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *CreateResourceRecordSetRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreateResourceRecordSetRequest) GetResourceRecordSet() *ResourceRecordSet {
	if x != nil {
		return x.ResourceRecordSet
	}
	return nil
}

type DeleteResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Name              *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	Type              *string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

func (x *DeleteResourceRecordSetRequest) Reset() {
	*x = DeleteResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceRecordSetRequest) ProtoMessage() {}

func (x *DeleteResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{88}
}

func (x *DeleteResourceRecordSetRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *DeleteResourceRecordSetRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type GetResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Name              *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Project           *string `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	Type              *string `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
}

func (x *GetResourceRecordSetRequest) Reset() {
	*x = GetResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRecordSetRequest) ProtoMessage() {}

func (x *GetResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{89}
}

func (x *GetResourceRecordSetRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *GetResourceRecordSetRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ListResourceRecordSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagedZone *string `protobuf:"bytes,1,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	MaxResults  *int32  `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	Name        *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	PageToken   *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project     *string `protobuf:"bytes,5,opt,name=project" json:"project,omitempty"`
	Type        *string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

func (x *ListResourceRecordSetsRequest) Reset() {
	*x = ListResourceRecordSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourceRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourceRecordSetsRequest) ProtoMessage() {}

func (x *ListResourceRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourceRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*ListResourceRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{90}
}

func (x *ListResourceRecordSetsRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *ListResourceRecordSetsRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListResourceRecordSetsRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListResourceRecordSetsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListResourceRecordSetsRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *ListResourceRecordSetsRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type PatchResourceRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string            `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	ManagedZone       *string            `protobuf:"bytes,2,opt,name=managed_zone,json=managedZone" json:"managed_zone,omitempty"`
	Name              *string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Project           *string            `protobuf:"bytes,4,opt,name=project" json:"project,omitempty"`
	Type              *string            `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	ResourceRecordSet *ResourceRecordSet `protobuf:"bytes,6,opt,name=resource_record_set,json=resourceRecordSet" json:"resource_record_set,omitempty"`
}

func (x *PatchResourceRecordSetRequest) Reset() {
	*x = PatchResourceRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResourceRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResourceRecordSetRequest) ProtoMessage() {}

func (x *PatchResourceRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResourceRecordSetRequest.ProtoReflect.Descriptor instead.
func (*PatchResourceRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{91}
}

func (x *PatchResourceRecordSetRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetManagedZone() string {
	if x != nil && x.ManagedZone != nil {
		return *x.ManagedZone
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *PatchResourceRecordSetRequest) GetResourceRecordSet() *ResourceRecordSet {
	if x != nil {
		return x.ResourceRecordSet
	}
	return nil
}

type CreateResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string         `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string         `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy    *ResponsePolicy `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *CreateResponsePolicyRequest) Reset() {
	*x = CreateResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponsePolicyRequest) ProtoMessage() {}

func (x *CreateResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{92}
}

func (x *CreateResponsePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreateResponsePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreateResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type DeleteResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Name              *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *DeleteResponsePolicyRequest) Reset() {
	*x = DeleteResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyRequest) ProtoMessage() {}

func (x *DeleteResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{93}
}

func (x *DeleteResponsePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *DeleteResponsePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *DeleteResponsePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Name              *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *GetResponsePolicyRequest) Reset() {
	*x = GetResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponsePolicyRequest) ProtoMessage() {}

func (x *GetResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*GetResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{94}
}

func (x *GetResponsePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetResponsePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *GetResponsePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ListResponsePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResults *int32  `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken  *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project    *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
}

func (x *ListResponsePoliciesRequest) Reset() {
	*x = ListResponsePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponsePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponsePoliciesRequest) ProtoMessage() {}

func (x *ListResponsePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponsePoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListResponsePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{95}
}

func (x *ListResponsePoliciesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListResponsePoliciesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListResponsePoliciesRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

type PatchResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string         `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string         `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Name              *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ResponsePolicy    *ResponsePolicy `protobuf:"bytes,4,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *PatchResponsePolicyRequest) Reset() {
	*x = PatchResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResponsePolicyRequest) ProtoMessage() {}

func (x *PatchResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*PatchResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{96}
}

func (x *PatchResponsePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *PatchResponsePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *PatchResponsePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PatchResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type UpdateResponsePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string         `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string         `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	Name              *string         `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ResponsePolicy    *ResponsePolicy `protobuf:"bytes,4,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *UpdateResponsePolicyRequest) Reset() {
	*x = UpdateResponsePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponsePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsePolicyRequest) ProtoMessage() {}

func (x *UpdateResponsePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateResponsePolicyRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{97}
}

func (x *UpdateResponsePolicyRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *UpdateResponsePolicyRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *UpdateResponsePolicyRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateResponsePolicyRequest) GetResponsePolicy() *ResponsePolicy {
	if x != nil {
		return x.ResponsePolicy
	}
	return nil
}

type CreateResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId  *string             `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project            *string             `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy     *string             `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,4,opt,name=response_policy_rule,json=responsePolicyRule" json:"response_policy_rule,omitempty"`
}

func (x *CreateResponsePolicyRuleRequest) Reset() {
	*x = CreateResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponsePolicyRuleRequest) ProtoMessage() {}

func (x *CreateResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{98}
}

func (x *CreateResponsePolicyRuleRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *CreateResponsePolicyRuleRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *CreateResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

func (x *CreateResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type DeleteResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy    *string `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
	Name              *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *DeleteResponsePolicyRuleRequest) Reset() {
	*x = DeleteResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponsePolicyRuleRequest) ProtoMessage() {}

func (x *DeleteResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{99}
}

func (x *DeleteResponsePolicyRuleRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *DeleteResponsePolicyRuleRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *DeleteResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

func (x *DeleteResponsePolicyRuleRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId *string `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project           *string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy    *string `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
	Name              *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *GetResponsePolicyRuleRequest) Reset() {
	*x = GetResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponsePolicyRuleRequest) ProtoMessage() {}

func (x *GetResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*GetResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{100}
}

func (x *GetResponsePolicyRuleRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *GetResponsePolicyRuleRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *GetResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

func (x *GetResponsePolicyRuleRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ListResponsePolicyRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResults     *int32  `protobuf:"varint,1,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
	PageToken      *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	Project        *string `protobuf:"bytes,3,opt,name=project" json:"project,omitempty"`
	ResponsePolicy *string `protobuf:"bytes,4,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
}

func (x *ListResponsePolicyRulesRequest) Reset() {
	*x = ListResponsePolicyRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponsePolicyRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponsePolicyRulesRequest) ProtoMessage() {}

func (x *ListResponsePolicyRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponsePolicyRulesRequest.ProtoReflect.Descriptor instead.
func (*ListResponsePolicyRulesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{101}
}

func (x *ListResponsePolicyRulesRequest) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

func (x *ListResponsePolicyRulesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListResponsePolicyRulesRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *ListResponsePolicyRulesRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

type PatchResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId  *string             `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project            *string             `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy     *string             `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
	Name               *string             `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,5,opt,name=response_policy_rule,json=responsePolicyRule" json:"response_policy_rule,omitempty"`
}

func (x *PatchResponsePolicyRuleRequest) Reset() {
	*x = PatchResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchResponsePolicyRuleRequest) ProtoMessage() {}

func (x *PatchResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*PatchResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{102}
}

func (x *PatchResponsePolicyRuleRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PatchResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

type UpdateResponsePolicyRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOperationId  *string             `protobuf:"bytes,1,opt,name=client_operation_id,json=clientOperationId" json:"client_operation_id,omitempty"`
	Project            *string             `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	ResponsePolicy     *string             `protobuf:"bytes,3,opt,name=response_policy,json=responsePolicy" json:"response_policy,omitempty"`
	Name               *string             `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	ResponsePolicyRule *ResponsePolicyRule `protobuf:"bytes,5,opt,name=response_policy_rule,json=responsePolicyRule" json:"response_policy_rule,omitempty"`
}

func (x *UpdateResponsePolicyRuleRequest) Reset() {
	*x = UpdateResponsePolicyRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_dns_v1_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponsePolicyRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponsePolicyRuleRequest) ProtoMessage() {}

func (x *UpdateResponsePolicyRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_dns_v1_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponsePolicyRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateResponsePolicyRuleRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_dns_v1_service_proto_rawDescGZIP(), []int{103}
}

func (x *UpdateResponsePolicyRuleRequest) GetClientOperationId() string {
	if x != nil && x.ClientOperationId != nil {
		return *x.ClientOperationId
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetProject() string {
	if x != nil && x.Project != nil {
		return *x.Project
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetResponsePolicy() string {
	if x != nil && x.ResponsePolicy != nil {
		return *x.ResponsePolicy
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateResponsePolicyRuleRequest) GetResponsePolicyRule() *ResponsePolicyRule {
	if x != nil {
		return x.ResponsePolicyRule
	}
	return nil
}

var File_google_cloud_dns_v1_service_proto protoreflect.FileDescriptor

var file_google_cloud_dns_v1_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xd6, 0x02, 0x0a, 0x06, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b,
	0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x54, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x0c, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x89,
	0x01, 0x0a, 0x13, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x04, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x6c, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x47, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x61, 0x6d, 0x56, 0x31, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd8,
	0x01, 0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x1e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x53, 0x65, 0x74, 0x49, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a,
	0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xd1, 0x08, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x64, 0x6e,
	0x73, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x64, 0x6e, 0x73, 0x73, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x73, 0x0a, 0x19, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x67, 0x0a, 0x15, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x44, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x70,
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x2b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x25, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x72, 0x6c, 0x22, 0xfa, 0x01, 0x0a, 0x22, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x0c, 0x67, 0x6b, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x0b, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22,
	0x6c, 0x0a, 0x2c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6b, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x60, 0x0a,
	0x29, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22,
	0x34, 0x0a, 0x1e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x5d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x2a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x18,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x64, 0x6e, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0d, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x7a, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x4d, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xcd,
	0x03, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7b, 0x0a, 0x1e, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x1b, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x6e, 0x73, 0x36,
	0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6e, 0x73, 0x36, 0x34,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x36, 0x34, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xaf,
	0x01, 0x0a, 0x21, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x76, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x22, 0xb6, 0x01, 0x0a, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x6a, 0x0a, 0x11, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x6e, 0x73, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x6e,
	0x73, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x6e, 0x73, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x77, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x22, 0xb0, 0x0c, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x19, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x6b, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x6b, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x67, 0x6b, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x46, 0x0a, 0x20, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x67, 0x6b, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x50, 0x65, 0x72, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3c, 0x0a, 0x1a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1c, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50,
	0x65, 0x72, 0x52, 0x72, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a,
	0x1a, 0x72, 0x72, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x72, 0x72, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x72,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x72, 0x72, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x72, 0x73, 0x65, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x4d,
	0x0a, 0x24, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x42, 0x0a,
	0x1e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x72,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x15, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x12, 0x52, 0x52, 0x53, 0x65, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a,
	0x03, 0x67, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x03, 0x67, 0x65,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x03, 0x77,
	0x72, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x03, 0x77, 0x72, 0x72, 0x22,
	0xad, 0x01, 0x0a, 0x1b, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65,
	0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x92, 0x02, 0x0a, 0x28, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47,
	0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x16,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x72, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x24, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x22,
	0x8f, 0x02, 0x0a, 0x24, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x25, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5e, 0x0a, 0x12, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x52,
	0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x47, 0x65, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x62, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x72,
	0x69, 0x63, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x86, 0x01, 0x0a,
	0x1b, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x28, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x72, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x6f, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x14, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x52, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x72, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x72, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x06, 0x72, 0x72,
	0x73, 0x65, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x6d, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6e,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xa6,
	0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x4b,
	0x45, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x4b, 0x45, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x72, 0x6c, 0x22,
	0xcd, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x66, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x5b, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x7d, 0x0a, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x7e, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x6e,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x78, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0xbd, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x73, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x70, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6f,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xa7, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x56, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb2, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x56, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x7b, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xc9, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x82, 0x02, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x32, 0x88, 0x04,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0xa5, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x22,
	0x3e, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x3a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4c, 0x12, 0x4a, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa8, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xe1, 0x02, 0x0a, 0x0d, 0x44, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x64, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x32, 0xbd, 0x03, 0x0a,
	0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc5, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xdf, 0x07, 0x0a,
	0x12, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x22, 0x27, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x96,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x32, 0x2e, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x1a, 0x2e, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x32, 0x82,
	0x07, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x22, 0x23, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x84,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x2a, 0x2a, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12,
	0x2a, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x9e,
	0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x32, 0x2a, 0x2f, 0x64, 0x6e,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0xa1, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x1a,
	0x2a, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x32, 0x85, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x32, 0xc0, 0x08, 0x0a, 0x18,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x3d, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e,
	0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xda, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x2a, 0x4b, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x53, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70,
	0x65, 0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x12, 0xde, 0x01,
	0x0a, 0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x32, 0x4b, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x7d, 0x2f, 0x72, 0x72, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x3a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x32, 0xdd,
	0x08, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3e, 0x22, 0x2b, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x0f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x9c, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa3,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x12, 0x32, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x64, 0x6e, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x32, 0x32, 0x2f, 0x64,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x3a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0xca, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x1a, 0x32, 0x2f, 0x64, 0x6e, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0xbe,
	0x0a, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xdc, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b,
	0x22, 0x43, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x2a, 0x4a,
	0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x12, 0x43, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x32, 0x4a, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xf2, 0x01, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x1a, 0x4a, 0x2f,
	0x64, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x42,
	0x2b, 0x5a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x2f, 0x64, 0x6e, 0x73, 0x70, 0x62, 0x3b, 0x64, 0x6e, 0x73, 0x70, 0x62,
}

var (
	file_google_cloud_dns_v1_service_proto_rawDescOnce sync.Once
	file_google_cloud_dns_v1_service_proto_rawDescData = file_google_cloud_dns_v1_service_proto_rawDesc
)

func file_google_cloud_dns_v1_service_proto_rawDescGZIP() []byte {
	file_google_cloud_dns_v1_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_dns_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_dns_v1_service_proto_rawDescData)
	})
	return file_google_cloud_dns_v1_service_proto_rawDescData
}

var file_google_cloud_dns_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 106)
var file_google_cloud_dns_v1_service_proto_goTypes = []interface{}{
	(*Change)(nil),                                            // 0: google.cloud.dns.v1.Change
	(*ChangesListResponse)(nil),                               // 1: google.cloud.dns.v1.ChangesListResponse
	(*DnsKey)(nil),                                            // 2: google.cloud.dns.v1.DnsKey
	(*DnsKeyDigest)(nil),                                      // 3: google.cloud.dns.v1.DnsKeyDigest
	(*DnsKeySpec)(nil),                                        // 4: google.cloud.dns.v1.DnsKeySpec
	(*DnsKeysListResponse)(nil),                               // 5: google.cloud.dns.v1.DnsKeysListResponse
	(*Expr)(nil),                                              // 6: google.cloud.dns.v1.Expr
	(*GoogleIamV1AuditConfig)(nil),                            // 7: google.cloud.dns.v1.GoogleIamV1AuditConfig
	(*GoogleIamV1AuditLogConfig)(nil),                         // 8: google.cloud.dns.v1.GoogleIamV1AuditLogConfig
	(*GoogleIamV1Binding)(nil),                                // 9: google.cloud.dns.v1.GoogleIamV1Binding
	(*GoogleIamV1GetIamPolicyRequest)(nil),                    // 10: google.cloud.dns.v1.GoogleIamV1GetIamPolicyRequest
	(*GoogleIamV1GetPolicyOptions)(nil),                       // 11: google.cloud.dns.v1.GoogleIamV1GetPolicyOptions
	(*GoogleIamV1Policy)(nil),                                 // 12: google.cloud.dns.v1.GoogleIamV1Policy
	(*GoogleIamV1SetIamPolicyRequest)(nil),                    // 13: google.cloud.dns.v1.GoogleIamV1SetIamPolicyRequest
	(*GoogleIamV1TestIamPermissionsRequest)(nil),              // 14: google.cloud.dns.v1.GoogleIamV1TestIamPermissionsRequest
	(*GoogleIamV1TestIamPermissionsResponse)(nil),             // 15: google.cloud.dns.v1.GoogleIamV1TestIamPermissionsResponse
	(*ManagedZone)(nil),                                       // 16: google.cloud.dns.v1.ManagedZone
	(*ManagedZoneCloudLoggingConfig)(nil),                     // 17: google.cloud.dns.v1.ManagedZoneCloudLoggingConfig
	(*ManagedZoneDnsSecConfig)(nil),                           // 18: google.cloud.dns.v1.ManagedZoneDnsSecConfig
	(*ManagedZoneForwardingConfig)(nil),                       // 19: google.cloud.dns.v1.ManagedZoneForwardingConfig
	(*ManagedZoneForwardingConfigNameServerTarget)(nil),       // 20: google.cloud.dns.v1.ManagedZoneForwardingConfigNameServerTarget
	(*ManagedZoneOperationsListResponse)(nil),                 // 21: google.cloud.dns.v1.ManagedZoneOperationsListResponse
	(*ManagedZonePeeringConfig)(nil),                          // 22: google.cloud.dns.v1.ManagedZonePeeringConfig
	(*ManagedZonePeeringConfigTargetNetwork)(nil),             // 23: google.cloud.dns.v1.ManagedZonePeeringConfigTargetNetwork
	(*ManagedZonePrivateVisibilityConfig)(nil),                // 24: google.cloud.dns.v1.ManagedZonePrivateVisibilityConfig
	(*ManagedZonePrivateVisibilityConfigGKECluster)(nil),      // 25: google.cloud.dns.v1.ManagedZonePrivateVisibilityConfigGKECluster
	(*ManagedZonePrivateVisibilityConfigNetwork)(nil),         // 26: google.cloud.dns.v1.ManagedZonePrivateVisibilityConfigNetwork
	(*ManagedZoneReverseLookupConfig)(nil),                    // 27: google.cloud.dns.v1.ManagedZoneReverseLookupConfig
	(*ManagedZoneServiceDirectoryConfig)(nil),                 // 28: google.cloud.dns.v1.ManagedZoneServiceDirectoryConfig
	(*ManagedZoneServiceDirectoryConfigNamespace)(nil),        // 29: google.cloud.dns.v1.ManagedZoneServiceDirectoryConfigNamespace
	(*ManagedZonesListResponse)(nil),                          // 30: google.cloud.dns.v1.ManagedZonesListResponse
	(*Operation)(nil),                                         // 31: google.cloud.dns.v1.Operation
	(*OperationDnsKeyContext)(nil),                            // 32: google.cloud.dns.v1.OperationDnsKeyContext
	(*OperationManagedZoneContext)(nil),                       // 33: google.cloud.dns.v1.OperationManagedZoneContext
	(*PoliciesListResponse)(nil),                              // 34: google.cloud.dns.v1.PoliciesListResponse
	(*PoliciesPatchResponse)(nil),                             // 35: google.cloud.dns.v1.PoliciesPatchResponse
	(*PoliciesUpdateResponse)(nil),                            // 36: google.cloud.dns.v1.PoliciesUpdateResponse
	(*Policy)(nil),                                            // 37: google.cloud.dns.v1.Policy
	(*PolicyAlternativeNameServerConfig)(nil),                 // 38: google.cloud.dns.v1.PolicyAlternativeNameServerConfig
	(*PolicyAlternativeNameServerConfigTargetNameServer)(nil), // 39: google.cloud.dns.v1.PolicyAlternativeNameServerConfigTargetNameServer
	(*PolicyDns64Config)(nil),                                 // 40: google.cloud.dns.v1.PolicyDns64Config
	(*PolicyDns64ConfigScope)(nil),                            // 41: google.cloud.dns.v1.PolicyDns64ConfigScope
	(*PolicyNetwork)(nil),                                     // 42: google.cloud.dns.v1.PolicyNetwork
	(*Project)(nil),                                           // 43: google.cloud.dns.v1.Project
	(*Quota)(nil),                                             // 44: google.cloud.dns.v1.Quota
	(*RRSetRoutingPolicy)(nil),                                // 45: google.cloud.dns.v1.RRSetRoutingPolicy
	(*RRSetRoutingPolicyGeoPolicy)(nil),                       // 46: google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicy
	(*RRSetRoutingPolicyGeoPolicyGeoPolicyItem)(nil),          // 47: google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicyGeoPolicyItem
	(*RRSetRoutingPolicyHealthCheckTargets)(nil),              // 48: google.cloud.dns.v1.RRSetRoutingPolicyHealthCheckTargets
	(*RRSetRoutingPolicyLoadBalancerTarget)(nil),              // 49: google.cloud.dns.v1.RRSetRoutingPolicyLoadBalancerTarget
	(*RRSetRoutingPolicyPrimaryBackupPolicy)(nil),             // 50: google.cloud.dns.v1.RRSetRoutingPolicyPrimaryBackupPolicy
	(*RRSetRoutingPolicyWrrPolicy)(nil),                       // 51: google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicy
	(*RRSetRoutingPolicyWrrPolicyWrrPolicyItem)(nil),          // 52: google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicyWrrPolicyItem
	(*ResourceRecordSet)(nil),                                 // 53: google.cloud.dns.v1.ResourceRecordSet
	(*ResourceRecordSetsDeleteResponse)(nil),                  // 54: google.cloud.dns.v1.ResourceRecordSetsDeleteResponse
	(*ResourceRecordSetsListResponse)(nil),                    // 55: google.cloud.dns.v1.ResourceRecordSetsListResponse
	(*ResponsePoliciesListResponse)(nil),                      // 56: google.cloud.dns.v1.ResponsePoliciesListResponse
	(*ResponsePoliciesPatchResponse)(nil),                     // 57: google.cloud.dns.v1.ResponsePoliciesPatchResponse
	(*ResponsePoliciesUpdateResponse)(nil),                    // 58: google.cloud.dns.v1.ResponsePoliciesUpdateResponse
	(*ResponsePolicy)(nil),                                    // 59: google.cloud.dns.v1.ResponsePolicy
	(*ResponsePolicyGKECluster)(nil),                          // 60: google.cloud.dns.v1.ResponsePolicyGKECluster
	(*ResponsePolicyNetwork)(nil),                             // 61: google.cloud.dns.v1.ResponsePolicyNetwork
	(*ResponsePolicyRule)(nil),                                // 62: google.cloud.dns.v1.ResponsePolicyRule
	(*ResponsePolicyRuleLocalData)(nil),                       // 63: google.cloud.dns.v1.ResponsePolicyRuleLocalData
	(*ResponsePolicyRulesListResponse)(nil),                   // 64: google.cloud.dns.v1.ResponsePolicyRulesListResponse
	(*ResponsePolicyRulesPatchResponse)(nil),                  // 65: google.cloud.dns.v1.ResponsePolicyRulesPatchResponse
	(*ResponsePolicyRulesUpdateResponse)(nil),                 // 66: google.cloud.dns.v1.ResponsePolicyRulesUpdateResponse
	(*CreateChangeRequest)(nil),                               // 67: google.cloud.dns.v1.CreateChangeRequest
	(*GetChangeRequest)(nil),                                  // 68: google.cloud.dns.v1.GetChangeRequest
	(*ListChangesRequest)(nil),                                // 69: google.cloud.dns.v1.ListChangesRequest
	(*GetDnsKeyRequest)(nil),                                  // 70: google.cloud.dns.v1.GetDnsKeyRequest
	(*ListDnsKeysRequest)(nil),                                // 71: google.cloud.dns.v1.ListDnsKeysRequest
	(*GetManagedZoneOperationRequest)(nil),                    // 72: google.cloud.dns.v1.GetManagedZoneOperationRequest
	(*ListManagedZoneOperationsRequest)(nil),                  // 73: google.cloud.dns.v1.ListManagedZoneOperationsRequest
	(*CreateManagedZoneRequest)(nil),                          // 74: google.cloud.dns.v1.CreateManagedZoneRequest
	(*DeleteManagedZoneRequest)(nil),                          // 75: google.cloud.dns.v1.DeleteManagedZoneRequest
	(*GetManagedZoneRequest)(nil),                             // 76: google.cloud.dns.v1.GetManagedZoneRequest
	(*ListManagedZonesRequest)(nil),                           // 77: google.cloud.dns.v1.ListManagedZonesRequest
	(*PatchManagedZoneRequest)(nil),                           // 78: google.cloud.dns.v1.PatchManagedZoneRequest
	(*UpdateManagedZoneRequest)(nil),                          // 79: google.cloud.dns.v1.UpdateManagedZoneRequest
	(*CreatePolicyRequest)(nil),                               // 80: google.cloud.dns.v1.CreatePolicyRequest
	(*DeletePolicyRequest)(nil),                               // 81: google.cloud.dns.v1.DeletePolicyRequest
	(*GetPolicyRequest)(nil),                                  // 82: google.cloud.dns.v1.GetPolicyRequest
	(*ListPoliciesRequest)(nil),                               // 83: google.cloud.dns.v1.ListPoliciesRequest
	(*PatchPolicyRequest)(nil),                                // 84: google.cloud.dns.v1.PatchPolicyRequest
	(*UpdatePolicyRequest)(nil),                               // 85: google.cloud.dns.v1.UpdatePolicyRequest
	(*GetProjectRequest)(nil),                                 // 86: google.cloud.dns.v1.GetProjectRequest
	(*CreateResourceRecordSetRequest)(nil),                    // 87: google.cloud.dns.v1.CreateResourceRecordSetRequest
	(*DeleteResourceRecordSetRequest)(nil),                    // 88: google.cloud.dns.v1.DeleteResourceRecordSetRequest
	(*GetResourceRecordSetRequest)(nil),                       // 89: google.cloud.dns.v1.GetResourceRecordSetRequest
	(*ListResourceRecordSetsRequest)(nil),                     // 90: google.cloud.dns.v1.ListResourceRecordSetsRequest
	(*PatchResourceRecordSetRequest)(nil),                     // 91: google.cloud.dns.v1.PatchResourceRecordSetRequest
	(*CreateResponsePolicyRequest)(nil),                       // 92: google.cloud.dns.v1.CreateResponsePolicyRequest
	(*DeleteResponsePolicyRequest)(nil),                       // 93: google.cloud.dns.v1.DeleteResponsePolicyRequest
	(*GetResponsePolicyRequest)(nil),                          // 94: google.cloud.dns.v1.GetResponsePolicyRequest
	(*ListResponsePoliciesRequest)(nil),                       // 95: google.cloud.dns.v1.ListResponsePoliciesRequest
	(*PatchResponsePolicyRequest)(nil),                        // 96: google.cloud.dns.v1.PatchResponsePolicyRequest
	(*UpdateResponsePolicyRequest)(nil),                       // 97: google.cloud.dns.v1.UpdateResponsePolicyRequest
	(*CreateResponsePolicyRuleRequest)(nil),                   // 98: google.cloud.dns.v1.CreateResponsePolicyRuleRequest
	(*DeleteResponsePolicyRuleRequest)(nil),                   // 99: google.cloud.dns.v1.DeleteResponsePolicyRuleRequest
	(*GetResponsePolicyRuleRequest)(nil),                      // 100: google.cloud.dns.v1.GetResponsePolicyRuleRequest
	(*ListResponsePolicyRulesRequest)(nil),                    // 101: google.cloud.dns.v1.ListResponsePolicyRulesRequest
	(*PatchResponsePolicyRuleRequest)(nil),                    // 102: google.cloud.dns.v1.PatchResponsePolicyRuleRequest
	(*UpdateResponsePolicyRuleRequest)(nil),                   // 103: google.cloud.dns.v1.UpdateResponsePolicyRuleRequest
	nil,                                                       // 104: google.cloud.dns.v1.ManagedZone.LabelsEntry
	nil,                                                       // 105: google.cloud.dns.v1.ResponsePolicy.LabelsEntry
	(*empty.Empty)(nil),                                       // 106: google.protobuf.Empty
}
var file_google_cloud_dns_v1_service_proto_depIdxs = []int32{
	53,  // 0: google.cloud.dns.v1.Change.additions:type_name -> google.cloud.dns.v1.ResourceRecordSet
	53,  // 1: google.cloud.dns.v1.Change.deletions:type_name -> google.cloud.dns.v1.ResourceRecordSet
	0,   // 2: google.cloud.dns.v1.ChangesListResponse.changes:type_name -> google.cloud.dns.v1.Change
	3,   // 3: google.cloud.dns.v1.DnsKey.digests:type_name -> google.cloud.dns.v1.DnsKeyDigest
	2,   // 4: google.cloud.dns.v1.DnsKeysListResponse.dns_keys:type_name -> google.cloud.dns.v1.DnsKey
	8,   // 5: google.cloud.dns.v1.GoogleIamV1AuditConfig.audit_log_configs:type_name -> google.cloud.dns.v1.GoogleIamV1AuditLogConfig
	6,   // 6: google.cloud.dns.v1.GoogleIamV1Binding.condition:type_name -> google.cloud.dns.v1.Expr
	11,  // 7: google.cloud.dns.v1.GoogleIamV1GetIamPolicyRequest.options:type_name -> google.cloud.dns.v1.GoogleIamV1GetPolicyOptions
	7,   // 8: google.cloud.dns.v1.GoogleIamV1Policy.audit_configs:type_name -> google.cloud.dns.v1.GoogleIamV1AuditConfig
	9,   // 9: google.cloud.dns.v1.GoogleIamV1Policy.bindings:type_name -> google.cloud.dns.v1.GoogleIamV1Binding
	12,  // 10: google.cloud.dns.v1.GoogleIamV1SetIamPolicyRequest.policy:type_name -> google.cloud.dns.v1.GoogleIamV1Policy
	17,  // 11: google.cloud.dns.v1.ManagedZone.cloud_logging_config:type_name -> google.cloud.dns.v1.ManagedZoneCloudLoggingConfig
	18,  // 12: google.cloud.dns.v1.ManagedZone.dnssec_config:type_name -> google.cloud.dns.v1.ManagedZoneDnsSecConfig
	19,  // 13: google.cloud.dns.v1.ManagedZone.forwarding_config:type_name -> google.cloud.dns.v1.ManagedZoneForwardingConfig
	104, // 14: google.cloud.dns.v1.ManagedZone.labels:type_name -> google.cloud.dns.v1.ManagedZone.LabelsEntry
	22,  // 15: google.cloud.dns.v1.ManagedZone.peering_config:type_name -> google.cloud.dns.v1.ManagedZonePeeringConfig
	24,  // 16: google.cloud.dns.v1.ManagedZone.private_visibility_config:type_name -> google.cloud.dns.v1.ManagedZonePrivateVisibilityConfig
	27,  // 17: google.cloud.dns.v1.ManagedZone.reverse_lookup_config:type_name -> google.cloud.dns.v1.ManagedZoneReverseLookupConfig
	28,  // 18: google.cloud.dns.v1.ManagedZone.service_directory_config:type_name -> google.cloud.dns.v1.ManagedZoneServiceDirectoryConfig
	4,   // 19: google.cloud.dns.v1.ManagedZoneDnsSecConfig.default_key_specs:type_name -> google.cloud.dns.v1.DnsKeySpec
	20,  // 20: google.cloud.dns.v1.ManagedZoneForwardingConfig.target_name_servers:type_name -> google.cloud.dns.v1.ManagedZoneForwardingConfigNameServerTarget
	31,  // 21: google.cloud.dns.v1.ManagedZoneOperationsListResponse.operations:type_name -> google.cloud.dns.v1.Operation
	23,  // 22: google.cloud.dns.v1.ManagedZonePeeringConfig.target_network:type_name -> google.cloud.dns.v1.ManagedZonePeeringConfigTargetNetwork
	25,  // 23: google.cloud.dns.v1.ManagedZonePrivateVisibilityConfig.gke_clusters:type_name -> google.cloud.dns.v1.ManagedZonePrivateVisibilityConfigGKECluster
	26,  // 24: google.cloud.dns.v1.ManagedZonePrivateVisibilityConfig.networks:type_name -> google.cloud.dns.v1.ManagedZonePrivateVisibilityConfigNetwork
	29,  // 25: google.cloud.dns.v1.ManagedZoneServiceDirectoryConfig.namespace:type_name -> google.cloud.dns.v1.ManagedZoneServiceDirectoryConfigNamespace
	16,  // 26: google.cloud.dns.v1.ManagedZonesListResponse.managed_zones:type_name -> google.cloud.dns.v1.ManagedZone
	32,  // 27: google.cloud.dns.v1.Operation.dns_key_context:type_name -> google.cloud.dns.v1.OperationDnsKeyContext
	33,  // 28: google.cloud.dns.v1.Operation.zone_context:type_name -> google.cloud.dns.v1.OperationManagedZoneContext
	2,   // 29: google.cloud.dns.v1.OperationDnsKeyContext.new_value:type_name -> google.cloud.dns.v1.DnsKey
	2,   // 30: google.cloud.dns.v1.OperationDnsKeyContext.old_value:type_name -> google.cloud.dns.v1.DnsKey
	16,  // 31: google.cloud.dns.v1.OperationManagedZoneContext.new_value:type_name -> google.cloud.dns.v1.ManagedZone
	16,  // 32: google.cloud.dns.v1.OperationManagedZoneContext.old_value:type_name -> google.cloud.dns.v1.ManagedZone
	37,  // 33: google.cloud.dns.v1.PoliciesListResponse.policies:type_name -> google.cloud.dns.v1.Policy
	37,  // 34: google.cloud.dns.v1.PoliciesPatchResponse.policy:type_name -> google.cloud.dns.v1.Policy
	37,  // 35: google.cloud.dns.v1.PoliciesUpdateResponse.policy:type_name -> google.cloud.dns.v1.Policy
	38,  // 36: google.cloud.dns.v1.Policy.alternative_name_server_config:type_name -> google.cloud.dns.v1.PolicyAlternativeNameServerConfig
	40,  // 37: google.cloud.dns.v1.Policy.dns64_config:type_name -> google.cloud.dns.v1.PolicyDns64Config
	42,  // 38: google.cloud.dns.v1.Policy.networks:type_name -> google.cloud.dns.v1.PolicyNetwork
	39,  // 39: google.cloud.dns.v1.PolicyAlternativeNameServerConfig.target_name_servers:type_name -> google.cloud.dns.v1.PolicyAlternativeNameServerConfigTargetNameServer
	41,  // 40: google.cloud.dns.v1.PolicyDns64Config.scope:type_name -> google.cloud.dns.v1.PolicyDns64ConfigScope
	44,  // 41: google.cloud.dns.v1.Project.quota:type_name -> google.cloud.dns.v1.Quota
	4,   // 42: google.cloud.dns.v1.Quota.whitelisted_key_specs:type_name -> google.cloud.dns.v1.DnsKeySpec
	46,  // 43: google.cloud.dns.v1.RRSetRoutingPolicy.geo:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicy
	50,  // 44: google.cloud.dns.v1.RRSetRoutingPolicy.primary_backup:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyPrimaryBackupPolicy
	51,  // 45: google.cloud.dns.v1.RRSetRoutingPolicy.wrr:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicy
	47,  // 46: google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicy.items:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicyGeoPolicyItem
	48,  // 47: google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicyGeoPolicyItem.health_checked_targets:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyHealthCheckTargets
	49,  // 48: google.cloud.dns.v1.RRSetRoutingPolicyHealthCheckTargets.internal_load_balancers:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyLoadBalancerTarget
	46,  // 49: google.cloud.dns.v1.RRSetRoutingPolicyPrimaryBackupPolicy.backup_geo_targets:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyGeoPolicy
	48,  // 50: google.cloud.dns.v1.RRSetRoutingPolicyPrimaryBackupPolicy.primary_targets:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyHealthCheckTargets
	52,  // 51: google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicy.items:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicyWrrPolicyItem
	48,  // 52: google.cloud.dns.v1.RRSetRoutingPolicyWrrPolicyWrrPolicyItem.health_checked_targets:type_name -> google.cloud.dns.v1.RRSetRoutingPolicyHealthCheckTargets
	45,  // 53: google.cloud.dns.v1.ResourceRecordSet.routing_policy:type_name -> google.cloud.dns.v1.RRSetRoutingPolicy
	53,  // 54: google.cloud.dns.v1.ResourceRecordSetsListResponse.rrsets:type_name -> google.cloud.dns.v1.ResourceRecordSet
	59,  // 55: google.cloud.dns.v1.ResponsePoliciesListResponse.response_policies:type_name -> google.cloud.dns.v1.ResponsePolicy
	59,  // 56: google.cloud.dns.v1.ResponsePoliciesPatchResponse.response_policy:type_name -> google.cloud.dns.v1.ResponsePolicy
	59,  // 57: google.cloud.dns.v1.ResponsePoliciesUpdateResponse.response_policy:type_name -> google.cloud.dns.v1.ResponsePolicy
	60,  // 58: google.cloud.dns.v1.ResponsePolicy.gke_clusters:type_name -> google.cloud.dns.v1.ResponsePolicyGKECluster
	105, // 59: google.cloud.dns.v1.ResponsePolicy.labels:type_name -> google.cloud.dns.v1.ResponsePolicy.LabelsEntry
	61,  // 60: google.cloud.dns.v1.ResponsePolicy.networks:type_name -> google.cloud.dns.v1.ResponsePolicyNetwork
	63,  // 61: google.cloud.dns.v1.ResponsePolicyRule.local_data:type_name -> google.cloud.dns.v1.ResponsePolicyRuleLocalData
	53,  // 62: google.cloud.dns.v1.ResponsePolicyRuleLocalData.local_datas:type_name -> google.cloud.dns.v1.ResourceRecordSet
	62,  // 63: google.cloud.dns.v1.ResponsePolicyRulesListResponse.response_policy_rules:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	62,  // 64: google.cloud.dns.v1.ResponsePolicyRulesPatchResponse.response_policy_rule:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	62,  // 65: google.cloud.dns.v1.ResponsePolicyRulesUpdateResponse.response_policy_rule:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	0,   // 66: google.cloud.dns.v1.CreateChangeRequest.change:type_name -> google.cloud.dns.v1.Change
	16,  // 67: google.cloud.dns.v1.CreateManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1.ManagedZone
	16,  // 68: google.cloud.dns.v1.PatchManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1.ManagedZone
	16,  // 69: google.cloud.dns.v1.UpdateManagedZoneRequest.managed_zone:type_name -> google.cloud.dns.v1.ManagedZone
	37,  // 70: google.cloud.dns.v1.CreatePolicyRequest.policy:type_name -> google.cloud.dns.v1.Policy
	37,  // 71: google.cloud.dns.v1.PatchPolicyRequest.policy:type_name -> google.cloud.dns.v1.Policy
	37,  // 72: google.cloud.dns.v1.UpdatePolicyRequest.policy:type_name -> google.cloud.dns.v1.Policy
	53,  // 73: google.cloud.dns.v1.CreateResourceRecordSetRequest.resource_record_set:type_name -> google.cloud.dns.v1.ResourceRecordSet
	53,  // 74: google.cloud.dns.v1.PatchResourceRecordSetRequest.resource_record_set:type_name -> google.cloud.dns.v1.ResourceRecordSet
	59,  // 75: google.cloud.dns.v1.CreateResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1.ResponsePolicy
	59,  // 76: google.cloud.dns.v1.PatchResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1.ResponsePolicy
	59,  // 77: google.cloud.dns.v1.UpdateResponsePolicyRequest.response_policy:type_name -> google.cloud.dns.v1.ResponsePolicy
	62,  // 78: google.cloud.dns.v1.CreateResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	62,  // 79: google.cloud.dns.v1.PatchResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	62,  // 80: google.cloud.dns.v1.UpdateResponsePolicyRuleRequest.response_policy_rule:type_name -> google.cloud.dns.v1.ResponsePolicyRule
	67,  // 81: google.cloud.dns.v1.ChangesServer.CreateChange:input_type -> google.cloud.dns.v1.CreateChangeRequest
	68,  // 82: google.cloud.dns.v1.ChangesServer.GetChange:input_type -> google.cloud.dns.v1.GetChangeRequest
	69,  // 83: google.cloud.dns.v1.ChangesServer.ListChanges:input_type -> google.cloud.dns.v1.ListChangesRequest
	70,  // 84: google.cloud.dns.v1.DnsKeysServer.GetDnsKey:input_type -> google.cloud.dns.v1.GetDnsKeyRequest
	71,  // 85: google.cloud.dns.v1.DnsKeysServer.ListDnsKeys:input_type -> google.cloud.dns.v1.ListDnsKeysRequest
	72,  // 86: google.cloud.dns.v1.ManagedZoneOperationsServer.GetManagedZoneOperation:input_type -> google.cloud.dns.v1.GetManagedZoneOperationRequest
	73,  // 87: google.cloud.dns.v1.ManagedZoneOperationsServer.ListManagedZoneOperations:input_type -> google.cloud.dns.v1.ListManagedZoneOperationsRequest
	74,  // 88: google.cloud.dns.v1.ManagedZonesServer.CreateManagedZone:input_type -> google.cloud.dns.v1.CreateManagedZoneRequest
	75,  // 89: google.cloud.dns.v1.ManagedZonesServer.DeleteManagedZone:input_type -> google.cloud.dns.v1.DeleteManagedZoneRequest
	76,  // 90: google.cloud.dns.v1.ManagedZonesServer.GetManagedZone:input_type -> google.cloud.dns.v1.GetManagedZoneRequest
	77,  // 91: google.cloud.dns.v1.ManagedZonesServer.ListManagedZones:input_type -> google.cloud.dns.v1.ListManagedZonesRequest
	78,  // 92: google.cloud.dns.v1.ManagedZonesServer.PatchManagedZone:input_type -> google.cloud.dns.v1.PatchManagedZoneRequest
	79,  // 93: google.cloud.dns.v1.ManagedZonesServer.UpdateManagedZone:input_type -> google.cloud.dns.v1.UpdateManagedZoneRequest
	80,  // 94: google.cloud.dns.v1.PoliciesServer.CreatePolicy:input_type -> google.cloud.dns.v1.CreatePolicyRequest
	81,  // 95: google.cloud.dns.v1.PoliciesServer.DeletePolicy:input_type -> google.cloud.dns.v1.DeletePolicyRequest
	82,  // 96: google.cloud.dns.v1.PoliciesServer.GetPolicy:input_type -> google.cloud.dns.v1.GetPolicyRequest
	83,  // 97: google.cloud.dns.v1.PoliciesServer.ListPolicies:input_type -> google.cloud.dns.v1.ListPoliciesRequest
	84,  // 98: google.cloud.dns.v1.PoliciesServer.PatchPolicy:input_type -> google.cloud.dns.v1.PatchPolicyRequest
	85,  // 99: google.cloud.dns.v1.PoliciesServer.UpdatePolicy:input_type -> google.cloud.dns.v1.UpdatePolicyRequest
	86,  // 100: google.cloud.dns.v1.ProjectsServer.GetProject:input_type -> google.cloud.dns.v1.GetProjectRequest
	87,  // 101: google.cloud.dns.v1.ResourceRecordSetsServer.CreateResourceRecordSet:input_type -> google.cloud.dns.v1.CreateResourceRecordSetRequest
	88,  // 102: google.cloud.dns.v1.ResourceRecordSetsServer.DeleteResourceRecordSet:input_type -> google.cloud.dns.v1.DeleteResourceRecordSetRequest
	89,  // 103: google.cloud.dns.v1.ResourceRecordSetsServer.GetResourceRecordSet:input_type -> google.cloud.dns.v1.GetResourceRecordSetRequest
	90,  // 104: google.cloud.dns.v1.ResourceRecordSetsServer.ListResourceRecordSets:input_type -> google.cloud.dns.v1.ListResourceRecordSetsRequest
	91,  // 105: google.cloud.dns.v1.ResourceRecordSetsServer.PatchResourceRecordSet:input_type -> google.cloud.dns.v1.PatchResourceRecordSetRequest
	92,  // 106: google.cloud.dns.v1.ResponsePoliciesServer.CreateResponsePolicy:input_type -> google.cloud.dns.v1.CreateResponsePolicyRequest
	93,  // 107: google.cloud.dns.v1.ResponsePoliciesServer.DeleteResponsePolicy:input_type -> google.cloud.dns.v1.DeleteResponsePolicyRequest
	94,  // 108: google.cloud.dns.v1.ResponsePoliciesServer.GetResponsePolicy:input_type -> google.cloud.dns.v1.GetResponsePolicyRequest
	95,  // 109: google.cloud.dns.v1.ResponsePoliciesServer.ListResponsePolicies:input_type -> google.cloud.dns.v1.ListResponsePoliciesRequest
	96,  // 110: google.cloud.dns.v1.ResponsePoliciesServer.PatchResponsePolicy:input_type -> google.cloud.dns.v1.PatchResponsePolicyRequest
	97,  // 111: google.cloud.dns.v1.ResponsePoliciesServer.UpdateResponsePolicy:input_type -> google.cloud.dns.v1.UpdateResponsePolicyRequest
	98,  // 112: google.cloud.dns.v1.ResponsePolicyRulesServer.CreateResponsePolicyRule:input_type -> google.cloud.dns.v1.CreateResponsePolicyRuleRequest
	99,  // 113: google.cloud.dns.v1.ResponsePolicyRulesServer.DeleteResponsePolicyRule:input_type -> google.cloud.dns.v1.DeleteResponsePolicyRuleRequest
	100, // 114: google.cloud.dns.v1.ResponsePolicyRulesServer.GetResponsePolicyRule:input_type -> google.cloud.dns.v1.GetResponsePolicyRuleRequest
	101, // 115: google.cloud.dns.v1.ResponsePolicyRulesServer.ListResponsePolicyRules:input_type -> google.cloud.dns.v1.ListResponsePolicyRulesRequest
	102, // 116: google.cloud.dns.v1.ResponsePolicyRulesServer.PatchResponsePolicyRule:input_type -> google.cloud.dns.v1.PatchResponsePolicyRuleRequest
	103, // 117: google.cloud.dns.v1.ResponsePolicyRulesServer.UpdateResponsePolicyRule:input_type -> google.cloud.dns.v1.UpdateResponsePolicyRuleRequest
	0,   // 118: google.cloud.dns.v1.ChangesServer.CreateChange:output_type -> google.cloud.dns.v1.Change
	0,   // 119: google.cloud.dns.v1.ChangesServer.GetChange:output_type -> google.cloud.dns.v1.Change
	1,   // 120: google.cloud.dns.v1.ChangesServer.ListChanges:output_type -> google.cloud.dns.v1.ChangesListResponse
	2,   // 121: google.cloud.dns.v1.DnsKeysServer.GetDnsKey:output_type -> google.cloud.dns.v1.DnsKey
	5,   // 122: google.cloud.dns.v1.DnsKeysServer.ListDnsKeys:output_type -> google.cloud.dns.v1.DnsKeysListResponse
	31,  // 123: google.cloud.dns.v1.ManagedZoneOperationsServer.GetManagedZoneOperation:output_type -> google.cloud.dns.v1.Operation
	21,  // 124: google.cloud.dns.v1.ManagedZoneOperationsServer.ListManagedZoneOperations:output_type -> google.cloud.dns.v1.ManagedZoneOperationsListResponse
	16,  // 125: google.cloud.dns.v1.ManagedZonesServer.CreateManagedZone:output_type -> google.cloud.dns.v1.ManagedZone
	106, // 126: google.cloud.dns.v1.ManagedZonesServer.DeleteManagedZone:output_type -> google.protobuf.Empty
	16,  // 127: google.cloud.dns.v1.ManagedZonesServer.GetManagedZone:output_type -> google.cloud.dns.v1.ManagedZone
	30,  // 128: google.cloud.dns.v1.ManagedZonesServer.ListManagedZones:output_type -> google.cloud.dns.v1.ManagedZonesListResponse
	31,  // 129: google.cloud.dns.v1.ManagedZonesServer.PatchManagedZone:output_type -> google.cloud.dns.v1.Operation
	31,  // 130: google.cloud.dns.v1.ManagedZonesServer.UpdateManagedZone:output_type -> google.cloud.dns.v1.Operation
	37,  // 131: google.cloud.dns.v1.PoliciesServer.CreatePolicy:output_type -> google.cloud.dns.v1.Policy
	106, // 132: google.cloud.dns.v1.PoliciesServer.DeletePolicy:output_type -> google.protobuf.Empty
	37,  // 133: google.cloud.dns.v1.PoliciesServer.GetPolicy:output_type -> google.cloud.dns.v1.Policy
	34,  // 134: google.cloud.dns.v1.PoliciesServer.ListPolicies:output_type -> google.cloud.dns.v1.PoliciesListResponse
	35,  // 135: google.cloud.dns.v1.PoliciesServer.PatchPolicy:output_type -> google.cloud.dns.v1.PoliciesPatchResponse
	36,  // 136: google.cloud.dns.v1.PoliciesServer.UpdatePolicy:output_type -> google.cloud.dns.v1.PoliciesUpdateResponse
	43,  // 137: google.cloud.dns.v1.ProjectsServer.GetProject:output_type -> google.cloud.dns.v1.Project
	53,  // 138: google.cloud.dns.v1.ResourceRecordSetsServer.CreateResourceRecordSet:output_type -> google.cloud.dns.v1.ResourceRecordSet
	54,  // 139: google.cloud.dns.v1.ResourceRecordSetsServer.DeleteResourceRecordSet:output_type -> google.cloud.dns.v1.ResourceRecordSetsDeleteResponse
	53,  // 140: google.cloud.dns.v1.ResourceRecordSetsServer.GetResourceRecordSet:output_type -> google.cloud.dns.v1.ResourceRecordSet
	55,  // 141: google.cloud.dns.v1.ResourceRecordSetsServer.ListResourceRecordSets:output_type -> google.cloud.dns.v1.ResourceRecordSetsListResponse
	53,  // 142: google.cloud.dns.v1.ResourceRecordSetsServer.PatchResourceRecordSet:output_type -> google.cloud.dns.v1.ResourceRecordSet
	59,  // 143: google.cloud.dns.v1.ResponsePoliciesServer.CreateResponsePolicy:output_type -> google.cloud.dns.v1.ResponsePolicy
	106, // 144: google.cloud.dns.v1.ResponsePoliciesServer.DeleteResponsePolicy:output_type -> google.protobuf.Empty
	59,  // 145: google.cloud.dns.v1.ResponsePoliciesServer.GetResponsePolicy:output_type -> google.cloud.dns.v1.ResponsePolicy
	56,  // 146: google.cloud.dns.v1.ResponsePoliciesServer.ListResponsePolicies:output_type -> google.cloud.dns.v1.ResponsePoliciesListResponse
	57,  // 147: google.cloud.dns.v1.ResponsePoliciesServer.PatchResponsePolicy:output_type -> google.cloud.dns.v1.ResponsePoliciesPatchResponse
	58,  // 148: google.cloud.dns.v1.ResponsePoliciesServer.UpdateResponsePolicy:output_type -> google.cloud.dns.v1.ResponsePoliciesUpdateResponse
	62,  // 149: google.cloud.dns.v1.ResponsePolicyRulesServer.CreateResponsePolicyRule:output_type -> google.cloud.dns.v1.ResponsePolicyRule
	106, // 150: google.cloud.dns.v1.ResponsePolicyRulesServer.DeleteResponsePolicyRule:output_type -> google.protobuf.Empty
	62,  // 151: google.cloud.dns.v1.ResponsePolicyRulesServer.GetResponsePolicyRule:output_type -> google.cloud.dns.v1.ResponsePolicyRule
	64,  // 152: google.cloud.dns.v1.ResponsePolicyRulesServer.ListResponsePolicyRules:output_type -> google.cloud.dns.v1.ResponsePolicyRulesListResponse
	65,  // 153: google.cloud.dns.v1.ResponsePolicyRulesServer.PatchResponsePolicyRule:output_type -> google.cloud.dns.v1.ResponsePolicyRulesPatchResponse
	66,  // 154: google.cloud.dns.v1.ResponsePolicyRulesServer.UpdateResponsePolicyRule:output_type -> google.cloud.dns.v1.ResponsePolicyRulesUpdateResponse
	118, // [118:155] is the sub-list for method output_type
	81,  // [81:118] is the sub-list for method input_type
	81,  // [81:81] is the sub-list for extension type_name
	81,  // [81:81] is the sub-list for extension extendee
	0,   // [0:81] is the sub-list for field type_name
}

func init() { file_google_cloud_dns_v1_service_proto_init() }
func file_google_cloud_dns_v1_service_proto_init() {
	if File_google_cloud_dns_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_dns_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeyDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsKeysListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1GetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1GetPolicyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1SetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneCloudLoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneDnsSecConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneForwardingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneForwardingConfigNameServerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneOperationsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePeeringConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePeeringConfigTargetNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfigGKECluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonePrivateVisibilityConfigNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneReverseLookupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneServiceDirectoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZoneServiceDirectoryConfigNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedZonesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationDnsKeyContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationManagedZoneContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoliciesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAlternativeNameServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyAlternativeNameServerConfigTargetNameServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDns64Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyDns64ConfigScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyGeoPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyGeoPolicyGeoPolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyHealthCheckTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyLoadBalancerTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyPrimaryBackupPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyWrrPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRSetRoutingPolicyWrrPolicyWrrPolicyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordSetsDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRecordSetsListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePoliciesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyGKECluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRuleLocalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesPatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePolicyRulesUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDnsKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagedZoneOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListManagedZoneOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListManagedZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateManagedZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourceRecordSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResourceRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponsePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponsePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponsePolicyRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_dns_v1_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponsePolicyRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_dns_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   106,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_google_cloud_dns_v1_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_dns_v1_service_proto_depIdxs,
		MessageInfos:      file_google_cloud_dns_v1_service_proto_msgTypes,
	}.Build()
	File_google_cloud_dns_v1_service_proto = out.File
	file_google_cloud_dns_v1_service_proto_rawDesc = nil
	file_google_cloud_dns_v1_service_proto_goTypes = nil
	file_google_cloud_dns_v1_service_proto_depIdxs = nil
}
