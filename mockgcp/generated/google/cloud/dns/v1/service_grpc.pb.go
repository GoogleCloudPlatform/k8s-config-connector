// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: google/cloud/dns/v1/service.proto

package dnspb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChangesServerClient is the client API for ChangesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangesServerClient interface {
	// Atomically updates the ResourceRecordSet collection.
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error)
	// Fetches the representation of an existing Change.
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error)
	// Enumerates Changes to a ResourceRecordSet collection.
	ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ChangesListResponse, error)
}

type changesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewChangesServerClient(cc grpc.ClientConnInterface) ChangesServerClient {
	return &changesServerClient{cc}
}

func (c *changesServerClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ChangesServer/CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesServerClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*Change, error) {
	out := new(Change)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ChangesServer/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changesServerClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ChangesListResponse, error) {
	out := new(ChangesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ChangesServer/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangesServerServer is the server API for ChangesServer service.
// All implementations must embed UnimplementedChangesServerServer
// for forward compatibility
type ChangesServerServer interface {
	// Atomically updates the ResourceRecordSet collection.
	CreateChange(context.Context, *CreateChangeRequest) (*Change, error)
	// Fetches the representation of an existing Change.
	GetChange(context.Context, *GetChangeRequest) (*Change, error)
	// Enumerates Changes to a ResourceRecordSet collection.
	ListChanges(context.Context, *ListChangesRequest) (*ChangesListResponse, error)
	mustEmbedUnimplementedChangesServerServer()
}

// UnimplementedChangesServerServer must be embedded to have forward compatible implementations.
type UnimplementedChangesServerServer struct {
}

func (UnimplementedChangesServerServer) CreateChange(context.Context, *CreateChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChange not implemented")
}
func (UnimplementedChangesServerServer) GetChange(context.Context, *GetChangeRequest) (*Change, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (UnimplementedChangesServerServer) ListChanges(context.Context, *ListChangesRequest) (*ChangesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedChangesServerServer) mustEmbedUnimplementedChangesServerServer() {}

// UnsafeChangesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangesServerServer will
// result in compilation errors.
type UnsafeChangesServerServer interface {
	mustEmbedUnimplementedChangesServerServer()
}

func RegisterChangesServerServer(s grpc.ServiceRegistrar, srv ChangesServerServer) {
	s.RegisterService(&ChangesServer_ServiceDesc, srv)
}

func _ChangesServer_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServerServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ChangesServer/CreateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServerServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesServer_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServerServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ChangesServer/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServerServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangesServer_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangesServerServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ChangesServer/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangesServerServer).ListChanges(ctx, req.(*ListChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangesServer_ServiceDesc is the grpc.ServiceDesc for ChangesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ChangesServer",
	HandlerType: (*ChangesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChange",
			Handler:    _ChangesServer_CreateChange_Handler,
		},
		{
			MethodName: "GetChange",
			Handler:    _ChangesServer_GetChange_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _ChangesServer_ListChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// DnsKeysServerClient is the client API for DnsKeysServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DnsKeysServerClient interface {
	// Fetches the representation of an existing DnsKey.
	GetDnsKey(ctx context.Context, in *GetDnsKeyRequest, opts ...grpc.CallOption) (*DnsKey, error)
	// Enumerates DnsKeys to a ResourceRecordSet collection.
	ListDnsKeys(ctx context.Context, in *ListDnsKeysRequest, opts ...grpc.CallOption) (*DnsKeysListResponse, error)
}

type dnsKeysServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsKeysServerClient(cc grpc.ClientConnInterface) DnsKeysServerClient {
	return &dnsKeysServerClient{cc}
}

func (c *dnsKeysServerClient) GetDnsKey(ctx context.Context, in *GetDnsKeyRequest, opts ...grpc.CallOption) (*DnsKey, error) {
	out := new(DnsKey)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.DnsKeysServer/GetDnsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsKeysServerClient) ListDnsKeys(ctx context.Context, in *ListDnsKeysRequest, opts ...grpc.CallOption) (*DnsKeysListResponse, error) {
	out := new(DnsKeysListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.DnsKeysServer/ListDnsKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsKeysServerServer is the server API for DnsKeysServer service.
// All implementations must embed UnimplementedDnsKeysServerServer
// for forward compatibility
type DnsKeysServerServer interface {
	// Fetches the representation of an existing DnsKey.
	GetDnsKey(context.Context, *GetDnsKeyRequest) (*DnsKey, error)
	// Enumerates DnsKeys to a ResourceRecordSet collection.
	ListDnsKeys(context.Context, *ListDnsKeysRequest) (*DnsKeysListResponse, error)
	mustEmbedUnimplementedDnsKeysServerServer()
}

// UnimplementedDnsKeysServerServer must be embedded to have forward compatible implementations.
type UnimplementedDnsKeysServerServer struct {
}

func (UnimplementedDnsKeysServerServer) GetDnsKey(context.Context, *GetDnsKeyRequest) (*DnsKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDnsKey not implemented")
}
func (UnimplementedDnsKeysServerServer) ListDnsKeys(context.Context, *ListDnsKeysRequest) (*DnsKeysListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDnsKeys not implemented")
}
func (UnimplementedDnsKeysServerServer) mustEmbedUnimplementedDnsKeysServerServer() {}

// UnsafeDnsKeysServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DnsKeysServerServer will
// result in compilation errors.
type UnsafeDnsKeysServerServer interface {
	mustEmbedUnimplementedDnsKeysServerServer()
}

func RegisterDnsKeysServerServer(s grpc.ServiceRegistrar, srv DnsKeysServerServer) {
	s.RegisterService(&DnsKeysServer_ServiceDesc, srv)
}

func _DnsKeysServer_GetDnsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDnsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsKeysServerServer).GetDnsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.DnsKeysServer/GetDnsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsKeysServerServer).GetDnsKey(ctx, req.(*GetDnsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsKeysServer_ListDnsKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDnsKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsKeysServerServer).ListDnsKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.DnsKeysServer/ListDnsKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsKeysServerServer).ListDnsKeys(ctx, req.(*ListDnsKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DnsKeysServer_ServiceDesc is the grpc.ServiceDesc for DnsKeysServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DnsKeysServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.DnsKeysServer",
	HandlerType: (*DnsKeysServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDnsKey",
			Handler:    _DnsKeysServer_GetDnsKey_Handler,
		},
		{
			MethodName: "ListDnsKeys",
			Handler:    _DnsKeysServer_ListDnsKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ManagedZoneOperationsServerClient is the client API for ManagedZoneOperationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedZoneOperationsServerClient interface {
	// Fetches the representation of an existing Operation.
	GetManagedZoneOperation(ctx context.Context, in *GetManagedZoneOperationRequest, opts ...grpc.CallOption) (*Operation, error)
	// Enumerates Operations for the given ManagedZone.
	ListManagedZoneOperations(ctx context.Context, in *ListManagedZoneOperationsRequest, opts ...grpc.CallOption) (*ManagedZoneOperationsListResponse, error)
}

type managedZoneOperationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedZoneOperationsServerClient(cc grpc.ClientConnInterface) ManagedZoneOperationsServerClient {
	return &managedZoneOperationsServerClient{cc}
}

func (c *managedZoneOperationsServerClient) GetManagedZoneOperation(ctx context.Context, in *GetManagedZoneOperationRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZoneOperationsServer/GetManagedZoneOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZoneOperationsServerClient) ListManagedZoneOperations(ctx context.Context, in *ListManagedZoneOperationsRequest, opts ...grpc.CallOption) (*ManagedZoneOperationsListResponse, error) {
	out := new(ManagedZoneOperationsListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZoneOperationsServer/ListManagedZoneOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedZoneOperationsServerServer is the server API for ManagedZoneOperationsServer service.
// All implementations must embed UnimplementedManagedZoneOperationsServerServer
// for forward compatibility
type ManagedZoneOperationsServerServer interface {
	// Fetches the representation of an existing Operation.
	GetManagedZoneOperation(context.Context, *GetManagedZoneOperationRequest) (*Operation, error)
	// Enumerates Operations for the given ManagedZone.
	ListManagedZoneOperations(context.Context, *ListManagedZoneOperationsRequest) (*ManagedZoneOperationsListResponse, error)
	mustEmbedUnimplementedManagedZoneOperationsServerServer()
}

// UnimplementedManagedZoneOperationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedManagedZoneOperationsServerServer struct {
}

func (UnimplementedManagedZoneOperationsServerServer) GetManagedZoneOperation(context.Context, *GetManagedZoneOperationRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedZoneOperation not implemented")
}
func (UnimplementedManagedZoneOperationsServerServer) ListManagedZoneOperations(context.Context, *ListManagedZoneOperationsRequest) (*ManagedZoneOperationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedZoneOperations not implemented")
}
func (UnimplementedManagedZoneOperationsServerServer) mustEmbedUnimplementedManagedZoneOperationsServerServer() {
}

// UnsafeManagedZoneOperationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedZoneOperationsServerServer will
// result in compilation errors.
type UnsafeManagedZoneOperationsServerServer interface {
	mustEmbedUnimplementedManagedZoneOperationsServerServer()
}

func RegisterManagedZoneOperationsServerServer(s grpc.ServiceRegistrar, srv ManagedZoneOperationsServerServer) {
	s.RegisterService(&ManagedZoneOperationsServer_ServiceDesc, srv)
}

func _ManagedZoneOperationsServer_GetManagedZoneOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedZoneOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZoneOperationsServerServer).GetManagedZoneOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZoneOperationsServer/GetManagedZoneOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZoneOperationsServerServer).GetManagedZoneOperation(ctx, req.(*GetManagedZoneOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZoneOperationsServer_ListManagedZoneOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedZoneOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZoneOperationsServerServer).ListManagedZoneOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZoneOperationsServer/ListManagedZoneOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZoneOperationsServerServer).ListManagedZoneOperations(ctx, req.(*ListManagedZoneOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedZoneOperationsServer_ServiceDesc is the grpc.ServiceDesc for ManagedZoneOperationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedZoneOperationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ManagedZoneOperationsServer",
	HandlerType: (*ManagedZoneOperationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManagedZoneOperation",
			Handler:    _ManagedZoneOperationsServer_GetManagedZoneOperation_Handler,
		},
		{
			MethodName: "ListManagedZoneOperations",
			Handler:    _ManagedZoneOperationsServer_ListManagedZoneOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ManagedZonesServerClient is the client API for ManagedZonesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedZonesServerClient interface {
	// Creates a new ManagedZone.
	CreateManagedZone(ctx context.Context, in *CreateManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error)
	// Deletes a previously created ManagedZone.
	DeleteManagedZone(ctx context.Context, in *DeleteManagedZoneRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Fetches the representation of an existing ManagedZone.
	GetManagedZone(ctx context.Context, in *GetManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error)
	// Enumerates ManagedZones that have been created but not yet deleted.
	ListManagedZones(ctx context.Context, in *ListManagedZonesRequest, opts ...grpc.CallOption) (*ManagedZonesListResponse, error)
	// Applies a partial update to an existing ManagedZone.
	PatchManagedZone(ctx context.Context, in *PatchManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error)
	// Updates an existing ManagedZone.
	UpdateManagedZone(ctx context.Context, in *UpdateManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error)
}

type managedZonesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedZonesServerClient(cc grpc.ClientConnInterface) ManagedZonesServerClient {
	return &managedZonesServerClient{cc}
}

func (c *managedZonesServerClient) CreateManagedZone(ctx context.Context, in *CreateManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error) {
	out := new(ManagedZone)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/CreateManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesServerClient) DeleteManagedZone(ctx context.Context, in *DeleteManagedZoneRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/DeleteManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesServerClient) GetManagedZone(ctx context.Context, in *GetManagedZoneRequest, opts ...grpc.CallOption) (*ManagedZone, error) {
	out := new(ManagedZone)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/GetManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesServerClient) ListManagedZones(ctx context.Context, in *ListManagedZonesRequest, opts ...grpc.CallOption) (*ManagedZonesListResponse, error) {
	out := new(ManagedZonesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/ListManagedZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesServerClient) PatchManagedZone(ctx context.Context, in *PatchManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/PatchManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedZonesServerClient) UpdateManagedZone(ctx context.Context, in *UpdateManagedZoneRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ManagedZonesServer/UpdateManagedZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedZonesServerServer is the server API for ManagedZonesServer service.
// All implementations must embed UnimplementedManagedZonesServerServer
// for forward compatibility
type ManagedZonesServerServer interface {
	// Creates a new ManagedZone.
	CreateManagedZone(context.Context, *CreateManagedZoneRequest) (*ManagedZone, error)
	// Deletes a previously created ManagedZone.
	DeleteManagedZone(context.Context, *DeleteManagedZoneRequest) (*empty.Empty, error)
	// Fetches the representation of an existing ManagedZone.
	GetManagedZone(context.Context, *GetManagedZoneRequest) (*ManagedZone, error)
	// Enumerates ManagedZones that have been created but not yet deleted.
	ListManagedZones(context.Context, *ListManagedZonesRequest) (*ManagedZonesListResponse, error)
	// Applies a partial update to an existing ManagedZone.
	PatchManagedZone(context.Context, *PatchManagedZoneRequest) (*Operation, error)
	// Updates an existing ManagedZone.
	UpdateManagedZone(context.Context, *UpdateManagedZoneRequest) (*Operation, error)
	mustEmbedUnimplementedManagedZonesServerServer()
}

// UnimplementedManagedZonesServerServer must be embedded to have forward compatible implementations.
type UnimplementedManagedZonesServerServer struct {
}

func (UnimplementedManagedZonesServerServer) CreateManagedZone(context.Context, *CreateManagedZoneRequest) (*ManagedZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManagedZone not implemented")
}
func (UnimplementedManagedZonesServerServer) DeleteManagedZone(context.Context, *DeleteManagedZoneRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManagedZone not implemented")
}
func (UnimplementedManagedZonesServerServer) GetManagedZone(context.Context, *GetManagedZoneRequest) (*ManagedZone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagedZone not implemented")
}
func (UnimplementedManagedZonesServerServer) ListManagedZones(context.Context, *ListManagedZonesRequest) (*ManagedZonesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagedZones not implemented")
}
func (UnimplementedManagedZonesServerServer) PatchManagedZone(context.Context, *PatchManagedZoneRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchManagedZone not implemented")
}
func (UnimplementedManagedZonesServerServer) UpdateManagedZone(context.Context, *UpdateManagedZoneRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManagedZone not implemented")
}
func (UnimplementedManagedZonesServerServer) mustEmbedUnimplementedManagedZonesServerServer() {}

// UnsafeManagedZonesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedZonesServerServer will
// result in compilation errors.
type UnsafeManagedZonesServerServer interface {
	mustEmbedUnimplementedManagedZonesServerServer()
}

func RegisterManagedZonesServerServer(s grpc.ServiceRegistrar, srv ManagedZonesServerServer) {
	s.RegisterService(&ManagedZonesServer_ServiceDesc, srv)
}

func _ManagedZonesServer_CreateManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).CreateManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/CreateManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).CreateManagedZone(ctx, req.(*CreateManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZonesServer_DeleteManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).DeleteManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/DeleteManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).DeleteManagedZone(ctx, req.(*DeleteManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZonesServer_GetManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).GetManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/GetManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).GetManagedZone(ctx, req.(*GetManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZonesServer_ListManagedZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagedZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).ListManagedZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/ListManagedZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).ListManagedZones(ctx, req.(*ListManagedZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZonesServer_PatchManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).PatchManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/PatchManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).PatchManagedZone(ctx, req.(*PatchManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedZonesServer_UpdateManagedZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagedZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedZonesServerServer).UpdateManagedZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ManagedZonesServer/UpdateManagedZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedZonesServerServer).UpdateManagedZone(ctx, req.(*UpdateManagedZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagedZonesServer_ServiceDesc is the grpc.ServiceDesc for ManagedZonesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagedZonesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ManagedZonesServer",
	HandlerType: (*ManagedZonesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateManagedZone",
			Handler:    _ManagedZonesServer_CreateManagedZone_Handler,
		},
		{
			MethodName: "DeleteManagedZone",
			Handler:    _ManagedZonesServer_DeleteManagedZone_Handler,
		},
		{
			MethodName: "GetManagedZone",
			Handler:    _ManagedZonesServer_GetManagedZone_Handler,
		},
		{
			MethodName: "ListManagedZones",
			Handler:    _ManagedZonesServer_ListManagedZones_Handler,
		},
		{
			MethodName: "PatchManagedZone",
			Handler:    _ManagedZonesServer_PatchManagedZone_Handler,
		},
		{
			MethodName: "UpdateManagedZone",
			Handler:    _ManagedZonesServer_UpdateManagedZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// PoliciesServerClient is the client API for PoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliciesServerClient interface {
	// Creates a new Policy.
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	// Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Fetches the representation of an existing Policy.
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	// Enumerates all Policies associated with a project.
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*PoliciesListResponse, error)
	// Applies a partial update to an existing Policy.
	PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*PoliciesPatchResponse, error)
	// Updates an existing Policy.
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*PoliciesUpdateResponse, error)
}

type policiesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesServerClient(cc grpc.ClientConnInterface) PoliciesServerClient {
	return &policiesServerClient{cc}
}

func (c *policiesServerClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*PoliciesListResponse, error) {
	out := new(PoliciesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) PatchPolicy(ctx context.Context, in *PatchPolicyRequest, opts ...grpc.CallOption) (*PoliciesPatchResponse, error) {
	out := new(PoliciesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/PatchPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServerClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*PoliciesUpdateResponse, error) {
	out := new(PoliciesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.PoliciesServer/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServerServer is the server API for PoliciesServer service.
// All implementations must embed UnimplementedPoliciesServerServer
// for forward compatibility
type PoliciesServerServer interface {
	// Creates a new Policy.
	CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error)
	// Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
	DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error)
	// Fetches the representation of an existing Policy.
	GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error)
	// Enumerates all Policies associated with a project.
	ListPolicies(context.Context, *ListPoliciesRequest) (*PoliciesListResponse, error)
	// Applies a partial update to an existing Policy.
	PatchPolicy(context.Context, *PatchPolicyRequest) (*PoliciesPatchResponse, error)
	// Updates an existing Policy.
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*PoliciesUpdateResponse, error)
	mustEmbedUnimplementedPoliciesServerServer()
}

// UnimplementedPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedPoliciesServerServer struct {
}

func (UnimplementedPoliciesServerServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPoliciesServerServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPoliciesServerServer) GetPolicy(context.Context, *GetPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPoliciesServerServer) ListPolicies(context.Context, *ListPoliciesRequest) (*PoliciesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicies not implemented")
}
func (UnimplementedPoliciesServerServer) PatchPolicy(context.Context, *PatchPolicyRequest) (*PoliciesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchPolicy not implemented")
}
func (UnimplementedPoliciesServerServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*PoliciesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPoliciesServerServer) mustEmbedUnimplementedPoliciesServerServer() {}

// UnsafePoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliciesServerServer will
// result in compilation errors.
type UnsafePoliciesServerServer interface {
	mustEmbedUnimplementedPoliciesServerServer()
}

func RegisterPoliciesServerServer(s grpc.ServiceRegistrar, srv PoliciesServerServer) {
	s.RegisterService(&PoliciesServer_ServiceDesc, srv)
}

func _PoliciesServer_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_PatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).PatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/PatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).PatchPolicy(ctx, req.(*PatchPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesServer_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServerServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.PoliciesServer/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServerServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoliciesServer_ServiceDesc is the grpc.ServiceDesc for PoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.PoliciesServer",
	HandlerType: (*PoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _PoliciesServer_CreatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PoliciesServer_DeletePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _PoliciesServer_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _PoliciesServer_ListPolicies_Handler,
		},
		{
			MethodName: "PatchPolicy",
			Handler:    _PoliciesServer_PatchPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _PoliciesServer_UpdatePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
	// Fetches the representation of an existing Project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

func (c *projectsServerClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ProjectsServer/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	// Fetches the representation of an existing Project.
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

func _ProjectsServer_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ProjectsServer/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ProjectsServer_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ResourceRecordSetsServerClient is the client API for ResourceRecordSetsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceRecordSetsServerClient interface {
	// Creates a new ResourceRecordSet.
	CreateResourceRecordSet(ctx context.Context, in *CreateResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
	// Deletes a previously created ResourceRecordSet.
	DeleteResourceRecordSet(ctx context.Context, in *DeleteResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSetsDeleteResponse, error)
	// Fetches the representation of an existing ResourceRecordSet.
	GetResourceRecordSet(ctx context.Context, in *GetResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
	// Enumerates ResourceRecordSets that you have created but not yet deleted.
	ListResourceRecordSets(ctx context.Context, in *ListResourceRecordSetsRequest, opts ...grpc.CallOption) (*ResourceRecordSetsListResponse, error)
	// Applies a partial update to an existing ResourceRecordSet.
	PatchResourceRecordSet(ctx context.Context, in *PatchResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error)
}

type resourceRecordSetsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceRecordSetsServerClient(cc grpc.ClientConnInterface) ResourceRecordSetsServerClient {
	return &resourceRecordSetsServerClient{cc}
}

func (c *resourceRecordSetsServerClient) CreateResourceRecordSet(ctx context.Context, in *CreateResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResourceRecordSetsServer/CreateResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsServerClient) DeleteResourceRecordSet(ctx context.Context, in *DeleteResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSetsDeleteResponse, error) {
	out := new(ResourceRecordSetsDeleteResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResourceRecordSetsServer/DeleteResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsServerClient) GetResourceRecordSet(ctx context.Context, in *GetResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResourceRecordSetsServer/GetResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsServerClient) ListResourceRecordSets(ctx context.Context, in *ListResourceRecordSetsRequest, opts ...grpc.CallOption) (*ResourceRecordSetsListResponse, error) {
	out := new(ResourceRecordSetsListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResourceRecordSetsServer/ListResourceRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceRecordSetsServerClient) PatchResourceRecordSet(ctx context.Context, in *PatchResourceRecordSetRequest, opts ...grpc.CallOption) (*ResourceRecordSet, error) {
	out := new(ResourceRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResourceRecordSetsServer/PatchResourceRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceRecordSetsServerServer is the server API for ResourceRecordSetsServer service.
// All implementations must embed UnimplementedResourceRecordSetsServerServer
// for forward compatibility
type ResourceRecordSetsServerServer interface {
	// Creates a new ResourceRecordSet.
	CreateResourceRecordSet(context.Context, *CreateResourceRecordSetRequest) (*ResourceRecordSet, error)
	// Deletes a previously created ResourceRecordSet.
	DeleteResourceRecordSet(context.Context, *DeleteResourceRecordSetRequest) (*ResourceRecordSetsDeleteResponse, error)
	// Fetches the representation of an existing ResourceRecordSet.
	GetResourceRecordSet(context.Context, *GetResourceRecordSetRequest) (*ResourceRecordSet, error)
	// Enumerates ResourceRecordSets that you have created but not yet deleted.
	ListResourceRecordSets(context.Context, *ListResourceRecordSetsRequest) (*ResourceRecordSetsListResponse, error)
	// Applies a partial update to an existing ResourceRecordSet.
	PatchResourceRecordSet(context.Context, *PatchResourceRecordSetRequest) (*ResourceRecordSet, error)
	mustEmbedUnimplementedResourceRecordSetsServerServer()
}

// UnimplementedResourceRecordSetsServerServer must be embedded to have forward compatible implementations.
type UnimplementedResourceRecordSetsServerServer struct {
}

func (UnimplementedResourceRecordSetsServerServer) CreateResourceRecordSet(context.Context, *CreateResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServerServer) DeleteResourceRecordSet(context.Context, *DeleteResourceRecordSetRequest) (*ResourceRecordSetsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServerServer) GetResourceRecordSet(context.Context, *GetResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServerServer) ListResourceRecordSets(context.Context, *ListResourceRecordSetsRequest) (*ResourceRecordSetsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceRecordSets not implemented")
}
func (UnimplementedResourceRecordSetsServerServer) PatchResourceRecordSet(context.Context, *PatchResourceRecordSetRequest) (*ResourceRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResourceRecordSet not implemented")
}
func (UnimplementedResourceRecordSetsServerServer) mustEmbedUnimplementedResourceRecordSetsServerServer() {
}

// UnsafeResourceRecordSetsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceRecordSetsServerServer will
// result in compilation errors.
type UnsafeResourceRecordSetsServerServer interface {
	mustEmbedUnimplementedResourceRecordSetsServerServer()
}

func RegisterResourceRecordSetsServerServer(s grpc.ServiceRegistrar, srv ResourceRecordSetsServerServer) {
	s.RegisterService(&ResourceRecordSetsServer_ServiceDesc, srv)
}

func _ResourceRecordSetsServer_CreateResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServerServer).CreateResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResourceRecordSetsServer/CreateResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServerServer).CreateResourceRecordSet(ctx, req.(*CreateResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSetsServer_DeleteResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServerServer).DeleteResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResourceRecordSetsServer/DeleteResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServerServer).DeleteResourceRecordSet(ctx, req.(*DeleteResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSetsServer_GetResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServerServer).GetResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResourceRecordSetsServer/GetResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServerServer).GetResourceRecordSet(ctx, req.(*GetResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSetsServer_ListResourceRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServerServer).ListResourceRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResourceRecordSetsServer/ListResourceRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServerServer).ListResourceRecordSets(ctx, req.(*ListResourceRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceRecordSetsServer_PatchResourceRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResourceRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceRecordSetsServerServer).PatchResourceRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResourceRecordSetsServer/PatchResourceRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceRecordSetsServerServer).PatchResourceRecordSet(ctx, req.(*PatchResourceRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceRecordSetsServer_ServiceDesc is the grpc.ServiceDesc for ResourceRecordSetsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceRecordSetsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ResourceRecordSetsServer",
	HandlerType: (*ResourceRecordSetsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResourceRecordSet",
			Handler:    _ResourceRecordSetsServer_CreateResourceRecordSet_Handler,
		},
		{
			MethodName: "DeleteResourceRecordSet",
			Handler:    _ResourceRecordSetsServer_DeleteResourceRecordSet_Handler,
		},
		{
			MethodName: "GetResourceRecordSet",
			Handler:    _ResourceRecordSetsServer_GetResourceRecordSet_Handler,
		},
		{
			MethodName: "ListResourceRecordSets",
			Handler:    _ResourceRecordSetsServer_ListResourceRecordSets_Handler,
		},
		{
			MethodName: "PatchResourceRecordSet",
			Handler:    _ResourceRecordSetsServer_PatchResourceRecordSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ResponsePoliciesServerClient is the client API for ResponsePoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponsePoliciesServerClient interface {
	// Creates a new Response Policy
	CreateResponsePolicy(ctx context.Context, in *CreateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error)
	// Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
	DeleteResponsePolicy(ctx context.Context, in *DeleteResponsePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Fetches the representation of an existing Response Policy.
	GetResponsePolicy(ctx context.Context, in *GetResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error)
	// Enumerates all Response Policies associated with a project.
	ListResponsePolicies(ctx context.Context, in *ListResponsePoliciesRequest, opts ...grpc.CallOption) (*ResponsePoliciesListResponse, error)
	// Applies a partial update to an existing Response Policy.
	PatchResponsePolicy(ctx context.Context, in *PatchResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesPatchResponse, error)
	// Updates an existing Response Policy.
	UpdateResponsePolicy(ctx context.Context, in *UpdateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesUpdateResponse, error)
}

type responsePoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewResponsePoliciesServerClient(cc grpc.ClientConnInterface) ResponsePoliciesServerClient {
	return &responsePoliciesServerClient{cc}
}

func (c *responsePoliciesServerClient) CreateResponsePolicy(ctx context.Context, in *CreateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error) {
	out := new(ResponsePolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/CreateResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesServerClient) DeleteResponsePolicy(ctx context.Context, in *DeleteResponsePolicyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/DeleteResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesServerClient) GetResponsePolicy(ctx context.Context, in *GetResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePolicy, error) {
	out := new(ResponsePolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/GetResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesServerClient) ListResponsePolicies(ctx context.Context, in *ListResponsePoliciesRequest, opts ...grpc.CallOption) (*ResponsePoliciesListResponse, error) {
	out := new(ResponsePoliciesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/ListResponsePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesServerClient) PatchResponsePolicy(ctx context.Context, in *PatchResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesPatchResponse, error) {
	out := new(ResponsePoliciesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/PatchResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePoliciesServerClient) UpdateResponsePolicy(ctx context.Context, in *UpdateResponsePolicyRequest, opts ...grpc.CallOption) (*ResponsePoliciesUpdateResponse, error) {
	out := new(ResponsePoliciesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePoliciesServer/UpdateResponsePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponsePoliciesServerServer is the server API for ResponsePoliciesServer service.
// All implementations must embed UnimplementedResponsePoliciesServerServer
// for forward compatibility
type ResponsePoliciesServerServer interface {
	// Creates a new Response Policy
	CreateResponsePolicy(context.Context, *CreateResponsePolicyRequest) (*ResponsePolicy, error)
	// Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
	DeleteResponsePolicy(context.Context, *DeleteResponsePolicyRequest) (*empty.Empty, error)
	// Fetches the representation of an existing Response Policy.
	GetResponsePolicy(context.Context, *GetResponsePolicyRequest) (*ResponsePolicy, error)
	// Enumerates all Response Policies associated with a project.
	ListResponsePolicies(context.Context, *ListResponsePoliciesRequest) (*ResponsePoliciesListResponse, error)
	// Applies a partial update to an existing Response Policy.
	PatchResponsePolicy(context.Context, *PatchResponsePolicyRequest) (*ResponsePoliciesPatchResponse, error)
	// Updates an existing Response Policy.
	UpdateResponsePolicy(context.Context, *UpdateResponsePolicyRequest) (*ResponsePoliciesUpdateResponse, error)
	mustEmbedUnimplementedResponsePoliciesServerServer()
}

// UnimplementedResponsePoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedResponsePoliciesServerServer struct {
}

func (UnimplementedResponsePoliciesServerServer) CreateResponsePolicy(context.Context, *CreateResponsePolicyRequest) (*ResponsePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServerServer) DeleteResponsePolicy(context.Context, *DeleteResponsePolicyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServerServer) GetResponsePolicy(context.Context, *GetResponsePolicyRequest) (*ResponsePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServerServer) ListResponsePolicies(context.Context, *ListResponsePoliciesRequest) (*ResponsePoliciesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResponsePolicies not implemented")
}
func (UnimplementedResponsePoliciesServerServer) PatchResponsePolicy(context.Context, *PatchResponsePolicyRequest) (*ResponsePoliciesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServerServer) UpdateResponsePolicy(context.Context, *UpdateResponsePolicyRequest) (*ResponsePoliciesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponsePolicy not implemented")
}
func (UnimplementedResponsePoliciesServerServer) mustEmbedUnimplementedResponsePoliciesServerServer() {
}

// UnsafeResponsePoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponsePoliciesServerServer will
// result in compilation errors.
type UnsafeResponsePoliciesServerServer interface {
	mustEmbedUnimplementedResponsePoliciesServerServer()
}

func RegisterResponsePoliciesServerServer(s grpc.ServiceRegistrar, srv ResponsePoliciesServerServer) {
	s.RegisterService(&ResponsePoliciesServer_ServiceDesc, srv)
}

func _ResponsePoliciesServer_CreateResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).CreateResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/CreateResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).CreateResponsePolicy(ctx, req.(*CreateResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePoliciesServer_DeleteResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).DeleteResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/DeleteResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).DeleteResponsePolicy(ctx, req.(*DeleteResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePoliciesServer_GetResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).GetResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/GetResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).GetResponsePolicy(ctx, req.(*GetResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePoliciesServer_ListResponsePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResponsePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).ListResponsePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/ListResponsePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).ListResponsePolicies(ctx, req.(*ListResponsePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePoliciesServer_PatchResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).PatchResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/PatchResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).PatchResponsePolicy(ctx, req.(*PatchResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePoliciesServer_UpdateResponsePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponsePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePoliciesServerServer).UpdateResponsePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePoliciesServer/UpdateResponsePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePoliciesServerServer).UpdateResponsePolicy(ctx, req.(*UpdateResponsePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponsePoliciesServer_ServiceDesc is the grpc.ServiceDesc for ResponsePoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponsePoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ResponsePoliciesServer",
	HandlerType: (*ResponsePoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResponsePolicy",
			Handler:    _ResponsePoliciesServer_CreateResponsePolicy_Handler,
		},
		{
			MethodName: "DeleteResponsePolicy",
			Handler:    _ResponsePoliciesServer_DeleteResponsePolicy_Handler,
		},
		{
			MethodName: "GetResponsePolicy",
			Handler:    _ResponsePoliciesServer_GetResponsePolicy_Handler,
		},
		{
			MethodName: "ListResponsePolicies",
			Handler:    _ResponsePoliciesServer_ListResponsePolicies_Handler,
		},
		{
			MethodName: "PatchResponsePolicy",
			Handler:    _ResponsePoliciesServer_PatchResponsePolicy_Handler,
		},
		{
			MethodName: "UpdateResponsePolicy",
			Handler:    _ResponsePoliciesServer_UpdateResponsePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}

// ResponsePolicyRulesServerClient is the client API for ResponsePolicyRulesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponsePolicyRulesServerClient interface {
	// Creates a new Response Policy Rule.
	CreateResponsePolicyRule(ctx context.Context, in *CreateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error)
	// Deletes a previously created Response Policy Rule.
	DeleteResponsePolicyRule(ctx context.Context, in *DeleteResponsePolicyRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Fetches the representation of an existing Response Policy Rule.
	GetResponsePolicyRule(ctx context.Context, in *GetResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error)
	// Enumerates all Response Policy Rules associated with a project.
	ListResponsePolicyRules(ctx context.Context, in *ListResponsePolicyRulesRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesListResponse, error)
	// Applies a partial update to an existing Response Policy Rule.
	PatchResponsePolicyRule(ctx context.Context, in *PatchResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesPatchResponse, error)
	// Updates an existing Response Policy Rule.
	UpdateResponsePolicyRule(ctx context.Context, in *UpdateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesUpdateResponse, error)
}

type responsePolicyRulesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewResponsePolicyRulesServerClient(cc grpc.ClientConnInterface) ResponsePolicyRulesServerClient {
	return &responsePolicyRulesServerClient{cc}
}

func (c *responsePolicyRulesServerClient) CreateResponsePolicyRule(ctx context.Context, in *CreateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error) {
	out := new(ResponsePolicyRule)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/CreateResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesServerClient) DeleteResponsePolicyRule(ctx context.Context, in *DeleteResponsePolicyRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/DeleteResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesServerClient) GetResponsePolicyRule(ctx context.Context, in *GetResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRule, error) {
	out := new(ResponsePolicyRule)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/GetResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesServerClient) ListResponsePolicyRules(ctx context.Context, in *ListResponsePolicyRulesRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesListResponse, error) {
	out := new(ResponsePolicyRulesListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/ListResponsePolicyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesServerClient) PatchResponsePolicyRule(ctx context.Context, in *PatchResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesPatchResponse, error) {
	out := new(ResponsePolicyRulesPatchResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/PatchResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responsePolicyRulesServerClient) UpdateResponsePolicyRule(ctx context.Context, in *UpdateResponsePolicyRuleRequest, opts ...grpc.CallOption) (*ResponsePolicyRulesUpdateResponse, error) {
	out := new(ResponsePolicyRulesUpdateResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.dns.v1.ResponsePolicyRulesServer/UpdateResponsePolicyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponsePolicyRulesServerServer is the server API for ResponsePolicyRulesServer service.
// All implementations must embed UnimplementedResponsePolicyRulesServerServer
// for forward compatibility
type ResponsePolicyRulesServerServer interface {
	// Creates a new Response Policy Rule.
	CreateResponsePolicyRule(context.Context, *CreateResponsePolicyRuleRequest) (*ResponsePolicyRule, error)
	// Deletes a previously created Response Policy Rule.
	DeleteResponsePolicyRule(context.Context, *DeleteResponsePolicyRuleRequest) (*empty.Empty, error)
	// Fetches the representation of an existing Response Policy Rule.
	GetResponsePolicyRule(context.Context, *GetResponsePolicyRuleRequest) (*ResponsePolicyRule, error)
	// Enumerates all Response Policy Rules associated with a project.
	ListResponsePolicyRules(context.Context, *ListResponsePolicyRulesRequest) (*ResponsePolicyRulesListResponse, error)
	// Applies a partial update to an existing Response Policy Rule.
	PatchResponsePolicyRule(context.Context, *PatchResponsePolicyRuleRequest) (*ResponsePolicyRulesPatchResponse, error)
	// Updates an existing Response Policy Rule.
	UpdateResponsePolicyRule(context.Context, *UpdateResponsePolicyRuleRequest) (*ResponsePolicyRulesUpdateResponse, error)
	mustEmbedUnimplementedResponsePolicyRulesServerServer()
}

// UnimplementedResponsePolicyRulesServerServer must be embedded to have forward compatible implementations.
type UnimplementedResponsePolicyRulesServerServer struct {
}

func (UnimplementedResponsePolicyRulesServerServer) CreateResponsePolicyRule(context.Context, *CreateResponsePolicyRuleRequest) (*ResponsePolicyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) DeleteResponsePolicyRule(context.Context, *DeleteResponsePolicyRuleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) GetResponsePolicyRule(context.Context, *GetResponsePolicyRuleRequest) (*ResponsePolicyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) ListResponsePolicyRules(context.Context, *ListResponsePolicyRulesRequest) (*ResponsePolicyRulesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResponsePolicyRules not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) PatchResponsePolicyRule(context.Context, *PatchResponsePolicyRuleRequest) (*ResponsePolicyRulesPatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) UpdateResponsePolicyRule(context.Context, *UpdateResponsePolicyRuleRequest) (*ResponsePolicyRulesUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResponsePolicyRule not implemented")
}
func (UnimplementedResponsePolicyRulesServerServer) mustEmbedUnimplementedResponsePolicyRulesServerServer() {
}

// UnsafeResponsePolicyRulesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponsePolicyRulesServerServer will
// result in compilation errors.
type UnsafeResponsePolicyRulesServerServer interface {
	mustEmbedUnimplementedResponsePolicyRulesServerServer()
}

func RegisterResponsePolicyRulesServerServer(s grpc.ServiceRegistrar, srv ResponsePolicyRulesServerServer) {
	s.RegisterService(&ResponsePolicyRulesServer_ServiceDesc, srv)
}

func _ResponsePolicyRulesServer_CreateResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).CreateResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/CreateResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).CreateResponsePolicyRule(ctx, req.(*CreateResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRulesServer_DeleteResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).DeleteResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/DeleteResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).DeleteResponsePolicyRule(ctx, req.(*DeleteResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRulesServer_GetResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).GetResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/GetResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).GetResponsePolicyRule(ctx, req.(*GetResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRulesServer_ListResponsePolicyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResponsePolicyRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).ListResponsePolicyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/ListResponsePolicyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).ListResponsePolicyRules(ctx, req.(*ListResponsePolicyRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRulesServer_PatchResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).PatchResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/PatchResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).PatchResponsePolicyRule(ctx, req.(*PatchResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResponsePolicyRulesServer_UpdateResponsePolicyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResponsePolicyRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponsePolicyRulesServerServer).UpdateResponsePolicyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dns.v1.ResponsePolicyRulesServer/UpdateResponsePolicyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponsePolicyRulesServerServer).UpdateResponsePolicyRule(ctx, req.(*UpdateResponsePolicyRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResponsePolicyRulesServer_ServiceDesc is the grpc.ServiceDesc for ResponsePolicyRulesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResponsePolicyRulesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dns.v1.ResponsePolicyRulesServer",
	HandlerType: (*ResponsePolicyRulesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResponsePolicyRule",
			Handler:    _ResponsePolicyRulesServer_CreateResponsePolicyRule_Handler,
		},
		{
			MethodName: "DeleteResponsePolicyRule",
			Handler:    _ResponsePolicyRulesServer_DeleteResponsePolicyRule_Handler,
		},
		{
			MethodName: "GetResponsePolicyRule",
			Handler:    _ResponsePolicyRulesServer_GetResponsePolicyRule_Handler,
		},
		{
			MethodName: "ListResponsePolicyRules",
			Handler:    _ResponsePolicyRulesServer_ListResponsePolicyRules_Handler,
		},
		{
			MethodName: "PatchResponsePolicyRule",
			Handler:    _ResponsePolicyRulesServer_PatchResponsePolicyRule_Handler,
		},
		{
			MethodName: "UpdateResponsePolicyRule",
			Handler:    _ResponsePolicyRulesServer_UpdateResponsePolicyRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dns/v1/service.proto",
}
