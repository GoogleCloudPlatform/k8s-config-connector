// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: google/cloud/networkservices/v1/edge_cache_service.proto

package networkservicespb

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies the mechanism to use for compression.
type CompressionMode int32

const (
	// Compression mode is unspecified.
	// Defaults to DISABLED.
	CompressionMode_COMPRESSION_MODE_UNSPECIFIED CompressionMode = 0
	// Compression is disabled. (default)
	CompressionMode_DISABLED CompressionMode = 1
	// Compression is enabled automatically based on client and server support.
	CompressionMode_AUTOMATIC CompressionMode = 2
)

// Enum value maps for CompressionMode.
var (
	CompressionMode_name = map[int32]string{
		0: "COMPRESSION_MODE_UNSPECIFIED",
		1: "DISABLED",
		2: "AUTOMATIC",
	}
	CompressionMode_value = map[string]int32{
		"COMPRESSION_MODE_UNSPECIFIED": 0,
		"DISABLED":                     1,
		"AUTOMATIC":                    2,
	}
)

func (x CompressionMode) Enum() *CompressionMode {
	p := new(CompressionMode)
	*p = x
	return p
}

func (x CompressionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[0].Descriptor()
}

func (CompressionMode) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[0]
}

func (x CompressionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionMode.Descriptor instead.
func (CompressionMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{0}
}

// Defines different modes for caching content.
type CacheMode int32

const (
	// Cache mode is unspecified.
	CacheMode_CACHE_MODE_UNSPECIFIED CacheMode = 0
	// Automatically cache all content that is marked as cacheable by the origin.
	CacheMode_CACHE_ALL_STATIC CacheMode = 1
	// Use the origin's cache control headers to determine whether content
	// should be cached.
	CacheMode_USE_ORIGIN_HEADERS CacheMode = 2
	// Force cache all content, ignoring any "private", "no-store" or "no-cache"
	// directives in the origin's cache control headers.
	CacheMode_FORCE_CACHE_ALL CacheMode = 3
	// Cache nothing, even if the origin provides cache control headers.
	CacheMode_BYPASS_CACHE CacheMode = 4
)

// Enum value maps for CacheMode.
var (
	CacheMode_name = map[int32]string{
		0: "CACHE_MODE_UNSPECIFIED",
		1: "CACHE_ALL_STATIC",
		2: "USE_ORIGIN_HEADERS",
		3: "FORCE_CACHE_ALL",
		4: "BYPASS_CACHE",
	}
	CacheMode_value = map[string]int32{
		"CACHE_MODE_UNSPECIFIED": 0,
		"CACHE_ALL_STATIC":       1,
		"USE_ORIGIN_HEADERS":     2,
		"FORCE_CACHE_ALL":        3,
		"BYPASS_CACHE":           4,
	}
)

func (x CacheMode) Enum() *CacheMode {
	p := new(CacheMode)
	*p = x
	return p
}

func (x CacheMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[1].Descriptor()
}

func (CacheMode) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[1]
}

func (x CacheMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheMode.Descriptor instead.
func (CacheMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{1}
}

// Defines different modes for enforcing signed requests.
type SignedRequestMode int32

const (
	// Signed request mode is unspecified.
	SignedRequestMode_SIGNED_REQUEST_MODE_UNSPECIFIED SignedRequestMode = 0
	// Signed requests are not enforced.
	SignedRequestMode_SIGNED_REQUEST_MODE_DISABLED SignedRequestMode = 1
	// Only signed requests using signatures generated from the keys in the keyset
	// will be accepted.
	SignedRequestMode_REQUIRE_SIGNATURES SignedRequestMode = 2
	// Only signed requests using tokens will be accepted.
	SignedRequestMode_REQUIRE_TOKENS SignedRequestMode = 3
)

// Enum value maps for SignedRequestMode.
var (
	SignedRequestMode_name = map[int32]string{
		0: "SIGNED_REQUEST_MODE_UNSPECIFIED",
		1: "SIGNED_REQUEST_MODE_DISABLED",
		2: "REQUIRE_SIGNATURES",
		3: "REQUIRE_TOKENS",
	}
	SignedRequestMode_value = map[string]int32{
		"SIGNED_REQUEST_MODE_UNSPECIFIED": 0,
		"SIGNED_REQUEST_MODE_DISABLED":    1,
		"REQUIRE_SIGNATURES":              2,
		"REQUIRE_TOKENS":                  3,
	}
)

func (x SignedRequestMode) Enum() *SignedRequestMode {
	p := new(SignedRequestMode)
	*p = x
	return p
}

func (x SignedRequestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedRequestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[2].Descriptor()
}

func (SignedRequestMode) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[2]
}

func (x SignedRequestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedRequestMode.Descriptor instead.
func (SignedRequestMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{2}
}

// Defines signature algorithms for signed requests.
type SignatureAlgorithm int32

const (
	// Signature algorithm is unspecified.
	SignatureAlgorithm_SIGNATURE_ALGORITHM_UNSPECIFIED SignatureAlgorithm = 0
	// Use the Ed25519 algorithm.
	SignatureAlgorithm_ED25519 SignatureAlgorithm = 1
	// Use the HMAC-SHA-256 algorithm.
	SignatureAlgorithm_HMAC_SHA_256 SignatureAlgorithm = 2
	// Use the HMAC-SHA1 algorithm.
	SignatureAlgorithm_HMAC_SHA1 SignatureAlgorithm = 3
)

// Enum value maps for SignatureAlgorithm.
var (
	SignatureAlgorithm_name = map[int32]string{
		0: "SIGNATURE_ALGORITHM_UNSPECIFIED",
		1: "ED25519",
		2: "HMAC_SHA_256",
		3: "HMAC_SHA1",
	}
	SignatureAlgorithm_value = map[string]int32{
		"SIGNATURE_ALGORITHM_UNSPECIFIED": 0,
		"ED25519":                         1,
		"HMAC_SHA_256":                    2,
		"HMAC_SHA1":                       3,
	}
)

func (x SignatureAlgorithm) Enum() *SignatureAlgorithm {
	p := new(SignatureAlgorithm)
	*p = x
	return p
}

func (x SignatureAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[3].Descriptor()
}

func (SignatureAlgorithm) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[3]
}

func (x SignatureAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureAlgorithm.Descriptor instead.
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{3}
}

// Defines the action to take for adding signatures.
type SignatureAction int32

const (
	// Signature action is unspecified.
	SignatureAction_SIGNATURE_ACTION_UNSPECIFIED SignatureAction = 0
	// Generate a cookie signature.
	SignatureAction_GENERATE_COOKIE SignatureAction = 1
	// Generate a token for HLS cookieless.
	SignatureAction_GENERATE_TOKEN_HLS_COOKIELESS SignatureAction = 2
	// Propagate a token for HLS cookieless.
	SignatureAction_PROPAGATE_TOKEN_HLS_COOKIELESS SignatureAction = 3
)

// Enum value maps for SignatureAction.
var (
	SignatureAction_name = map[int32]string{
		0: "SIGNATURE_ACTION_UNSPECIFIED",
		1: "GENERATE_COOKIE",
		2: "GENERATE_TOKEN_HLS_COOKIELESS",
		3: "PROPAGATE_TOKEN_HLS_COOKIELESS",
	}
	SignatureAction_value = map[string]int32{
		"SIGNATURE_ACTION_UNSPECIFIED":   0,
		"GENERATE_COOKIE":                1,
		"GENERATE_TOKEN_HLS_COOKIELESS":  2,
		"PROPAGATE_TOKEN_HLS_COOKIELESS": 3,
	}
)

func (x SignatureAction) Enum() *SignatureAction {
	p := new(SignatureAction)
	*p = x
	return p
}

func (x SignatureAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureAction) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[4].Descriptor()
}

func (SignatureAction) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[4]
}

func (x SignatureAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureAction.Descriptor instead.
func (SignatureAction) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{4}
}

// Defines HTTP status codes for redirect responses.
type RedirectResponseCode int32

const (
	// Default redirect response code.
	RedirectResponseCode_REDIRECT_RESPONSE_CODE_UNSPECIFIED RedirectResponseCode = 0
	// Corresponds to HTTP 301.
	RedirectResponseCode_MOVED_PERMANENTLY_DEFAULT RedirectResponseCode = 1
	// Corresponds to HTTP 302.
	RedirectResponseCode_FOUND RedirectResponseCode = 2
	// Corresponds to HTTP 303.
	RedirectResponseCode_SEE_OTHER RedirectResponseCode = 3
	// Corresponds to HTTP 307.
	RedirectResponseCode_TEMPORARY_REDIRECT RedirectResponseCode = 4
	// Corresponds to HTTP 308.
	RedirectResponseCode_PERMANENT_REDIRECT RedirectResponseCode = 5
)

// Enum value maps for RedirectResponseCode.
var (
	RedirectResponseCode_name = map[int32]string{
		0: "REDIRECT_RESPONSE_CODE_UNSPECIFIED",
		1: "MOVED_PERMANENTLY_DEFAULT",
		2: "FOUND",
		3: "SEE_OTHER",
		4: "TEMPORARY_REDIRECT",
		5: "PERMANENT_REDIRECT",
	}
	RedirectResponseCode_value = map[string]int32{
		"REDIRECT_RESPONSE_CODE_UNSPECIFIED": 0,
		"MOVED_PERMANENTLY_DEFAULT":          1,
		"FOUND":                              2,
		"SEE_OTHER":                          3,
		"TEMPORARY_REDIRECT":                 4,
		"PERMANENT_REDIRECT":                 5,
	}
)

func (x RedirectResponseCode) Enum() *RedirectResponseCode {
	p := new(RedirectResponseCode)
	*p = x
	return p
}

func (x RedirectResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedirectResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[5].Descriptor()
}

func (RedirectResponseCode) Type() protoreflect.EnumType {
	return &file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes[5]
}

func (x RedirectResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedirectResponseCode.Descriptor instead.
func (RedirectResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{5}
}

// EdgeCacheService defines the IP addresses, protocols, security policies,
// cache policies and routing configuration for a service that is
// served using Google's Media CDN.
type EdgeCacheService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of the EdgeCacheService resource. Format:
	// projects/{project}/locations/{location}/edgeCacheServices/{edge_cache_service}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The timestamp when the resource was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp when the resource was last updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Set of label tags associated with the EdgeCacheService resource.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. A human-readable description of the resource.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Defines how requests are routed, modified, cached and/or
	// which origin content is filled from.
	Routing *Routing `protobuf:"bytes,6,opt,name=routing,proto3" json:"routing,omitempty"`
	// Optional. URLs to sslCertificate resources that are used to authenticate
	// connections between users and the EdgeCacheService.
	// Note that only "global" certificates with a "scope" of "EDGE_CACHE"
	// can be attached to an EdgeCacheService.
	EdgeSslCertificates []string `protobuf:"bytes,7,rep,name=edge_ssl_certificates,json=edgeSslCertificates,proto3" json:"edge_ssl_certificates,omitempty"`
	// Optional. HTTP/3 (IETF QUIC) and Google QUIC are enabled by default.
	DisableQuic bool `protobuf:"varint,8,opt,name=disable_quic,json=disableQuic,proto3" json:"disable_quic,omitempty"`
	// Output only. The IPv4 addresses that the service will serve traffic on.
	// These will be static for the lifetime of the service.
	Ipv4Addresses []string `protobuf:"bytes,9,rep,name=ipv4_addresses,json=ipv4Addresses,proto3" json:"ipv4_addresses,omitempty"`
	// Output only. The IPv6 addresses that the service will serve traffic on.
	// These will be static for the lifetime of the service.
	Ipv6Addresses []string `protobuf:"bytes,10,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	// Optional. Specifies the logging options for the traffic served by this service.
	// If logging is enabled, logs will be exported to Cloud Logging.
	LogConfig *LogConfig `protobuf:"bytes,11,opt,name=log_config,json=logConfig,proto3" json:"log_config,omitempty"`
	// Optional. Disables HTTP/2.
	// HTTP/2 (h2) is enabled by default and recommended for performance.
	// HTTP/2 improves connection re-use and reduces connection setup overhead
	// by sending multiple streams over the same connection.
	DisableHttp2 bool `protobuf:"varint,16,opt,name=disable_http2,json=disableHttp2,proto3" json:"disable_http2,omitempty"`
	// Optional. Require TLS (HTTPS) for all clients connecting to this service.
	RequireTls bool `protobuf:"varint,17,opt,name=require_tls,json=requireTls,proto3" json:"require_tls,omitempty"`
	// Optional. Resource URL that points at the Cloud Armor edge security policy
	// that is applied on each request against the EdgeCacheService.
	EdgeSecurityPolicy string `protobuf:"bytes,18,opt,name=edge_security_policy,json=edgeSecurityPolicy,proto3" json:"edge_security_policy,omitempty"`
}

func (x *EdgeCacheService) Reset() {
	*x = EdgeCacheService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeCacheService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeCacheService) ProtoMessage() {}

func (x *EdgeCacheService) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeCacheService.ProtoReflect.Descriptor instead.
func (*EdgeCacheService) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeCacheService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EdgeCacheService) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *EdgeCacheService) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *EdgeCacheService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EdgeCacheService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EdgeCacheService) GetRouting() *Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *EdgeCacheService) GetEdgeSslCertificates() []string {
	if x != nil {
		return x.EdgeSslCertificates
	}
	return nil
}

func (x *EdgeCacheService) GetDisableQuic() bool {
	if x != nil {
		return x.DisableQuic
	}
	return false
}

func (x *EdgeCacheService) GetIpv4Addresses() []string {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *EdgeCacheService) GetIpv6Addresses() []string {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *EdgeCacheService) GetLogConfig() *LogConfig {
	if x != nil {
		return x.LogConfig
	}
	return nil
}

func (x *EdgeCacheService) GetDisableHttp2() bool {
	if x != nil {
		return x.DisableHttp2
	}
	return false
}

func (x *EdgeCacheService) GetRequireTls() bool {
	if x != nil {
		return x.RequireTls
	}
	return false
}

func (x *EdgeCacheService) GetEdgeSecurityPolicy() string {
	if x != nil {
		return x.EdgeSecurityPolicy
	}
	return ""
}

// Defines how requests are routed, modified, cached and/or which origin
// content is filled from.
type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of hostRules to match against. These rules define
	// which hostnames the EdgeCacheService will match against, and which
	// route to use for the request.
	HostRules []*HostRule `protobuf:"bytes,1,rep,name=host_rules,json=hostRules,proto3" json:"host_rules,omitempty"`
	// Required. The list of pathMatchers referenced via name by hostRules.
	// PathMatcher is used to match the path portion of the URL when a
	// HostRule matches the URL's host portion.
	PathMatchers []*PathMatcher `protobuf:"bytes,2,rep,name=path_matchers,json=pathMatchers,proto3" json:"path_matchers,omitempty"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{1}
}

func (x *Routing) GetHostRules() []*HostRule {
	if x != nil {
		return x.HostRules
	}
	return nil
}

func (x *Routing) GetPathMatchers() []*PathMatcher {
	if x != nil {
		return x.PathMatchers
	}
	return nil
}

// The host rules that define how traffic to the service is routed.
type HostRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A human-readable description of the hostRule.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The list of host patterns to match.
	// Host patterns must be valid hostnames. Ports are not allowed.
	// Wildcard hosts are supported in the form of "*" or "*-foo.example.com".
	// This field is used to match the ":authority" header for HTTP/2 requests
	// or the "Host" header for HTTP/1.1 requests.
	Hosts []string `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Required. The name of the pathMatcher associated with this hostRule.
	PathMatcher string `protobuf:"bytes,3,opt,name=path_matcher,json=pathMatcher,proto3" json:"path_matcher,omitempty"`
}

func (x *HostRule) Reset() {
	*x = HostRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRule) ProtoMessage() {}

func (x *HostRule) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRule.ProtoReflect.Descriptor instead.
func (*HostRule) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{2}
}

func (x *HostRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostRule) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *HostRule) GetPathMatcher() string {
	if x != nil {
		return x.PathMatcher
	}
	return ""
}

// The PathMatcher maps paths to various RouteRules or actions.
type PathMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name to which this PathMatcher is referred by the HostRule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A human-readable description of the resource.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The routeRules to match against. Each rule must reference
	// an origin via the route_action or a urlRedirect.
	RouteRules []*RouteRule `protobuf:"bytes,3,rep,name=route_rules,json=routeRules,proto3" json:"route_rules,omitempty"`
}

func (x *PathMatcher) Reset() {
	*x = PathMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathMatcher) ProtoMessage() {}

func (x *PathMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathMatcher.ProtoReflect.Descriptor instead.
func (*PathMatcher) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{3}
}

func (x *PathMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PathMatcher) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PathMatcher) GetRouteRules() []*RouteRule {
	if x != nil {
		return x.RouteRules
	}
	return nil
}

// The RouteRule maps a request to specific RouteActions.
type RouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The priority of this route rule, where 1 is the highest priority.
	// You cannot configure two or more routeRules with the same priority.
	// Priority for each rule must be set to a number between 1 and 999 inclusive.
	Priority int64 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	// Optional. A human-readable description of the routeRule.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The list of criteria for matching attributes of a request to this
	// routeRule. All specified conditions must be satisfied for a match.
	// Must specify at least one match_rule.
	MatchRules []*MatchRule `protobuf:"bytes,3,rep,name=match_rules,json=matchRules,proto3" json:"match_rules,omitempty"`
	// Optional. The header actions, including adding and removing headers,
	// for requests that match this route.
	HeaderAction *HeaderAction `protobuf:"bytes,4,opt,name=header_action,json=headerAction,proto3" json:"header_action,omitempty"`
	// Optional. The route action that will be taken if this routeRule matches.
	RouteAction *RouteAction `protobuf:"bytes,5,opt,name=route_action,json=routeAction,proto3" json:"route_action,omitempty"`
	// Optional. The URL redirect configuration for requests that match this route.
	UrlRedirect *UrlRedirect `protobuf:"bytes,6,opt,name=url_redirect,json=urlRedirect,proto3" json:"url_redirect,omitempty"`
	// Optional. The origin that requests are routed to when this rule matches.
	// Origin must be a valid origin resource name. It should be formatted as:
	// "projects/{project}/locations/{location}/edgeCacheOrigins/{origin}".
	Origin string `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	// Optional. routeMethods defines what HTTP methods may match this route.
	RouteMethods *RouteMethods `protobuf:"bytes,8,opt,name=route_methods,json=routeMethods,proto3" json:"route_methods,omitempty"`
}

func (x *RouteRule) Reset() {
	*x = RouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRule) ProtoMessage() {}

func (x *RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRule.ProtoReflect.Descriptor instead.
func (*RouteRule) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{4}
}

func (x *RouteRule) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RouteRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RouteRule) GetMatchRules() []*MatchRule {
	if x != nil {
		return x.MatchRules
	}
	return nil
}

func (x *RouteRule) GetHeaderAction() *HeaderAction {
	if x != nil {
		return x.HeaderAction
	}
	return nil
}

func (x *RouteRule) GetRouteAction() *RouteAction {
	if x != nil {
		return x.RouteAction
	}
	return nil
}

func (x *RouteRule) GetUrlRedirect() *UrlRedirect {
	if x != nil {
		return x.UrlRedirect
	}
	return nil
}

func (x *RouteRule) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *RouteRule) GetRouteMethods() *RouteMethods {
	if x != nil {
		return x.RouteMethods
	}
	return nil
}

// Defines predefined HTTP methods for matching HTTP requests.
type RouteMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of HTTP methods allowed for this route.
	// Must be non-empty.
	AllowedMethods []string `protobuf:"bytes,1,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
}

func (x *RouteMethods) Reset() {
	*x = RouteMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMethods) ProtoMessage() {}

func (x *RouteMethods) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMethods.ProtoReflect.Descriptor instead.
func (*RouteMethods) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{5}
}

func (x *RouteMethods) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

// The HTTP request predicates that must be satisfied for the RouteRule
// to match a request.
type MatchRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. For satisfying the matchRule condition, the path of the request
	// must match the wildcard pattern specified in pathTemplateMatch
	// after removing any query parameters and anchor that may be part of
	// the original URL.
	PathTemplateMatch string `protobuf:"bytes,2,opt,name=path_template_match,json=pathTemplateMatch,proto3" json:"path_template_match,omitempty"`
	// Optional. For satisfying the matchRule condition, the request's path must
	// begin with the specified prefixMatch. prefixMatch must begin with a /.
	PrefixMatch string `protobuf:"bytes,1,opt,name=prefix_match,json=prefixMatch,proto3" json:"prefix_match,omitempty"`
	// Optional. For satisfying the matchRule condition, the path of the request
	// must exactly match the value specified in fullPathMatch after removing
	// any query parameters and anchor that may be part of the original URL.
	FullPathMatch string `protobuf:"bytes,3,opt,name=full_path_match,json=fullPathMatch,proto3" json:"full_path_match,omitempty"`
	// Optional. Specifies that prefixMatch and fullPathMatch matches are case
	// insensitive. The default value is false.
	IgnoreCase bool `protobuf:"varint,4,opt,name=ignore_case,json=ignoreCase,proto3" json:"ignore_case,omitempty"`
	// Optional. Specifies a list of header match criteria, all of which must match
	// corresponding headers in the request.
	HeaderMatches []*HeaderMatch `protobuf:"bytes,5,rep,name=header_matches,json=headerMatches,proto3" json:"header_matches,omitempty"`
	// Optional. Specifies a list of query parameter match criteria, all of which
	// must match corresponding query parameters in the request.
	QueryParameterMatches []*QueryParameterMatch `protobuf:"bytes,6,rep,name=query_parameter_matches,json=queryParameterMatches,proto3" json:"query_parameter_matches,omitempty"`
}

func (x *MatchRule) Reset() {
	*x = MatchRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRule) ProtoMessage() {}

func (x *MatchRule) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRule.ProtoReflect.Descriptor instead.
func (*MatchRule) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{6}
}

func (x *MatchRule) GetPathTemplateMatch() string {
	if x != nil {
		return x.PathTemplateMatch
	}
	return ""
}

func (x *MatchRule) GetPrefixMatch() string {
	if x != nil {
		return x.PrefixMatch
	}
	return ""
}

func (x *MatchRule) GetFullPathMatch() string {
	if x != nil {
		return x.FullPathMatch
	}
	return ""
}

func (x *MatchRule) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

func (x *MatchRule) GetHeaderMatches() []*HeaderMatch {
	if x != nil {
		return x.HeaderMatches
	}
	return nil
}

func (x *MatchRule) GetQueryParameterMatches() []*QueryParameterMatch {
	if x != nil {
		return x.QueryParameterMatches
	}
	return nil
}

// The HTTP header match criteria for a request to match this route.
type HeaderMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The header name to match on.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// Optional. Specifies that the match is negated, i.e. a match will succeed
	// if the header does NOT match the criteria in this HeaderMatch.
	InvertMatch bool `protobuf:"varint,5,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	// The value of the header must satisfy one of these match criteria.
	//
	// Types that are assignable to MatchType:
	//
	//	*HeaderMatch_PresentMatch
	//	*HeaderMatch_ExactMatch
	//	*HeaderMatch_PrefixMatch
	//	*HeaderMatch_SuffixMatch
	MatchType isHeaderMatch_MatchType `protobuf_oneof:"match_type"`
}

func (x *HeaderMatch) Reset() {
	*x = HeaderMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMatch) ProtoMessage() {}

func (x *HeaderMatch) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMatch.ProtoReflect.Descriptor instead.
func (*HeaderMatch) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{7}
}

func (x *HeaderMatch) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *HeaderMatch) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

func (m *HeaderMatch) GetMatchType() isHeaderMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (x *HeaderMatch) GetPresentMatch() bool {
	if x, ok := x.GetMatchType().(*HeaderMatch_PresentMatch); ok {
		return x.PresentMatch
	}
	return false
}

func (x *HeaderMatch) GetExactMatch() string {
	if x, ok := x.GetMatchType().(*HeaderMatch_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

func (x *HeaderMatch) GetPrefixMatch() string {
	if x, ok := x.GetMatchType().(*HeaderMatch_PrefixMatch); ok {
		return x.PrefixMatch
	}
	return ""
}

func (x *HeaderMatch) GetSuffixMatch() string {
	if x, ok := x.GetMatchType().(*HeaderMatch_SuffixMatch); ok {
		return x.SuffixMatch
	}
	return ""
}

type isHeaderMatch_MatchType interface {
	isHeaderMatch_MatchType()
}

type HeaderMatch_PresentMatch struct {
	// Specifies that the header must exist.
	PresentMatch bool `protobuf:"varint,2,opt,name=present_match,json=presentMatch,proto3,oneof"`
}

type HeaderMatch_ExactMatch struct {
	// The value of the header must exactly match the contents of exactMatch.
	ExactMatch string `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type HeaderMatch_PrefixMatch struct {
	// The value of the header must start with the contents of prefixMatch.
	PrefixMatch string `protobuf:"bytes,4,opt,name=prefix_match,json=prefixMatch,proto3,oneof"`
}

type HeaderMatch_SuffixMatch struct {
	// The value of the header must end with the contents of suffixMatch.
	SuffixMatch string `protobuf:"bytes,6,opt,name=suffix_match,json=suffixMatch,proto3,oneof"`
}

func (*HeaderMatch_PresentMatch) isHeaderMatch_MatchType() {}

func (*HeaderMatch_ExactMatch) isHeaderMatch_MatchType() {}

func (*HeaderMatch_PrefixMatch) isHeaderMatch_MatchType() {}

func (*HeaderMatch_SuffixMatch) isHeaderMatch_MatchType() {}

// The query parameter match criteria for a request to match this route.
type QueryParameterMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the query parameter to match.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The query parameter value must satisfy one of these match criteria.
	//
	// Types that are assignable to MatchType:
	//
	//	*QueryParameterMatch_PresentMatch
	//	*QueryParameterMatch_ExactMatch
	MatchType isQueryParameterMatch_MatchType `protobuf_oneof:"match_type"`
}

func (x *QueryParameterMatch) Reset() {
	*x = QueryParameterMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParameterMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterMatch) ProtoMessage() {}

func (x *QueryParameterMatch) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterMatch.ProtoReflect.Descriptor instead.
func (*QueryParameterMatch) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{8}
}

func (x *QueryParameterMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *QueryParameterMatch) GetMatchType() isQueryParameterMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (x *QueryParameterMatch) GetPresentMatch() bool {
	if x, ok := x.GetMatchType().(*QueryParameterMatch_PresentMatch); ok {
		return x.PresentMatch
	}
	return false
}

func (x *QueryParameterMatch) GetExactMatch() string {
	if x, ok := x.GetMatchType().(*QueryParameterMatch_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

type isQueryParameterMatch_MatchType interface {
	isQueryParameterMatch_MatchType()
}

type QueryParameterMatch_PresentMatch struct {
	// Specifies that the query parameter must exist.
	PresentMatch bool `protobuf:"varint,2,opt,name=present_match,json=presentMatch,proto3,oneof"`
}

type QueryParameterMatch_ExactMatch struct {
	// The value of the query parameter must exactly match the contents
	// of exactMatch.
	ExactMatch string `protobuf:"bytes,3,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

func (*QueryParameterMatch_PresentMatch) isQueryParameterMatch_MatchType() {}

func (*QueryParameterMatch_ExactMatch) isQueryParameterMatch_MatchType() {}

// The header actions.
type HeaderAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Describes a header to add.
	RequestHeadersToAdd []*AddHeader `protobuf:"bytes,1,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Optional. A list of header names for headers that need to be removed
	// from the request prior to forwarding the request to the origin.
	RequestHeadersToRemove []*RemoveHeader `protobuf:"bytes,2,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Optional. Describes a header to add to the response.
	ResponseHeadersToAdd []*AddHeader `protobuf:"bytes,3,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Optional. A list of header names for headers that need to be removed
	// from the response prior to sending the response back to the client.
	ResponseHeadersToRemove []*RemoveHeader `protobuf:"bytes,4,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
}

func (x *HeaderAction) Reset() {
	*x = HeaderAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderAction) ProtoMessage() {}

func (x *HeaderAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderAction.ProtoReflect.Descriptor instead.
func (*HeaderAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{9}
}

func (x *HeaderAction) GetRequestHeadersToAdd() []*AddHeader {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *HeaderAction) GetRequestHeadersToRemove() []*RemoveHeader {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *HeaderAction) GetResponseHeadersToAdd() []*AddHeader {
	if x != nil {
		return x.ResponseHeadersToAdd
	}
	return nil
}

func (x *HeaderAction) GetResponseHeadersToRemove() []*RemoveHeader {
	if x != nil {
		return x.ResponseHeadersToRemove
	}
	return nil
}

// Specification to add header to a request or a response.
type AddHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the header to add.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// Required. The value of the header to add.
	HeaderValue string `protobuf:"bytes,2,opt,name=header_value,json=headerValue,proto3" json:"header_value,omitempty"`
	// Optional. Whether to replace all existing headers with the same name.
	Replace bool `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *AddHeader) Reset() {
	*x = AddHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddHeader) ProtoMessage() {}

func (x *AddHeader) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddHeader.ProtoReflect.Descriptor instead.
func (*AddHeader) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{10}
}

func (x *AddHeader) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *AddHeader) GetHeaderValue() string {
	if x != nil {
		return x.HeaderValue
	}
	return ""
}

func (x *AddHeader) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

// Specification to remove a header from a request or a response.
type RemoveHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the header to remove.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
}

func (x *RemoveHeader) Reset() {
	*x = RemoveHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHeader) ProtoMessage() {}

func (x *RemoveHeader) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHeader.ProtoReflect.Descriptor instead.
func (*RemoveHeader) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveHeader) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

// Specifies the action to be taken on the request or response.
type RouteAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The policy that determines the caching behavior for the
	// route.
	CdnPolicy *CdnPolicy `protobuf:"bytes,1,opt,name=cdn_policy,json=cdnPolicy,proto3" json:"cdn_policy,omitempty"`
	// Optional. If specified, the request and response are transformed
	// based on these rules.
	UrlRewrite *UrlRewrite `protobuf:"bytes,2,opt,name=url_rewrite,json=urlRewrite,proto3" json:"url_rewrite,omitempty"`
	// Optional. The policy for managing cross-origin resource sharing.
	CorsPolicy *CorsPolicy `protobuf:"bytes,3,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	// Optional. Specify how to compress the response to the client.
	// By default, responses are not compressed.
	CompressionMode CompressionMode `protobuf:"varint,4,opt,name=compression_mode,json=compressionMode,proto3,enum=google.cloud.networkservices.v1.CompressionMode" json:"compression_mode,omitempty"`
}

func (x *RouteAction) Reset() {
	*x = RouteAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteAction) ProtoMessage() {}

func (x *RouteAction) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteAction.ProtoReflect.Descriptor instead.
func (*RouteAction) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{12}
}

func (x *RouteAction) GetCdnPolicy() *CdnPolicy {
	if x != nil {
		return x.CdnPolicy
	}
	return nil
}

func (x *RouteAction) GetUrlRewrite() *UrlRewrite {
	if x != nil {
		return x.UrlRewrite
	}
	return nil
}

func (x *RouteAction) GetCorsPolicy() *CorsPolicy {
	if x != nil {
		return x.CorsPolicy
	}
	return nil
}

func (x *RouteAction) GetCompressionMode() CompressionMode {
	if x != nil {
		return x.CompressionMode
	}
	return CompressionMode_COMPRESSION_MODE_UNSPECIFIED
}

// Defines the policy for caching content.
type CdnPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The CacheMode for matching requests.
	CacheMode CacheMode `protobuf:"varint,1,opt,name=cache_mode,json=cacheMode,proto3,enum=google.cloud.networkservices.v1.CacheMode" json:"cache_mode,omitempty"`
	// Optional. Specifies a separate client TTL, separate from the TTL used for
	// Google's cache for the object.
	ClientTtl *duration.Duration `protobuf:"bytes,2,opt,name=client_ttl,json=clientTtl,proto3" json:"client_ttl,omitempty"`
	// Optional. Specifies the default TTL for cached content served by this origin
	// for responses that do not have an existing valid TTL (max-age or s-max-age).
	DefaultTtl *duration.Duration `protobuf:"bytes,3,opt,name=default_ttl,json=defaultTtl,proto3" json:"default_ttl,omitempty"`
	// Optional. Specifies the maximum allowed TTL for cached content served by
	// this origin.
	MaxTtl *duration.Duration `protobuf:"bytes,4,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`
	// Optional. Negative caching allows per-status code cache TTLs to be set,
	// in order to apply fine-grained caching for common errors or redirects.
	NegativeCaching bool `protobuf:"varint,5,opt,name=negative_caching,json=negativeCaching,proto3" json:"negative_caching,omitempty"`
	// Optional. The policy for negative caching.
	NegativeCachingPolicy map[string]*duration.Duration `protobuf:"bytes,6,rep,name=negative_caching_policy,json=negativeCachingPolicy,proto3" json:"negative_caching_policy,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Defines the request parameters that contribute to the cache key.
	CacheKeyPolicy *CacheKeyPolicy `protobuf:"bytes,7,opt,name=cache_key_policy,json=cacheKeyPolicy,proto3" json:"cache_key_policy,omitempty"`
	// Optional. Whether to enforce signed requests.
	SignedRequestMode SignedRequestMode `protobuf:"varint,8,opt,name=signed_request_mode,json=signedRequestMode,proto3,enum=google.cloud.networkservices.v1.SignedRequestMode" json:"signed_request_mode,omitempty"`
	// Optional. The EdgeCacheKeyset resource that contains the set of public keys
	// used to validate signed requests at the edge.
	SignedRequestKeyset string `protobuf:"bytes,9,opt,name=signed_request_keyset,json=signedRequestKeyset,proto3" json:"signed_request_keyset,omitempty"`
	// Optional. Additional options for signed requests.
	SignedTokenOptions *SignedTokenOptions `protobuf:"bytes,10,opt,name=signed_token_options,json=signedTokenOptions,proto3" json:"signed_token_options,omitempty"`
	// Optional. Enable signature generation or propagation on this route.
	AddSignatures *AddSignatures `protobuf:"bytes,11,opt,name=add_signatures,json=addSignatures,proto3" json:"add_signatures,omitempty"`
	// Optional. Defines the maximum allowed TTL for signed requests.
	SignedRequestMaximumExpirationTtl *duration.Duration `protobuf:"bytes,12,opt,name=signed_request_maximum_expiration_ttl,json=signedRequestMaximumExpirationTtl,proto3" json:"signed_request_maximum_expiration_ttl,omitempty"`
}

func (x *CdnPolicy) Reset() {
	*x = CdnPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdnPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdnPolicy) ProtoMessage() {}

func (x *CdnPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdnPolicy.ProtoReflect.Descriptor instead.
func (*CdnPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{13}
}

func (x *CdnPolicy) GetCacheMode() CacheMode {
	if x != nil {
		return x.CacheMode
	}
	return CacheMode_CACHE_MODE_UNSPECIFIED
}

func (x *CdnPolicy) GetClientTtl() *duration.Duration {
	if x != nil {
		return x.ClientTtl
	}
	return nil
}

func (x *CdnPolicy) GetDefaultTtl() *duration.Duration {
	if x != nil {
		return x.DefaultTtl
	}
	return nil
}

func (x *CdnPolicy) GetMaxTtl() *duration.Duration {
	if x != nil {
		return x.MaxTtl
	}
	return nil
}

func (x *CdnPolicy) GetNegativeCaching() bool {
	if x != nil {
		return x.NegativeCaching
	}
	return false
}

func (x *CdnPolicy) GetNegativeCachingPolicy() map[string]*duration.Duration {
	if x != nil {
		return x.NegativeCachingPolicy
	}
	return nil
}

func (x *CdnPolicy) GetCacheKeyPolicy() *CacheKeyPolicy {
	if x != nil {
		return x.CacheKeyPolicy
	}
	return nil
}

func (x *CdnPolicy) GetSignedRequestMode() SignedRequestMode {
	if x != nil {
		return x.SignedRequestMode
	}
	return SignedRequestMode_SIGNED_REQUEST_MODE_UNSPECIFIED
}

func (x *CdnPolicy) GetSignedRequestKeyset() string {
	if x != nil {
		return x.SignedRequestKeyset
	}
	return ""
}

func (x *CdnPolicy) GetSignedTokenOptions() *SignedTokenOptions {
	if x != nil {
		return x.SignedTokenOptions
	}
	return nil
}

func (x *CdnPolicy) GetAddSignatures() *AddSignatures {
	if x != nil {
		return x.AddSignatures
	}
	return nil
}

func (x *CdnPolicy) GetSignedRequestMaximumExpirationTtl() *duration.Duration {
	if x != nil {
		return x.SignedRequestMaximumExpirationTtl
	}
	return nil
}

// Defines the parameters that contribute to the cache key.
type CacheKeyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If true, http and https requests will be cached separately.
	IncludeProtocol bool `protobuf:"varint,1,opt,name=include_protocol,json=includeProtocol,proto3" json:"include_protocol,omitempty"`
	// Optional. If true, requests to different hosts will be cached separately.
	ExcludeHost bool `protobuf:"varint,2,opt,name=exclude_host,json=excludeHost,proto3" json:"exclude_host,omitempty"`
	// Optional. If true, exclude query string parameters from the cache key.
	ExcludeQueryString bool `protobuf:"varint,3,opt,name=exclude_query_string,json=excludeQueryString,proto3" json:"exclude_query_string,omitempty"`
	// Optional. Names of query string parameters to include in cache keys.
	IncludedQueryParameters []string `protobuf:"bytes,4,rep,name=included_query_parameters,json=includedQueryParameters,proto3" json:"included_query_parameters,omitempty"`
	// Optional. Names of query string parameters to exclude from cache keys.
	ExcludedQueryParameters []string `protobuf:"bytes,5,rep,name=excluded_query_parameters,json=excludedQueryParameters,proto3" json:"excluded_query_parameters,omitempty"`
	// Optional. Names of HTTP request headers to include in cache keys.
	IncludedHeaderNames []string `protobuf:"bytes,6,rep,name=included_header_names,json=includedHeaderNames,proto3" json:"included_header_names,omitempty"`
	// Optional. Names of Cookies to include in cache keys.
	IncludedCookieNames []string `protobuf:"bytes,7,rep,name=included_cookie_names,json=includedCookieNames,proto3" json:"included_cookie_names,omitempty"`
}

func (x *CacheKeyPolicy) Reset() {
	*x = CacheKeyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheKeyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheKeyPolicy) ProtoMessage() {}

func (x *CacheKeyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheKeyPolicy.ProtoReflect.Descriptor instead.
func (*CacheKeyPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{14}
}

func (x *CacheKeyPolicy) GetIncludeProtocol() bool {
	if x != nil {
		return x.IncludeProtocol
	}
	return false
}

func (x *CacheKeyPolicy) GetExcludeHost() bool {
	if x != nil {
		return x.ExcludeHost
	}
	return false
}

func (x *CacheKeyPolicy) GetExcludeQueryString() bool {
	if x != nil {
		return x.ExcludeQueryString
	}
	return false
}

func (x *CacheKeyPolicy) GetIncludedQueryParameters() []string {
	if x != nil {
		return x.IncludedQueryParameters
	}
	return nil
}

func (x *CacheKeyPolicy) GetExcludedQueryParameters() []string {
	if x != nil {
		return x.ExcludedQueryParameters
	}
	return nil
}

func (x *CacheKeyPolicy) GetIncludedHeaderNames() []string {
	if x != nil {
		return x.IncludedHeaderNames
	}
	return nil
}

func (x *CacheKeyPolicy) GetIncludedCookieNames() []string {
	if x != nil {
		return x.IncludedCookieNames
	}
	return nil
}

// Additional options for signed tokens.
type SignedTokenOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The query parameter name where the signed token should be found.
	TokenQueryParameter string `protobuf:"bytes,1,opt,name=token_query_parameter,json=tokenQueryParameter,proto3" json:"token_query_parameter,omitempty"`
	// Optional. The allowed signature algorithms.
	AllowedSignatureAlgorithms []SignatureAlgorithm `protobuf:"varint,2,rep,packed,name=allowed_signature_algorithms,json=allowedSignatureAlgorithms,proto3,enum=google.cloud.networkservices.v1.SignatureAlgorithm" json:"allowed_signature_algorithms,omitempty"`
}

func (x *SignedTokenOptions) Reset() {
	*x = SignedTokenOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTokenOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTokenOptions) ProtoMessage() {}

func (x *SignedTokenOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTokenOptions.ProtoReflect.Descriptor instead.
func (*SignedTokenOptions) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{15}
}

func (x *SignedTokenOptions) GetTokenQueryParameter() string {
	if x != nil {
		return x.TokenQueryParameter
	}
	return ""
}

func (x *SignedTokenOptions) GetAllowedSignatureAlgorithms() []SignatureAlgorithm {
	if x != nil {
		return x.AllowedSignatureAlgorithms
	}
	return nil
}

// Enable signature generation or propagation.
type AddSignatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The actions to take to add signatures to responses.
	Actions []SignatureAction `protobuf:"varint,1,rep,packed,name=actions,proto3,enum=google.cloud.networkservices.v1.SignatureAction" json:"actions,omitempty"`
	// Optional. The keyset to use for signature generation.
	Keyset string `protobuf:"bytes,2,opt,name=keyset,proto3" json:"keyset,omitempty"`
	// Optional. The TTL for the generated token.
	TokenTtl *duration.Duration `protobuf:"bytes,3,opt,name=token_ttl,json=tokenTtl,proto3" json:"token_ttl,omitempty"`
	// Optional. The query parameter to use for the generated token.
	TokenQueryParameter string `protobuf:"bytes,4,opt,name=token_query_parameter,json=tokenQueryParameter,proto3" json:"token_query_parameter,omitempty"`
	// Optional. Parameters to copy from the verified token to the generated token.
	CopiedParameters []string `protobuf:"bytes,5,rep,name=copied_parameters,json=copiedParameters,proto3" json:"copied_parameters,omitempty"`
}

func (x *AddSignatures) Reset() {
	*x = AddSignatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSignatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSignatures) ProtoMessage() {}

func (x *AddSignatures) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSignatures.ProtoReflect.Descriptor instead.
func (*AddSignatures) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{16}
}

func (x *AddSignatures) GetActions() []SignatureAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *AddSignatures) GetKeyset() string {
	if x != nil {
		return x.Keyset
	}
	return ""
}

func (x *AddSignatures) GetTokenTtl() *duration.Duration {
	if x != nil {
		return x.TokenTtl
	}
	return nil
}

func (x *AddSignatures) GetTokenQueryParameter() string {
	if x != nil {
		return x.TokenQueryParameter
	}
	return ""
}

func (x *AddSignatures) GetCopiedParameters() []string {
	if x != nil {
		return x.CopiedParameters
	}
	return nil
}

// Specifies the redirect configuration.
type UrlRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The host that will be used in the redirect response instead of
	// the one that was supplied in the request.
	HostRedirect string `protobuf:"bytes,1,opt,name=host_redirect,json=hostRedirect,proto3" json:"host_redirect,omitempty"`
	// Optional. The path that will be used in the redirect response instead of
	// the one that was supplied in the request.
	PathRedirect string `protobuf:"bytes,2,opt,name=path_redirect,json=pathRedirect,proto3" json:"path_redirect,omitempty"`
	// Optional. The prefix that will be used in the redirect response instead of
	// the one that was supplied in the request.
	PrefixRedirect string `protobuf:"bytes,3,opt,name=prefix_redirect,json=prefixRedirect,proto3" json:"prefix_redirect,omitempty"`
	// Optional. The HTTP Status code to use for this RedirectAction.
	RedirectResponseCode RedirectResponseCode `protobuf:"varint,4,opt,name=redirect_response_code,json=redirectResponseCode,proto3,enum=google.cloud.networkservices.v1.RedirectResponseCode" json:"redirect_response_code,omitempty"`
	// Optional. If set to true, the URL scheme in the redirected request is set
	// to https.
	HttpsRedirect bool `protobuf:"varint,5,opt,name=https_redirect,json=httpsRedirect,proto3" json:"https_redirect,omitempty"`
	// Optional. If set to true, any accompanying query portion of the original
	// URL is removed prior to redirecting the request.
	StripQuery bool `protobuf:"varint,6,opt,name=strip_query,json=stripQuery,proto3" json:"strip_query,omitempty"`
}

func (x *UrlRedirect) Reset() {
	*x = UrlRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlRedirect) ProtoMessage() {}

func (x *UrlRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlRedirect.ProtoReflect.Descriptor instead.
func (*UrlRedirect) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{17}
}

func (x *UrlRedirect) GetHostRedirect() string {
	if x != nil {
		return x.HostRedirect
	}
	return ""
}

func (x *UrlRedirect) GetPathRedirect() string {
	if x != nil {
		return x.PathRedirect
	}
	return ""
}

func (x *UrlRedirect) GetPrefixRedirect() string {
	if x != nil {
		return x.PrefixRedirect
	}
	return ""
}

func (x *UrlRedirect) GetRedirectResponseCode() RedirectResponseCode {
	if x != nil {
		return x.RedirectResponseCode
	}
	return RedirectResponseCode_REDIRECT_RESPONSE_CODE_UNSPECIFIED
}

func (x *UrlRedirect) GetHttpsRedirect() bool {
	if x != nil {
		return x.HttpsRedirect
	}
	return false
}

func (x *UrlRedirect) GetStripQuery() bool {
	if x != nil {
		return x.StripQuery
	}
	return false
}

// Specifies the URL rewrite configuration.
type UrlRewrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Prior to forwarding the request to the selected origin, the
	// matching portion of the request's path is replaced by pathPrefixRewrite.
	PathPrefixRewrite string `protobuf:"bytes,1,opt,name=path_prefix_rewrite,json=pathPrefixRewrite,proto3" json:"path_prefix_rewrite,omitempty"`
	// Optional. Prior to forwarding the request to the selected origin, if the
	// request matched a pathTemplateMatch, the matching portion of the
	// request's path is replaced by pathTemplateRewrite.
	PathTemplateRewrite string `protobuf:"bytes,2,opt,name=path_template_rewrite,json=pathTemplateRewrite,proto3" json:"path_template_rewrite,omitempty"`
	// Optional. Prior to forwarding the request to the selected origin, the
	// request's host header is replaced by hostRewrite.
	HostRewrite string `protobuf:"bytes,3,opt,name=host_rewrite,json=hostRewrite,proto3" json:"host_rewrite,omitempty"`
}

func (x *UrlRewrite) Reset() {
	*x = UrlRewrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlRewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlRewrite) ProtoMessage() {}

func (x *UrlRewrite) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlRewrite.ProtoReflect.Descriptor instead.
func (*UrlRewrite) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{18}
}

func (x *UrlRewrite) GetPathPrefixRewrite() string {
	if x != nil {
		return x.PathPrefixRewrite
	}
	return ""
}

func (x *UrlRewrite) GetPathTemplateRewrite() string {
	if x != nil {
		return x.PathTemplateRewrite
	}
	return ""
}

func (x *UrlRewrite) GetHostRewrite() string {
	if x != nil {
		return x.HostRewrite
	}
	return ""
}

// Defines the policy for cross-origin resource sharing.
type CorsPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Specifies the content for the Access-Control-Max-Age header.
	MaxAge *duration.Duration `protobuf:"bytes,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Optional. Specifies the list of origins that will be allowed to do CORS
	// requests.
	AllowOrigins []string `protobuf:"bytes,2,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	// Optional. Specifies the content for the
	// Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,3,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// Optional. Specifies the content for the
	// Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,4,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// Optional. Specifies the content for the
	// Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,5,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Optional. Specifies whether credentials are allowed in CORS requests.
	AllowCredentials bool `protobuf:"varint,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	// Optional. If true, CORS policy is disabled. Defaults to false.
	Disabled bool `protobuf:"varint,7,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *CorsPolicy) Reset() {
	*x = CorsPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorsPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorsPolicy) ProtoMessage() {}

func (x *CorsPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorsPolicy.ProtoReflect.Descriptor instead.
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{19}
}

func (x *CorsPolicy) GetMaxAge() *duration.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *CorsPolicy) GetAllowOrigins() []string {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *CorsPolicy) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *CorsPolicy) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *CorsPolicy) GetExposeHeaders() []string {
	if x != nil {
		return x.ExposeHeaders
	}
	return nil
}

func (x *CorsPolicy) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

func (x *CorsPolicy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// Logging configuration for the service.
type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Specifies whether to enable logging for traffic served by this
	// service.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Optional. Configures the sampling rate of requests. Must be between 0.0
	// and 1.0 inclusive.
	SampleRate float32 `protobuf:"fixed32,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{20}
}

func (x *LogConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *LogConfig) GetSampleRate() float32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

// Request message for NetworkServices.ListEdgeCacheServices.
type ListEdgeCacheServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The project and location to list resources on, specified in the
	// following format: `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Maximum count of services to be returned. Maximum value is 1000.
	// If not specified, the default is 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. The value returned by the last
	// `ListEdgeCacheServicesResponse` call, indicates that this is a
	// continuation of a prior list call and that the system should return the
	// next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. The filter expression to use for listing.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. One or more fields to compare and use to sort the output.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListEdgeCacheServicesRequest) Reset() {
	*x = ListEdgeCacheServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeCacheServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeCacheServicesRequest) ProtoMessage() {}

func (x *ListEdgeCacheServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeCacheServicesRequest.ProtoReflect.Descriptor instead.
func (*ListEdgeCacheServicesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListEdgeCacheServicesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListEdgeCacheServicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEdgeCacheServicesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEdgeCacheServicesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListEdgeCacheServicesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for NetworkServices.ListEdgeCacheServices.
type ListEdgeCacheServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of EdgeCacheService resources.
	EdgeCacheServices []*EdgeCacheService `protobuf:"bytes,1,rep,name=edge_cache_services,json=edgeCacheServices,proto3" json:"edge_cache_services,omitempty"`
	// If there might be more results than those appearing in this response,
	// then `next_page_token` is included. To get the next set of results,
	// call this method again using the value of `next_page_token` as
	// `page_token`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListEdgeCacheServicesResponse) Reset() {
	*x = ListEdgeCacheServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEdgeCacheServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEdgeCacheServicesResponse) ProtoMessage() {}

func (x *ListEdgeCacheServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEdgeCacheServicesResponse.ProtoReflect.Descriptor instead.
func (*ListEdgeCacheServicesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListEdgeCacheServicesResponse) GetEdgeCacheServices() []*EdgeCacheService {
	if x != nil {
		return x.EdgeCacheServices
	}
	return nil
}

func (x *ListEdgeCacheServicesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEdgeCacheServicesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request message for NetworkServices.GetEdgeCacheService.
type GetEdgeCacheServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the EdgeCacheService to get.
	// Format:
	// projects/{project}/locations/{location}/edgeCacheServices/{edge_cache_service}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEdgeCacheServiceRequest) Reset() {
	*x = GetEdgeCacheServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgeCacheServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgeCacheServiceRequest) ProtoMessage() {}

func (x *GetEdgeCacheServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgeCacheServiceRequest.ProtoReflect.Descriptor instead.
func (*GetEdgeCacheServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{23}
}

func (x *GetEdgeCacheServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for NetworkServices.CreateEdgeCacheService.
type CreateEdgeCacheServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource of the EdgeCacheService. Must be in the
	// format `projects/{project}/locations/{location}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. Short name of the EdgeCacheService resource to be created.
	// It matches the pattern: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`
	EdgeCacheServiceId string `protobuf:"bytes,2,opt,name=edge_cache_service_id,json=edgeCacheServiceId,proto3" json:"edge_cache_service_id,omitempty"`
	// Required. EdgeCacheService resource to be created.
	EdgeCacheService *EdgeCacheService `protobuf:"bytes,3,opt,name=edge_cache_service,json=edgeCacheService,proto3" json:"edge_cache_service,omitempty"`
}

func (x *CreateEdgeCacheServiceRequest) Reset() {
	*x = CreateEdgeCacheServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEdgeCacheServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEdgeCacheServiceRequest) ProtoMessage() {}

func (x *CreateEdgeCacheServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEdgeCacheServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateEdgeCacheServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{24}
}

func (x *CreateEdgeCacheServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateEdgeCacheServiceRequest) GetEdgeCacheServiceId() string {
	if x != nil {
		return x.EdgeCacheServiceId
	}
	return ""
}

func (x *CreateEdgeCacheServiceRequest) GetEdgeCacheService() *EdgeCacheService {
	if x != nil {
		return x.EdgeCacheService
	}
	return nil
}

// Request message for NetworkServices.UpdateEdgeCacheService.
type UpdateEdgeCacheServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Field mask is used to specify the fields to be overwritten in the
	// EdgeCacheService resource by the update. The fields specified in the
	// update_mask are relative to the resource, not the full request. A field
	// will be overwritten if it is in the mask. If the user does not provide
	// a mask then all fields will be overwritten.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. The resource being updated.
	EdgeCacheService *EdgeCacheService `protobuf:"bytes,2,opt,name=edge_cache_service,json=edgeCacheService,proto3" json:"edge_cache_service,omitempty"`
}

func (x *UpdateEdgeCacheServiceRequest) Reset() {
	*x = UpdateEdgeCacheServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEdgeCacheServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEdgeCacheServiceRequest) ProtoMessage() {}

func (x *UpdateEdgeCacheServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEdgeCacheServiceRequest.ProtoReflect.Descriptor instead.
func (*UpdateEdgeCacheServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateEdgeCacheServiceRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateEdgeCacheServiceRequest) GetEdgeCacheService() *EdgeCacheService {
	if x != nil {
		return x.EdgeCacheService
	}
	return nil
}

// Request message for NetworkServices.DeleteEdgeCacheService.
type DeleteEdgeCacheServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the EdgeCacheService to delete.
	// Format:
	// projects/{project}/locations/{location}/edgeCacheServices/{edge_cache_service}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteEdgeCacheServiceRequest) Reset() {
	*x = DeleteEdgeCacheServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEdgeCacheServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEdgeCacheServiceRequest) ProtoMessage() {}

func (x *DeleteEdgeCacheServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEdgeCacheServiceRequest.ProtoReflect.Descriptor instead.
func (*DeleteEdgeCacheServiceRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteEdgeCacheServiceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_google_cloud_networkservices_v1_edge_cache_service_proto protoreflect.FileDescriptor

var file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x08, 0x0a, 0x10, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x15, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x27, 0x0a,
	0x25, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x13, 0x65, 0x64, 0x67, 0x65, 0x53, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x69, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x74, 0x74, 0x70, 0x32, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x14, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x01, 0xfa, 0x41,
	0x2c, 0x0a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x65,
	0x64, 0x67, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x85, 0x01, 0xea,
	0x41, 0x81, 0x01, 0x0a, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x64,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x7d, 0x22, 0xb0, 0x01, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x4d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x56, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x22, 0x74, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x22, 0x9f, 0x01,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0xd3, 0x04, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41,
	0x01, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x22, 0x88, 0x03, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b,
	0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x66, 0x75,
	0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x17, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xfd,
	0x01, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24,
	0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x03, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x6d,
	0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x66, 0x0a,
	0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x6f, 0x0a, 0x1a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x78, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x22, 0x34, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x64, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x64, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x64, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75,
	0x72, 0x6c, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x6f, 0x72,
	0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x72, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x9d,
	0x09, 0x0a, 0x09, 0x43, 0x64, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x0a,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x74, 0x6c, 0x12, 0x37, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x54, 0x74, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x64, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5e, 0x0a, 0x10, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x67, 0x0a, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x11, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12,
	0x6a, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x25, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x21, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x1a, 0x63, 0x0a, 0x1a, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93,
	0x03, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3f, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x15, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x7a, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x30, 0x0a, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74, 0x6c,
	0x12, 0x37, 0x0a, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x69, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x0b,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12,
	0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x70, 0x0a,
	0x16, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x70, 0x61, 0x74, 0x68, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x73, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x09, 0x4c,
	0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x31, 0x12, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0xcc, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x11, 0x65, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x31, 0x12, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x15, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x12, 0x65, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x65, 0x64, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x64, 0x0a, 0x12, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x10, 0x65, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x31, 0x0a, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x50, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x10, 0x04, 0x2a, 0x86, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x03, 0x2a, 0x67, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4d, 0x41, 0x43, 0x5f, 0x53,
	0x48, 0x41, 0x31, 0x10, 0x03, 0x2a, 0x8f, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x48, 0x4c, 0x53, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x4c, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x4c, 0x53, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49,
	0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xa7, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x52,
	0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10,
	0x05, 0x42, 0xda, 0x05, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x70, 0x62, 0x3b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x70,
	0x62, 0xaa, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0xea, 0x41, 0x7e, 0x0a, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x64,
	0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x4c, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x7b, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x7d, 0xea, 0x41, 0x7e, 0x0a, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x4c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x7d, 0xea, 0x41, 0x64, 0x0a,
	0x25, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x7b, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x7d, 0xea, 0x41, 0x78, 0x0a, 0x2a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x4a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x7d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescOnce sync.Once
	file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescData = file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDesc
)

func file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescGZIP() []byte {
	file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescOnce.Do(func() {
		file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescData)
	})
	return file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDescData
}

var file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_google_cloud_networkservices_v1_edge_cache_service_proto_goTypes = []interface{}{
	(CompressionMode)(0),                  // 0: google.cloud.networkservices.v1.CompressionMode
	(CacheMode)(0),                        // 1: google.cloud.networkservices.v1.CacheMode
	(SignedRequestMode)(0),                // 2: google.cloud.networkservices.v1.SignedRequestMode
	(SignatureAlgorithm)(0),               // 3: google.cloud.networkservices.v1.SignatureAlgorithm
	(SignatureAction)(0),                  // 4: google.cloud.networkservices.v1.SignatureAction
	(RedirectResponseCode)(0),             // 5: google.cloud.networkservices.v1.RedirectResponseCode
	(*EdgeCacheService)(nil),              // 6: google.cloud.networkservices.v1.EdgeCacheService
	(*Routing)(nil),                       // 7: google.cloud.networkservices.v1.Routing
	(*HostRule)(nil),                      // 8: google.cloud.networkservices.v1.HostRule
	(*PathMatcher)(nil),                   // 9: google.cloud.networkservices.v1.PathMatcher
	(*RouteRule)(nil),                     // 10: google.cloud.networkservices.v1.RouteRule
	(*RouteMethods)(nil),                  // 11: google.cloud.networkservices.v1.RouteMethods
	(*MatchRule)(nil),                     // 12: google.cloud.networkservices.v1.MatchRule
	(*HeaderMatch)(nil),                   // 13: google.cloud.networkservices.v1.HeaderMatch
	(*QueryParameterMatch)(nil),           // 14: google.cloud.networkservices.v1.QueryParameterMatch
	(*HeaderAction)(nil),                  // 15: google.cloud.networkservices.v1.HeaderAction
	(*AddHeader)(nil),                     // 16: google.cloud.networkservices.v1.AddHeader
	(*RemoveHeader)(nil),                  // 17: google.cloud.networkservices.v1.RemoveHeader
	(*RouteAction)(nil),                   // 18: google.cloud.networkservices.v1.RouteAction
	(*CdnPolicy)(nil),                     // 19: google.cloud.networkservices.v1.CdnPolicy
	(*CacheKeyPolicy)(nil),                // 20: google.cloud.networkservices.v1.CacheKeyPolicy
	(*SignedTokenOptions)(nil),            // 21: google.cloud.networkservices.v1.SignedTokenOptions
	(*AddSignatures)(nil),                 // 22: google.cloud.networkservices.v1.AddSignatures
	(*UrlRedirect)(nil),                   // 23: google.cloud.networkservices.v1.UrlRedirect
	(*UrlRewrite)(nil),                    // 24: google.cloud.networkservices.v1.UrlRewrite
	(*CorsPolicy)(nil),                    // 25: google.cloud.networkservices.v1.CorsPolicy
	(*LogConfig)(nil),                     // 26: google.cloud.networkservices.v1.LogConfig
	(*ListEdgeCacheServicesRequest)(nil),  // 27: google.cloud.networkservices.v1.ListEdgeCacheServicesRequest
	(*ListEdgeCacheServicesResponse)(nil), // 28: google.cloud.networkservices.v1.ListEdgeCacheServicesResponse
	(*GetEdgeCacheServiceRequest)(nil),    // 29: google.cloud.networkservices.v1.GetEdgeCacheServiceRequest
	(*CreateEdgeCacheServiceRequest)(nil), // 30: google.cloud.networkservices.v1.CreateEdgeCacheServiceRequest
	(*UpdateEdgeCacheServiceRequest)(nil), // 31: google.cloud.networkservices.v1.UpdateEdgeCacheServiceRequest
	(*DeleteEdgeCacheServiceRequest)(nil), // 32: google.cloud.networkservices.v1.DeleteEdgeCacheServiceRequest
	nil,                                   // 33: google.cloud.networkservices.v1.EdgeCacheService.LabelsEntry
	nil,                                   // 34: google.cloud.networkservices.v1.CdnPolicy.NegativeCachingPolicyEntry
	(*timestamp.Timestamp)(nil),           // 35: google.protobuf.Timestamp
	(*duration.Duration)(nil),             // 36: google.protobuf.Duration
	(*field_mask.FieldMask)(nil),          // 37: google.protobuf.FieldMask
}
var file_google_cloud_networkservices_v1_edge_cache_service_proto_depIdxs = []int32{
	35, // 0: google.cloud.networkservices.v1.EdgeCacheService.create_time:type_name -> google.protobuf.Timestamp
	35, // 1: google.cloud.networkservices.v1.EdgeCacheService.update_time:type_name -> google.protobuf.Timestamp
	33, // 2: google.cloud.networkservices.v1.EdgeCacheService.labels:type_name -> google.cloud.networkservices.v1.EdgeCacheService.LabelsEntry
	7,  // 3: google.cloud.networkservices.v1.EdgeCacheService.routing:type_name -> google.cloud.networkservices.v1.Routing
	26, // 4: google.cloud.networkservices.v1.EdgeCacheService.log_config:type_name -> google.cloud.networkservices.v1.LogConfig
	8,  // 5: google.cloud.networkservices.v1.Routing.host_rules:type_name -> google.cloud.networkservices.v1.HostRule
	9,  // 6: google.cloud.networkservices.v1.Routing.path_matchers:type_name -> google.cloud.networkservices.v1.PathMatcher
	10, // 7: google.cloud.networkservices.v1.PathMatcher.route_rules:type_name -> google.cloud.networkservices.v1.RouteRule
	12, // 8: google.cloud.networkservices.v1.RouteRule.match_rules:type_name -> google.cloud.networkservices.v1.MatchRule
	15, // 9: google.cloud.networkservices.v1.RouteRule.header_action:type_name -> google.cloud.networkservices.v1.HeaderAction
	18, // 10: google.cloud.networkservices.v1.RouteRule.route_action:type_name -> google.cloud.networkservices.v1.RouteAction
	23, // 11: google.cloud.networkservices.v1.RouteRule.url_redirect:type_name -> google.cloud.networkservices.v1.UrlRedirect
	11, // 12: google.cloud.networkservices.v1.RouteRule.route_methods:type_name -> google.cloud.networkservices.v1.RouteMethods
	13, // 13: google.cloud.networkservices.v1.MatchRule.header_matches:type_name -> google.cloud.networkservices.v1.HeaderMatch
	14, // 14: google.cloud.networkservices.v1.MatchRule.query_parameter_matches:type_name -> google.cloud.networkservices.v1.QueryParameterMatch
	16, // 15: google.cloud.networkservices.v1.HeaderAction.request_headers_to_add:type_name -> google.cloud.networkservices.v1.AddHeader
	17, // 16: google.cloud.networkservices.v1.HeaderAction.request_headers_to_remove:type_name -> google.cloud.networkservices.v1.RemoveHeader
	16, // 17: google.cloud.networkservices.v1.HeaderAction.response_headers_to_add:type_name -> google.cloud.networkservices.v1.AddHeader
	17, // 18: google.cloud.networkservices.v1.HeaderAction.response_headers_to_remove:type_name -> google.cloud.networkservices.v1.RemoveHeader
	19, // 19: google.cloud.networkservices.v1.RouteAction.cdn_policy:type_name -> google.cloud.networkservices.v1.CdnPolicy
	24, // 20: google.cloud.networkservices.v1.RouteAction.url_rewrite:type_name -> google.cloud.networkservices.v1.UrlRewrite
	25, // 21: google.cloud.networkservices.v1.RouteAction.cors_policy:type_name -> google.cloud.networkservices.v1.CorsPolicy
	0,  // 22: google.cloud.networkservices.v1.RouteAction.compression_mode:type_name -> google.cloud.networkservices.v1.CompressionMode
	1,  // 23: google.cloud.networkservices.v1.CdnPolicy.cache_mode:type_name -> google.cloud.networkservices.v1.CacheMode
	36, // 24: google.cloud.networkservices.v1.CdnPolicy.client_ttl:type_name -> google.protobuf.Duration
	36, // 25: google.cloud.networkservices.v1.CdnPolicy.default_ttl:type_name -> google.protobuf.Duration
	36, // 26: google.cloud.networkservices.v1.CdnPolicy.max_ttl:type_name -> google.protobuf.Duration
	34, // 27: google.cloud.networkservices.v1.CdnPolicy.negative_caching_policy:type_name -> google.cloud.networkservices.v1.CdnPolicy.NegativeCachingPolicyEntry
	20, // 28: google.cloud.networkservices.v1.CdnPolicy.cache_key_policy:type_name -> google.cloud.networkservices.v1.CacheKeyPolicy
	2,  // 29: google.cloud.networkservices.v1.CdnPolicy.signed_request_mode:type_name -> google.cloud.networkservices.v1.SignedRequestMode
	21, // 30: google.cloud.networkservices.v1.CdnPolicy.signed_token_options:type_name -> google.cloud.networkservices.v1.SignedTokenOptions
	22, // 31: google.cloud.networkservices.v1.CdnPolicy.add_signatures:type_name -> google.cloud.networkservices.v1.AddSignatures
	36, // 32: google.cloud.networkservices.v1.CdnPolicy.signed_request_maximum_expiration_ttl:type_name -> google.protobuf.Duration
	3,  // 33: google.cloud.networkservices.v1.SignedTokenOptions.allowed_signature_algorithms:type_name -> google.cloud.networkservices.v1.SignatureAlgorithm
	4,  // 34: google.cloud.networkservices.v1.AddSignatures.actions:type_name -> google.cloud.networkservices.v1.SignatureAction
	36, // 35: google.cloud.networkservices.v1.AddSignatures.token_ttl:type_name -> google.protobuf.Duration
	5,  // 36: google.cloud.networkservices.v1.UrlRedirect.redirect_response_code:type_name -> google.cloud.networkservices.v1.RedirectResponseCode
	36, // 37: google.cloud.networkservices.v1.CorsPolicy.max_age:type_name -> google.protobuf.Duration
	6,  // 38: google.cloud.networkservices.v1.ListEdgeCacheServicesResponse.edge_cache_services:type_name -> google.cloud.networkservices.v1.EdgeCacheService
	6,  // 39: google.cloud.networkservices.v1.CreateEdgeCacheServiceRequest.edge_cache_service:type_name -> google.cloud.networkservices.v1.EdgeCacheService
	37, // 40: google.cloud.networkservices.v1.UpdateEdgeCacheServiceRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 41: google.cloud.networkservices.v1.UpdateEdgeCacheServiceRequest.edge_cache_service:type_name -> google.cloud.networkservices.v1.EdgeCacheService
	36, // 42: google.cloud.networkservices.v1.CdnPolicy.NegativeCachingPolicyEntry.value:type_name -> google.protobuf.Duration
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_google_cloud_networkservices_v1_edge_cache_service_proto_init() }
func file_google_cloud_networkservices_v1_edge_cache_service_proto_init() {
	if File_google_cloud_networkservices_v1_edge_cache_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeCacheService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParameterMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdnPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheKeyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTokenOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSignatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlRewrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorsPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeCacheServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEdgeCacheServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgeCacheServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEdgeCacheServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEdgeCacheServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEdgeCacheServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HeaderMatch_PresentMatch)(nil),
		(*HeaderMatch_ExactMatch)(nil),
		(*HeaderMatch_PrefixMatch)(nil),
		(*HeaderMatch_SuffixMatch)(nil),
	}
	file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*QueryParameterMatch_PresentMatch)(nil),
		(*QueryParameterMatch_ExactMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_networkservices_v1_edge_cache_service_proto_goTypes,
		DependencyIndexes: file_google_cloud_networkservices_v1_edge_cache_service_proto_depIdxs,
		EnumInfos:         file_google_cloud_networkservices_v1_edge_cache_service_proto_enumTypes,
		MessageInfos:      file_google_cloud_networkservices_v1_edge_cache_service_proto_msgTypes,
	}.Build()
	File_google_cloud_networkservices_v1_edge_cache_service_proto = out.File
	file_google_cloud_networkservices_v1_edge_cache_service_proto_rawDesc = nil
	file_google_cloud_networkservices_v1_edge_cache_service_proto_goTypes = nil
	file_google_cloud_networkservices_v1_edge_cache_service_proto_depIdxs = nil
}
