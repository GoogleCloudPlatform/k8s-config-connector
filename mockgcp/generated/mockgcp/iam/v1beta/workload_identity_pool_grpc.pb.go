// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/iam/v1beta/workload_identity_pool.proto

package iampb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkloadIdentityPoolsClient is the client API for WorkloadIdentityPools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadIdentityPoolsClient interface {
	// Lists all non-deleted
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool]s in a
	// project. If `show_deleted` is set to `true`, then deleted pools are also
	// listed.
	ListWorkloadIdentityPools(ctx context.Context, in *ListWorkloadIdentityPoolsRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityPoolsResponse, error)
	// Gets an individual
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	GetWorkloadIdentityPool(ctx context.Context, in *GetWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*WorkloadIdentityPool, error)
	// Creates a new
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot reuse the name of a deleted pool until 30 days after deletion.
	CreateWorkloadIdentityPool(ctx context.Context, in *CreateWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an existing
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	UpdateWorkloadIdentityPool(ctx context.Context, in *UpdateWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot use a deleted pool to exchange external
	// credentials for Google Cloud credentials. However, deletion does
	// not revoke credentials that have already been issued.
	// Credentials issued for a deleted pool do not grant access to resources.
	// If the pool is undeleted, and the credentials are not expired, they
	// grant access again.
	// You can undelete a pool for 30 days. After 30 days, deletion is
	// permanent.
	// You cannot update deleted pools. However, you can view and list them.
	DeleteWorkloadIdentityPool(ctx context.Context, in *DeleteWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Undeletes a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool],
	// as long as it was deleted fewer than 30 days ago.
	UndeleteWorkloadIdentityPool(ctx context.Context, in *UndeleteWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists all non-deleted
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityPoolProvider]s
	// in a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	// If `show_deleted` is set to `true`, then deleted providers are also listed.
	ListWorkloadIdentityPoolProviders(ctx context.Context, in *ListWorkloadIdentityPoolProvidersRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityPoolProvidersResponse, error)
	// Gets an individual
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityPoolProvider].
	GetWorkloadIdentityPoolProvider(ctx context.Context, in *GetWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*WorkloadIdentityPoolProvider, error)
	// Creates a new
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider]
	// in a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot reuse the name of a deleted provider until 30 days after
	// deletion.
	CreateWorkloadIdentityPoolProvider(ctx context.Context, in *CreateWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates an existing
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider].
	UpdateWorkloadIdentityPoolProvider(ctx context.Context, in *UpdateWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider].
	// Deleting a provider does not revoke credentials that have already been
	// issued; they continue to grant access.
	// You can undelete a provider for 30 days. After 30 days, deletion is
	// permanent.
	// You cannot update deleted providers. However, you can view and list them.
	DeleteWorkloadIdentityPoolProvider(ctx context.Context, in *DeleteWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Undeletes a
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider],
	// as long as it was deleted fewer than 30 days ago.
	UndeleteWorkloadIdentityPoolProvider(ctx context.Context, in *UndeleteWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type workloadIdentityPoolsClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadIdentityPoolsClient(cc grpc.ClientConnInterface) WorkloadIdentityPoolsClient {
	return &workloadIdentityPoolsClient{cc}
}

func (c *workloadIdentityPoolsClient) ListWorkloadIdentityPools(ctx context.Context, in *ListWorkloadIdentityPoolsRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityPoolsResponse, error) {
	out := new(ListWorkloadIdentityPoolsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) GetWorkloadIdentityPool(ctx context.Context, in *GetWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*WorkloadIdentityPool, error) {
	out := new(WorkloadIdentityPool)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) CreateWorkloadIdentityPool(ctx context.Context, in *CreateWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) UpdateWorkloadIdentityPool(ctx context.Context, in *UpdateWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) DeleteWorkloadIdentityPool(ctx context.Context, in *DeleteWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) UndeleteWorkloadIdentityPool(ctx context.Context, in *UndeleteWorkloadIdentityPoolRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) ListWorkloadIdentityPoolProviders(ctx context.Context, in *ListWorkloadIdentityPoolProvidersRequest, opts ...grpc.CallOption) (*ListWorkloadIdentityPoolProvidersResponse, error) {
	out := new(ListWorkloadIdentityPoolProvidersResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPoolProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) GetWorkloadIdentityPoolProvider(ctx context.Context, in *GetWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*WorkloadIdentityPoolProvider, error) {
	out := new(WorkloadIdentityPoolProvider)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) CreateWorkloadIdentityPoolProvider(ctx context.Context, in *CreateWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) UpdateWorkloadIdentityPoolProvider(ctx context.Context, in *UpdateWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) DeleteWorkloadIdentityPoolProvider(ctx context.Context, in *DeleteWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadIdentityPoolsClient) UndeleteWorkloadIdentityPoolProvider(ctx context.Context, in *UndeleteWorkloadIdentityPoolProviderRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPoolProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadIdentityPoolsServer is the server API for WorkloadIdentityPools service.
// All implementations must embed UnimplementedWorkloadIdentityPoolsServer
// for forward compatibility
type WorkloadIdentityPoolsServer interface {
	// Lists all non-deleted
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool]s in a
	// project. If `show_deleted` is set to `true`, then deleted pools are also
	// listed.
	ListWorkloadIdentityPools(context.Context, *ListWorkloadIdentityPoolsRequest) (*ListWorkloadIdentityPoolsResponse, error)
	// Gets an individual
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	GetWorkloadIdentityPool(context.Context, *GetWorkloadIdentityPoolRequest) (*WorkloadIdentityPool, error)
	// Creates a new
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot reuse the name of a deleted pool until 30 days after deletion.
	CreateWorkloadIdentityPool(context.Context, *CreateWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error)
	// Updates an existing
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	UpdateWorkloadIdentityPool(context.Context, *UpdateWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error)
	// Deletes a
	// [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot use a deleted pool to exchange external
	// credentials for Google Cloud credentials. However, deletion does
	// not revoke credentials that have already been issued.
	// Credentials issued for a deleted pool do not grant access to resources.
	// If the pool is undeleted, and the credentials are not expired, they
	// grant access again.
	// You can undelete a pool for 30 days. After 30 days, deletion is
	// permanent.
	// You cannot update deleted pools. However, you can view and list them.
	DeleteWorkloadIdentityPool(context.Context, *DeleteWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error)
	// Undeletes a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool],
	// as long as it was deleted fewer than 30 days ago.
	UndeleteWorkloadIdentityPool(context.Context, *UndeleteWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error)
	// Lists all non-deleted
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityPoolProvider]s
	// in a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	// If `show_deleted` is set to `true`, then deleted providers are also listed.
	ListWorkloadIdentityPoolProviders(context.Context, *ListWorkloadIdentityPoolProvidersRequest) (*ListWorkloadIdentityPoolProvidersResponse, error)
	// Gets an individual
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityPoolProvider].
	GetWorkloadIdentityPoolProvider(context.Context, *GetWorkloadIdentityPoolProviderRequest) (*WorkloadIdentityPoolProvider, error)
	// Creates a new
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider]
	// in a [WorkloadIdentityPool][mockgcp.iam.v1beta.WorkloadIdentityPool].
	//
	// You cannot reuse the name of a deleted provider until 30 days after
	// deletion.
	CreateWorkloadIdentityPoolProvider(context.Context, *CreateWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error)
	// Updates an existing
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider].
	UpdateWorkloadIdentityPoolProvider(context.Context, *UpdateWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error)
	// Deletes a
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider].
	// Deleting a provider does not revoke credentials that have already been
	// issued; they continue to grant access.
	// You can undelete a provider for 30 days. After 30 days, deletion is
	// permanent.
	// You cannot update deleted providers. However, you can view and list them.
	DeleteWorkloadIdentityPoolProvider(context.Context, *DeleteWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error)
	// Undeletes a
	// [WorkloadIdentityPoolProvider][mockgcp.iam.v1beta.WorkloadIdentityProvider],
	// as long as it was deleted fewer than 30 days ago.
	UndeleteWorkloadIdentityPoolProvider(context.Context, *UndeleteWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedWorkloadIdentityPoolsServer()
}

// UnimplementedWorkloadIdentityPoolsServer must be embedded to have forward compatible implementations.
type UnimplementedWorkloadIdentityPoolsServer struct {
}

func (UnimplementedWorkloadIdentityPoolsServer) ListWorkloadIdentityPools(context.Context, *ListWorkloadIdentityPoolsRequest) (*ListWorkloadIdentityPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloadIdentityPools not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) GetWorkloadIdentityPool(context.Context, *GetWorkloadIdentityPoolRequest) (*WorkloadIdentityPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadIdentityPool not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) CreateWorkloadIdentityPool(context.Context, *CreateWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkloadIdentityPool not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) UpdateWorkloadIdentityPool(context.Context, *UpdateWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkloadIdentityPool not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) DeleteWorkloadIdentityPool(context.Context, *DeleteWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkloadIdentityPool not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) UndeleteWorkloadIdentityPool(context.Context, *UndeleteWorkloadIdentityPoolRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteWorkloadIdentityPool not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) ListWorkloadIdentityPoolProviders(context.Context, *ListWorkloadIdentityPoolProvidersRequest) (*ListWorkloadIdentityPoolProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloadIdentityPoolProviders not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) GetWorkloadIdentityPoolProvider(context.Context, *GetWorkloadIdentityPoolProviderRequest) (*WorkloadIdentityPoolProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadIdentityPoolProvider not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) CreateWorkloadIdentityPoolProvider(context.Context, *CreateWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkloadIdentityPoolProvider not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) UpdateWorkloadIdentityPoolProvider(context.Context, *UpdateWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkloadIdentityPoolProvider not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) DeleteWorkloadIdentityPoolProvider(context.Context, *DeleteWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkloadIdentityPoolProvider not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) UndeleteWorkloadIdentityPoolProvider(context.Context, *UndeleteWorkloadIdentityPoolProviderRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteWorkloadIdentityPoolProvider not implemented")
}
func (UnimplementedWorkloadIdentityPoolsServer) mustEmbedUnimplementedWorkloadIdentityPoolsServer() {}

// UnsafeWorkloadIdentityPoolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadIdentityPoolsServer will
// result in compilation errors.
type UnsafeWorkloadIdentityPoolsServer interface {
	mustEmbedUnimplementedWorkloadIdentityPoolsServer()
}

func RegisterWorkloadIdentityPoolsServer(s grpc.ServiceRegistrar, srv WorkloadIdentityPoolsServer) {
	s.RegisterService(&WorkloadIdentityPools_ServiceDesc, srv)
}

func _WorkloadIdentityPools_ListWorkloadIdentityPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadIdentityPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).ListWorkloadIdentityPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).ListWorkloadIdentityPools(ctx, req.(*ListWorkloadIdentityPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_GetWorkloadIdentityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadIdentityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).GetWorkloadIdentityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).GetWorkloadIdentityPool(ctx, req.(*GetWorkloadIdentityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_CreateWorkloadIdentityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadIdentityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).CreateWorkloadIdentityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).CreateWorkloadIdentityPool(ctx, req.(*CreateWorkloadIdentityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_UpdateWorkloadIdentityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadIdentityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).UpdateWorkloadIdentityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).UpdateWorkloadIdentityPool(ctx, req.(*UpdateWorkloadIdentityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_DeleteWorkloadIdentityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadIdentityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).DeleteWorkloadIdentityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).DeleteWorkloadIdentityPool(ctx, req.(*DeleteWorkloadIdentityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_UndeleteWorkloadIdentityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteWorkloadIdentityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).UndeleteWorkloadIdentityPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).UndeleteWorkloadIdentityPool(ctx, req.(*UndeleteWorkloadIdentityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_ListWorkloadIdentityPoolProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadIdentityPoolProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).ListWorkloadIdentityPoolProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/ListWorkloadIdentityPoolProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).ListWorkloadIdentityPoolProviders(ctx, req.(*ListWorkloadIdentityPoolProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_GetWorkloadIdentityPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadIdentityPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).GetWorkloadIdentityPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/GetWorkloadIdentityPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).GetWorkloadIdentityPoolProvider(ctx, req.(*GetWorkloadIdentityPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_CreateWorkloadIdentityPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadIdentityPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).CreateWorkloadIdentityPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/CreateWorkloadIdentityPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).CreateWorkloadIdentityPoolProvider(ctx, req.(*CreateWorkloadIdentityPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_UpdateWorkloadIdentityPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadIdentityPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).UpdateWorkloadIdentityPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/UpdateWorkloadIdentityPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).UpdateWorkloadIdentityPoolProvider(ctx, req.(*UpdateWorkloadIdentityPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_DeleteWorkloadIdentityPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadIdentityPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).DeleteWorkloadIdentityPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/DeleteWorkloadIdentityPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).DeleteWorkloadIdentityPoolProvider(ctx, req.(*DeleteWorkloadIdentityPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadIdentityPools_UndeleteWorkloadIdentityPoolProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteWorkloadIdentityPoolProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadIdentityPoolsServer).UndeleteWorkloadIdentityPoolProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.iam.v1beta.WorkloadIdentityPools/UndeleteWorkloadIdentityPoolProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadIdentityPoolsServer).UndeleteWorkloadIdentityPoolProvider(ctx, req.(*UndeleteWorkloadIdentityPoolProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadIdentityPools_ServiceDesc is the grpc.ServiceDesc for WorkloadIdentityPools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadIdentityPools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.iam.v1beta.WorkloadIdentityPools",
	HandlerType: (*WorkloadIdentityPoolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWorkloadIdentityPools",
			Handler:    _WorkloadIdentityPools_ListWorkloadIdentityPools_Handler,
		},
		{
			MethodName: "GetWorkloadIdentityPool",
			Handler:    _WorkloadIdentityPools_GetWorkloadIdentityPool_Handler,
		},
		{
			MethodName: "CreateWorkloadIdentityPool",
			Handler:    _WorkloadIdentityPools_CreateWorkloadIdentityPool_Handler,
		},
		{
			MethodName: "UpdateWorkloadIdentityPool",
			Handler:    _WorkloadIdentityPools_UpdateWorkloadIdentityPool_Handler,
		},
		{
			MethodName: "DeleteWorkloadIdentityPool",
			Handler:    _WorkloadIdentityPools_DeleteWorkloadIdentityPool_Handler,
		},
		{
			MethodName: "UndeleteWorkloadIdentityPool",
			Handler:    _WorkloadIdentityPools_UndeleteWorkloadIdentityPool_Handler,
		},
		{
			MethodName: "ListWorkloadIdentityPoolProviders",
			Handler:    _WorkloadIdentityPools_ListWorkloadIdentityPoolProviders_Handler,
		},
		{
			MethodName: "GetWorkloadIdentityPoolProvider",
			Handler:    _WorkloadIdentityPools_GetWorkloadIdentityPoolProvider_Handler,
		},
		{
			MethodName: "CreateWorkloadIdentityPoolProvider",
			Handler:    _WorkloadIdentityPools_CreateWorkloadIdentityPoolProvider_Handler,
		},
		{
			MethodName: "UpdateWorkloadIdentityPoolProvider",
			Handler:    _WorkloadIdentityPools_UpdateWorkloadIdentityPoolProvider_Handler,
		},
		{
			MethodName: "DeleteWorkloadIdentityPoolProvider",
			Handler:    _WorkloadIdentityPools_DeleteWorkloadIdentityPoolProvider_Handler,
		},
		{
			MethodName: "UndeleteWorkloadIdentityPoolProvider",
			Handler:    _WorkloadIdentityPools_UndeleteWorkloadIdentityPoolProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/iam/v1beta/workload_identity_pool.proto",
}
