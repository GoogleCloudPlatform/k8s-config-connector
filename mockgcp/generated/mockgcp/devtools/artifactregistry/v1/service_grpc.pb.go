// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/devtools/artifactregistry/v1/service.proto

package artifactregistrypb

import (
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArtifactRegistryClient is the client API for ArtifactRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactRegistryClient interface {
	// Lists docker images.
	ListDockerImages(ctx context.Context, in *ListDockerImagesRequest, opts ...grpc.CallOption) (*ListDockerImagesResponse, error)
	// Gets a docker image.
	GetDockerImage(ctx context.Context, in *GetDockerImageRequest, opts ...grpc.CallOption) (*DockerImage, error)
	// Lists maven artifacts.
	ListMavenArtifacts(ctx context.Context, in *ListMavenArtifactsRequest, opts ...grpc.CallOption) (*ListMavenArtifactsResponse, error)
	// Gets a maven artifact.
	GetMavenArtifact(ctx context.Context, in *GetMavenArtifactRequest, opts ...grpc.CallOption) (*MavenArtifact, error)
	// Lists npm packages.
	ListNpmPackages(ctx context.Context, in *ListNpmPackagesRequest, opts ...grpc.CallOption) (*ListNpmPackagesResponse, error)
	// Gets a npm package.
	GetNpmPackage(ctx context.Context, in *GetNpmPackageRequest, opts ...grpc.CallOption) (*NpmPackage, error)
	// Lists python packages.
	ListPythonPackages(ctx context.Context, in *ListPythonPackagesRequest, opts ...grpc.CallOption) (*ListPythonPackagesResponse, error)
	// Gets a python package.
	GetPythonPackage(ctx context.Context, in *GetPythonPackageRequest, opts ...grpc.CallOption) (*PythonPackage, error)
	// Imports Apt artifacts. The returned Operation will complete once the
	// resources are imported. Package, Version, and File resources are created
	// based on the imported artifacts. Imported artifacts that conflict with
	// existing resources are ignored.
	ImportAptArtifacts(ctx context.Context, in *ImportAptArtifactsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Imports Yum (RPM) artifacts. The returned Operation will complete once the
	// resources are imported. Package, Version, and File resources are created
	// based on the imported artifacts. Imported artifacts that conflict with
	// existing resources are ignored.
	ImportYumArtifacts(ctx context.Context, in *ImportYumArtifactsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists repositories.
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Gets a repository.
	GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
	// Creates a repository. The returned Operation will finish once the
	// repository has been created. Its response will be the created Repository.
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a repository.
	UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
	// Deletes a repository and all of its contents. The returned Operation will
	// finish once the repository has been deleted. It will not have any Operation
	// metadata and will return a google.protobuf.Empty response.
	DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists packages.
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	// Gets a package.
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*Package, error)
	// Deletes a package and all of its versions and tags. The returned operation
	// will complete once the package has been deleted.
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Lists versions.
	ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error)
	// Gets a version
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error)
	// Deletes a version and all of its content. The returned operation will
	// complete once the version has been deleted.
	DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes multiple versions across a repository. The returned operation will
	// complete once the versions have been deleted.
	BatchDeleteVersions(ctx context.Context, in *BatchDeleteVersionsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a version.
	UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*Version, error)
	// Lists files.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Gets a file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error)
	// Deletes a file and all of its content. It is only allowed on generic
	// repositories. The returned operation will complete once the file has been
	// deleted.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates a file.
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*File, error)
	// Lists tags.
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	// Gets a tag.
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// Creates a tag.
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// Updates a tag.
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error)
	// Deletes a tag.
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a rule.
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Lists rules.
	ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// Gets a rule.
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Updates a rule.
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Deletes a rule.
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Updates the IAM policy for a given resource.
	SetIamPolicy(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
	// Gets the IAM policy for a given resource.
	GetIamPolicy(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error)
	// Tests if the caller has a list of permissions on a resource.
	TestIamPermissions(ctx context.Context, in *iampb.TestIamPermissionsRequest, opts ...grpc.CallOption) (*iampb.TestIamPermissionsResponse, error)
	// Retrieves the Settings for the Project.
	GetProjectSettings(ctx context.Context, in *GetProjectSettingsRequest, opts ...grpc.CallOption) (*ProjectSettings, error)
	// Updates the Settings for the Project.
	UpdateProjectSettings(ctx context.Context, in *UpdateProjectSettingsRequest, opts ...grpc.CallOption) (*ProjectSettings, error)
	// Retrieves the VPCSC Config for the Project.
	GetVPCSCConfig(ctx context.Context, in *GetVPCSCConfigRequest, opts ...grpc.CallOption) (*VPCSCConfig, error)
	// Updates the VPCSC Config for the Project.
	UpdateVPCSCConfig(ctx context.Context, in *UpdateVPCSCConfigRequest, opts ...grpc.CallOption) (*VPCSCConfig, error)
	// Updates a package.
	UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*Package, error)
	// Lists attachments.
	ListAttachments(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*ListAttachmentsResponse, error)
	// Gets an attachment.
	GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	// Creates an attachment. The returned Operation will finish once the
	// attachment has been created. Its response will be the created attachment.
	CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an attachment. The returned Operation will
	// finish once the attachments has been deleted. It will not have any
	// Operation metadata and will return a `google.protobuf.Empty` response.
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type artifactRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactRegistryClient(cc grpc.ClientConnInterface) ArtifactRegistryClient {
	return &artifactRegistryClient{cc}
}

func (c *artifactRegistryClient) ListDockerImages(ctx context.Context, in *ListDockerImagesRequest, opts ...grpc.CallOption) (*ListDockerImagesResponse, error) {
	out := new(ListDockerImagesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListDockerImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetDockerImage(ctx context.Context, in *GetDockerImageRequest, opts ...grpc.CallOption) (*DockerImage, error) {
	out := new(DockerImage)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetDockerImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListMavenArtifacts(ctx context.Context, in *ListMavenArtifactsRequest, opts ...grpc.CallOption) (*ListMavenArtifactsResponse, error) {
	out := new(ListMavenArtifactsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListMavenArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetMavenArtifact(ctx context.Context, in *GetMavenArtifactRequest, opts ...grpc.CallOption) (*MavenArtifact, error) {
	out := new(MavenArtifact)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetMavenArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListNpmPackages(ctx context.Context, in *ListNpmPackagesRequest, opts ...grpc.CallOption) (*ListNpmPackagesResponse, error) {
	out := new(ListNpmPackagesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListNpmPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetNpmPackage(ctx context.Context, in *GetNpmPackageRequest, opts ...grpc.CallOption) (*NpmPackage, error) {
	out := new(NpmPackage)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetNpmPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListPythonPackages(ctx context.Context, in *ListPythonPackagesRequest, opts ...grpc.CallOption) (*ListPythonPackagesResponse, error) {
	out := new(ListPythonPackagesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListPythonPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetPythonPackage(ctx context.Context, in *GetPythonPackageRequest, opts ...grpc.CallOption) (*PythonPackage, error) {
	out := new(PythonPackage)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetPythonPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ImportAptArtifacts(ctx context.Context, in *ImportAptArtifactsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ImportAptArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ImportYumArtifacts(ctx context.Context, in *ImportYumArtifactsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ImportYumArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetRepository(ctx context.Context, in *GetRepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateRepository(ctx context.Context, in *UpdateRepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteRepository(ctx context.Context, in *DeleteRepositoryRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeletePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListVersions(ctx context.Context, in *ListVersionsRequest, opts ...grpc.CallOption) (*ListVersionsResponse, error) {
	out := new(ListVersionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteVersion(ctx context.Context, in *DeleteVersionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) BatchDeleteVersions(ctx context.Context, in *BatchDeleteVersionsRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/BatchDeleteVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateVersion(ctx context.Context, in *UpdateVersionRequest, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*Tag, error) {
	out := new(Tag)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListRules(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) SetIamPolicy(ctx context.Context, in *iampb.SetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/SetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetIamPolicy(ctx context.Context, in *iampb.GetIamPolicyRequest, opts ...grpc.CallOption) (*iampb.Policy, error) {
	out := new(iampb.Policy)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetIamPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) TestIamPermissions(ctx context.Context, in *iampb.TestIamPermissionsRequest, opts ...grpc.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	out := new(iampb.TestIamPermissionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/TestIamPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetProjectSettings(ctx context.Context, in *GetProjectSettingsRequest, opts ...grpc.CallOption) (*ProjectSettings, error) {
	out := new(ProjectSettings)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetProjectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateProjectSettings(ctx context.Context, in *UpdateProjectSettingsRequest, opts ...grpc.CallOption) (*ProjectSettings, error) {
	out := new(ProjectSettings)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateProjectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetVPCSCConfig(ctx context.Context, in *GetVPCSCConfigRequest, opts ...grpc.CallOption) (*VPCSCConfig, error) {
	out := new(VPCSCConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetVPCSCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdateVPCSCConfig(ctx context.Context, in *UpdateVPCSCConfigRequest, opts ...grpc.CallOption) (*VPCSCConfig, error) {
	out := new(VPCSCConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateVPCSCConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) ListAttachments(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*ListAttachmentsResponse, error) {
	out := new(ListAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactRegistryClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactRegistryServer is the server API for ArtifactRegistry service.
// All implementations must embed UnimplementedArtifactRegistryServer
// for forward compatibility
type ArtifactRegistryServer interface {
	// Lists docker images.
	ListDockerImages(context.Context, *ListDockerImagesRequest) (*ListDockerImagesResponse, error)
	// Gets a docker image.
	GetDockerImage(context.Context, *GetDockerImageRequest) (*DockerImage, error)
	// Lists maven artifacts.
	ListMavenArtifacts(context.Context, *ListMavenArtifactsRequest) (*ListMavenArtifactsResponse, error)
	// Gets a maven artifact.
	GetMavenArtifact(context.Context, *GetMavenArtifactRequest) (*MavenArtifact, error)
	// Lists npm packages.
	ListNpmPackages(context.Context, *ListNpmPackagesRequest) (*ListNpmPackagesResponse, error)
	// Gets a npm package.
	GetNpmPackage(context.Context, *GetNpmPackageRequest) (*NpmPackage, error)
	// Lists python packages.
	ListPythonPackages(context.Context, *ListPythonPackagesRequest) (*ListPythonPackagesResponse, error)
	// Gets a python package.
	GetPythonPackage(context.Context, *GetPythonPackageRequest) (*PythonPackage, error)
	// Imports Apt artifacts. The returned Operation will complete once the
	// resources are imported. Package, Version, and File resources are created
	// based on the imported artifacts. Imported artifacts that conflict with
	// existing resources are ignored.
	ImportAptArtifacts(context.Context, *ImportAptArtifactsRequest) (*longrunningpb.Operation, error)
	// Imports Yum (RPM) artifacts. The returned Operation will complete once the
	// resources are imported. Package, Version, and File resources are created
	// based on the imported artifacts. Imported artifacts that conflict with
	// existing resources are ignored.
	ImportYumArtifacts(context.Context, *ImportYumArtifactsRequest) (*longrunningpb.Operation, error)
	// Lists repositories.
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Gets a repository.
	GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error)
	// Creates a repository. The returned Operation will finish once the
	// repository has been created. Its response will be the created Repository.
	CreateRepository(context.Context, *CreateRepositoryRequest) (*longrunningpb.Operation, error)
	// Updates a repository.
	UpdateRepository(context.Context, *UpdateRepositoryRequest) (*Repository, error)
	// Deletes a repository and all of its contents. The returned Operation will
	// finish once the repository has been deleted. It will not have any Operation
	// metadata and will return a google.protobuf.Empty response.
	DeleteRepository(context.Context, *DeleteRepositoryRequest) (*longrunningpb.Operation, error)
	// Lists packages.
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	// Gets a package.
	GetPackage(context.Context, *GetPackageRequest) (*Package, error)
	// Deletes a package and all of its versions and tags. The returned operation
	// will complete once the package has been deleted.
	DeletePackage(context.Context, *DeletePackageRequest) (*longrunningpb.Operation, error)
	// Lists versions.
	ListVersions(context.Context, *ListVersionsRequest) (*ListVersionsResponse, error)
	// Gets a version
	GetVersion(context.Context, *GetVersionRequest) (*Version, error)
	// Deletes a version and all of its content. The returned operation will
	// complete once the version has been deleted.
	DeleteVersion(context.Context, *DeleteVersionRequest) (*longrunningpb.Operation, error)
	// Deletes multiple versions across a repository. The returned operation will
	// complete once the versions have been deleted.
	BatchDeleteVersions(context.Context, *BatchDeleteVersionsRequest) (*longrunningpb.Operation, error)
	// Updates a version.
	UpdateVersion(context.Context, *UpdateVersionRequest) (*Version, error)
	// Lists files.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Gets a file.
	GetFile(context.Context, *GetFileRequest) (*File, error)
	// Deletes a file and all of its content. It is only allowed on generic
	// repositories. The returned operation will complete once the file has been
	// deleted.
	DeleteFile(context.Context, *DeleteFileRequest) (*longrunningpb.Operation, error)
	// Updates a file.
	UpdateFile(context.Context, *UpdateFileRequest) (*File, error)
	// Lists tags.
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	// Gets a tag.
	GetTag(context.Context, *GetTagRequest) (*Tag, error)
	// Creates a tag.
	CreateTag(context.Context, *CreateTagRequest) (*Tag, error)
	// Updates a tag.
	UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error)
	// Deletes a tag.
	DeleteTag(context.Context, *DeleteTagRequest) (*empty.Empty, error)
	// Creates a rule.
	CreateRule(context.Context, *CreateRuleRequest) (*Rule, error)
	// Lists rules.
	ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// Gets a rule.
	GetRule(context.Context, *GetRuleRequest) (*Rule, error)
	// Updates a rule.
	UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error)
	// Deletes a rule.
	DeleteRule(context.Context, *DeleteRuleRequest) (*empty.Empty, error)
	// Updates the IAM policy for a given resource.
	SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error)
	// Gets the IAM policy for a given resource.
	GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error)
	// Tests if the caller has a list of permissions on a resource.
	TestIamPermissions(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error)
	// Retrieves the Settings for the Project.
	GetProjectSettings(context.Context, *GetProjectSettingsRequest) (*ProjectSettings, error)
	// Updates the Settings for the Project.
	UpdateProjectSettings(context.Context, *UpdateProjectSettingsRequest) (*ProjectSettings, error)
	// Retrieves the VPCSC Config for the Project.
	GetVPCSCConfig(context.Context, *GetVPCSCConfigRequest) (*VPCSCConfig, error)
	// Updates the VPCSC Config for the Project.
	UpdateVPCSCConfig(context.Context, *UpdateVPCSCConfigRequest) (*VPCSCConfig, error)
	// Updates a package.
	UpdatePackage(context.Context, *UpdatePackageRequest) (*Package, error)
	// Lists attachments.
	ListAttachments(context.Context, *ListAttachmentsRequest) (*ListAttachmentsResponse, error)
	// Gets an attachment.
	GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error)
	// Creates an attachment. The returned Operation will finish once the
	// attachment has been created. Its response will be the created attachment.
	CreateAttachment(context.Context, *CreateAttachmentRequest) (*longrunningpb.Operation, error)
	// Deletes an attachment. The returned Operation will
	// finish once the attachments has been deleted. It will not have any
	// Operation metadata and will return a `google.protobuf.Empty` response.
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedArtifactRegistryServer()
}

// UnimplementedArtifactRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactRegistryServer struct {
}

func (UnimplementedArtifactRegistryServer) ListDockerImages(context.Context, *ListDockerImagesRequest) (*ListDockerImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDockerImages not implemented")
}
func (UnimplementedArtifactRegistryServer) GetDockerImage(context.Context, *GetDockerImageRequest) (*DockerImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDockerImage not implemented")
}
func (UnimplementedArtifactRegistryServer) ListMavenArtifacts(context.Context, *ListMavenArtifactsRequest) (*ListMavenArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMavenArtifacts not implemented")
}
func (UnimplementedArtifactRegistryServer) GetMavenArtifact(context.Context, *GetMavenArtifactRequest) (*MavenArtifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMavenArtifact not implemented")
}
func (UnimplementedArtifactRegistryServer) ListNpmPackages(context.Context, *ListNpmPackagesRequest) (*ListNpmPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNpmPackages not implemented")
}
func (UnimplementedArtifactRegistryServer) GetNpmPackage(context.Context, *GetNpmPackageRequest) (*NpmPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNpmPackage not implemented")
}
func (UnimplementedArtifactRegistryServer) ListPythonPackages(context.Context, *ListPythonPackagesRequest) (*ListPythonPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPythonPackages not implemented")
}
func (UnimplementedArtifactRegistryServer) GetPythonPackage(context.Context, *GetPythonPackageRequest) (*PythonPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPythonPackage not implemented")
}
func (UnimplementedArtifactRegistryServer) ImportAptArtifacts(context.Context, *ImportAptArtifactsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAptArtifacts not implemented")
}
func (UnimplementedArtifactRegistryServer) ImportYumArtifacts(context.Context, *ImportYumArtifactsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportYumArtifacts not implemented")
}
func (UnimplementedArtifactRegistryServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (UnimplementedArtifactRegistryServer) GetRepository(context.Context, *GetRepositoryRequest) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (UnimplementedArtifactRegistryServer) CreateRepository(context.Context, *CreateRepositoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateRepository(context.Context, *UpdateRepositoryRequest) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteRepository(context.Context, *DeleteRepositoryRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepository not implemented")
}
func (UnimplementedArtifactRegistryServer) ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedArtifactRegistryServer) GetPackage(context.Context, *GetPackageRequest) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedArtifactRegistryServer) DeletePackage(context.Context, *DeletePackageRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedArtifactRegistryServer) ListVersions(context.Context, *ListVersionsRequest) (*ListVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVersions not implemented")
}
func (UnimplementedArtifactRegistryServer) GetVersion(context.Context, *GetVersionRequest) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteVersion(context.Context, *DeleteVersionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVersion not implemented")
}
func (UnimplementedArtifactRegistryServer) BatchDeleteVersions(context.Context, *BatchDeleteVersionsRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteVersions not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateVersion(context.Context, *UpdateVersionRequest) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVersion not implemented")
}
func (UnimplementedArtifactRegistryServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedArtifactRegistryServer) GetFile(context.Context, *GetFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteFile(context.Context, *DeleteFileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateFile(context.Context, *UpdateFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedArtifactRegistryServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedArtifactRegistryServer) GetTag(context.Context, *GetTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedArtifactRegistryServer) CreateTag(context.Context, *CreateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateTag(context.Context, *UpdateTagRequest) (*Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteTag(context.Context, *DeleteTagRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedArtifactRegistryServer) CreateRule(context.Context, *CreateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedArtifactRegistryServer) ListRules(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRules not implemented")
}
func (UnimplementedArtifactRegistryServer) GetRule(context.Context, *GetRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateRule(context.Context, *UpdateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteRule(context.Context, *DeleteRuleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedArtifactRegistryServer) SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIamPolicy not implemented")
}
func (UnimplementedArtifactRegistryServer) GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest) (*iampb.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPolicy not implemented")
}
func (UnimplementedArtifactRegistryServer) TestIamPermissions(context.Context, *iampb.TestIamPermissionsRequest) (*iampb.TestIamPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIamPermissions not implemented")
}
func (UnimplementedArtifactRegistryServer) GetProjectSettings(context.Context, *GetProjectSettingsRequest) (*ProjectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectSettings not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateProjectSettings(context.Context, *UpdateProjectSettingsRequest) (*ProjectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectSettings not implemented")
}
func (UnimplementedArtifactRegistryServer) GetVPCSCConfig(context.Context, *GetVPCSCConfigRequest) (*VPCSCConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCSCConfig not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdateVPCSCConfig(context.Context, *UpdateVPCSCConfigRequest) (*VPCSCConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCSCConfig not implemented")
}
func (UnimplementedArtifactRegistryServer) UpdatePackage(context.Context, *UpdatePackageRequest) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedArtifactRegistryServer) ListAttachments(context.Context, *ListAttachmentsRequest) (*ListAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachments not implemented")
}
func (UnimplementedArtifactRegistryServer) GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (UnimplementedArtifactRegistryServer) CreateAttachment(context.Context, *CreateAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedArtifactRegistryServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedArtifactRegistryServer) mustEmbedUnimplementedArtifactRegistryServer() {}

// UnsafeArtifactRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactRegistryServer will
// result in compilation errors.
type UnsafeArtifactRegistryServer interface {
	mustEmbedUnimplementedArtifactRegistryServer()
}

func RegisterArtifactRegistryServer(s grpc.ServiceRegistrar, srv ArtifactRegistryServer) {
	s.RegisterService(&ArtifactRegistry_ServiceDesc, srv)
}

func _ArtifactRegistry_ListDockerImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDockerImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListDockerImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListDockerImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListDockerImages(ctx, req.(*ListDockerImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetDockerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDockerImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetDockerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetDockerImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetDockerImage(ctx, req.(*GetDockerImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListMavenArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMavenArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListMavenArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListMavenArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListMavenArtifacts(ctx, req.(*ListMavenArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetMavenArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMavenArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetMavenArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetMavenArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetMavenArtifact(ctx, req.(*GetMavenArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListNpmPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNpmPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListNpmPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListNpmPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListNpmPackages(ctx, req.(*ListNpmPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetNpmPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNpmPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetNpmPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetNpmPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetNpmPackage(ctx, req.(*GetNpmPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListPythonPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPythonPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListPythonPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListPythonPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListPythonPackages(ctx, req.(*ListPythonPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetPythonPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPythonPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetPythonPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetPythonPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetPythonPackage(ctx, req.(*GetPythonPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ImportAptArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAptArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ImportAptArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ImportAptArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ImportAptArtifacts(ctx, req.(*ImportAptArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ImportYumArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportYumArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ImportYumArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ImportYumArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ImportYumArtifacts(ctx, req.(*ImportYumArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetRepository(ctx, req.(*GetRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateRepository(ctx, req.(*UpdateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteRepository(ctx, req.(*DeleteRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeletePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeletePackage(ctx, req.(*DeletePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListVersions(ctx, req.(*ListVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteVersion(ctx, req.(*DeleteVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_BatchDeleteVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).BatchDeleteVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/BatchDeleteVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).BatchDeleteVersions(ctx, req.(*BatchDeleteVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateVersion(ctx, req.(*UpdateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListRules(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/SetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).SetIamPolicy(ctx, req.(*iampb.SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetIamPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetIamPolicy(ctx, req.(*iampb.GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_TestIamPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iampb.TestIamPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).TestIamPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/TestIamPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).TestIamPermissions(ctx, req.(*iampb.TestIamPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetProjectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetProjectSettings(ctx, req.(*GetProjectSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateProjectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateProjectSettings(ctx, req.(*UpdateProjectSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetVPCSCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCSCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetVPCSCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetVPCSCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetVPCSCConfig(ctx, req.(*GetVPCSCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdateVPCSCConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCSCConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdateVPCSCConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdateVPCSCConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdateVPCSCConfig(ctx, req.(*UpdateVPCSCConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).UpdatePackage(ctx, req.(*UpdatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_ListAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).ListAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/ListAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).ListAttachments(ctx, req.(*ListAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/GetAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).GetAttachment(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).CreateAttachment(ctx, req.(*CreateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactRegistry_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactRegistryServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.devtools.artifactregistry.v1.ArtifactRegistry/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactRegistryServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactRegistry_ServiceDesc is the grpc.ServiceDesc for ArtifactRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.devtools.artifactregistry.v1.ArtifactRegistry",
	HandlerType: (*ArtifactRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDockerImages",
			Handler:    _ArtifactRegistry_ListDockerImages_Handler,
		},
		{
			MethodName: "GetDockerImage",
			Handler:    _ArtifactRegistry_GetDockerImage_Handler,
		},
		{
			MethodName: "ListMavenArtifacts",
			Handler:    _ArtifactRegistry_ListMavenArtifacts_Handler,
		},
		{
			MethodName: "GetMavenArtifact",
			Handler:    _ArtifactRegistry_GetMavenArtifact_Handler,
		},
		{
			MethodName: "ListNpmPackages",
			Handler:    _ArtifactRegistry_ListNpmPackages_Handler,
		},
		{
			MethodName: "GetNpmPackage",
			Handler:    _ArtifactRegistry_GetNpmPackage_Handler,
		},
		{
			MethodName: "ListPythonPackages",
			Handler:    _ArtifactRegistry_ListPythonPackages_Handler,
		},
		{
			MethodName: "GetPythonPackage",
			Handler:    _ArtifactRegistry_GetPythonPackage_Handler,
		},
		{
			MethodName: "ImportAptArtifacts",
			Handler:    _ArtifactRegistry_ImportAptArtifacts_Handler,
		},
		{
			MethodName: "ImportYumArtifacts",
			Handler:    _ArtifactRegistry_ImportYumArtifacts_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _ArtifactRegistry_ListRepositories_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _ArtifactRegistry_GetRepository_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _ArtifactRegistry_CreateRepository_Handler,
		},
		{
			MethodName: "UpdateRepository",
			Handler:    _ArtifactRegistry_UpdateRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _ArtifactRegistry_DeleteRepository_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _ArtifactRegistry_ListPackages_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _ArtifactRegistry_GetPackage_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _ArtifactRegistry_DeletePackage_Handler,
		},
		{
			MethodName: "ListVersions",
			Handler:    _ArtifactRegistry_ListVersions_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ArtifactRegistry_GetVersion_Handler,
		},
		{
			MethodName: "DeleteVersion",
			Handler:    _ArtifactRegistry_DeleteVersion_Handler,
		},
		{
			MethodName: "BatchDeleteVersions",
			Handler:    _ArtifactRegistry_BatchDeleteVersions_Handler,
		},
		{
			MethodName: "UpdateVersion",
			Handler:    _ArtifactRegistry_UpdateVersion_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _ArtifactRegistry_ListFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ArtifactRegistry_GetFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ArtifactRegistry_DeleteFile_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _ArtifactRegistry_UpdateFile_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _ArtifactRegistry_ListTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _ArtifactRegistry_GetTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ArtifactRegistry_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ArtifactRegistry_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ArtifactRegistry_DeleteTag_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _ArtifactRegistry_CreateRule_Handler,
		},
		{
			MethodName: "ListRules",
			Handler:    _ArtifactRegistry_ListRules_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _ArtifactRegistry_GetRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _ArtifactRegistry_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _ArtifactRegistry_DeleteRule_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _ArtifactRegistry_SetIamPolicy_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _ArtifactRegistry_GetIamPolicy_Handler,
		},
		{
			MethodName: "TestIamPermissions",
			Handler:    _ArtifactRegistry_TestIamPermissions_Handler,
		},
		{
			MethodName: "GetProjectSettings",
			Handler:    _ArtifactRegistry_GetProjectSettings_Handler,
		},
		{
			MethodName: "UpdateProjectSettings",
			Handler:    _ArtifactRegistry_UpdateProjectSettings_Handler,
		},
		{
			MethodName: "GetVPCSCConfig",
			Handler:    _ArtifactRegistry_GetVPCSCConfig_Handler,
		},
		{
			MethodName: "UpdateVPCSCConfig",
			Handler:    _ArtifactRegistry_UpdateVPCSCConfig_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _ArtifactRegistry_UpdatePackage_Handler,
		},
		{
			MethodName: "ListAttachments",
			Handler:    _ArtifactRegistry_ListAttachments_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _ArtifactRegistry_GetAttachment_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _ArtifactRegistry_CreateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _ArtifactRegistry_DeleteAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/devtools/artifactregistry/v1/service.proto",
}
