// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/resourcemanager/v1/api.proto

package cloudresourcemanagerpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoldersServerClient is the client API for FoldersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoldersServerClient interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyFolder(ctx context.Context, in *ClearOrgPolicyFolderRequest, opts ...grpc.CallOption) (*Empty, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyFolder(ctx context.Context, in *GetEffectiveOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyFolder(ctx context.Context, in *GetOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsFolder(ctx context.Context, in *ListAvailableOrgPolicyConstraintsFolderRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesFolder(ctx context.Context, in *ListOrgPoliciesFolderRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyFolder(ctx context.Context, in *SetOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
}

type foldersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFoldersServerClient(cc grpc.ClientConnInterface) FoldersServerClient {
	return &foldersServerClient{cc}
}

func (c *foldersServerClient) ClearOrgPolicyFolder(ctx context.Context, in *ClearOrgPolicyFolderRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/ClearOrgPolicyFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersServerClient) GetEffectiveOrgPolicyFolder(ctx context.Context, in *GetEffectiveOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/GetEffectiveOrgPolicyFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersServerClient) GetOrgPolicyFolder(ctx context.Context, in *GetOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/GetOrgPolicyFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersServerClient) ListAvailableOrgPolicyConstraintsFolder(ctx context.Context, in *ListAvailableOrgPolicyConstraintsFolderRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	out := new(ListAvailableOrgPolicyConstraintsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/ListAvailableOrgPolicyConstraintsFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersServerClient) ListOrgPoliciesFolder(ctx context.Context, in *ListOrgPoliciesFolderRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error) {
	out := new(ListOrgPoliciesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/ListOrgPoliciesFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foldersServerClient) SetOrgPolicyFolder(ctx context.Context, in *SetOrgPolicyFolderRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.FoldersServer/SetOrgPolicyFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoldersServerServer is the server API for FoldersServer service.
// All implementations must embed UnimplementedFoldersServerServer
// for forward compatibility
type FoldersServerServer interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyFolder(context.Context, *ClearOrgPolicyFolderRequest) (*Empty, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyFolder(context.Context, *GetEffectiveOrgPolicyFolderRequest) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyFolder(context.Context, *GetOrgPolicyFolderRequest) (*OrgPolicy, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsFolder(context.Context, *ListAvailableOrgPolicyConstraintsFolderRequest) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesFolder(context.Context, *ListOrgPoliciesFolderRequest) (*ListOrgPoliciesResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyFolder(context.Context, *SetOrgPolicyFolderRequest) (*OrgPolicy, error)
	mustEmbedUnimplementedFoldersServerServer()
}

// UnimplementedFoldersServerServer must be embedded to have forward compatible implementations.
type UnimplementedFoldersServerServer struct {
}

func (UnimplementedFoldersServerServer) ClearOrgPolicyFolder(context.Context, *ClearOrgPolicyFolderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOrgPolicyFolder not implemented")
}
func (UnimplementedFoldersServerServer) GetEffectiveOrgPolicyFolder(context.Context, *GetEffectiveOrgPolicyFolderRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveOrgPolicyFolder not implemented")
}
func (UnimplementedFoldersServerServer) GetOrgPolicyFolder(context.Context, *GetOrgPolicyFolderRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgPolicyFolder not implemented")
}
func (UnimplementedFoldersServerServer) ListAvailableOrgPolicyConstraintsFolder(context.Context, *ListAvailableOrgPolicyConstraintsFolderRequest) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableOrgPolicyConstraintsFolder not implemented")
}
func (UnimplementedFoldersServerServer) ListOrgPoliciesFolder(context.Context, *ListOrgPoliciesFolderRequest) (*ListOrgPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgPoliciesFolder not implemented")
}
func (UnimplementedFoldersServerServer) SetOrgPolicyFolder(context.Context, *SetOrgPolicyFolderRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgPolicyFolder not implemented")
}
func (UnimplementedFoldersServerServer) mustEmbedUnimplementedFoldersServerServer() {}

// UnsafeFoldersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoldersServerServer will
// result in compilation errors.
type UnsafeFoldersServerServer interface {
	mustEmbedUnimplementedFoldersServerServer()
}

func RegisterFoldersServerServer(s grpc.ServiceRegistrar, srv FoldersServerServer) {
	s.RegisterService(&FoldersServer_ServiceDesc, srv)
}

func _FoldersServer_ClearOrgPolicyFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearOrgPolicyFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).ClearOrgPolicyFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/ClearOrgPolicyFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).ClearOrgPolicyFolder(ctx, req.(*ClearOrgPolicyFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldersServer_GetEffectiveOrgPolicyFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveOrgPolicyFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).GetEffectiveOrgPolicyFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/GetEffectiveOrgPolicyFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).GetEffectiveOrgPolicyFolder(ctx, req.(*GetEffectiveOrgPolicyFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldersServer_GetOrgPolicyFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgPolicyFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).GetOrgPolicyFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/GetOrgPolicyFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).GetOrgPolicyFolder(ctx, req.(*GetOrgPolicyFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldersServer_ListAvailableOrgPolicyConstraintsFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableOrgPolicyConstraintsFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).ListAvailableOrgPolicyConstraintsFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/ListAvailableOrgPolicyConstraintsFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).ListAvailableOrgPolicyConstraintsFolder(ctx, req.(*ListAvailableOrgPolicyConstraintsFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldersServer_ListOrgPoliciesFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgPoliciesFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).ListOrgPoliciesFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/ListOrgPoliciesFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).ListOrgPoliciesFolder(ctx, req.(*ListOrgPoliciesFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoldersServer_SetOrgPolicyFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgPolicyFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoldersServerServer).SetOrgPolicyFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.FoldersServer/SetOrgPolicyFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoldersServerServer).SetOrgPolicyFolder(ctx, req.(*SetOrgPolicyFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoldersServer_ServiceDesc is the grpc.ServiceDesc for FoldersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoldersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloudresourcemanager.v1.FoldersServer",
	HandlerType: (*FoldersServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearOrgPolicyFolder",
			Handler:    _FoldersServer_ClearOrgPolicyFolder_Handler,
		},
		{
			MethodName: "GetEffectiveOrgPolicyFolder",
			Handler:    _FoldersServer_GetEffectiveOrgPolicyFolder_Handler,
		},
		{
			MethodName: "GetOrgPolicyFolder",
			Handler:    _FoldersServer_GetOrgPolicyFolder_Handler,
		},
		{
			MethodName: "ListAvailableOrgPolicyConstraintsFolder",
			Handler:    _FoldersServer_ListAvailableOrgPolicyConstraintsFolder_Handler,
		},
		{
			MethodName: "ListOrgPoliciesFolder",
			Handler:    _FoldersServer_ListOrgPoliciesFolder_Handler,
		},
		{
			MethodName: "SetOrgPolicyFolder",
			Handler:    _FoldersServer_SetOrgPolicyFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/resourcemanager/v1/api.proto",
}

// LiensServerClient is the client API for LiensServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiensServerClient interface {
	// Create a Lien which applies to the resource denoted by the `parent` field. Callers of this method will require permission on the `parent` resource. For example, applying to `projects/1234` requires permission `resourcemanager.projects.updateLiens`. NOTE: Some resources may limit the number of Liens which may be applied.
	CreateLien(ctx context.Context, in *CreateLienRequest, opts ...grpc.CallOption) (*Lien, error)
	// Delete a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.updateLiens`.
	DeleteLien(ctx context.Context, in *DeleteLienRequest, opts ...grpc.CallOption) (*Empty, error)
	// Retrieve a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`
	GetLien(ctx context.Context, in *GetLienRequest, opts ...grpc.CallOption) (*Lien, error)
	// List all Liens applied to the `parent` resource. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`.
	ListLiens(ctx context.Context, in *ListLiensRequest, opts ...grpc.CallOption) (*ListLiensResponse, error)
}

type liensServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLiensServerClient(cc grpc.ClientConnInterface) LiensServerClient {
	return &liensServerClient{cc}
}

func (c *liensServerClient) CreateLien(ctx context.Context, in *CreateLienRequest, opts ...grpc.CallOption) (*Lien, error) {
	out := new(Lien)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.LiensServer/CreateLien", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liensServerClient) DeleteLien(ctx context.Context, in *DeleteLienRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.LiensServer/DeleteLien", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liensServerClient) GetLien(ctx context.Context, in *GetLienRequest, opts ...grpc.CallOption) (*Lien, error) {
	out := new(Lien)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.LiensServer/GetLien", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liensServerClient) ListLiens(ctx context.Context, in *ListLiensRequest, opts ...grpc.CallOption) (*ListLiensResponse, error) {
	out := new(ListLiensResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.LiensServer/ListLiens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiensServerServer is the server API for LiensServer service.
// All implementations must embed UnimplementedLiensServerServer
// for forward compatibility
type LiensServerServer interface {
	// Create a Lien which applies to the resource denoted by the `parent` field. Callers of this method will require permission on the `parent` resource. For example, applying to `projects/1234` requires permission `resourcemanager.projects.updateLiens`. NOTE: Some resources may limit the number of Liens which may be applied.
	CreateLien(context.Context, *CreateLienRequest) (*Lien, error)
	// Delete a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.updateLiens`.
	DeleteLien(context.Context, *DeleteLienRequest) (*Empty, error)
	// Retrieve a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`
	GetLien(context.Context, *GetLienRequest) (*Lien, error)
	// List all Liens applied to the `parent` resource. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`.
	ListLiens(context.Context, *ListLiensRequest) (*ListLiensResponse, error)
	mustEmbedUnimplementedLiensServerServer()
}

// UnimplementedLiensServerServer must be embedded to have forward compatible implementations.
type UnimplementedLiensServerServer struct {
}

func (UnimplementedLiensServerServer) CreateLien(context.Context, *CreateLienRequest) (*Lien, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLien not implemented")
}
func (UnimplementedLiensServerServer) DeleteLien(context.Context, *DeleteLienRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLien not implemented")
}
func (UnimplementedLiensServerServer) GetLien(context.Context, *GetLienRequest) (*Lien, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLien not implemented")
}
func (UnimplementedLiensServerServer) ListLiens(context.Context, *ListLiensRequest) (*ListLiensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiens not implemented")
}
func (UnimplementedLiensServerServer) mustEmbedUnimplementedLiensServerServer() {}

// UnsafeLiensServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiensServerServer will
// result in compilation errors.
type UnsafeLiensServerServer interface {
	mustEmbedUnimplementedLiensServerServer()
}

func RegisterLiensServerServer(s grpc.ServiceRegistrar, srv LiensServerServer) {
	s.RegisterService(&LiensServer_ServiceDesc, srv)
}

func _LiensServer_CreateLien_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLienRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiensServerServer).CreateLien(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.LiensServer/CreateLien",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiensServerServer).CreateLien(ctx, req.(*CreateLienRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiensServer_DeleteLien_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLienRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiensServerServer).DeleteLien(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.LiensServer/DeleteLien",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiensServerServer).DeleteLien(ctx, req.(*DeleteLienRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiensServer_GetLien_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLienRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiensServerServer).GetLien(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.LiensServer/GetLien",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiensServerServer).GetLien(ctx, req.(*GetLienRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiensServer_ListLiens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiensServerServer).ListLiens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.LiensServer/ListLiens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiensServerServer).ListLiens(ctx, req.(*ListLiensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiensServer_ServiceDesc is the grpc.ServiceDesc for LiensServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiensServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloudresourcemanager.v1.LiensServer",
	HandlerType: (*LiensServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLien",
			Handler:    _LiensServer_CreateLien_Handler,
		},
		{
			MethodName: "DeleteLien",
			Handler:    _LiensServer_DeleteLien_Handler,
		},
		{
			MethodName: "GetLien",
			Handler:    _LiensServer_GetLien_Handler,
		},
		{
			MethodName: "ListLiens",
			Handler:    _LiensServer_ListLiens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/resourcemanager/v1/api.proto",
}

// OrganizationsServerClient is the client API for OrganizationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsServerClient interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyOrganization(ctx context.Context, in *ClearOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*Empty, error)
	// Fetches an Organization resource identified by the specified resource name.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyOrganization(ctx context.Context, in *GetEffectiveOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyOrganization(ctx context.Context, in *GetOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsOrganization(ctx context.Context, in *ListAvailableOrgPolicyConstraintsOrganizationRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesOrganization(ctx context.Context, in *ListOrgPoliciesOrganizationRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error)
	// Searches Organization resources that are visible to the user and satisfy the specified filter. This method returns Organizations in an unspecified order. New Organizations do not necessarily appear at the end of the results. Search will only return organizations on which the user has the permission `resourcemanager.organizations.get` or has super admin privileges.
	SearchOrganization(ctx context.Context, in *SearchOrganizationRequest, opts ...grpc.CallOption) (*SearchOrganizationsResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyOrganization(ctx context.Context, in *SetOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
}

type organizationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsServerClient(cc grpc.ClientConnInterface) OrganizationsServerClient {
	return &organizationsServerClient{cc}
}

func (c *organizationsServerClient) ClearOrgPolicyOrganization(ctx context.Context, in *ClearOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ClearOrgPolicyOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetEffectiveOrgPolicyOrganization(ctx context.Context, in *GetEffectiveOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetEffectiveOrgPolicyOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetOrgPolicyOrganization(ctx context.Context, in *GetOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetOrgPolicyOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) ListAvailableOrgPolicyConstraintsOrganization(ctx context.Context, in *ListAvailableOrgPolicyConstraintsOrganizationRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	out := new(ListAvailableOrgPolicyConstraintsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ListAvailableOrgPolicyConstraintsOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) ListOrgPoliciesOrganization(ctx context.Context, in *ListOrgPoliciesOrganizationRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error) {
	out := new(ListOrgPoliciesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ListOrgPoliciesOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) SearchOrganization(ctx context.Context, in *SearchOrganizationRequest, opts ...grpc.CallOption) (*SearchOrganizationsResponse, error) {
	out := new(SearchOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/SearchOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) SetOrgPolicyOrganization(ctx context.Context, in *SetOrgPolicyOrganizationRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/SetOrgPolicyOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsServerServer is the server API for OrganizationsServer service.
// All implementations must embed UnimplementedOrganizationsServerServer
// for forward compatibility
type OrganizationsServerServer interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyOrganization(context.Context, *ClearOrgPolicyOrganizationRequest) (*Empty, error)
	// Fetches an Organization resource identified by the specified resource name.
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyOrganization(context.Context, *GetEffectiveOrgPolicyOrganizationRequest) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyOrganization(context.Context, *GetOrgPolicyOrganizationRequest) (*OrgPolicy, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsOrganization(context.Context, *ListAvailableOrgPolicyConstraintsOrganizationRequest) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesOrganization(context.Context, *ListOrgPoliciesOrganizationRequest) (*ListOrgPoliciesResponse, error)
	// Searches Organization resources that are visible to the user and satisfy the specified filter. This method returns Organizations in an unspecified order. New Organizations do not necessarily appear at the end of the results. Search will only return organizations on which the user has the permission `resourcemanager.organizations.get` or has super admin privileges.
	SearchOrganization(context.Context, *SearchOrganizationRequest) (*SearchOrganizationsResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyOrganization(context.Context, *SetOrgPolicyOrganizationRequest) (*OrgPolicy, error)
	mustEmbedUnimplementedOrganizationsServerServer()
}

// UnimplementedOrganizationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsServerServer struct {
}

func (UnimplementedOrganizationsServerServer) ClearOrgPolicyOrganization(context.Context, *ClearOrgPolicyOrganizationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOrgPolicyOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetEffectiveOrgPolicyOrganization(context.Context, *GetEffectiveOrgPolicyOrganizationRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveOrgPolicyOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetOrgPolicyOrganization(context.Context, *GetOrgPolicyOrganizationRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgPolicyOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) ListAvailableOrgPolicyConstraintsOrganization(context.Context, *ListAvailableOrgPolicyConstraintsOrganizationRequest) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableOrgPolicyConstraintsOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) ListOrgPoliciesOrganization(context.Context, *ListOrgPoliciesOrganizationRequest) (*ListOrgPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgPoliciesOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) SearchOrganization(context.Context, *SearchOrganizationRequest) (*SearchOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) SetOrgPolicyOrganization(context.Context, *SetOrgPolicyOrganizationRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgPolicyOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) mustEmbedUnimplementedOrganizationsServerServer() {}

// UnsafeOrganizationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsServerServer will
// result in compilation errors.
type UnsafeOrganizationsServerServer interface {
	mustEmbedUnimplementedOrganizationsServerServer()
}

func RegisterOrganizationsServerServer(s grpc.ServiceRegistrar, srv OrganizationsServerServer) {
	s.RegisterService(&OrganizationsServer_ServiceDesc, srv)
}

func _OrganizationsServer_ClearOrgPolicyOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearOrgPolicyOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).ClearOrgPolicyOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ClearOrgPolicyOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).ClearOrgPolicyOrganization(ctx, req.(*ClearOrgPolicyOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetEffectiveOrgPolicyOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveOrgPolicyOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetEffectiveOrgPolicyOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetEffectiveOrgPolicyOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetEffectiveOrgPolicyOrganization(ctx, req.(*GetEffectiveOrgPolicyOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetOrgPolicyOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgPolicyOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetOrgPolicyOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/GetOrgPolicyOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetOrgPolicyOrganization(ctx, req.(*GetOrgPolicyOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_ListAvailableOrgPolicyConstraintsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableOrgPolicyConstraintsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).ListAvailableOrgPolicyConstraintsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ListAvailableOrgPolicyConstraintsOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).ListAvailableOrgPolicyConstraintsOrganization(ctx, req.(*ListAvailableOrgPolicyConstraintsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_ListOrgPoliciesOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgPoliciesOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).ListOrgPoliciesOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/ListOrgPoliciesOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).ListOrgPoliciesOrganization(ctx, req.(*ListOrgPoliciesOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_SearchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).SearchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/SearchOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).SearchOrganization(ctx, req.(*SearchOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_SetOrgPolicyOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgPolicyOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).SetOrgPolicyOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.OrganizationsServer/SetOrgPolicyOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).SetOrgPolicyOrganization(ctx, req.(*SetOrgPolicyOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloudresourcemanager.v1.OrganizationsServer",
	HandlerType: (*OrganizationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearOrgPolicyOrganization",
			Handler:    _OrganizationsServer_ClearOrgPolicyOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationsServer_GetOrganization_Handler,
		},
		{
			MethodName: "GetEffectiveOrgPolicyOrganization",
			Handler:    _OrganizationsServer_GetEffectiveOrgPolicyOrganization_Handler,
		},
		{
			MethodName: "GetOrgPolicyOrganization",
			Handler:    _OrganizationsServer_GetOrgPolicyOrganization_Handler,
		},
		{
			MethodName: "ListAvailableOrgPolicyConstraintsOrganization",
			Handler:    _OrganizationsServer_ListAvailableOrgPolicyConstraintsOrganization_Handler,
		},
		{
			MethodName: "ListOrgPoliciesOrganization",
			Handler:    _OrganizationsServer_ListOrgPoliciesOrganization_Handler,
		},
		{
			MethodName: "SearchOrganization",
			Handler:    _OrganizationsServer_SearchOrganization_Handler,
		},
		{
			MethodName: "SetOrgPolicyOrganization",
			Handler:    _OrganizationsServer_SetOrgPolicyOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/resourcemanager/v1/api.proto",
}

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyProject(ctx context.Context, in *ClearOrgPolicyProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	// Request that a new Project be created. The result is an Operation which can be used to track the creation process. This process usually takes a few seconds, but can sometimes take much longer. The tracking Operation is automatically deleted after a few hours, so there is no need to call DeleteOperation. Authorization requires the Google IAM permission `resourcemanager.projects.create` on the specified parent for the new project. The parent is identified by a specified ResourceId, which must include both an ID and a type, such as organization. This method does not associate the new project with a billing account. You can set or update the billing account associated with a project using the [`projects.updateBillingInfo`] (/billing/reference/rest/v1/projects/updateBillingInfo) method.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Marks the Project identified by the specified `project_id` (for example, `my-project-123`) for deletion. This method will only affect the Project if it has a lifecycle state of ACTIVE. This method changes the Project's lifecycle state from ACTIVE to DELETE_REQUESTED. The deletion starts at an unspecified time, at which point the Project is no longer accessible. Until the deletion completes, you can check the lifecycle state checked by retrieving the Project with GetProject, and the Project remains visible to ListProjects. However, you cannot update the project. After the deletion completes, the Project is not retrievable by the GetProject and ListProjects methods. The caller must have delete permissions for this Project.
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*Empty, error)
	// Retrieves the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Gets a list of ancestors in the resource hierarchy for the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
	GetAncestryProject(ctx context.Context, in *GetAncestryProjectRequest, opts ...grpc.CallOption) (*GetAncestryResponse, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyProject(ctx context.Context, in *GetEffectiveOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyProject(ctx context.Context, in *GetOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Lists Projects that the caller has the `resourcemanager.projects.get` permission on and satisfy the specified filter. This method returns Projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method. NOTE: If the request filter contains a `parent.type` and `parent.id` and the caller has the `resourcemanager.projects.list` permission on the parent, the results will be drawn from an alternate index which provides more consistent results. In future versions of this API, this List method will be split into List and Search to properly capture the behavioral difference.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsProject(ctx context.Context, in *ListAvailableOrgPolicyConstraintsProjectRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesProject(ctx context.Context, in *ListOrgPoliciesProjectRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyProject(ctx context.Context, in *SetOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error)
	// Restores the Project identified by the specified `project_id` (for example, `my-project-123`). You can only use this method for a Project that has a lifecycle state of DELETE_REQUESTED. After deletion starts, the Project cannot be restored. The caller must have undelete permissions for this Project.
	UndeleteProject(ctx context.Context, in *UndeleteProjectServiceRequest, opts ...grpc.CallOption) (*Empty, error)
	// Updates the attributes of the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have modify permissions for this Project.
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error)
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

func (c *projectsServerClient) ClearOrgPolicyProject(ctx context.Context, in *ClearOrgPolicyProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ClearOrgPolicyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) GetAncestryProject(ctx context.Context, in *GetAncestryProjectRequest, opts ...grpc.CallOption) (*GetAncestryResponse, error) {
	out := new(GetAncestryResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetAncestryProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) GetEffectiveOrgPolicyProject(ctx context.Context, in *GetEffectiveOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetEffectiveOrgPolicyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) GetOrgPolicyProject(ctx context.Context, in *GetOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetOrgPolicyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) ListAvailableOrgPolicyConstraintsProject(ctx context.Context, in *ListAvailableOrgPolicyConstraintsProjectRequest, opts ...grpc.CallOption) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	out := new(ListAvailableOrgPolicyConstraintsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListAvailableOrgPolicyConstraintsProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) ListOrgPoliciesProject(ctx context.Context, in *ListOrgPoliciesProjectRequest, opts ...grpc.CallOption) (*ListOrgPoliciesResponse, error) {
	out := new(ListOrgPoliciesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListOrgPoliciesProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) SetOrgPolicyProject(ctx context.Context, in *SetOrgPolicyProjectRequest, opts ...grpc.CallOption) (*OrgPolicy, error) {
	out := new(OrgPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/SetOrgPolicyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) UndeleteProject(ctx context.Context, in *UndeleteProjectServiceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/UndeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServerClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/mockgcp.cloudresourcemanager.v1.ProjectsServer/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	// Clears a `Policy` from a resource.
	ClearOrgPolicyProject(context.Context, *ClearOrgPolicyProjectRequest) (*Empty, error)
	// Request that a new Project be created. The result is an Operation which can be used to track the creation process. This process usually takes a few seconds, but can sometimes take much longer. The tracking Operation is automatically deleted after a few hours, so there is no need to call DeleteOperation. Authorization requires the Google IAM permission `resourcemanager.projects.create` on the specified parent for the new project. The parent is identified by a specified ResourceId, which must include both an ID and a type, such as organization. This method does not associate the new project with a billing account. You can set or update the billing account associated with a project using the [`projects.updateBillingInfo`] (/billing/reference/rest/v1/projects/updateBillingInfo) method.
	CreateProject(context.Context, *CreateProjectRequest) (*longrunningpb.Operation, error)
	// Marks the Project identified by the specified `project_id` (for example, `my-project-123`) for deletion. This method will only affect the Project if it has a lifecycle state of ACTIVE. This method changes the Project's lifecycle state from ACTIVE to DELETE_REQUESTED. The deletion starts at an unspecified time, at which point the Project is no longer accessible. Until the deletion completes, you can check the lifecycle state checked by retrieving the Project with GetProject, and the Project remains visible to ListProjects. However, you cannot update the project. After the deletion completes, the Project is not retrievable by the GetProject and ListProjects methods. The caller must have delete permissions for this Project.
	DeleteProject(context.Context, *DeleteProjectRequest) (*Empty, error)
	// Retrieves the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	// Gets a list of ancestors in the resource hierarchy for the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.
	GetAncestryProject(context.Context, *GetAncestryProjectRequest) (*GetAncestryResponse, error)
	// Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.
	GetEffectiveOrgPolicyProject(context.Context, *GetEffectiveOrgPolicyProjectRequest) (*OrgPolicy, error)
	// Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.
	GetOrgPolicyProject(context.Context, *GetOrgPolicyProjectRequest) (*OrgPolicy, error)
	// Lists Projects that the caller has the `resourcemanager.projects.get` permission on and satisfy the specified filter. This method returns Projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method. NOTE: If the request filter contains a `parent.type` and `parent.id` and the caller has the `resourcemanager.projects.list` permission on the parent, the results will be drawn from an alternate index which provides more consistent results. In future versions of this API, this List method will be split into List and Search to properly capture the behavioral difference.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Lists `Constraints` that could be applied on the specified resource.
	ListAvailableOrgPolicyConstraintsProject(context.Context, *ListAvailableOrgPolicyConstraintsProjectRequest) (*ListAvailableOrgPolicyConstraintsResponse, error)
	// Lists all the `Policies` set for a particular resource.
	ListOrgPoliciesProject(context.Context, *ListOrgPoliciesProjectRequest) (*ListOrgPoliciesResponse, error)
	// Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.
	SetOrgPolicyProject(context.Context, *SetOrgPolicyProjectRequest) (*OrgPolicy, error)
	// Restores the Project identified by the specified `project_id` (for example, `my-project-123`). You can only use this method for a Project that has a lifecycle state of DELETE_REQUESTED. After deletion starts, the Project cannot be restored. The caller must have undelete permissions for this Project.
	UndeleteProject(context.Context, *UndeleteProjectServiceRequest) (*Empty, error)
	// Updates the attributes of the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have modify permissions for this Project.
	UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error)
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) ClearOrgPolicyProject(context.Context, *ClearOrgPolicyProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearOrgPolicyProject not implemented")
}
func (UnimplementedProjectsServerServer) CreateProject(context.Context, *CreateProjectRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectsServerServer) DeleteProject(context.Context, *DeleteProjectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectsServerServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectsServerServer) GetAncestryProject(context.Context, *GetAncestryProjectRequest) (*GetAncestryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestryProject not implemented")
}
func (UnimplementedProjectsServerServer) GetEffectiveOrgPolicyProject(context.Context, *GetEffectiveOrgPolicyProjectRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectiveOrgPolicyProject not implemented")
}
func (UnimplementedProjectsServerServer) GetOrgPolicyProject(context.Context, *GetOrgPolicyProjectRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgPolicyProject not implemented")
}
func (UnimplementedProjectsServerServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectsServerServer) ListAvailableOrgPolicyConstraintsProject(context.Context, *ListAvailableOrgPolicyConstraintsProjectRequest) (*ListAvailableOrgPolicyConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableOrgPolicyConstraintsProject not implemented")
}
func (UnimplementedProjectsServerServer) ListOrgPoliciesProject(context.Context, *ListOrgPoliciesProjectRequest) (*ListOrgPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgPoliciesProject not implemented")
}
func (UnimplementedProjectsServerServer) SetOrgPolicyProject(context.Context, *SetOrgPolicyProjectRequest) (*OrgPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgPolicyProject not implemented")
}
func (UnimplementedProjectsServerServer) UndeleteProject(context.Context, *UndeleteProjectServiceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteProject not implemented")
}
func (UnimplementedProjectsServerServer) UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

func _ProjectsServer_ClearOrgPolicyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearOrgPolicyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).ClearOrgPolicyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ClearOrgPolicyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).ClearOrgPolicyProject(ctx, req.(*ClearOrgPolicyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_GetAncestryProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestryProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).GetAncestryProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetAncestryProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).GetAncestryProject(ctx, req.(*GetAncestryProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_GetEffectiveOrgPolicyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectiveOrgPolicyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).GetEffectiveOrgPolicyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetEffectiveOrgPolicyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).GetEffectiveOrgPolicyProject(ctx, req.(*GetEffectiveOrgPolicyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_GetOrgPolicyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgPolicyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).GetOrgPolicyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/GetOrgPolicyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).GetOrgPolicyProject(ctx, req.(*GetOrgPolicyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_ListAvailableOrgPolicyConstraintsProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableOrgPolicyConstraintsProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).ListAvailableOrgPolicyConstraintsProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListAvailableOrgPolicyConstraintsProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).ListAvailableOrgPolicyConstraintsProject(ctx, req.(*ListAvailableOrgPolicyConstraintsProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_ListOrgPoliciesProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgPoliciesProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).ListOrgPoliciesProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/ListOrgPoliciesProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).ListOrgPoliciesProject(ctx, req.(*ListOrgPoliciesProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_SetOrgPolicyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgPolicyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).SetOrgPolicyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/SetOrgPolicyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).SetOrgPolicyProject(ctx, req.(*SetOrgPolicyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_UndeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteProjectServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).UndeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/UndeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).UndeleteProject(ctx, req.(*UndeleteProjectServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsServer_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloudresourcemanager.v1.ProjectsServer/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloudresourcemanager.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClearOrgPolicyProject",
			Handler:    _ProjectsServer_ClearOrgPolicyProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectsServer_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectsServer_DeleteProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectsServer_GetProject_Handler,
		},
		{
			MethodName: "GetAncestryProject",
			Handler:    _ProjectsServer_GetAncestryProject_Handler,
		},
		{
			MethodName: "GetEffectiveOrgPolicyProject",
			Handler:    _ProjectsServer_GetEffectiveOrgPolicyProject_Handler,
		},
		{
			MethodName: "GetOrgPolicyProject",
			Handler:    _ProjectsServer_GetOrgPolicyProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectsServer_ListProjects_Handler,
		},
		{
			MethodName: "ListAvailableOrgPolicyConstraintsProject",
			Handler:    _ProjectsServer_ListAvailableOrgPolicyConstraintsProject_Handler,
		},
		{
			MethodName: "ListOrgPoliciesProject",
			Handler:    _ProjectsServer_ListOrgPoliciesProject_Handler,
		},
		{
			MethodName: "SetOrgPolicyProject",
			Handler:    _ProjectsServer_SetOrgPolicyProject_Handler,
		},
		{
			MethodName: "UndeleteProject",
			Handler:    _ProjectsServer_UndeleteProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectsServer_UpdateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/resourcemanager/v1/api.proto",
}
