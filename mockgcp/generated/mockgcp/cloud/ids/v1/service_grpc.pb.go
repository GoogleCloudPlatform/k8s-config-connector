// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/ids/v1/service.proto

package idspb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.ids.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/ids/v1/service.proto",
}

// ProjectsLocationsServerClient is the client API for ProjectsLocationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServerClient interface {
	// Gets information about a location.
	GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type projectsLocationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServerClient {
	return &projectsLocationsServerClient{cc}
}

func (c *projectsLocationsServerClient) GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsServer/GetProjectsLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerClient) ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsServer/ListProjectsLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServerServer is the server API for ProjectsLocationsServer service.
// All implementations must embed UnimplementedProjectsLocationsServerServer
// for forward compatibility
type ProjectsLocationsServerServer interface {
	// Gets information about a location.
	GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error)
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

// UnimplementedProjectsLocationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServerServer struct {
}

func (UnimplementedProjectsLocationsServerServer) GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocation not implemented")
}
func (UnimplementedProjectsLocationsServerServer) ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocations not implemented")
}
func (UnimplementedProjectsLocationsServerServer) mustEmbedUnimplementedProjectsLocationsServerServer() {
}

// UnsafeProjectsLocationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

func RegisterProjectsLocationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServerServer) {
	s.RegisterService(&ProjectsLocationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsServer_GetProjectsLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsServer/GetProjectsLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, req.(*GetProjectsLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServer_ListProjectsLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsServer/ListProjectsLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, req.(*ListProjectsLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.ids.v1.ProjectsLocationsServer",
	HandlerType: (*ProjectsLocationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocation",
			Handler:    _ProjectsLocationsServer_GetProjectsLocation_Handler,
		},
		{
			MethodName: "ListProjectsLocations",
			Handler:    _ProjectsLocationsServer_ListProjectsLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/ids/v1/service.proto",
}

// ProjectsLocationsEndpointsServerClient is the client API for ProjectsLocationsEndpointsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsEndpointsServerClient interface {
	// Creates a new Endpoint in a given project and location.
	CreateProjectsLocationsEndpoint(ctx context.Context, in *CreateProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Endpoint.
	DeleteProjectsLocationsEndpoint(ctx context.Context, in *DeleteProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Endpoint.
	GetProjectsLocationsEndpoint(ctx context.Context, in *GetProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error)
	// Lists Endpoints in a given project and location.
	ListProjectsLocationsEndpoints(ctx context.Context, in *ListProjectsLocationsEndpointsRequest, opts ...grpc.CallOption) (*ListEndpointsResponse, error)
	// Updates the parameters of a single Endpoint.
	PatchProjectsLocationsEndpoint(ctx context.Context, in *PatchProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsEndpointsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsEndpointsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsEndpointsServerClient {
	return &projectsLocationsEndpointsServerClient{cc}
}

func (c *projectsLocationsEndpointsServerClient) CreateProjectsLocationsEndpoint(ctx context.Context, in *CreateProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/CreateProjectsLocationsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsEndpointsServerClient) DeleteProjectsLocationsEndpoint(ctx context.Context, in *DeleteProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/DeleteProjectsLocationsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsEndpointsServerClient) GetProjectsLocationsEndpoint(ctx context.Context, in *GetProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/GetProjectsLocationsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsEndpointsServerClient) ListProjectsLocationsEndpoints(ctx context.Context, in *ListProjectsLocationsEndpointsRequest, opts ...grpc.CallOption) (*ListEndpointsResponse, error) {
	out := new(ListEndpointsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/ListProjectsLocationsEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsEndpointsServerClient) PatchProjectsLocationsEndpoint(ctx context.Context, in *PatchProjectsLocationsEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/PatchProjectsLocationsEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsEndpointsServerServer is the server API for ProjectsLocationsEndpointsServer service.
// All implementations must embed UnimplementedProjectsLocationsEndpointsServerServer
// for forward compatibility
type ProjectsLocationsEndpointsServerServer interface {
	// Creates a new Endpoint in a given project and location.
	CreateProjectsLocationsEndpoint(context.Context, *CreateProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error)
	// Deletes a single Endpoint.
	DeleteProjectsLocationsEndpoint(context.Context, *DeleteProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Endpoint.
	GetProjectsLocationsEndpoint(context.Context, *GetProjectsLocationsEndpointRequest) (*Endpoint, error)
	// Lists Endpoints in a given project and location.
	ListProjectsLocationsEndpoints(context.Context, *ListProjectsLocationsEndpointsRequest) (*ListEndpointsResponse, error)
	// Updates the parameters of a single Endpoint.
	PatchProjectsLocationsEndpoint(context.Context, *PatchProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsEndpointsServerServer()
}

// UnimplementedProjectsLocationsEndpointsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsEndpointsServerServer struct {
}

func (UnimplementedProjectsLocationsEndpointsServerServer) CreateProjectsLocationsEndpoint(context.Context, *CreateProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsEndpoint not implemented")
}
func (UnimplementedProjectsLocationsEndpointsServerServer) DeleteProjectsLocationsEndpoint(context.Context, *DeleteProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsEndpoint not implemented")
}
func (UnimplementedProjectsLocationsEndpointsServerServer) GetProjectsLocationsEndpoint(context.Context, *GetProjectsLocationsEndpointRequest) (*Endpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsEndpoint not implemented")
}
func (UnimplementedProjectsLocationsEndpointsServerServer) ListProjectsLocationsEndpoints(context.Context, *ListProjectsLocationsEndpointsRequest) (*ListEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsEndpoints not implemented")
}
func (UnimplementedProjectsLocationsEndpointsServerServer) PatchProjectsLocationsEndpoint(context.Context, *PatchProjectsLocationsEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsEndpoint not implemented")
}
func (UnimplementedProjectsLocationsEndpointsServerServer) mustEmbedUnimplementedProjectsLocationsEndpointsServerServer() {
}

// UnsafeProjectsLocationsEndpointsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsEndpointsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsEndpointsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsEndpointsServerServer()
}

func RegisterProjectsLocationsEndpointsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsEndpointsServerServer) {
	s.RegisterService(&ProjectsLocationsEndpointsServer_ServiceDesc, srv)
}

func _ProjectsLocationsEndpointsServer_CreateProjectsLocationsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsEndpointsServerServer).CreateProjectsLocationsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/CreateProjectsLocationsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsEndpointsServerServer).CreateProjectsLocationsEndpoint(ctx, req.(*CreateProjectsLocationsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsEndpointsServer_DeleteProjectsLocationsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsEndpointsServerServer).DeleteProjectsLocationsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/DeleteProjectsLocationsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsEndpointsServerServer).DeleteProjectsLocationsEndpoint(ctx, req.(*DeleteProjectsLocationsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsEndpointsServer_GetProjectsLocationsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsEndpointsServerServer).GetProjectsLocationsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/GetProjectsLocationsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsEndpointsServerServer).GetProjectsLocationsEndpoint(ctx, req.(*GetProjectsLocationsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsEndpointsServer_ListProjectsLocationsEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsEndpointsServerServer).ListProjectsLocationsEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/ListProjectsLocationsEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsEndpointsServerServer).ListProjectsLocationsEndpoints(ctx, req.(*ListProjectsLocationsEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsEndpointsServer_PatchProjectsLocationsEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsEndpointsServerServer).PatchProjectsLocationsEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer/PatchProjectsLocationsEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsEndpointsServerServer).PatchProjectsLocationsEndpoint(ctx, req.(*PatchProjectsLocationsEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsEndpointsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsEndpointsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsEndpointsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.ids.v1.ProjectsLocationsEndpointsServer",
	HandlerType: (*ProjectsLocationsEndpointsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsEndpoint",
			Handler:    _ProjectsLocationsEndpointsServer_CreateProjectsLocationsEndpoint_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsEndpoint",
			Handler:    _ProjectsLocationsEndpointsServer_DeleteProjectsLocationsEndpoint_Handler,
		},
		{
			MethodName: "GetProjectsLocationsEndpoint",
			Handler:    _ProjectsLocationsEndpointsServer_GetProjectsLocationsEndpoint_Handler,
		},
		{
			MethodName: "ListProjectsLocationsEndpoints",
			Handler:    _ProjectsLocationsEndpointsServer_ListProjectsLocationsEndpoints_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsEndpoint",
			Handler:    _ProjectsLocationsEndpointsServer_PatchProjectsLocationsEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/ids/v1/service.proto",
}
