// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto

package networkconnectivitypb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsServerClient is the client API for ProjectsLocationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServerClient interface {
	// Gets information about a location.
	GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type projectsLocationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServerClient {
	return &projectsLocationsServerClient{cc}
}

func (c *projectsLocationsServerClient) GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServer/GetProjectsLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerClient) ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServer/ListProjectsLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServerServer is the server API for ProjectsLocationsServer service.
// All implementations must embed UnimplementedProjectsLocationsServerServer
// for forward compatibility
type ProjectsLocationsServerServer interface {
	// Gets information about a location.
	GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error)
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

// UnimplementedProjectsLocationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServerServer struct {
}

func (UnimplementedProjectsLocationsServerServer) GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocation not implemented")
}
func (UnimplementedProjectsLocationsServerServer) ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocations not implemented")
}
func (UnimplementedProjectsLocationsServerServer) mustEmbedUnimplementedProjectsLocationsServerServer() {
}

// UnsafeProjectsLocationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

func RegisterProjectsLocationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServerServer) {
	s.RegisterService(&ProjectsLocationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsServer_GetProjectsLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServer/GetProjectsLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, req.(*GetProjectsLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServer_ListProjectsLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServer/ListProjectsLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, req.(*ListProjectsLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServer",
	HandlerType: (*ProjectsLocationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocation",
			Handler:    _ProjectsLocationsServer_GetProjectsLocation_Handler,
		},
		{
			MethodName: "ListProjectsLocations",
			Handler:    _ProjectsLocationsServer_ListProjectsLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalServerClient is the client API for ProjectsLocationsGlobalServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalServerClient interface {
}

type projectsLocationsGlobalServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalServerClient {
	return &projectsLocationsGlobalServerClient{cc}
}

// ProjectsLocationsGlobalServerServer is the server API for ProjectsLocationsGlobalServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalServerServer
// for forward compatibility
type ProjectsLocationsGlobalServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalServerServer()
}

// UnimplementedProjectsLocationsGlobalServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalServerServer) mustEmbedUnimplementedProjectsLocationsGlobalServerServer() {
}

// UnsafeProjectsLocationsGlobalServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalServerServer()
}

func RegisterProjectsLocationsGlobalServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalServer_ServiceDesc, srv)
}

// ProjectsLocationsGlobalServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalServer",
	HandlerType: (*ProjectsLocationsGlobalServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalHubsServerClient is the client API for ProjectsLocationsGlobalHubsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalHubsServerClient interface {
	// Accepts a proposal to attach a Network Connectivity Center spoke to a hub.
	AcceptSpokeProjectsLocationsGlobalHub(ctx context.Context, in *AcceptSpokeProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a new Network Connectivity Center hub in the specified project.
	CreateProjectsLocationsGlobalHub(ctx context.Context, in *CreateProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Network Connectivity Center hub.
	DeleteProjectsLocationsGlobalHub(ctx context.Context, in *DeleteProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details about a Network Connectivity Center hub.
	GetProjectsLocationsGlobalHub(ctx context.Context, in *GetProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*Hub, error)
	// Lists the Network Connectivity Center hubs associated with a given project.
	ListProjectsLocationsGlobalHubs(ctx context.Context, in *ListProjectsLocationsGlobalHubsRequest, opts ...grpc.CallOption) (*ListHubsResponse, error)
	// Lists the Network Connectivity Center spokes associated with a specified hub and location. The list includes both spokes that are attached to the hub and spokes that have been proposed but not yet accepted.
	ListSpokesProjectsLocationsGlobalHub(ctx context.Context, in *ListSpokesProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*ListHubSpokesResponse, error)
	// Updates the description and/or labels of a Network Connectivity Center hub.
	PatchProjectsLocationsGlobalHub(ctx context.Context, in *PatchProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Query PSC propagation status the status of a Network Connectivity Center hub.
	QueryStatusProjectsLocationsGlobalHub(ctx context.Context, in *QueryStatusProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*QueryHubStatusResponse, error)
	// Rejects a Network Connectivity Center spoke from being attached to a hub. If the spoke was previously in the `ACTIVE` state, it transitions to the `INACTIVE` state and is no longer able to connect to other spokes that are attached to the hub.
	RejectSpokeProjectsLocationsGlobalHub(ctx context.Context, in *RejectSpokeProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsGlobalHubsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalHubsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalHubsServerClient {
	return &projectsLocationsGlobalHubsServerClient{cc}
}

func (c *projectsLocationsGlobalHubsServerClient) AcceptSpokeProjectsLocationsGlobalHub(ctx context.Context, in *AcceptSpokeProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/AcceptSpokeProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) CreateProjectsLocationsGlobalHub(ctx context.Context, in *CreateProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/CreateProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) DeleteProjectsLocationsGlobalHub(ctx context.Context, in *DeleteProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/DeleteProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) GetProjectsLocationsGlobalHub(ctx context.Context, in *GetProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*Hub, error) {
	out := new(Hub)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/GetProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) ListProjectsLocationsGlobalHubs(ctx context.Context, in *ListProjectsLocationsGlobalHubsRequest, opts ...grpc.CallOption) (*ListHubsResponse, error) {
	out := new(ListHubsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/ListProjectsLocationsGlobalHubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) ListSpokesProjectsLocationsGlobalHub(ctx context.Context, in *ListSpokesProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*ListHubSpokesResponse, error) {
	out := new(ListHubSpokesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/ListSpokesProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) PatchProjectsLocationsGlobalHub(ctx context.Context, in *PatchProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/PatchProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) QueryStatusProjectsLocationsGlobalHub(ctx context.Context, in *QueryStatusProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*QueryHubStatusResponse, error) {
	out := new(QueryHubStatusResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/QueryStatusProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsServerClient) RejectSpokeProjectsLocationsGlobalHub(ctx context.Context, in *RejectSpokeProjectsLocationsGlobalHubRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/RejectSpokeProjectsLocationsGlobalHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGlobalHubsServerServer is the server API for ProjectsLocationsGlobalHubsServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalHubsServerServer
// for forward compatibility
type ProjectsLocationsGlobalHubsServerServer interface {
	// Accepts a proposal to attach a Network Connectivity Center spoke to a hub.
	AcceptSpokeProjectsLocationsGlobalHub(context.Context, *AcceptSpokeProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error)
	// Creates a new Network Connectivity Center hub in the specified project.
	CreateProjectsLocationsGlobalHub(context.Context, *CreateProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error)
	// Deletes a Network Connectivity Center hub.
	DeleteProjectsLocationsGlobalHub(context.Context, *DeleteProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error)
	// Gets details about a Network Connectivity Center hub.
	GetProjectsLocationsGlobalHub(context.Context, *GetProjectsLocationsGlobalHubRequest) (*Hub, error)
	// Lists the Network Connectivity Center hubs associated with a given project.
	ListProjectsLocationsGlobalHubs(context.Context, *ListProjectsLocationsGlobalHubsRequest) (*ListHubsResponse, error)
	// Lists the Network Connectivity Center spokes associated with a specified hub and location. The list includes both spokes that are attached to the hub and spokes that have been proposed but not yet accepted.
	ListSpokesProjectsLocationsGlobalHub(context.Context, *ListSpokesProjectsLocationsGlobalHubRequest) (*ListHubSpokesResponse, error)
	// Updates the description and/or labels of a Network Connectivity Center hub.
	PatchProjectsLocationsGlobalHub(context.Context, *PatchProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error)
	// Query PSC propagation status the status of a Network Connectivity Center hub.
	QueryStatusProjectsLocationsGlobalHub(context.Context, *QueryStatusProjectsLocationsGlobalHubRequest) (*QueryHubStatusResponse, error)
	// Rejects a Network Connectivity Center spoke from being attached to a hub. If the spoke was previously in the `ACTIVE` state, it transitions to the `INACTIVE` state and is no longer able to connect to other spokes that are attached to the hub.
	RejectSpokeProjectsLocationsGlobalHub(context.Context, *RejectSpokeProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsGlobalHubsServerServer()
}

// UnimplementedProjectsLocationsGlobalHubsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalHubsServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalHubsServerServer) AcceptSpokeProjectsLocationsGlobalHub(context.Context, *AcceptSpokeProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptSpokeProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) CreateProjectsLocationsGlobalHub(context.Context, *CreateProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) DeleteProjectsLocationsGlobalHub(context.Context, *DeleteProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) GetProjectsLocationsGlobalHub(context.Context, *GetProjectsLocationsGlobalHubRequest) (*Hub, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) ListProjectsLocationsGlobalHubs(context.Context, *ListProjectsLocationsGlobalHubsRequest) (*ListHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGlobalHubs not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) ListSpokesProjectsLocationsGlobalHub(context.Context, *ListSpokesProjectsLocationsGlobalHubRequest) (*ListHubSpokesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpokesProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) PatchProjectsLocationsGlobalHub(context.Context, *PatchProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) QueryStatusProjectsLocationsGlobalHub(context.Context, *QueryStatusProjectsLocationsGlobalHubRequest) (*QueryHubStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatusProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) RejectSpokeProjectsLocationsGlobalHub(context.Context, *RejectSpokeProjectsLocationsGlobalHubRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectSpokeProjectsLocationsGlobalHub not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsServerServer) mustEmbedUnimplementedProjectsLocationsGlobalHubsServerServer() {
}

// UnsafeProjectsLocationsGlobalHubsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalHubsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalHubsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalHubsServerServer()
}

func RegisterProjectsLocationsGlobalHubsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalHubsServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalHubsServer_ServiceDesc, srv)
}

func _ProjectsLocationsGlobalHubsServer_AcceptSpokeProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptSpokeProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).AcceptSpokeProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/AcceptSpokeProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).AcceptSpokeProjectsLocationsGlobalHub(ctx, req.(*AcceptSpokeProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_CreateProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).CreateProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/CreateProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).CreateProjectsLocationsGlobalHub(ctx, req.(*CreateProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_DeleteProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).DeleteProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/DeleteProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).DeleteProjectsLocationsGlobalHub(ctx, req.(*DeleteProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_GetProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).GetProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/GetProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).GetProjectsLocationsGlobalHub(ctx, req.(*GetProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_ListProjectsLocationsGlobalHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGlobalHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).ListProjectsLocationsGlobalHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/ListProjectsLocationsGlobalHubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).ListProjectsLocationsGlobalHubs(ctx, req.(*ListProjectsLocationsGlobalHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_ListSpokesProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpokesProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).ListSpokesProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/ListSpokesProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).ListSpokesProjectsLocationsGlobalHub(ctx, req.(*ListSpokesProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_PatchProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).PatchProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/PatchProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).PatchProjectsLocationsGlobalHub(ctx, req.(*PatchProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_QueryStatusProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatusProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).QueryStatusProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/QueryStatusProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).QueryStatusProjectsLocationsGlobalHub(ctx, req.(*QueryStatusProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsServer_RejectSpokeProjectsLocationsGlobalHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectSpokeProjectsLocationsGlobalHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsServerServer).RejectSpokeProjectsLocationsGlobalHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer/RejectSpokeProjectsLocationsGlobalHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsServerServer).RejectSpokeProjectsLocationsGlobalHub(ctx, req.(*RejectSpokeProjectsLocationsGlobalHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGlobalHubsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalHubsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalHubsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsServer",
	HandlerType: (*ProjectsLocationsGlobalHubsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptSpokeProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_AcceptSpokeProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "CreateProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_CreateProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_DeleteProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "GetProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_GetProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGlobalHubs",
			Handler:    _ProjectsLocationsGlobalHubsServer_ListProjectsLocationsGlobalHubs_Handler,
		},
		{
			MethodName: "ListSpokesProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_ListSpokesProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_PatchProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "QueryStatusProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_QueryStatusProjectsLocationsGlobalHub_Handler,
		},
		{
			MethodName: "RejectSpokeProjectsLocationsGlobalHub",
			Handler:    _ProjectsLocationsGlobalHubsServer_RejectSpokeProjectsLocationsGlobalHub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalHubsGroupsServerClient is the client API for ProjectsLocationsGlobalHubsGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalHubsGroupsServerClient interface {
	// Gets details about a Network Connectivity Center group.
	GetProjectsLocationsGlobalHubsGroup(ctx context.Context, in *GetProjectsLocationsGlobalHubsGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Lists groups in a given hub.
	ListProjectsLocationsGlobalHubsGroups(ctx context.Context, in *ListProjectsLocationsGlobalHubsGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// Updates the parameters of a Network Connectivity Center group.
	PatchProjectsLocationsGlobalHubsGroup(ctx context.Context, in *PatchProjectsLocationsGlobalHubsGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsGlobalHubsGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalHubsGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalHubsGroupsServerClient {
	return &projectsLocationsGlobalHubsGroupsServerClient{cc}
}

func (c *projectsLocationsGlobalHubsGroupsServerClient) GetProjectsLocationsGlobalHubsGroup(ctx context.Context, in *GetProjectsLocationsGlobalHubsGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/GetProjectsLocationsGlobalHubsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsGroupsServerClient) ListProjectsLocationsGlobalHubsGroups(ctx context.Context, in *ListProjectsLocationsGlobalHubsGroupsRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/ListProjectsLocationsGlobalHubsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsGroupsServerClient) PatchProjectsLocationsGlobalHubsGroup(ctx context.Context, in *PatchProjectsLocationsGlobalHubsGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/PatchProjectsLocationsGlobalHubsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGlobalHubsGroupsServerServer is the server API for ProjectsLocationsGlobalHubsGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalHubsGroupsServerServer
// for forward compatibility
type ProjectsLocationsGlobalHubsGroupsServerServer interface {
	// Gets details about a Network Connectivity Center group.
	GetProjectsLocationsGlobalHubsGroup(context.Context, *GetProjectsLocationsGlobalHubsGroupRequest) (*Group, error)
	// Lists groups in a given hub.
	ListProjectsLocationsGlobalHubsGroups(context.Context, *ListProjectsLocationsGlobalHubsGroupsRequest) (*ListGroupsResponse, error)
	// Updates the parameters of a Network Connectivity Center group.
	PatchProjectsLocationsGlobalHubsGroup(context.Context, *PatchProjectsLocationsGlobalHubsGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsGlobalHubsGroupsServerServer()
}

// UnimplementedProjectsLocationsGlobalHubsGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalHubsGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalHubsGroupsServerServer) GetProjectsLocationsGlobalHubsGroup(context.Context, *GetProjectsLocationsGlobalHubsGroupRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGlobalHubsGroup not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsGroupsServerServer) ListProjectsLocationsGlobalHubsGroups(context.Context, *ListProjectsLocationsGlobalHubsGroupsRequest) (*ListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGlobalHubsGroups not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsGroupsServerServer) PatchProjectsLocationsGlobalHubsGroup(context.Context, *PatchProjectsLocationsGlobalHubsGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsGlobalHubsGroup not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsGroupsServerServer) mustEmbedUnimplementedProjectsLocationsGlobalHubsGroupsServerServer() {
}

// UnsafeProjectsLocationsGlobalHubsGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalHubsGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalHubsGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalHubsGroupsServerServer()
}

func RegisterProjectsLocationsGlobalHubsGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalHubsGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalHubsGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsGlobalHubsGroupsServer_GetProjectsLocationsGlobalHubsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGlobalHubsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).GetProjectsLocationsGlobalHubsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/GetProjectsLocationsGlobalHubsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).GetProjectsLocationsGlobalHubsGroup(ctx, req.(*GetProjectsLocationsGlobalHubsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsGroupsServer_ListProjectsLocationsGlobalHubsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGlobalHubsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).ListProjectsLocationsGlobalHubsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/ListProjectsLocationsGlobalHubsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).ListProjectsLocationsGlobalHubsGroups(ctx, req.(*ListProjectsLocationsGlobalHubsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsGroupsServer_PatchProjectsLocationsGlobalHubsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsGlobalHubsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).PatchProjectsLocationsGlobalHubsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer/PatchProjectsLocationsGlobalHubsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsGroupsServerServer).PatchProjectsLocationsGlobalHubsGroup(ctx, req.(*PatchProjectsLocationsGlobalHubsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGlobalHubsGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalHubsGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalHubsGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsGroupsServer",
	HandlerType: (*ProjectsLocationsGlobalHubsGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocationsGlobalHubsGroup",
			Handler:    _ProjectsLocationsGlobalHubsGroupsServer_GetProjectsLocationsGlobalHubsGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGlobalHubsGroups",
			Handler:    _ProjectsLocationsGlobalHubsGroupsServer_ListProjectsLocationsGlobalHubsGroups_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsGlobalHubsGroup",
			Handler:    _ProjectsLocationsGlobalHubsGroupsServer_PatchProjectsLocationsGlobalHubsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalHubsRouteTablesServerClient is the client API for ProjectsLocationsGlobalHubsRouteTablesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalHubsRouteTablesServerClient interface {
	// Gets details about a Network Connectivity Center route table.
	GetProjectsLocationsGlobalHubsRouteTable(ctx context.Context, in *GetProjectsLocationsGlobalHubsRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error)
	// Lists route tables in a given hub.
	ListProjectsLocationsGlobalHubsRouteTables(ctx context.Context, in *ListProjectsLocationsGlobalHubsRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
}

type projectsLocationsGlobalHubsRouteTablesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalHubsRouteTablesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalHubsRouteTablesServerClient {
	return &projectsLocationsGlobalHubsRouteTablesServerClient{cc}
}

func (c *projectsLocationsGlobalHubsRouteTablesServerClient) GetProjectsLocationsGlobalHubsRouteTable(ctx context.Context, in *GetProjectsLocationsGlobalHubsRouteTableRequest, opts ...grpc.CallOption) (*RouteTable, error) {
	out := new(RouteTable)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesServer/GetProjectsLocationsGlobalHubsRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsRouteTablesServerClient) ListProjectsLocationsGlobalHubsRouteTables(ctx context.Context, in *ListProjectsLocationsGlobalHubsRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesServer/ListProjectsLocationsGlobalHubsRouteTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGlobalHubsRouteTablesServerServer is the server API for ProjectsLocationsGlobalHubsRouteTablesServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer
// for forward compatibility
type ProjectsLocationsGlobalHubsRouteTablesServerServer interface {
	// Gets details about a Network Connectivity Center route table.
	GetProjectsLocationsGlobalHubsRouteTable(context.Context, *GetProjectsLocationsGlobalHubsRouteTableRequest) (*RouteTable, error)
	// Lists route tables in a given hub.
	ListProjectsLocationsGlobalHubsRouteTables(context.Context, *ListProjectsLocationsGlobalHubsRouteTablesRequest) (*ListRouteTablesResponse, error)
	mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer()
}

// UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer) GetProjectsLocationsGlobalHubsRouteTable(context.Context, *GetProjectsLocationsGlobalHubsRouteTableRequest) (*RouteTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGlobalHubsRouteTable not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer) ListProjectsLocationsGlobalHubsRouteTables(context.Context, *ListProjectsLocationsGlobalHubsRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGlobalHubsRouteTables not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer) mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer() {
}

// UnsafeProjectsLocationsGlobalHubsRouteTablesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalHubsRouteTablesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalHubsRouteTablesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesServerServer()
}

func RegisterProjectsLocationsGlobalHubsRouteTablesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalHubsRouteTablesServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalHubsRouteTablesServer_ServiceDesc, srv)
}

func _ProjectsLocationsGlobalHubsRouteTablesServer_GetProjectsLocationsGlobalHubsRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGlobalHubsRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesServerServer).GetProjectsLocationsGlobalHubsRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesServer/GetProjectsLocationsGlobalHubsRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesServerServer).GetProjectsLocationsGlobalHubsRouteTable(ctx, req.(*GetProjectsLocationsGlobalHubsRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsRouteTablesServer_ListProjectsLocationsGlobalHubsRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGlobalHubsRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesServerServer).ListProjectsLocationsGlobalHubsRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesServer/ListProjectsLocationsGlobalHubsRouteTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesServerServer).ListProjectsLocationsGlobalHubsRouteTables(ctx, req.(*ListProjectsLocationsGlobalHubsRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGlobalHubsRouteTablesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalHubsRouteTablesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalHubsRouteTablesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesServer",
	HandlerType: (*ProjectsLocationsGlobalHubsRouteTablesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocationsGlobalHubsRouteTable",
			Handler:    _ProjectsLocationsGlobalHubsRouteTablesServer_GetProjectsLocationsGlobalHubsRouteTable_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGlobalHubsRouteTables",
			Handler:    _ProjectsLocationsGlobalHubsRouteTablesServer_ListProjectsLocationsGlobalHubsRouteTables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalHubsRouteTablesRoutesServerClient is the client API for ProjectsLocationsGlobalHubsRouteTablesRoutesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalHubsRouteTablesRoutesServerClient interface {
	// Gets details about the specified route.
	GetProjectsLocationsGlobalHubsRouteTablesRoute(ctx context.Context, in *GetProjectsLocationsGlobalHubsRouteTablesRouteRequest, opts ...grpc.CallOption) (*Route, error)
	// Lists routes in a given route table.
	ListProjectsLocationsGlobalHubsRouteTablesRoutes(ctx context.Context, in *ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error)
}

type projectsLocationsGlobalHubsRouteTablesRoutesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalHubsRouteTablesRoutesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalHubsRouteTablesRoutesServerClient {
	return &projectsLocationsGlobalHubsRouteTablesRoutesServerClient{cc}
}

func (c *projectsLocationsGlobalHubsRouteTablesRoutesServerClient) GetProjectsLocationsGlobalHubsRouteTablesRoute(ctx context.Context, in *GetProjectsLocationsGlobalHubsRouteTablesRouteRequest, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesRoutesServer/GetProjectsLocationsGlobalHubsRouteTablesRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalHubsRouteTablesRoutesServerClient) ListProjectsLocationsGlobalHubsRouteTablesRoutes(ctx context.Context, in *ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest, opts ...grpc.CallOption) (*ListRoutesResponse, error) {
	out := new(ListRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesRoutesServer/ListProjectsLocationsGlobalHubsRouteTablesRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer is the server API for ProjectsLocationsGlobalHubsRouteTablesRoutesServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer
// for forward compatibility
type ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer interface {
	// Gets details about the specified route.
	GetProjectsLocationsGlobalHubsRouteTablesRoute(context.Context, *GetProjectsLocationsGlobalHubsRouteTablesRouteRequest) (*Route, error)
	// Lists routes in a given route table.
	ListProjectsLocationsGlobalHubsRouteTablesRoutes(context.Context, *ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest) (*ListRoutesResponse, error)
	mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer()
}

// UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer) GetProjectsLocationsGlobalHubsRouteTablesRoute(context.Context, *GetProjectsLocationsGlobalHubsRouteTablesRouteRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGlobalHubsRouteTablesRoute not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer) ListProjectsLocationsGlobalHubsRouteTablesRoutes(context.Context, *ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest) (*ListRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGlobalHubsRouteTablesRoutes not implemented")
}
func (UnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer) mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer() {
}

// UnsafeProjectsLocationsGlobalHubsRouteTablesRoutesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalHubsRouteTablesRoutesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalHubsRouteTablesRoutesServerServer()
}

func RegisterProjectsLocationsGlobalHubsRouteTablesRoutesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalHubsRouteTablesRoutesServer_ServiceDesc, srv)
}

func _ProjectsLocationsGlobalHubsRouteTablesRoutesServer_GetProjectsLocationsGlobalHubsRouteTablesRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGlobalHubsRouteTablesRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer).GetProjectsLocationsGlobalHubsRouteTablesRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesRoutesServer/GetProjectsLocationsGlobalHubsRouteTablesRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer).GetProjectsLocationsGlobalHubsRouteTablesRoute(ctx, req.(*GetProjectsLocationsGlobalHubsRouteTablesRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalHubsRouteTablesRoutesServer_ListProjectsLocationsGlobalHubsRouteTablesRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer).ListProjectsLocationsGlobalHubsRouteTablesRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesRoutesServer/ListProjectsLocationsGlobalHubsRouteTablesRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer).ListProjectsLocationsGlobalHubsRouteTablesRoutes(ctx, req.(*ListProjectsLocationsGlobalHubsRouteTablesRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGlobalHubsRouteTablesRoutesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalHubsRouteTablesRoutesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalHubsRouteTablesRoutesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalHubsRouteTablesRoutesServer",
	HandlerType: (*ProjectsLocationsGlobalHubsRouteTablesRoutesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocationsGlobalHubsRouteTablesRoute",
			Handler:    _ProjectsLocationsGlobalHubsRouteTablesRoutesServer_GetProjectsLocationsGlobalHubsRouteTablesRoute_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGlobalHubsRouteTablesRoutes",
			Handler:    _ProjectsLocationsGlobalHubsRouteTablesRoutesServer_ListProjectsLocationsGlobalHubsRouteTablesRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsGlobalPolicyBasedRoutesServerClient is the client API for ProjectsLocationsGlobalPolicyBasedRoutesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGlobalPolicyBasedRoutesServerClient interface {
	// Creates a new policy-based route in a given project and location.
	CreateProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *CreateProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single policy-based route.
	DeleteProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *DeleteProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single policy-based route.
	GetProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *GetProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*PolicyBasedRoute, error)
	// Lists policy-based routes in a given project and location.
	ListProjectsLocationsGlobalPolicyBasedRoutes(ctx context.Context, in *ListProjectsLocationsGlobalPolicyBasedRoutesRequest, opts ...grpc.CallOption) (*ListPolicyBasedRoutesResponse, error)
}

type projectsLocationsGlobalPolicyBasedRoutesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGlobalPolicyBasedRoutesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGlobalPolicyBasedRoutesServerClient {
	return &projectsLocationsGlobalPolicyBasedRoutesServerClient{cc}
}

func (c *projectsLocationsGlobalPolicyBasedRoutesServerClient) CreateProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *CreateProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/CreateProjectsLocationsGlobalPolicyBasedRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalPolicyBasedRoutesServerClient) DeleteProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *DeleteProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/DeleteProjectsLocationsGlobalPolicyBasedRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalPolicyBasedRoutesServerClient) GetProjectsLocationsGlobalPolicyBasedRoute(ctx context.Context, in *GetProjectsLocationsGlobalPolicyBasedRouteRequest, opts ...grpc.CallOption) (*PolicyBasedRoute, error) {
	out := new(PolicyBasedRoute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/GetProjectsLocationsGlobalPolicyBasedRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGlobalPolicyBasedRoutesServerClient) ListProjectsLocationsGlobalPolicyBasedRoutes(ctx context.Context, in *ListProjectsLocationsGlobalPolicyBasedRoutesRequest, opts ...grpc.CallOption) (*ListPolicyBasedRoutesResponse, error) {
	out := new(ListPolicyBasedRoutesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/ListProjectsLocationsGlobalPolicyBasedRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGlobalPolicyBasedRoutesServerServer is the server API for ProjectsLocationsGlobalPolicyBasedRoutesServer service.
// All implementations must embed UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer
// for forward compatibility
type ProjectsLocationsGlobalPolicyBasedRoutesServerServer interface {
	// Creates a new policy-based route in a given project and location.
	CreateProjectsLocationsGlobalPolicyBasedRoute(context.Context, *CreateProjectsLocationsGlobalPolicyBasedRouteRequest) (*longrunningpb.Operation, error)
	// Deletes a single policy-based route.
	DeleteProjectsLocationsGlobalPolicyBasedRoute(context.Context, *DeleteProjectsLocationsGlobalPolicyBasedRouteRequest) (*longrunningpb.Operation, error)
	// Gets details of a single policy-based route.
	GetProjectsLocationsGlobalPolicyBasedRoute(context.Context, *GetProjectsLocationsGlobalPolicyBasedRouteRequest) (*PolicyBasedRoute, error)
	// Lists policy-based routes in a given project and location.
	ListProjectsLocationsGlobalPolicyBasedRoutes(context.Context, *ListProjectsLocationsGlobalPolicyBasedRoutesRequest) (*ListPolicyBasedRoutesResponse, error)
	mustEmbedUnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer()
}

// UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer struct {
}

func (UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer) CreateProjectsLocationsGlobalPolicyBasedRoute(context.Context, *CreateProjectsLocationsGlobalPolicyBasedRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsGlobalPolicyBasedRoute not implemented")
}
func (UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer) DeleteProjectsLocationsGlobalPolicyBasedRoute(context.Context, *DeleteProjectsLocationsGlobalPolicyBasedRouteRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsGlobalPolicyBasedRoute not implemented")
}
func (UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer) GetProjectsLocationsGlobalPolicyBasedRoute(context.Context, *GetProjectsLocationsGlobalPolicyBasedRouteRequest) (*PolicyBasedRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGlobalPolicyBasedRoute not implemented")
}
func (UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer) ListProjectsLocationsGlobalPolicyBasedRoutes(context.Context, *ListProjectsLocationsGlobalPolicyBasedRoutesRequest) (*ListPolicyBasedRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGlobalPolicyBasedRoutes not implemented")
}
func (UnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer) mustEmbedUnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer() {
}

// UnsafeProjectsLocationsGlobalPolicyBasedRoutesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGlobalPolicyBasedRoutesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGlobalPolicyBasedRoutesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGlobalPolicyBasedRoutesServerServer()
}

func RegisterProjectsLocationsGlobalPolicyBasedRoutesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGlobalPolicyBasedRoutesServerServer) {
	s.RegisterService(&ProjectsLocationsGlobalPolicyBasedRoutesServer_ServiceDesc, srv)
}

func _ProjectsLocationsGlobalPolicyBasedRoutesServer_CreateProjectsLocationsGlobalPolicyBasedRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsGlobalPolicyBasedRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).CreateProjectsLocationsGlobalPolicyBasedRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/CreateProjectsLocationsGlobalPolicyBasedRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).CreateProjectsLocationsGlobalPolicyBasedRoute(ctx, req.(*CreateProjectsLocationsGlobalPolicyBasedRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalPolicyBasedRoutesServer_DeleteProjectsLocationsGlobalPolicyBasedRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsGlobalPolicyBasedRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).DeleteProjectsLocationsGlobalPolicyBasedRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/DeleteProjectsLocationsGlobalPolicyBasedRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).DeleteProjectsLocationsGlobalPolicyBasedRoute(ctx, req.(*DeleteProjectsLocationsGlobalPolicyBasedRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalPolicyBasedRoutesServer_GetProjectsLocationsGlobalPolicyBasedRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGlobalPolicyBasedRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).GetProjectsLocationsGlobalPolicyBasedRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/GetProjectsLocationsGlobalPolicyBasedRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).GetProjectsLocationsGlobalPolicyBasedRoute(ctx, req.(*GetProjectsLocationsGlobalPolicyBasedRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGlobalPolicyBasedRoutesServer_ListProjectsLocationsGlobalPolicyBasedRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGlobalPolicyBasedRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).ListProjectsLocationsGlobalPolicyBasedRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer/ListProjectsLocationsGlobalPolicyBasedRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGlobalPolicyBasedRoutesServerServer).ListProjectsLocationsGlobalPolicyBasedRoutes(ctx, req.(*ListProjectsLocationsGlobalPolicyBasedRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGlobalPolicyBasedRoutesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGlobalPolicyBasedRoutesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGlobalPolicyBasedRoutesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsGlobalPolicyBasedRoutesServer",
	HandlerType: (*ProjectsLocationsGlobalPolicyBasedRoutesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsGlobalPolicyBasedRoute",
			Handler:    _ProjectsLocationsGlobalPolicyBasedRoutesServer_CreateProjectsLocationsGlobalPolicyBasedRoute_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsGlobalPolicyBasedRoute",
			Handler:    _ProjectsLocationsGlobalPolicyBasedRoutesServer_DeleteProjectsLocationsGlobalPolicyBasedRoute_Handler,
		},
		{
			MethodName: "GetProjectsLocationsGlobalPolicyBasedRoute",
			Handler:    _ProjectsLocationsGlobalPolicyBasedRoutesServer_GetProjectsLocationsGlobalPolicyBasedRoute_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGlobalPolicyBasedRoutes",
			Handler:    _ProjectsLocationsGlobalPolicyBasedRoutesServer_ListProjectsLocationsGlobalPolicyBasedRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsInternalRangesServerClient is the client API for ProjectsLocationsInternalRangesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsInternalRangesServerClient interface {
	// Creates a new internal range in a given project and location.
	CreateProjectsLocationsInternalRange(ctx context.Context, in *CreateProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single internal range.
	DeleteProjectsLocationsInternalRange(ctx context.Context, in *DeleteProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single internal range.
	GetProjectsLocationsInternalRange(ctx context.Context, in *GetProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*InternalRange, error)
	// Lists internal ranges in a given project and location.
	ListProjectsLocationsInternalRanges(ctx context.Context, in *ListProjectsLocationsInternalRangesRequest, opts ...grpc.CallOption) (*ListInternalRangesResponse, error)
	// Updates the parameters of a single internal range.
	PatchProjectsLocationsInternalRange(ctx context.Context, in *PatchProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsInternalRangesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsInternalRangesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsInternalRangesServerClient {
	return &projectsLocationsInternalRangesServerClient{cc}
}

func (c *projectsLocationsInternalRangesServerClient) CreateProjectsLocationsInternalRange(ctx context.Context, in *CreateProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/CreateProjectsLocationsInternalRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInternalRangesServerClient) DeleteProjectsLocationsInternalRange(ctx context.Context, in *DeleteProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/DeleteProjectsLocationsInternalRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInternalRangesServerClient) GetProjectsLocationsInternalRange(ctx context.Context, in *GetProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*InternalRange, error) {
	out := new(InternalRange)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/GetProjectsLocationsInternalRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInternalRangesServerClient) ListProjectsLocationsInternalRanges(ctx context.Context, in *ListProjectsLocationsInternalRangesRequest, opts ...grpc.CallOption) (*ListInternalRangesResponse, error) {
	out := new(ListInternalRangesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/ListProjectsLocationsInternalRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInternalRangesServerClient) PatchProjectsLocationsInternalRange(ctx context.Context, in *PatchProjectsLocationsInternalRangeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/PatchProjectsLocationsInternalRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsInternalRangesServerServer is the server API for ProjectsLocationsInternalRangesServer service.
// All implementations must embed UnimplementedProjectsLocationsInternalRangesServerServer
// for forward compatibility
type ProjectsLocationsInternalRangesServerServer interface {
	// Creates a new internal range in a given project and location.
	CreateProjectsLocationsInternalRange(context.Context, *CreateProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error)
	// Deletes a single internal range.
	DeleteProjectsLocationsInternalRange(context.Context, *DeleteProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error)
	// Gets details of a single internal range.
	GetProjectsLocationsInternalRange(context.Context, *GetProjectsLocationsInternalRangeRequest) (*InternalRange, error)
	// Lists internal ranges in a given project and location.
	ListProjectsLocationsInternalRanges(context.Context, *ListProjectsLocationsInternalRangesRequest) (*ListInternalRangesResponse, error)
	// Updates the parameters of a single internal range.
	PatchProjectsLocationsInternalRange(context.Context, *PatchProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsInternalRangesServerServer()
}

// UnimplementedProjectsLocationsInternalRangesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsInternalRangesServerServer struct {
}

func (UnimplementedProjectsLocationsInternalRangesServerServer) CreateProjectsLocationsInternalRange(context.Context, *CreateProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsInternalRange not implemented")
}
func (UnimplementedProjectsLocationsInternalRangesServerServer) DeleteProjectsLocationsInternalRange(context.Context, *DeleteProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsInternalRange not implemented")
}
func (UnimplementedProjectsLocationsInternalRangesServerServer) GetProjectsLocationsInternalRange(context.Context, *GetProjectsLocationsInternalRangeRequest) (*InternalRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsInternalRange not implemented")
}
func (UnimplementedProjectsLocationsInternalRangesServerServer) ListProjectsLocationsInternalRanges(context.Context, *ListProjectsLocationsInternalRangesRequest) (*ListInternalRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsInternalRanges not implemented")
}
func (UnimplementedProjectsLocationsInternalRangesServerServer) PatchProjectsLocationsInternalRange(context.Context, *PatchProjectsLocationsInternalRangeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsInternalRange not implemented")
}
func (UnimplementedProjectsLocationsInternalRangesServerServer) mustEmbedUnimplementedProjectsLocationsInternalRangesServerServer() {
}

// UnsafeProjectsLocationsInternalRangesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsInternalRangesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsInternalRangesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsInternalRangesServerServer()
}

func RegisterProjectsLocationsInternalRangesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsInternalRangesServerServer) {
	s.RegisterService(&ProjectsLocationsInternalRangesServer_ServiceDesc, srv)
}

func _ProjectsLocationsInternalRangesServer_CreateProjectsLocationsInternalRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsInternalRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInternalRangesServerServer).CreateProjectsLocationsInternalRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/CreateProjectsLocationsInternalRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInternalRangesServerServer).CreateProjectsLocationsInternalRange(ctx, req.(*CreateProjectsLocationsInternalRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInternalRangesServer_DeleteProjectsLocationsInternalRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsInternalRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInternalRangesServerServer).DeleteProjectsLocationsInternalRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/DeleteProjectsLocationsInternalRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInternalRangesServerServer).DeleteProjectsLocationsInternalRange(ctx, req.(*DeleteProjectsLocationsInternalRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInternalRangesServer_GetProjectsLocationsInternalRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsInternalRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInternalRangesServerServer).GetProjectsLocationsInternalRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/GetProjectsLocationsInternalRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInternalRangesServerServer).GetProjectsLocationsInternalRange(ctx, req.(*GetProjectsLocationsInternalRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInternalRangesServer_ListProjectsLocationsInternalRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsInternalRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInternalRangesServerServer).ListProjectsLocationsInternalRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/ListProjectsLocationsInternalRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInternalRangesServerServer).ListProjectsLocationsInternalRanges(ctx, req.(*ListProjectsLocationsInternalRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInternalRangesServer_PatchProjectsLocationsInternalRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsInternalRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInternalRangesServerServer).PatchProjectsLocationsInternalRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer/PatchProjectsLocationsInternalRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInternalRangesServerServer).PatchProjectsLocationsInternalRange(ctx, req.(*PatchProjectsLocationsInternalRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsInternalRangesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsInternalRangesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsInternalRangesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsInternalRangesServer",
	HandlerType: (*ProjectsLocationsInternalRangesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsInternalRange",
			Handler:    _ProjectsLocationsInternalRangesServer_CreateProjectsLocationsInternalRange_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsInternalRange",
			Handler:    _ProjectsLocationsInternalRangesServer_DeleteProjectsLocationsInternalRange_Handler,
		},
		{
			MethodName: "GetProjectsLocationsInternalRange",
			Handler:    _ProjectsLocationsInternalRangesServer_GetProjectsLocationsInternalRange_Handler,
		},
		{
			MethodName: "ListProjectsLocationsInternalRanges",
			Handler:    _ProjectsLocationsInternalRangesServer_ListProjectsLocationsInternalRanges_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsInternalRange",
			Handler:    _ProjectsLocationsInternalRangesServer_PatchProjectsLocationsInternalRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsRegionalEndpointsServerClient is the client API for ProjectsLocationsRegionalEndpointsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsRegionalEndpointsServerClient interface {
	// Creates a new RegionalEndpoint in a given project and location.
	CreateProjectsLocationsRegionalEndpoint(ctx context.Context, in *CreateProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single RegionalEndpoint.
	DeleteProjectsLocationsRegionalEndpoint(ctx context.Context, in *DeleteProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single RegionalEndpoint.
	GetProjectsLocationsRegionalEndpoint(ctx context.Context, in *GetProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*RegionalEndpoint, error)
	// Lists RegionalEndpoints in a given project and location.
	ListProjectsLocationsRegionalEndpoints(ctx context.Context, in *ListProjectsLocationsRegionalEndpointsRequest, opts ...grpc.CallOption) (*ListRegionalEndpointsResponse, error)
}

type projectsLocationsRegionalEndpointsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsRegionalEndpointsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsRegionalEndpointsServerClient {
	return &projectsLocationsRegionalEndpointsServerClient{cc}
}

func (c *projectsLocationsRegionalEndpointsServerClient) CreateProjectsLocationsRegionalEndpoint(ctx context.Context, in *CreateProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/CreateProjectsLocationsRegionalEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsRegionalEndpointsServerClient) DeleteProjectsLocationsRegionalEndpoint(ctx context.Context, in *DeleteProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/DeleteProjectsLocationsRegionalEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsRegionalEndpointsServerClient) GetProjectsLocationsRegionalEndpoint(ctx context.Context, in *GetProjectsLocationsRegionalEndpointRequest, opts ...grpc.CallOption) (*RegionalEndpoint, error) {
	out := new(RegionalEndpoint)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/GetProjectsLocationsRegionalEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsRegionalEndpointsServerClient) ListProjectsLocationsRegionalEndpoints(ctx context.Context, in *ListProjectsLocationsRegionalEndpointsRequest, opts ...grpc.CallOption) (*ListRegionalEndpointsResponse, error) {
	out := new(ListRegionalEndpointsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/ListProjectsLocationsRegionalEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsRegionalEndpointsServerServer is the server API for ProjectsLocationsRegionalEndpointsServer service.
// All implementations must embed UnimplementedProjectsLocationsRegionalEndpointsServerServer
// for forward compatibility
type ProjectsLocationsRegionalEndpointsServerServer interface {
	// Creates a new RegionalEndpoint in a given project and location.
	CreateProjectsLocationsRegionalEndpoint(context.Context, *CreateProjectsLocationsRegionalEndpointRequest) (*longrunningpb.Operation, error)
	// Deletes a single RegionalEndpoint.
	DeleteProjectsLocationsRegionalEndpoint(context.Context, *DeleteProjectsLocationsRegionalEndpointRequest) (*longrunningpb.Operation, error)
	// Gets details of a single RegionalEndpoint.
	GetProjectsLocationsRegionalEndpoint(context.Context, *GetProjectsLocationsRegionalEndpointRequest) (*RegionalEndpoint, error)
	// Lists RegionalEndpoints in a given project and location.
	ListProjectsLocationsRegionalEndpoints(context.Context, *ListProjectsLocationsRegionalEndpointsRequest) (*ListRegionalEndpointsResponse, error)
	mustEmbedUnimplementedProjectsLocationsRegionalEndpointsServerServer()
}

// UnimplementedProjectsLocationsRegionalEndpointsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsRegionalEndpointsServerServer struct {
}

func (UnimplementedProjectsLocationsRegionalEndpointsServerServer) CreateProjectsLocationsRegionalEndpoint(context.Context, *CreateProjectsLocationsRegionalEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsRegionalEndpoint not implemented")
}
func (UnimplementedProjectsLocationsRegionalEndpointsServerServer) DeleteProjectsLocationsRegionalEndpoint(context.Context, *DeleteProjectsLocationsRegionalEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsRegionalEndpoint not implemented")
}
func (UnimplementedProjectsLocationsRegionalEndpointsServerServer) GetProjectsLocationsRegionalEndpoint(context.Context, *GetProjectsLocationsRegionalEndpointRequest) (*RegionalEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsRegionalEndpoint not implemented")
}
func (UnimplementedProjectsLocationsRegionalEndpointsServerServer) ListProjectsLocationsRegionalEndpoints(context.Context, *ListProjectsLocationsRegionalEndpointsRequest) (*ListRegionalEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsRegionalEndpoints not implemented")
}
func (UnimplementedProjectsLocationsRegionalEndpointsServerServer) mustEmbedUnimplementedProjectsLocationsRegionalEndpointsServerServer() {
}

// UnsafeProjectsLocationsRegionalEndpointsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsRegionalEndpointsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsRegionalEndpointsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsRegionalEndpointsServerServer()
}

func RegisterProjectsLocationsRegionalEndpointsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsRegionalEndpointsServerServer) {
	s.RegisterService(&ProjectsLocationsRegionalEndpointsServer_ServiceDesc, srv)
}

func _ProjectsLocationsRegionalEndpointsServer_CreateProjectsLocationsRegionalEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsRegionalEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).CreateProjectsLocationsRegionalEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/CreateProjectsLocationsRegionalEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).CreateProjectsLocationsRegionalEndpoint(ctx, req.(*CreateProjectsLocationsRegionalEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsRegionalEndpointsServer_DeleteProjectsLocationsRegionalEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsRegionalEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).DeleteProjectsLocationsRegionalEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/DeleteProjectsLocationsRegionalEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).DeleteProjectsLocationsRegionalEndpoint(ctx, req.(*DeleteProjectsLocationsRegionalEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsRegionalEndpointsServer_GetProjectsLocationsRegionalEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsRegionalEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).GetProjectsLocationsRegionalEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/GetProjectsLocationsRegionalEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).GetProjectsLocationsRegionalEndpoint(ctx, req.(*GetProjectsLocationsRegionalEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsRegionalEndpointsServer_ListProjectsLocationsRegionalEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsRegionalEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).ListProjectsLocationsRegionalEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer/ListProjectsLocationsRegionalEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsRegionalEndpointsServerServer).ListProjectsLocationsRegionalEndpoints(ctx, req.(*ListProjectsLocationsRegionalEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsRegionalEndpointsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsRegionalEndpointsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsRegionalEndpointsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsRegionalEndpointsServer",
	HandlerType: (*ProjectsLocationsRegionalEndpointsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsRegionalEndpoint",
			Handler:    _ProjectsLocationsRegionalEndpointsServer_CreateProjectsLocationsRegionalEndpoint_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsRegionalEndpoint",
			Handler:    _ProjectsLocationsRegionalEndpointsServer_DeleteProjectsLocationsRegionalEndpoint_Handler,
		},
		{
			MethodName: "GetProjectsLocationsRegionalEndpoint",
			Handler:    _ProjectsLocationsRegionalEndpointsServer_GetProjectsLocationsRegionalEndpoint_Handler,
		},
		{
			MethodName: "ListProjectsLocationsRegionalEndpoints",
			Handler:    _ProjectsLocationsRegionalEndpointsServer_ListProjectsLocationsRegionalEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsServiceClassesServerClient is the client API for ProjectsLocationsServiceClassesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServiceClassesServerClient interface {
	// Deletes a single ServiceClass.
	DeleteProjectsLocationsServiceClasse(ctx context.Context, in *DeleteProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceClass.
	GetProjectsLocationsServiceClasse(ctx context.Context, in *GetProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*ServiceClass, error)
	// Lists ServiceClasses in a given project and location.
	ListProjectsLocationsServiceClasses(ctx context.Context, in *ListProjectsLocationsServiceClassesRequest, opts ...grpc.CallOption) (*ListServiceClassesResponse, error)
	// Updates the parameters of a single ServiceClass.
	PatchProjectsLocationsServiceClasse(ctx context.Context, in *PatchProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsServiceClassesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServiceClassesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServiceClassesServerClient {
	return &projectsLocationsServiceClassesServerClient{cc}
}

func (c *projectsLocationsServiceClassesServerClient) DeleteProjectsLocationsServiceClasse(ctx context.Context, in *DeleteProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/DeleteProjectsLocationsServiceClasse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceClassesServerClient) GetProjectsLocationsServiceClasse(ctx context.Context, in *GetProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*ServiceClass, error) {
	out := new(ServiceClass)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/GetProjectsLocationsServiceClasse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceClassesServerClient) ListProjectsLocationsServiceClasses(ctx context.Context, in *ListProjectsLocationsServiceClassesRequest, opts ...grpc.CallOption) (*ListServiceClassesResponse, error) {
	out := new(ListServiceClassesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/ListProjectsLocationsServiceClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceClassesServerClient) PatchProjectsLocationsServiceClasse(ctx context.Context, in *PatchProjectsLocationsServiceClasseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/PatchProjectsLocationsServiceClasse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServiceClassesServerServer is the server API for ProjectsLocationsServiceClassesServer service.
// All implementations must embed UnimplementedProjectsLocationsServiceClassesServerServer
// for forward compatibility
type ProjectsLocationsServiceClassesServerServer interface {
	// Deletes a single ServiceClass.
	DeleteProjectsLocationsServiceClasse(context.Context, *DeleteProjectsLocationsServiceClasseRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceClass.
	GetProjectsLocationsServiceClasse(context.Context, *GetProjectsLocationsServiceClasseRequest) (*ServiceClass, error)
	// Lists ServiceClasses in a given project and location.
	ListProjectsLocationsServiceClasses(context.Context, *ListProjectsLocationsServiceClassesRequest) (*ListServiceClassesResponse, error)
	// Updates the parameters of a single ServiceClass.
	PatchProjectsLocationsServiceClasse(context.Context, *PatchProjectsLocationsServiceClasseRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsServiceClassesServerServer()
}

// UnimplementedProjectsLocationsServiceClassesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServiceClassesServerServer struct {
}

func (UnimplementedProjectsLocationsServiceClassesServerServer) DeleteProjectsLocationsServiceClasse(context.Context, *DeleteProjectsLocationsServiceClasseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsServiceClasse not implemented")
}
func (UnimplementedProjectsLocationsServiceClassesServerServer) GetProjectsLocationsServiceClasse(context.Context, *GetProjectsLocationsServiceClasseRequest) (*ServiceClass, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsServiceClasse not implemented")
}
func (UnimplementedProjectsLocationsServiceClassesServerServer) ListProjectsLocationsServiceClasses(context.Context, *ListProjectsLocationsServiceClassesRequest) (*ListServiceClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsServiceClasses not implemented")
}
func (UnimplementedProjectsLocationsServiceClassesServerServer) PatchProjectsLocationsServiceClasse(context.Context, *PatchProjectsLocationsServiceClasseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsServiceClasse not implemented")
}
func (UnimplementedProjectsLocationsServiceClassesServerServer) mustEmbedUnimplementedProjectsLocationsServiceClassesServerServer() {
}

// UnsafeProjectsLocationsServiceClassesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServiceClassesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServiceClassesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServiceClassesServerServer()
}

func RegisterProjectsLocationsServiceClassesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServiceClassesServerServer) {
	s.RegisterService(&ProjectsLocationsServiceClassesServer_ServiceDesc, srv)
}

func _ProjectsLocationsServiceClassesServer_DeleteProjectsLocationsServiceClasse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsServiceClasseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceClassesServerServer).DeleteProjectsLocationsServiceClasse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/DeleteProjectsLocationsServiceClasse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceClassesServerServer).DeleteProjectsLocationsServiceClasse(ctx, req.(*DeleteProjectsLocationsServiceClasseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceClassesServer_GetProjectsLocationsServiceClasse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsServiceClasseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceClassesServerServer).GetProjectsLocationsServiceClasse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/GetProjectsLocationsServiceClasse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceClassesServerServer).GetProjectsLocationsServiceClasse(ctx, req.(*GetProjectsLocationsServiceClasseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceClassesServer_ListProjectsLocationsServiceClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsServiceClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceClassesServerServer).ListProjectsLocationsServiceClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/ListProjectsLocationsServiceClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceClassesServerServer).ListProjectsLocationsServiceClasses(ctx, req.(*ListProjectsLocationsServiceClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceClassesServer_PatchProjectsLocationsServiceClasse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsServiceClasseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceClassesServerServer).PatchProjectsLocationsServiceClasse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer/PatchProjectsLocationsServiceClasse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceClassesServerServer).PatchProjectsLocationsServiceClasse(ctx, req.(*PatchProjectsLocationsServiceClasseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServiceClassesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServiceClassesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServiceClassesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceClassesServer",
	HandlerType: (*ProjectsLocationsServiceClassesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteProjectsLocationsServiceClasse",
			Handler:    _ProjectsLocationsServiceClassesServer_DeleteProjectsLocationsServiceClasse_Handler,
		},
		{
			MethodName: "GetProjectsLocationsServiceClasse",
			Handler:    _ProjectsLocationsServiceClassesServer_GetProjectsLocationsServiceClasse_Handler,
		},
		{
			MethodName: "ListProjectsLocationsServiceClasses",
			Handler:    _ProjectsLocationsServiceClassesServer_ListProjectsLocationsServiceClasses_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsServiceClasse",
			Handler:    _ProjectsLocationsServiceClassesServer_PatchProjectsLocationsServiceClasse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsServiceConnectionMapsServerClient is the client API for ProjectsLocationsServiceConnectionMapsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServiceConnectionMapsServerClient interface {
	// Creates a new ServiceConnectionMap in a given project and location.
	CreateProjectsLocationsServiceConnectionMap(ctx context.Context, in *CreateProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionMap.
	DeleteProjectsLocationsServiceConnectionMap(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionMap.
	GetProjectsLocationsServiceConnectionMap(ctx context.Context, in *GetProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*ServiceConnectionMap, error)
	// Lists ServiceConnectionMaps in a given project and location.
	ListProjectsLocationsServiceConnectionMaps(ctx context.Context, in *ListProjectsLocationsServiceConnectionMapsRequest, opts ...grpc.CallOption) (*ListServiceConnectionMapsResponse, error)
	// Updates the parameters of a single ServiceConnectionMap.
	PatchProjectsLocationsServiceConnectionMap(ctx context.Context, in *PatchProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsServiceConnectionMapsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServiceConnectionMapsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServiceConnectionMapsServerClient {
	return &projectsLocationsServiceConnectionMapsServerClient{cc}
}

func (c *projectsLocationsServiceConnectionMapsServerClient) CreateProjectsLocationsServiceConnectionMap(ctx context.Context, in *CreateProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/CreateProjectsLocationsServiceConnectionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionMapsServerClient) DeleteProjectsLocationsServiceConnectionMap(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/DeleteProjectsLocationsServiceConnectionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionMapsServerClient) GetProjectsLocationsServiceConnectionMap(ctx context.Context, in *GetProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*ServiceConnectionMap, error) {
	out := new(ServiceConnectionMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/GetProjectsLocationsServiceConnectionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionMapsServerClient) ListProjectsLocationsServiceConnectionMaps(ctx context.Context, in *ListProjectsLocationsServiceConnectionMapsRequest, opts ...grpc.CallOption) (*ListServiceConnectionMapsResponse, error) {
	out := new(ListServiceConnectionMapsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/ListProjectsLocationsServiceConnectionMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionMapsServerClient) PatchProjectsLocationsServiceConnectionMap(ctx context.Context, in *PatchProjectsLocationsServiceConnectionMapRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/PatchProjectsLocationsServiceConnectionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServiceConnectionMapsServerServer is the server API for ProjectsLocationsServiceConnectionMapsServer service.
// All implementations must embed UnimplementedProjectsLocationsServiceConnectionMapsServerServer
// for forward compatibility
type ProjectsLocationsServiceConnectionMapsServerServer interface {
	// Creates a new ServiceConnectionMap in a given project and location.
	CreateProjectsLocationsServiceConnectionMap(context.Context, *CreateProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionMap.
	DeleteProjectsLocationsServiceConnectionMap(context.Context, *DeleteProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionMap.
	GetProjectsLocationsServiceConnectionMap(context.Context, *GetProjectsLocationsServiceConnectionMapRequest) (*ServiceConnectionMap, error)
	// Lists ServiceConnectionMaps in a given project and location.
	ListProjectsLocationsServiceConnectionMaps(context.Context, *ListProjectsLocationsServiceConnectionMapsRequest) (*ListServiceConnectionMapsResponse, error)
	// Updates the parameters of a single ServiceConnectionMap.
	PatchProjectsLocationsServiceConnectionMap(context.Context, *PatchProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsServiceConnectionMapsServerServer()
}

// UnimplementedProjectsLocationsServiceConnectionMapsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServiceConnectionMapsServerServer struct {
}

func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) CreateProjectsLocationsServiceConnectionMap(context.Context, *CreateProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsServiceConnectionMap not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) DeleteProjectsLocationsServiceConnectionMap(context.Context, *DeleteProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsServiceConnectionMap not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) GetProjectsLocationsServiceConnectionMap(context.Context, *GetProjectsLocationsServiceConnectionMapRequest) (*ServiceConnectionMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsServiceConnectionMap not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) ListProjectsLocationsServiceConnectionMaps(context.Context, *ListProjectsLocationsServiceConnectionMapsRequest) (*ListServiceConnectionMapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsServiceConnectionMaps not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) PatchProjectsLocationsServiceConnectionMap(context.Context, *PatchProjectsLocationsServiceConnectionMapRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsServiceConnectionMap not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionMapsServerServer) mustEmbedUnimplementedProjectsLocationsServiceConnectionMapsServerServer() {
}

// UnsafeProjectsLocationsServiceConnectionMapsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServiceConnectionMapsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServiceConnectionMapsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServiceConnectionMapsServerServer()
}

func RegisterProjectsLocationsServiceConnectionMapsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServiceConnectionMapsServerServer) {
	s.RegisterService(&ProjectsLocationsServiceConnectionMapsServer_ServiceDesc, srv)
}

func _ProjectsLocationsServiceConnectionMapsServer_CreateProjectsLocationsServiceConnectionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsServiceConnectionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).CreateProjectsLocationsServiceConnectionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/CreateProjectsLocationsServiceConnectionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).CreateProjectsLocationsServiceConnectionMap(ctx, req.(*CreateProjectsLocationsServiceConnectionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionMapsServer_DeleteProjectsLocationsServiceConnectionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsServiceConnectionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).DeleteProjectsLocationsServiceConnectionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/DeleteProjectsLocationsServiceConnectionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).DeleteProjectsLocationsServiceConnectionMap(ctx, req.(*DeleteProjectsLocationsServiceConnectionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionMapsServer_GetProjectsLocationsServiceConnectionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsServiceConnectionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).GetProjectsLocationsServiceConnectionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/GetProjectsLocationsServiceConnectionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).GetProjectsLocationsServiceConnectionMap(ctx, req.(*GetProjectsLocationsServiceConnectionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionMapsServer_ListProjectsLocationsServiceConnectionMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsServiceConnectionMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).ListProjectsLocationsServiceConnectionMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/ListProjectsLocationsServiceConnectionMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).ListProjectsLocationsServiceConnectionMaps(ctx, req.(*ListProjectsLocationsServiceConnectionMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionMapsServer_PatchProjectsLocationsServiceConnectionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsServiceConnectionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).PatchProjectsLocationsServiceConnectionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer/PatchProjectsLocationsServiceConnectionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionMapsServerServer).PatchProjectsLocationsServiceConnectionMap(ctx, req.(*PatchProjectsLocationsServiceConnectionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServiceConnectionMapsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServiceConnectionMapsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServiceConnectionMapsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionMapsServer",
	HandlerType: (*ProjectsLocationsServiceConnectionMapsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsServiceConnectionMap",
			Handler:    _ProjectsLocationsServiceConnectionMapsServer_CreateProjectsLocationsServiceConnectionMap_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsServiceConnectionMap",
			Handler:    _ProjectsLocationsServiceConnectionMapsServer_DeleteProjectsLocationsServiceConnectionMap_Handler,
		},
		{
			MethodName: "GetProjectsLocationsServiceConnectionMap",
			Handler:    _ProjectsLocationsServiceConnectionMapsServer_GetProjectsLocationsServiceConnectionMap_Handler,
		},
		{
			MethodName: "ListProjectsLocationsServiceConnectionMaps",
			Handler:    _ProjectsLocationsServiceConnectionMapsServer_ListProjectsLocationsServiceConnectionMaps_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsServiceConnectionMap",
			Handler:    _ProjectsLocationsServiceConnectionMapsServer_PatchProjectsLocationsServiceConnectionMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsServiceConnectionPoliciesServerClient is the client API for ProjectsLocationsServiceConnectionPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServiceConnectionPoliciesServerClient interface {
	// Creates a new ServiceConnectionPolicy in a given project and location.
	CreateProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *CreateProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionPolicy.
	DeleteProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionPolicy.
	GetProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *GetProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*ServiceConnectionPolicy, error)
	// Lists ServiceConnectionPolicies in a given project and location.
	ListProjectsLocationsServiceConnectionPolicies(ctx context.Context, in *ListProjectsLocationsServiceConnectionPoliciesRequest, opts ...grpc.CallOption) (*ListServiceConnectionPoliciesResponse, error)
	// Updates the parameters of a single ServiceConnectionPolicy.
	PatchProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *PatchProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsServiceConnectionPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServiceConnectionPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServiceConnectionPoliciesServerClient {
	return &projectsLocationsServiceConnectionPoliciesServerClient{cc}
}

func (c *projectsLocationsServiceConnectionPoliciesServerClient) CreateProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *CreateProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/CreateProjectsLocationsServiceConnectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionPoliciesServerClient) DeleteProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/DeleteProjectsLocationsServiceConnectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionPoliciesServerClient) GetProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *GetProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*ServiceConnectionPolicy, error) {
	out := new(ServiceConnectionPolicy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/GetProjectsLocationsServiceConnectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionPoliciesServerClient) ListProjectsLocationsServiceConnectionPolicies(ctx context.Context, in *ListProjectsLocationsServiceConnectionPoliciesRequest, opts ...grpc.CallOption) (*ListServiceConnectionPoliciesResponse, error) {
	out := new(ListServiceConnectionPoliciesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/ListProjectsLocationsServiceConnectionPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionPoliciesServerClient) PatchProjectsLocationsServiceConnectionPolicy(ctx context.Context, in *PatchProjectsLocationsServiceConnectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/PatchProjectsLocationsServiceConnectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServiceConnectionPoliciesServerServer is the server API for ProjectsLocationsServiceConnectionPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer
// for forward compatibility
type ProjectsLocationsServiceConnectionPoliciesServerServer interface {
	// Creates a new ServiceConnectionPolicy in a given project and location.
	CreateProjectsLocationsServiceConnectionPolicy(context.Context, *CreateProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionPolicy.
	DeleteProjectsLocationsServiceConnectionPolicy(context.Context, *DeleteProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionPolicy.
	GetProjectsLocationsServiceConnectionPolicy(context.Context, *GetProjectsLocationsServiceConnectionPolicyRequest) (*ServiceConnectionPolicy, error)
	// Lists ServiceConnectionPolicies in a given project and location.
	ListProjectsLocationsServiceConnectionPolicies(context.Context, *ListProjectsLocationsServiceConnectionPoliciesRequest) (*ListServiceConnectionPoliciesResponse, error)
	// Updates the parameters of a single ServiceConnectionPolicy.
	PatchProjectsLocationsServiceConnectionPolicy(context.Context, *PatchProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsServiceConnectionPoliciesServerServer()
}

// UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) CreateProjectsLocationsServiceConnectionPolicy(context.Context, *CreateProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsServiceConnectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) DeleteProjectsLocationsServiceConnectionPolicy(context.Context, *DeleteProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsServiceConnectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) GetProjectsLocationsServiceConnectionPolicy(context.Context, *GetProjectsLocationsServiceConnectionPolicyRequest) (*ServiceConnectionPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsServiceConnectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) ListProjectsLocationsServiceConnectionPolicies(context.Context, *ListProjectsLocationsServiceConnectionPoliciesRequest) (*ListServiceConnectionPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsServiceConnectionPolicies not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) PatchProjectsLocationsServiceConnectionPolicy(context.Context, *PatchProjectsLocationsServiceConnectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsServiceConnectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsServiceConnectionPoliciesServerServer() {
}

// UnsafeProjectsLocationsServiceConnectionPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServiceConnectionPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServiceConnectionPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServiceConnectionPoliciesServerServer()
}

func RegisterProjectsLocationsServiceConnectionPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServiceConnectionPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsServiceConnectionPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsServiceConnectionPoliciesServer_CreateProjectsLocationsServiceConnectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsServiceConnectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).CreateProjectsLocationsServiceConnectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/CreateProjectsLocationsServiceConnectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).CreateProjectsLocationsServiceConnectionPolicy(ctx, req.(*CreateProjectsLocationsServiceConnectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionPoliciesServer_DeleteProjectsLocationsServiceConnectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsServiceConnectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).DeleteProjectsLocationsServiceConnectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/DeleteProjectsLocationsServiceConnectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).DeleteProjectsLocationsServiceConnectionPolicy(ctx, req.(*DeleteProjectsLocationsServiceConnectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionPoliciesServer_GetProjectsLocationsServiceConnectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsServiceConnectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).GetProjectsLocationsServiceConnectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/GetProjectsLocationsServiceConnectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).GetProjectsLocationsServiceConnectionPolicy(ctx, req.(*GetProjectsLocationsServiceConnectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionPoliciesServer_ListProjectsLocationsServiceConnectionPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsServiceConnectionPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).ListProjectsLocationsServiceConnectionPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/ListProjectsLocationsServiceConnectionPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).ListProjectsLocationsServiceConnectionPolicies(ctx, req.(*ListProjectsLocationsServiceConnectionPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionPoliciesServer_PatchProjectsLocationsServiceConnectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsServiceConnectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).PatchProjectsLocationsServiceConnectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer/PatchProjectsLocationsServiceConnectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionPoliciesServerServer).PatchProjectsLocationsServiceConnectionPolicy(ctx, req.(*PatchProjectsLocationsServiceConnectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServiceConnectionPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServiceConnectionPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServiceConnectionPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionPoliciesServer",
	HandlerType: (*ProjectsLocationsServiceConnectionPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsServiceConnectionPolicy",
			Handler:    _ProjectsLocationsServiceConnectionPoliciesServer_CreateProjectsLocationsServiceConnectionPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsServiceConnectionPolicy",
			Handler:    _ProjectsLocationsServiceConnectionPoliciesServer_DeleteProjectsLocationsServiceConnectionPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsServiceConnectionPolicy",
			Handler:    _ProjectsLocationsServiceConnectionPoliciesServer_GetProjectsLocationsServiceConnectionPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsServiceConnectionPolicies",
			Handler:    _ProjectsLocationsServiceConnectionPoliciesServer_ListProjectsLocationsServiceConnectionPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsServiceConnectionPolicy",
			Handler:    _ProjectsLocationsServiceConnectionPoliciesServer_PatchProjectsLocationsServiceConnectionPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsServiceConnectionTokensServerClient is the client API for ProjectsLocationsServiceConnectionTokensServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServiceConnectionTokensServerClient interface {
	// Creates a new ServiceConnectionToken in a given project and location.
	CreateProjectsLocationsServiceConnectionToken(ctx context.Context, in *CreateProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionToken.
	DeleteProjectsLocationsServiceConnectionToken(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionToken.
	GetProjectsLocationsServiceConnectionToken(ctx context.Context, in *GetProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*ServiceConnectionToken, error)
	// Lists ServiceConnectionTokens in a given project and location.
	ListProjectsLocationsServiceConnectionTokens(ctx context.Context, in *ListProjectsLocationsServiceConnectionTokensRequest, opts ...grpc.CallOption) (*ListServiceConnectionTokensResponse, error)
}

type projectsLocationsServiceConnectionTokensServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServiceConnectionTokensServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServiceConnectionTokensServerClient {
	return &projectsLocationsServiceConnectionTokensServerClient{cc}
}

func (c *projectsLocationsServiceConnectionTokensServerClient) CreateProjectsLocationsServiceConnectionToken(ctx context.Context, in *CreateProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/CreateProjectsLocationsServiceConnectionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionTokensServerClient) DeleteProjectsLocationsServiceConnectionToken(ctx context.Context, in *DeleteProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/DeleteProjectsLocationsServiceConnectionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionTokensServerClient) GetProjectsLocationsServiceConnectionToken(ctx context.Context, in *GetProjectsLocationsServiceConnectionTokenRequest, opts ...grpc.CallOption) (*ServiceConnectionToken, error) {
	out := new(ServiceConnectionToken)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/GetProjectsLocationsServiceConnectionToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServiceConnectionTokensServerClient) ListProjectsLocationsServiceConnectionTokens(ctx context.Context, in *ListProjectsLocationsServiceConnectionTokensRequest, opts ...grpc.CallOption) (*ListServiceConnectionTokensResponse, error) {
	out := new(ListServiceConnectionTokensResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/ListProjectsLocationsServiceConnectionTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServiceConnectionTokensServerServer is the server API for ProjectsLocationsServiceConnectionTokensServer service.
// All implementations must embed UnimplementedProjectsLocationsServiceConnectionTokensServerServer
// for forward compatibility
type ProjectsLocationsServiceConnectionTokensServerServer interface {
	// Creates a new ServiceConnectionToken in a given project and location.
	CreateProjectsLocationsServiceConnectionToken(context.Context, *CreateProjectsLocationsServiceConnectionTokenRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServiceConnectionToken.
	DeleteProjectsLocationsServiceConnectionToken(context.Context, *DeleteProjectsLocationsServiceConnectionTokenRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ServiceConnectionToken.
	GetProjectsLocationsServiceConnectionToken(context.Context, *GetProjectsLocationsServiceConnectionTokenRequest) (*ServiceConnectionToken, error)
	// Lists ServiceConnectionTokens in a given project and location.
	ListProjectsLocationsServiceConnectionTokens(context.Context, *ListProjectsLocationsServiceConnectionTokensRequest) (*ListServiceConnectionTokensResponse, error)
	mustEmbedUnimplementedProjectsLocationsServiceConnectionTokensServerServer()
}

// UnimplementedProjectsLocationsServiceConnectionTokensServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServiceConnectionTokensServerServer struct {
}

func (UnimplementedProjectsLocationsServiceConnectionTokensServerServer) CreateProjectsLocationsServiceConnectionToken(context.Context, *CreateProjectsLocationsServiceConnectionTokenRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsServiceConnectionToken not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionTokensServerServer) DeleteProjectsLocationsServiceConnectionToken(context.Context, *DeleteProjectsLocationsServiceConnectionTokenRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsServiceConnectionToken not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionTokensServerServer) GetProjectsLocationsServiceConnectionToken(context.Context, *GetProjectsLocationsServiceConnectionTokenRequest) (*ServiceConnectionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsServiceConnectionToken not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionTokensServerServer) ListProjectsLocationsServiceConnectionTokens(context.Context, *ListProjectsLocationsServiceConnectionTokensRequest) (*ListServiceConnectionTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsServiceConnectionTokens not implemented")
}
func (UnimplementedProjectsLocationsServiceConnectionTokensServerServer) mustEmbedUnimplementedProjectsLocationsServiceConnectionTokensServerServer() {
}

// UnsafeProjectsLocationsServiceConnectionTokensServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServiceConnectionTokensServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServiceConnectionTokensServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServiceConnectionTokensServerServer()
}

func RegisterProjectsLocationsServiceConnectionTokensServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServiceConnectionTokensServerServer) {
	s.RegisterService(&ProjectsLocationsServiceConnectionTokensServer_ServiceDesc, srv)
}

func _ProjectsLocationsServiceConnectionTokensServer_CreateProjectsLocationsServiceConnectionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsServiceConnectionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).CreateProjectsLocationsServiceConnectionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/CreateProjectsLocationsServiceConnectionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).CreateProjectsLocationsServiceConnectionToken(ctx, req.(*CreateProjectsLocationsServiceConnectionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionTokensServer_DeleteProjectsLocationsServiceConnectionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsServiceConnectionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).DeleteProjectsLocationsServiceConnectionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/DeleteProjectsLocationsServiceConnectionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).DeleteProjectsLocationsServiceConnectionToken(ctx, req.(*DeleteProjectsLocationsServiceConnectionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionTokensServer_GetProjectsLocationsServiceConnectionToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsServiceConnectionTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).GetProjectsLocationsServiceConnectionToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/GetProjectsLocationsServiceConnectionToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).GetProjectsLocationsServiceConnectionToken(ctx, req.(*GetProjectsLocationsServiceConnectionTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServiceConnectionTokensServer_ListProjectsLocationsServiceConnectionTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsServiceConnectionTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).ListProjectsLocationsServiceConnectionTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer/ListProjectsLocationsServiceConnectionTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServiceConnectionTokensServerServer).ListProjectsLocationsServiceConnectionTokens(ctx, req.(*ListProjectsLocationsServiceConnectionTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServiceConnectionTokensServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServiceConnectionTokensServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServiceConnectionTokensServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsServiceConnectionTokensServer",
	HandlerType: (*ProjectsLocationsServiceConnectionTokensServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsServiceConnectionToken",
			Handler:    _ProjectsLocationsServiceConnectionTokensServer_CreateProjectsLocationsServiceConnectionToken_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsServiceConnectionToken",
			Handler:    _ProjectsLocationsServiceConnectionTokensServer_DeleteProjectsLocationsServiceConnectionToken_Handler,
		},
		{
			MethodName: "GetProjectsLocationsServiceConnectionToken",
			Handler:    _ProjectsLocationsServiceConnectionTokensServer_GetProjectsLocationsServiceConnectionToken_Handler,
		},
		{
			MethodName: "ListProjectsLocationsServiceConnectionTokens",
			Handler:    _ProjectsLocationsServiceConnectionTokensServer_ListProjectsLocationsServiceConnectionTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}

// ProjectsLocationsSpokesServerClient is the client API for ProjectsLocationsSpokesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsSpokesServerClient interface {
	// Creates a Network Connectivity Center spoke.
	CreateProjectsLocationsSpoke(ctx context.Context, in *CreateProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a Network Connectivity Center spoke.
	DeleteProjectsLocationsSpoke(ctx context.Context, in *DeleteProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details about a Network Connectivity Center spoke.
	GetProjectsLocationsSpoke(ctx context.Context, in *GetProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*Spoke, error)
	// Lists the Network Connectivity Center spokes in a specified project and location.
	ListProjectsLocationsSpokes(ctx context.Context, in *ListProjectsLocationsSpokesRequest, opts ...grpc.CallOption) (*ListSpokesResponse, error)
	// Updates the parameters of a Network Connectivity Center spoke.
	PatchProjectsLocationsSpoke(ctx context.Context, in *PatchProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsSpokesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsSpokesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsSpokesServerClient {
	return &projectsLocationsSpokesServerClient{cc}
}

func (c *projectsLocationsSpokesServerClient) CreateProjectsLocationsSpoke(ctx context.Context, in *CreateProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/CreateProjectsLocationsSpoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsSpokesServerClient) DeleteProjectsLocationsSpoke(ctx context.Context, in *DeleteProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/DeleteProjectsLocationsSpoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsSpokesServerClient) GetProjectsLocationsSpoke(ctx context.Context, in *GetProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*Spoke, error) {
	out := new(Spoke)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/GetProjectsLocationsSpoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsSpokesServerClient) ListProjectsLocationsSpokes(ctx context.Context, in *ListProjectsLocationsSpokesRequest, opts ...grpc.CallOption) (*ListSpokesResponse, error) {
	out := new(ListSpokesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/ListProjectsLocationsSpokes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsSpokesServerClient) PatchProjectsLocationsSpoke(ctx context.Context, in *PatchProjectsLocationsSpokeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/PatchProjectsLocationsSpoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsSpokesServerServer is the server API for ProjectsLocationsSpokesServer service.
// All implementations must embed UnimplementedProjectsLocationsSpokesServerServer
// for forward compatibility
type ProjectsLocationsSpokesServerServer interface {
	// Creates a Network Connectivity Center spoke.
	CreateProjectsLocationsSpoke(context.Context, *CreateProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error)
	// Deletes a Network Connectivity Center spoke.
	DeleteProjectsLocationsSpoke(context.Context, *DeleteProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error)
	// Gets details about a Network Connectivity Center spoke.
	GetProjectsLocationsSpoke(context.Context, *GetProjectsLocationsSpokeRequest) (*Spoke, error)
	// Lists the Network Connectivity Center spokes in a specified project and location.
	ListProjectsLocationsSpokes(context.Context, *ListProjectsLocationsSpokesRequest) (*ListSpokesResponse, error)
	// Updates the parameters of a Network Connectivity Center spoke.
	PatchProjectsLocationsSpoke(context.Context, *PatchProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsSpokesServerServer()
}

// UnimplementedProjectsLocationsSpokesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsSpokesServerServer struct {
}

func (UnimplementedProjectsLocationsSpokesServerServer) CreateProjectsLocationsSpoke(context.Context, *CreateProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsSpoke not implemented")
}
func (UnimplementedProjectsLocationsSpokesServerServer) DeleteProjectsLocationsSpoke(context.Context, *DeleteProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsSpoke not implemented")
}
func (UnimplementedProjectsLocationsSpokesServerServer) GetProjectsLocationsSpoke(context.Context, *GetProjectsLocationsSpokeRequest) (*Spoke, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsSpoke not implemented")
}
func (UnimplementedProjectsLocationsSpokesServerServer) ListProjectsLocationsSpokes(context.Context, *ListProjectsLocationsSpokesRequest) (*ListSpokesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsSpokes not implemented")
}
func (UnimplementedProjectsLocationsSpokesServerServer) PatchProjectsLocationsSpoke(context.Context, *PatchProjectsLocationsSpokeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsSpoke not implemented")
}
func (UnimplementedProjectsLocationsSpokesServerServer) mustEmbedUnimplementedProjectsLocationsSpokesServerServer() {
}

// UnsafeProjectsLocationsSpokesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsSpokesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsSpokesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsSpokesServerServer()
}

func RegisterProjectsLocationsSpokesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsSpokesServerServer) {
	s.RegisterService(&ProjectsLocationsSpokesServer_ServiceDesc, srv)
}

func _ProjectsLocationsSpokesServer_CreateProjectsLocationsSpoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsSpokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsSpokesServerServer).CreateProjectsLocationsSpoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/CreateProjectsLocationsSpoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsSpokesServerServer).CreateProjectsLocationsSpoke(ctx, req.(*CreateProjectsLocationsSpokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsSpokesServer_DeleteProjectsLocationsSpoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsSpokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsSpokesServerServer).DeleteProjectsLocationsSpoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/DeleteProjectsLocationsSpoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsSpokesServerServer).DeleteProjectsLocationsSpoke(ctx, req.(*DeleteProjectsLocationsSpokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsSpokesServer_GetProjectsLocationsSpoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsSpokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsSpokesServerServer).GetProjectsLocationsSpoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/GetProjectsLocationsSpoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsSpokesServerServer).GetProjectsLocationsSpoke(ctx, req.(*GetProjectsLocationsSpokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsSpokesServer_ListProjectsLocationsSpokes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsSpokesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsSpokesServerServer).ListProjectsLocationsSpokes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/ListProjectsLocationsSpokes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsSpokesServerServer).ListProjectsLocationsSpokes(ctx, req.(*ListProjectsLocationsSpokesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsSpokesServer_PatchProjectsLocationsSpoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsSpokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsSpokesServerServer).PatchProjectsLocationsSpoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer/PatchProjectsLocationsSpoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsSpokesServerServer).PatchProjectsLocationsSpoke(ctx, req.(*PatchProjectsLocationsSpokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsSpokesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsSpokesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsSpokesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.networkconnectivity.v1.ProjectsLocationsSpokesServer",
	HandlerType: (*ProjectsLocationsSpokesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsSpoke",
			Handler:    _ProjectsLocationsSpokesServer_CreateProjectsLocationsSpoke_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsSpoke",
			Handler:    _ProjectsLocationsSpokesServer_DeleteProjectsLocationsSpoke_Handler,
		},
		{
			MethodName: "GetProjectsLocationsSpoke",
			Handler:    _ProjectsLocationsSpokesServer_GetProjectsLocationsSpoke_Handler,
		},
		{
			MethodName: "ListProjectsLocationsSpokes",
			Handler:    _ProjectsLocationsSpokesServer_ListProjectsLocationsSpokes_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsSpoke",
			Handler:    _ProjectsLocationsSpokesServer_PatchProjectsLocationsSpoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networkconnectivity/v1/networkconnectivity.proto",
}
