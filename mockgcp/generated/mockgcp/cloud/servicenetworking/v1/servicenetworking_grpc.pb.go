// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/servicenetworking/v1/servicenetworking.proto

package servicenetworkingpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesServerClient is the client API for ServicesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesServerClient interface {
	AddSubnetworkService(ctx context.Context, in *AddSubnetworkServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	DisableVpcServiceControlsService(ctx context.Context, in *DisableVpcServiceControlsServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	EnableVpcServiceControlsService(ctx context.Context, in *EnableVpcServiceControlsServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	SearchRangeService(ctx context.Context, in *SearchRangeServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	ValidateService(ctx context.Context, in *ValidateServiceRequest, opts ...grpc.CallOption) (*ValidateConsumerConfigResponse, error)
}

type servicesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesServerClient(cc grpc.ClientConnInterface) ServicesServerClient {
	return &servicesServerClient{cc}
}

func (c *servicesServerClient) AddSubnetworkService(ctx context.Context, in *AddSubnetworkServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesServer/AddSubnetworkService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServerClient) DisableVpcServiceControlsService(ctx context.Context, in *DisableVpcServiceControlsServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesServer/DisableVpcServiceControlsService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServerClient) EnableVpcServiceControlsService(ctx context.Context, in *EnableVpcServiceControlsServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesServer/EnableVpcServiceControlsService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServerClient) SearchRangeService(ctx context.Context, in *SearchRangeServiceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesServer/SearchRangeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesServerClient) ValidateService(ctx context.Context, in *ValidateServiceRequest, opts ...grpc.CallOption) (*ValidateConsumerConfigResponse, error) {
	out := new(ValidateConsumerConfigResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesServer/ValidateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServerServer is the server API for ServicesServer service.
// All implementations must embed UnimplementedServicesServerServer
// for forward compatibility
type ServicesServerServer interface {
	AddSubnetworkService(context.Context, *AddSubnetworkServiceRequest) (*longrunningpb.Operation, error)
	DisableVpcServiceControlsService(context.Context, *DisableVpcServiceControlsServiceRequest) (*longrunningpb.Operation, error)
	EnableVpcServiceControlsService(context.Context, *EnableVpcServiceControlsServiceRequest) (*longrunningpb.Operation, error)
	SearchRangeService(context.Context, *SearchRangeServiceRequest) (*longrunningpb.Operation, error)
	ValidateService(context.Context, *ValidateServiceRequest) (*ValidateConsumerConfigResponse, error)
	mustEmbedUnimplementedServicesServerServer()
}

// UnimplementedServicesServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServerServer struct {
}

func (UnimplementedServicesServerServer) AddSubnetworkService(context.Context, *AddSubnetworkServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnetworkService not implemented")
}
func (UnimplementedServicesServerServer) DisableVpcServiceControlsService(context.Context, *DisableVpcServiceControlsServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableVpcServiceControlsService not implemented")
}
func (UnimplementedServicesServerServer) EnableVpcServiceControlsService(context.Context, *EnableVpcServiceControlsServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableVpcServiceControlsService not implemented")
}
func (UnimplementedServicesServerServer) SearchRangeService(context.Context, *SearchRangeServiceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRangeService not implemented")
}
func (UnimplementedServicesServerServer) ValidateService(context.Context, *ValidateServiceRequest) (*ValidateConsumerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateService not implemented")
}
func (UnimplementedServicesServerServer) mustEmbedUnimplementedServicesServerServer() {}

// UnsafeServicesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServerServer will
// result in compilation errors.
type UnsafeServicesServerServer interface {
	mustEmbedUnimplementedServicesServerServer()
}

func RegisterServicesServerServer(s grpc.ServiceRegistrar, srv ServicesServerServer) {
	s.RegisterService(&ServicesServer_ServiceDesc, srv)
}

func _ServicesServer_AddSubnetworkService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetworkServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServerServer).AddSubnetworkService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesServer/AddSubnetworkService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServerServer).AddSubnetworkService(ctx, req.(*AddSubnetworkServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServer_DisableVpcServiceControlsService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableVpcServiceControlsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServerServer).DisableVpcServiceControlsService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesServer/DisableVpcServiceControlsService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServerServer).DisableVpcServiceControlsService(ctx, req.(*DisableVpcServiceControlsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServer_EnableVpcServiceControlsService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableVpcServiceControlsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServerServer).EnableVpcServiceControlsService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesServer/EnableVpcServiceControlsService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServerServer).EnableVpcServiceControlsService(ctx, req.(*EnableVpcServiceControlsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServer_SearchRangeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRangeServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServerServer).SearchRangeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesServer/SearchRangeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServerServer).SearchRangeService(ctx, req.(*SearchRangeServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesServer_ValidateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServerServer).ValidateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesServer/ValidateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServerServer).ValidateService(ctx, req.(*ValidateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesServer_ServiceDesc is the grpc.ServiceDesc for ServicesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesServer",
	HandlerType: (*ServicesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubnetworkService",
			Handler:    _ServicesServer_AddSubnetworkService_Handler,
		},
		{
			MethodName: "DisableVpcServiceControlsService",
			Handler:    _ServicesServer_DisableVpcServiceControlsService_Handler,
		},
		{
			MethodName: "EnableVpcServiceControlsService",
			Handler:    _ServicesServer_EnableVpcServiceControlsService_Handler,
		},
		{
			MethodName: "SearchRangeService",
			Handler:    _ServicesServer_SearchRangeService_Handler,
		},
		{
			MethodName: "ValidateService",
			Handler:    _ServicesServer_ValidateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesConnectionsServerClient is the client API for ServicesConnectionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesConnectionsServerClient interface {
	CreateServicesConnection(ctx context.Context, in *CreateServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	DeleteConnectionServicesConnection(ctx context.Context, in *DeleteConnectionServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	ListServicesConnections(ctx context.Context, in *ListServicesConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	PatchServicesConnection(ctx context.Context, in *PatchServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type servicesConnectionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesConnectionsServerClient(cc grpc.ClientConnInterface) ServicesConnectionsServerClient {
	return &servicesConnectionsServerClient{cc}
}

func (c *servicesConnectionsServerClient) CreateServicesConnection(ctx context.Context, in *CreateServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/CreateServicesConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesConnectionsServerClient) DeleteConnectionServicesConnection(ctx context.Context, in *DeleteConnectionServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/DeleteConnectionServicesConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesConnectionsServerClient) ListServicesConnections(ctx context.Context, in *ListServicesConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/ListServicesConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesConnectionsServerClient) PatchServicesConnection(ctx context.Context, in *PatchServicesConnectionRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/PatchServicesConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesConnectionsServerServer is the server API for ServicesConnectionsServer service.
// All implementations must embed UnimplementedServicesConnectionsServerServer
// for forward compatibility
type ServicesConnectionsServerServer interface {
	CreateServicesConnection(context.Context, *CreateServicesConnectionRequest) (*longrunningpb.Operation, error)
	DeleteConnectionServicesConnection(context.Context, *DeleteConnectionServicesConnectionRequest) (*longrunningpb.Operation, error)
	ListServicesConnections(context.Context, *ListServicesConnectionsRequest) (*ListConnectionsResponse, error)
	PatchServicesConnection(context.Context, *PatchServicesConnectionRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServicesConnectionsServerServer()
}

// UnimplementedServicesConnectionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesConnectionsServerServer struct {
}

func (UnimplementedServicesConnectionsServerServer) CreateServicesConnection(context.Context, *CreateServicesConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServicesConnection not implemented")
}
func (UnimplementedServicesConnectionsServerServer) DeleteConnectionServicesConnection(context.Context, *DeleteConnectionServicesConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectionServicesConnection not implemented")
}
func (UnimplementedServicesConnectionsServerServer) ListServicesConnections(context.Context, *ListServicesConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesConnections not implemented")
}
func (UnimplementedServicesConnectionsServerServer) PatchServicesConnection(context.Context, *PatchServicesConnectionRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchServicesConnection not implemented")
}
func (UnimplementedServicesConnectionsServerServer) mustEmbedUnimplementedServicesConnectionsServerServer() {
}

// UnsafeServicesConnectionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesConnectionsServerServer will
// result in compilation errors.
type UnsafeServicesConnectionsServerServer interface {
	mustEmbedUnimplementedServicesConnectionsServerServer()
}

func RegisterServicesConnectionsServerServer(s grpc.ServiceRegistrar, srv ServicesConnectionsServerServer) {
	s.RegisterService(&ServicesConnectionsServer_ServiceDesc, srv)
}

func _ServicesConnectionsServer_CreateServicesConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesConnectionsServerServer).CreateServicesConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/CreateServicesConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesConnectionsServerServer).CreateServicesConnection(ctx, req.(*CreateServicesConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesConnectionsServer_DeleteConnectionServicesConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionServicesConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesConnectionsServerServer).DeleteConnectionServicesConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/DeleteConnectionServicesConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesConnectionsServerServer).DeleteConnectionServicesConnection(ctx, req.(*DeleteConnectionServicesConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesConnectionsServer_ListServicesConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesConnectionsServerServer).ListServicesConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/ListServicesConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesConnectionsServerServer).ListServicesConnections(ctx, req.(*ListServicesConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesConnectionsServer_PatchServicesConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchServicesConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesConnectionsServerServer).PatchServicesConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/PatchServicesConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesConnectionsServerServer).PatchServicesConnection(ctx, req.(*PatchServicesConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesConnectionsServer_ServiceDesc is the grpc.ServiceDesc for ServicesConnectionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesConnectionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesConnectionsServer",
	HandlerType: (*ServicesConnectionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServicesConnection",
			Handler:    _ServicesConnectionsServer_CreateServicesConnection_Handler,
		},
		{
			MethodName: "DeleteConnectionServicesConnection",
			Handler:    _ServicesConnectionsServer_DeleteConnectionServicesConnection_Handler,
		},
		{
			MethodName: "ListServicesConnections",
			Handler:    _ServicesConnectionsServer_ListServicesConnections_Handler,
		},
		{
			MethodName: "PatchServicesConnection",
			Handler:    _ServicesConnectionsServer_PatchServicesConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesDnsRecordSetsServerClient is the client API for ServicesDnsRecordSetsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesDnsRecordSetsServerClient interface {
	AddServicesDnsRecordSet(ctx context.Context, in *AddServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	GetServicesDnsRecordSet(ctx context.Context, in *GetServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*DnsRecordSet, error)
	ListServicesDnsRecordSets(ctx context.Context, in *ListServicesDnsRecordSetsRequest, opts ...grpc.CallOption) (*ListDnsRecordSetsResponse, error)
	DeleteServicesDnsRecordSet(ctx context.Context, in *DeleteServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	UpdateServicesDnsRecordSet(ctx context.Context, in *UpdateServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type servicesDnsRecordSetsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesDnsRecordSetsServerClient(cc grpc.ClientConnInterface) ServicesDnsRecordSetsServerClient {
	return &servicesDnsRecordSetsServerClient{cc}
}

func (c *servicesDnsRecordSetsServerClient) AddServicesDnsRecordSet(ctx context.Context, in *AddServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/AddServicesDnsRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDnsRecordSetsServerClient) GetServicesDnsRecordSet(ctx context.Context, in *GetServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*DnsRecordSet, error) {
	out := new(DnsRecordSet)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/GetServicesDnsRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDnsRecordSetsServerClient) ListServicesDnsRecordSets(ctx context.Context, in *ListServicesDnsRecordSetsRequest, opts ...grpc.CallOption) (*ListDnsRecordSetsResponse, error) {
	out := new(ListDnsRecordSetsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/ListServicesDnsRecordSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDnsRecordSetsServerClient) DeleteServicesDnsRecordSet(ctx context.Context, in *DeleteServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/DeleteServicesDnsRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDnsRecordSetsServerClient) UpdateServicesDnsRecordSet(ctx context.Context, in *UpdateServicesDnsRecordSetRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/UpdateServicesDnsRecordSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesDnsRecordSetsServerServer is the server API for ServicesDnsRecordSetsServer service.
// All implementations must embed UnimplementedServicesDnsRecordSetsServerServer
// for forward compatibility
type ServicesDnsRecordSetsServerServer interface {
	AddServicesDnsRecordSet(context.Context, *AddServicesDnsRecordSetRequest) (*longrunningpb.Operation, error)
	GetServicesDnsRecordSet(context.Context, *GetServicesDnsRecordSetRequest) (*DnsRecordSet, error)
	ListServicesDnsRecordSets(context.Context, *ListServicesDnsRecordSetsRequest) (*ListDnsRecordSetsResponse, error)
	DeleteServicesDnsRecordSet(context.Context, *DeleteServicesDnsRecordSetRequest) (*longrunningpb.Operation, error)
	UpdateServicesDnsRecordSet(context.Context, *UpdateServicesDnsRecordSetRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServicesDnsRecordSetsServerServer()
}

// UnimplementedServicesDnsRecordSetsServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesDnsRecordSetsServerServer struct {
}

func (UnimplementedServicesDnsRecordSetsServerServer) AddServicesDnsRecordSet(context.Context, *AddServicesDnsRecordSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServicesDnsRecordSet not implemented")
}
func (UnimplementedServicesDnsRecordSetsServerServer) GetServicesDnsRecordSet(context.Context, *GetServicesDnsRecordSetRequest) (*DnsRecordSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesDnsRecordSet not implemented")
}
func (UnimplementedServicesDnsRecordSetsServerServer) ListServicesDnsRecordSets(context.Context, *ListServicesDnsRecordSetsRequest) (*ListDnsRecordSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesDnsRecordSets not implemented")
}
func (UnimplementedServicesDnsRecordSetsServerServer) DeleteServicesDnsRecordSet(context.Context, *DeleteServicesDnsRecordSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServicesDnsRecordSet not implemented")
}
func (UnimplementedServicesDnsRecordSetsServerServer) UpdateServicesDnsRecordSet(context.Context, *UpdateServicesDnsRecordSetRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServicesDnsRecordSet not implemented")
}
func (UnimplementedServicesDnsRecordSetsServerServer) mustEmbedUnimplementedServicesDnsRecordSetsServerServer() {
}

// UnsafeServicesDnsRecordSetsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesDnsRecordSetsServerServer will
// result in compilation errors.
type UnsafeServicesDnsRecordSetsServerServer interface {
	mustEmbedUnimplementedServicesDnsRecordSetsServerServer()
}

func RegisterServicesDnsRecordSetsServerServer(s grpc.ServiceRegistrar, srv ServicesDnsRecordSetsServerServer) {
	s.RegisterService(&ServicesDnsRecordSetsServer_ServiceDesc, srv)
}

func _ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServicesDnsRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsRecordSetsServerServer).AddServicesDnsRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/AddServicesDnsRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsRecordSetsServerServer).AddServicesDnsRecordSet(ctx, req.(*AddServicesDnsRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesDnsRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsRecordSetsServerServer).GetServicesDnsRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/GetServicesDnsRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsRecordSetsServerServer).GetServicesDnsRecordSet(ctx, req.(*GetServicesDnsRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesDnsRecordSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsRecordSetsServerServer).ListServicesDnsRecordSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/ListServicesDnsRecordSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsRecordSetsServerServer).ListServicesDnsRecordSets(ctx, req.(*ListServicesDnsRecordSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServicesDnsRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsRecordSetsServerServer).DeleteServicesDnsRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/DeleteServicesDnsRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsRecordSetsServerServer).DeleteServicesDnsRecordSet(ctx, req.(*DeleteServicesDnsRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServicesDnsRecordSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsRecordSetsServerServer).UpdateServicesDnsRecordSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/UpdateServicesDnsRecordSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsRecordSetsServerServer).UpdateServicesDnsRecordSet(ctx, req.(*UpdateServicesDnsRecordSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesDnsRecordSetsServer_ServiceDesc is the grpc.ServiceDesc for ServicesDnsRecordSetsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesDnsRecordSetsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer",
	HandlerType: (*ServicesDnsRecordSetsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServicesDnsRecordSet",
			Handler:    _ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_Handler,
		},
		{
			MethodName: "GetServicesDnsRecordSet",
			Handler:    _ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_Handler,
		},
		{
			MethodName: "ListServicesDnsRecordSets",
			Handler:    _ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_Handler,
		},
		{
			MethodName: "DeleteServicesDnsRecordSet",
			Handler:    _ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_Handler,
		},
		{
			MethodName: "UpdateServicesDnsRecordSet",
			Handler:    _ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesDnsZonesServerClient is the client API for ServicesDnsZonesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesDnsZonesServerClient interface {
	AddServicesDnsZone(ctx context.Context, in *AddServicesDnsZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	DeleteServicesDnsZone(ctx context.Context, in *DeleteServicesDnsZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type servicesDnsZonesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesDnsZonesServerClient(cc grpc.ClientConnInterface) ServicesDnsZonesServerClient {
	return &servicesDnsZonesServerClient{cc}
}

func (c *servicesDnsZonesServerClient) AddServicesDnsZone(ctx context.Context, in *AddServicesDnsZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/AddServicesDnsZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDnsZonesServerClient) DeleteServicesDnsZone(ctx context.Context, in *DeleteServicesDnsZoneRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/DeleteServicesDnsZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesDnsZonesServerServer is the server API for ServicesDnsZonesServer service.
// All implementations must embed UnimplementedServicesDnsZonesServerServer
// for forward compatibility
type ServicesDnsZonesServerServer interface {
	AddServicesDnsZone(context.Context, *AddServicesDnsZoneRequest) (*longrunningpb.Operation, error)
	DeleteServicesDnsZone(context.Context, *DeleteServicesDnsZoneRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServicesDnsZonesServerServer()
}

// UnimplementedServicesDnsZonesServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesDnsZonesServerServer struct {
}

func (UnimplementedServicesDnsZonesServerServer) AddServicesDnsZone(context.Context, *AddServicesDnsZoneRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServicesDnsZone not implemented")
}
func (UnimplementedServicesDnsZonesServerServer) DeleteServicesDnsZone(context.Context, *DeleteServicesDnsZoneRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServicesDnsZone not implemented")
}
func (UnimplementedServicesDnsZonesServerServer) mustEmbedUnimplementedServicesDnsZonesServerServer() {
}

// UnsafeServicesDnsZonesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesDnsZonesServerServer will
// result in compilation errors.
type UnsafeServicesDnsZonesServerServer interface {
	mustEmbedUnimplementedServicesDnsZonesServerServer()
}

func RegisterServicesDnsZonesServerServer(s grpc.ServiceRegistrar, srv ServicesDnsZonesServerServer) {
	s.RegisterService(&ServicesDnsZonesServer_ServiceDesc, srv)
}

func _ServicesDnsZonesServer_AddServicesDnsZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServicesDnsZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsZonesServerServer).AddServicesDnsZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/AddServicesDnsZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsZonesServerServer).AddServicesDnsZone(ctx, req.(*AddServicesDnsZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDnsZonesServer_DeleteServicesDnsZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServicesDnsZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDnsZonesServerServer).DeleteServicesDnsZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/DeleteServicesDnsZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDnsZonesServerServer).DeleteServicesDnsZone(ctx, req.(*DeleteServicesDnsZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesDnsZonesServer_ServiceDesc is the grpc.ServiceDesc for ServicesDnsZonesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesDnsZonesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesDnsZonesServer",
	HandlerType: (*ServicesDnsZonesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServicesDnsZone",
			Handler:    _ServicesDnsZonesServer_AddServicesDnsZone_Handler,
		},
		{
			MethodName: "DeleteServicesDnsZone",
			Handler:    _ServicesDnsZonesServer_DeleteServicesDnsZone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesProjectsServerClient is the client API for ServicesProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProjectsServerClient interface {
}

type servicesProjectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProjectsServerClient(cc grpc.ClientConnInterface) ServicesProjectsServerClient {
	return &servicesProjectsServerClient{cc}
}

// ServicesProjectsServerServer is the server API for ServicesProjectsServer service.
// All implementations must embed UnimplementedServicesProjectsServerServer
// for forward compatibility
type ServicesProjectsServerServer interface {
	mustEmbedUnimplementedServicesProjectsServerServer()
}

// UnimplementedServicesProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesProjectsServerServer struct {
}

func (UnimplementedServicesProjectsServerServer) mustEmbedUnimplementedServicesProjectsServerServer() {
}

// UnsafeServicesProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProjectsServerServer will
// result in compilation errors.
type UnsafeServicesProjectsServerServer interface {
	mustEmbedUnimplementedServicesProjectsServerServer()
}

func RegisterServicesProjectsServerServer(s grpc.ServiceRegistrar, srv ServicesProjectsServerServer) {
	s.RegisterService(&ServicesProjectsServer_ServiceDesc, srv)
}

// ServicesProjectsServer_ServiceDesc is the grpc.ServiceDesc for ServicesProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesProjectsServer",
	HandlerType: (*ServicesProjectsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesProjectsGlobalServerClient is the client API for ServicesProjectsGlobalServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProjectsGlobalServerClient interface {
}

type servicesProjectsGlobalServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProjectsGlobalServerClient(cc grpc.ClientConnInterface) ServicesProjectsGlobalServerClient {
	return &servicesProjectsGlobalServerClient{cc}
}

// ServicesProjectsGlobalServerServer is the server API for ServicesProjectsGlobalServer service.
// All implementations must embed UnimplementedServicesProjectsGlobalServerServer
// for forward compatibility
type ServicesProjectsGlobalServerServer interface {
	mustEmbedUnimplementedServicesProjectsGlobalServerServer()
}

// UnimplementedServicesProjectsGlobalServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesProjectsGlobalServerServer struct {
}

func (UnimplementedServicesProjectsGlobalServerServer) mustEmbedUnimplementedServicesProjectsGlobalServerServer() {
}

// UnsafeServicesProjectsGlobalServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProjectsGlobalServerServer will
// result in compilation errors.
type UnsafeServicesProjectsGlobalServerServer interface {
	mustEmbedUnimplementedServicesProjectsGlobalServerServer()
}

func RegisterServicesProjectsGlobalServerServer(s grpc.ServiceRegistrar, srv ServicesProjectsGlobalServerServer) {
	s.RegisterService(&ServicesProjectsGlobalServer_ServiceDesc, srv)
}

// ServicesProjectsGlobalServer_ServiceDesc is the grpc.ServiceDesc for ServicesProjectsGlobalServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProjectsGlobalServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesProjectsGlobalServer",
	HandlerType: (*ServicesProjectsGlobalServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesProjectsGlobalNetworksServerClient is the client API for ServicesProjectsGlobalNetworksServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProjectsGlobalNetworksServerClient interface {
	GetServicesProjectsGlobalNetwork(ctx context.Context, in *GetServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*ConsumerConfig, error)
	GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx context.Context, in *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*VpcServiceControls, error)
	UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx context.Context, in *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type servicesProjectsGlobalNetworksServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProjectsGlobalNetworksServerClient(cc grpc.ClientConnInterface) ServicesProjectsGlobalNetworksServerClient {
	return &servicesProjectsGlobalNetworksServerClient{cc}
}

func (c *servicesProjectsGlobalNetworksServerClient) GetServicesProjectsGlobalNetwork(ctx context.Context, in *GetServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*ConsumerConfig, error) {
	out := new(ConsumerConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetServicesProjectsGlobalNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProjectsGlobalNetworksServerClient) GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx context.Context, in *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*VpcServiceControls, error) {
	out := new(VpcServiceControls)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetVpcServiceControlsServicesProjectsGlobalNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProjectsGlobalNetworksServerClient) UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx context.Context, in *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/UpdateConsumerConfigServicesProjectsGlobalNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesProjectsGlobalNetworksServerServer is the server API for ServicesProjectsGlobalNetworksServer service.
// All implementations must embed UnimplementedServicesProjectsGlobalNetworksServerServer
// for forward compatibility
type ServicesProjectsGlobalNetworksServerServer interface {
	GetServicesProjectsGlobalNetwork(context.Context, *GetServicesProjectsGlobalNetworkRequest) (*ConsumerConfig, error)
	GetVpcServiceControlsServicesProjectsGlobalNetwork(context.Context, *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) (*VpcServiceControls, error)
	UpdateConsumerConfigServicesProjectsGlobalNetwork(context.Context, *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServicesProjectsGlobalNetworksServerServer()
}

// UnimplementedServicesProjectsGlobalNetworksServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesProjectsGlobalNetworksServerServer struct {
}

func (UnimplementedServicesProjectsGlobalNetworksServerServer) GetServicesProjectsGlobalNetwork(context.Context, *GetServicesProjectsGlobalNetworkRequest) (*ConsumerConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesProjectsGlobalNetwork not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksServerServer) GetVpcServiceControlsServicesProjectsGlobalNetwork(context.Context, *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) (*VpcServiceControls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpcServiceControlsServicesProjectsGlobalNetwork not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksServerServer) UpdateConsumerConfigServicesProjectsGlobalNetwork(context.Context, *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumerConfigServicesProjectsGlobalNetwork not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksServerServer) mustEmbedUnimplementedServicesProjectsGlobalNetworksServerServer() {
}

// UnsafeServicesProjectsGlobalNetworksServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProjectsGlobalNetworksServerServer will
// result in compilation errors.
type UnsafeServicesProjectsGlobalNetworksServerServer interface {
	mustEmbedUnimplementedServicesProjectsGlobalNetworksServerServer()
}

func RegisterServicesProjectsGlobalNetworksServerServer(s grpc.ServiceRegistrar, srv ServicesProjectsGlobalNetworksServerServer) {
	s.RegisterService(&ServicesProjectsGlobalNetworksServer_ServiceDesc, srv)
}

func _ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesProjectsGlobalNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksServerServer).GetServicesProjectsGlobalNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetServicesProjectsGlobalNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksServerServer).GetServicesProjectsGlobalNetwork(ctx, req.(*GetServicesProjectsGlobalNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcServiceControlsServicesProjectsGlobalNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksServerServer).GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetVpcServiceControlsServicesProjectsGlobalNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksServerServer).GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx, req.(*GetVpcServiceControlsServicesProjectsGlobalNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerConfigServicesProjectsGlobalNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksServerServer).UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/UpdateConsumerConfigServicesProjectsGlobalNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksServerServer).UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx, req.(*UpdateConsumerConfigServicesProjectsGlobalNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesProjectsGlobalNetworksServer_ServiceDesc is the grpc.ServiceDesc for ServicesProjectsGlobalNetworksServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProjectsGlobalNetworksServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer",
	HandlerType: (*ServicesProjectsGlobalNetworksServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServicesProjectsGlobalNetwork",
			Handler:    _ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_Handler,
		},
		{
			MethodName: "GetVpcServiceControlsServicesProjectsGlobalNetwork",
			Handler:    _ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_Handler,
		},
		{
			MethodName: "UpdateConsumerConfigServicesProjectsGlobalNetwork",
			Handler:    _ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesProjectsGlobalNetworksDnsZonesServerClient is the client API for ServicesProjectsGlobalNetworksDnsZonesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProjectsGlobalNetworksDnsZonesServerClient interface {
	GetServicesProjectsGlobalNetworksDnsZone(ctx context.Context, in *GetServicesProjectsGlobalNetworksDnsZoneRequest, opts ...grpc.CallOption) (*GetDnsZoneResponse, error)
	ListServicesProjectsGlobalNetworksDnsZones(ctx context.Context, in *ListServicesProjectsGlobalNetworksDnsZonesRequest, opts ...grpc.CallOption) (*ListDnsZonesResponse, error)
}

type servicesProjectsGlobalNetworksDnsZonesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProjectsGlobalNetworksDnsZonesServerClient(cc grpc.ClientConnInterface) ServicesProjectsGlobalNetworksDnsZonesServerClient {
	return &servicesProjectsGlobalNetworksDnsZonesServerClient{cc}
}

func (c *servicesProjectsGlobalNetworksDnsZonesServerClient) GetServicesProjectsGlobalNetworksDnsZone(ctx context.Context, in *GetServicesProjectsGlobalNetworksDnsZoneRequest, opts ...grpc.CallOption) (*GetDnsZoneResponse, error) {
	out := new(GetDnsZoneResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/GetServicesProjectsGlobalNetworksDnsZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProjectsGlobalNetworksDnsZonesServerClient) ListServicesProjectsGlobalNetworksDnsZones(ctx context.Context, in *ListServicesProjectsGlobalNetworksDnsZonesRequest, opts ...grpc.CallOption) (*ListDnsZonesResponse, error) {
	out := new(ListDnsZonesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/ListServicesProjectsGlobalNetworksDnsZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesProjectsGlobalNetworksDnsZonesServerServer is the server API for ServicesProjectsGlobalNetworksDnsZonesServer service.
// All implementations must embed UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer
// for forward compatibility
type ServicesProjectsGlobalNetworksDnsZonesServerServer interface {
	GetServicesProjectsGlobalNetworksDnsZone(context.Context, *GetServicesProjectsGlobalNetworksDnsZoneRequest) (*GetDnsZoneResponse, error)
	ListServicesProjectsGlobalNetworksDnsZones(context.Context, *ListServicesProjectsGlobalNetworksDnsZonesRequest) (*ListDnsZonesResponse, error)
	mustEmbedUnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer()
}

// UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer struct {
}

func (UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer) GetServicesProjectsGlobalNetworksDnsZone(context.Context, *GetServicesProjectsGlobalNetworksDnsZoneRequest) (*GetDnsZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesProjectsGlobalNetworksDnsZone not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer) ListServicesProjectsGlobalNetworksDnsZones(context.Context, *ListServicesProjectsGlobalNetworksDnsZonesRequest) (*ListDnsZonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesProjectsGlobalNetworksDnsZones not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer) mustEmbedUnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer() {
}

// UnsafeServicesProjectsGlobalNetworksDnsZonesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProjectsGlobalNetworksDnsZonesServerServer will
// result in compilation errors.
type UnsafeServicesProjectsGlobalNetworksDnsZonesServerServer interface {
	mustEmbedUnimplementedServicesProjectsGlobalNetworksDnsZonesServerServer()
}

func RegisterServicesProjectsGlobalNetworksDnsZonesServerServer(s grpc.ServiceRegistrar, srv ServicesProjectsGlobalNetworksDnsZonesServerServer) {
	s.RegisterService(&ServicesProjectsGlobalNetworksDnsZonesServer_ServiceDesc, srv)
}

func _ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesProjectsGlobalNetworksDnsZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksDnsZonesServerServer).GetServicesProjectsGlobalNetworksDnsZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/GetServicesProjectsGlobalNetworksDnsZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksDnsZonesServerServer).GetServicesProjectsGlobalNetworksDnsZone(ctx, req.(*GetServicesProjectsGlobalNetworksDnsZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesProjectsGlobalNetworksDnsZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksDnsZonesServerServer).ListServicesProjectsGlobalNetworksDnsZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/ListServicesProjectsGlobalNetworksDnsZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksDnsZonesServerServer).ListServicesProjectsGlobalNetworksDnsZones(ctx, req.(*ListServicesProjectsGlobalNetworksDnsZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesProjectsGlobalNetworksDnsZonesServer_ServiceDesc is the grpc.ServiceDesc for ServicesProjectsGlobalNetworksDnsZonesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProjectsGlobalNetworksDnsZonesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer",
	HandlerType: (*ServicesProjectsGlobalNetworksDnsZonesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServicesProjectsGlobalNetworksDnsZone",
			Handler:    _ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_Handler,
		},
		{
			MethodName: "ListServicesProjectsGlobalNetworksDnsZones",
			Handler:    _ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient is the client API for ServicesProjectsGlobalNetworksPeeredDnsDomainsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient interface {
	CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx context.Context, in *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx context.Context, in *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx context.Context, in *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest, opts ...grpc.CallOption) (*ListPeeredDnsDomainsResponse, error)
}

type servicesProjectsGlobalNetworksPeeredDnsDomainsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient(cc grpc.ClientConnInterface) ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient {
	return &servicesProjectsGlobalNetworksPeeredDnsDomainsServerClient{cc}
}

func (c *servicesProjectsGlobalNetworksPeeredDnsDomainsServerClient) CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx context.Context, in *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/CreateServicesProjectsGlobalNetworksPeeredDnsDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProjectsGlobalNetworksPeeredDnsDomainsServerClient) DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx context.Context, in *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/DeleteServicesProjectsGlobalNetworksPeeredDnsDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesProjectsGlobalNetworksPeeredDnsDomainsServerClient) ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx context.Context, in *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest, opts ...grpc.CallOption) (*ListPeeredDnsDomainsResponse, error) {
	out := new(ListPeeredDnsDomainsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/ListServicesProjectsGlobalNetworksPeeredDnsDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer is the server API for ServicesProjectsGlobalNetworksPeeredDnsDomainsServer service.
// All implementations must embed UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer
// for forward compatibility
type ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer interface {
	CreateServicesProjectsGlobalNetworksPeeredDnsDomain(context.Context, *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) (*longrunningpb.Operation, error)
	DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(context.Context, *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) (*longrunningpb.Operation, error)
	ListServicesProjectsGlobalNetworksPeeredDnsDomains(context.Context, *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) (*ListPeeredDnsDomainsResponse, error)
	mustEmbedUnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer()
}

// UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer struct {
}

func (UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) CreateServicesProjectsGlobalNetworksPeeredDnsDomain(context.Context, *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServicesProjectsGlobalNetworksPeeredDnsDomain not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(context.Context, *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServicesProjectsGlobalNetworksPeeredDnsDomain not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) ListServicesProjectsGlobalNetworksPeeredDnsDomains(context.Context, *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) (*ListPeeredDnsDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesProjectsGlobalNetworksPeeredDnsDomains not implemented")
}
func (UnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) mustEmbedUnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer() {
}

// UnsafeServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer will
// result in compilation errors.
type UnsafeServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer interface {
	mustEmbedUnimplementedServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer()
}

func RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer(s grpc.ServiceRegistrar, srv ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) {
	s.RegisterService(&ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ServiceDesc, srv)
}

func _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/CreateServicesProjectsGlobalNetworksPeeredDnsDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, req.(*CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/DeleteServicesProjectsGlobalNetworksPeeredDnsDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, req.(*DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/ListServicesProjectsGlobalNetworksPeeredDnsDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer).ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx, req.(*ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ServiceDesc is the grpc.ServiceDesc for ServicesProjectsGlobalNetworksPeeredDnsDomainsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer",
	HandlerType: (*ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServicesProjectsGlobalNetworksPeeredDnsDomain",
			Handler:    _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_Handler,
		},
		{
			MethodName: "DeleteServicesProjectsGlobalNetworksPeeredDnsDomain",
			Handler:    _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_Handler,
		},
		{
			MethodName: "ListServicesProjectsGlobalNetworksPeeredDnsDomains",
			Handler:    _ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}

// ServicesRolesServerClient is the client API for ServicesRolesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesRolesServerClient interface {
	AddServicesRole(ctx context.Context, in *AddServicesRoleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type servicesRolesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesRolesServerClient(cc grpc.ClientConnInterface) ServicesRolesServerClient {
	return &servicesRolesServerClient{cc}
}

func (c *servicesRolesServerClient) AddServicesRole(ctx context.Context, in *AddServicesRoleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.servicenetworking.v1.ServicesRolesServer/AddServicesRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesRolesServerServer is the server API for ServicesRolesServer service.
// All implementations must embed UnimplementedServicesRolesServerServer
// for forward compatibility
type ServicesRolesServerServer interface {
	AddServicesRole(context.Context, *AddServicesRoleRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedServicesRolesServerServer()
}

// UnimplementedServicesRolesServerServer must be embedded to have forward compatible implementations.
type UnimplementedServicesRolesServerServer struct {
}

func (UnimplementedServicesRolesServerServer) AddServicesRole(context.Context, *AddServicesRoleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServicesRole not implemented")
}
func (UnimplementedServicesRolesServerServer) mustEmbedUnimplementedServicesRolesServerServer() {}

// UnsafeServicesRolesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesRolesServerServer will
// result in compilation errors.
type UnsafeServicesRolesServerServer interface {
	mustEmbedUnimplementedServicesRolesServerServer()
}

func RegisterServicesRolesServerServer(s grpc.ServiceRegistrar, srv ServicesRolesServerServer) {
	s.RegisterService(&ServicesRolesServer_ServiceDesc, srv)
}

func _ServicesRolesServer_AddServicesRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServicesRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesRolesServerServer).AddServicesRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.servicenetworking.v1.ServicesRolesServer/AddServicesRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesRolesServerServer).AddServicesRole(ctx, req.(*AddServicesRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesRolesServer_ServiceDesc is the grpc.ServiceDesc for ServicesRolesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesRolesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.servicenetworking.v1.ServicesRolesServer",
	HandlerType: (*ServicesRolesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServicesRole",
			Handler:    _ServicesRolesServer_AddServicesRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/servicenetworking/v1/servicenetworking.proto",
}
