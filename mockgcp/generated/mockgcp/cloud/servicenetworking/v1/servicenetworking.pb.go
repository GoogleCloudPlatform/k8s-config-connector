// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/servicenetworking/v1/servicenetworking.proto

package servicenetworkingpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	any1 "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddDnsRecordSetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDnsRecordSetMetadata) Reset() {
	*x = AddDnsRecordSetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDnsRecordSetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDnsRecordSetMetadata) ProtoMessage() {}

func (x *AddDnsRecordSetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDnsRecordSetMetadata.ProtoReflect.Descriptor instead.
func (*AddDnsRecordSetMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{0}
}

type AddDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string        `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	DnsRecordSet    *DnsRecordSet `protobuf:"bytes,2,opt,name=dns_record_set,json=dnsRecordSet,proto3" json:"dns_record_set,omitempty"`
	Zone            string        `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *AddDnsRecordSetRequest) Reset() {
	*x = AddDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDnsRecordSetRequest) ProtoMessage() {}

func (x *AddDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*AddDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{1}
}

func (x *AddDnsRecordSetRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *AddDnsRecordSetRequest) GetDnsRecordSet() *DnsRecordSet {
	if x != nil {
		return x.DnsRecordSet
	}
	return nil
}

func (x *AddDnsRecordSetRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type AddDnsZoneMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDnsZoneMetadata) Reset() {
	*x = AddDnsZoneMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDnsZoneMetadata) ProtoMessage() {}

func (x *AddDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*AddDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{2}
}

type AddDnsZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	DnsSuffix       string `protobuf:"bytes,2,opt,name=dns_suffix,json=dnsSuffix,proto3" json:"dns_suffix,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddDnsZoneRequest) Reset() {
	*x = AddDnsZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDnsZoneRequest) ProtoMessage() {}

func (x *AddDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*AddDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{3}
}

func (x *AddDnsZoneRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *AddDnsZoneRequest) GetDnsSuffix() string {
	if x != nil {
		return x.DnsSuffix
	}
	return ""
}

func (x *AddDnsZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddDnsZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerPeeringZone *DnsZone `protobuf:"bytes,1,opt,name=consumer_peering_zone,json=consumerPeeringZone,proto3" json:"consumer_peering_zone,omitempty"`
	ProducerPrivateZone *DnsZone `protobuf:"bytes,2,opt,name=producer_private_zone,json=producerPrivateZone,proto3" json:"producer_private_zone,omitempty"`
}

func (x *AddDnsZoneResponse) Reset() {
	*x = AddDnsZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDnsZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDnsZoneResponse) ProtoMessage() {}

func (x *AddDnsZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDnsZoneResponse.ProtoReflect.Descriptor instead.
func (*AddDnsZoneResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{4}
}

func (x *AddDnsZoneResponse) GetConsumerPeeringZone() *DnsZone {
	if x != nil {
		return x.ConsumerPeeringZone
	}
	return nil
}

func (x *AddDnsZoneResponse) GetProducerPrivateZone() *DnsZone {
	if x != nil {
		return x.ProducerPrivateZone
	}
	return nil
}

type AddRolesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddRolesMetadata) Reset() {
	*x = AddRolesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRolesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRolesMetadata) ProtoMessage() {}

func (x *AddRolesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRolesMetadata.ProtoReflect.Descriptor instead.
func (*AddRolesMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{5}
}

type AddRolesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string           `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	PolicyBinding   []*PolicyBinding `protobuf:"bytes,2,rep,name=policy_binding,json=policyBinding,proto3" json:"policy_binding,omitempty"`
}

func (x *AddRolesRequest) Reset() {
	*x = AddRolesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRolesRequest) ProtoMessage() {}

func (x *AddRolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRolesRequest.ProtoReflect.Descriptor instead.
func (*AddRolesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{6}
}

func (x *AddRolesRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *AddRolesRequest) GetPolicyBinding() []*PolicyBinding {
	if x != nil {
		return x.PolicyBinding
	}
	return nil
}

type AddRolesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyBinding []*PolicyBinding `protobuf:"bytes,1,rep,name=policy_binding,json=policyBinding,proto3" json:"policy_binding,omitempty"`
}

func (x *AddRolesResponse) Reset() {
	*x = AddRolesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRolesResponse) ProtoMessage() {}

func (x *AddRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRolesResponse.ProtoReflect.Descriptor instead.
func (*AddRolesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{7}
}

func (x *AddRolesResponse) GetPolicyBinding() []*PolicyBinding {
	if x != nil {
		return x.PolicyBinding
	}
	return nil
}

type AddSubnetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowSubnetCidrRoutesOverlap        bool                    `protobuf:"varint,1,opt,name=allow_subnet_cidr_routes_overlap,json=allowSubnetCidrRoutesOverlap,proto3" json:"allow_subnet_cidr_routes_overlap,omitempty"`
	CheckServiceNetworkingUsePermission bool                    `protobuf:"varint,2,opt,name=check_service_networking_use_permission,json=checkServiceNetworkingUsePermission,proto3" json:"check_service_networking_use_permission,omitempty"`
	ComputeIdempotencyWindow            *duration.Duration      `protobuf:"bytes,3,opt,name=compute_idempotency_window,json=computeIdempotencyWindow,proto3" json:"compute_idempotency_window,omitempty"`
	Consumer                            string                  `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
	ConsumerNetwork                     string                  `protobuf:"bytes,5,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	Description                         string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	InternalRange                       string                  `protobuf:"bytes,7,opt,name=internal_range,json=internalRange,proto3" json:"internal_range,omitempty"`
	IpPrefixLength                      int32                   `protobuf:"varint,8,opt,name=ip_prefix_length,json=ipPrefixLength,proto3" json:"ip_prefix_length,omitempty"`
	OutsideAllocationPublicIpRange      string                  `protobuf:"bytes,9,opt,name=outside_allocation_public_ip_range,json=outsideAllocationPublicIpRange,proto3" json:"outside_allocation_public_ip_range,omitempty"`
	PrivateIpv6GoogleAccess             string                  `protobuf:"bytes,10,opt,name=private_ipv6_google_access,json=privateIpv6GoogleAccess,proto3" json:"private_ipv6_google_access,omitempty"`
	Purpose                             string                  `protobuf:"bytes,11,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Region                              string                  `protobuf:"bytes,12,opt,name=region,proto3" json:"region,omitempty"`
	RequestedAddress                    string                  `protobuf:"bytes,13,opt,name=requested_address,json=requestedAddress,proto3" json:"requested_address,omitempty"`
	RequestedRanges                     []string                `protobuf:"bytes,14,rep,name=requested_ranges,json=requestedRanges,proto3" json:"requested_ranges,omitempty"`
	Role                                string                  `protobuf:"bytes,15,opt,name=role,proto3" json:"role,omitempty"`
	SecondaryIpRangeSpecs               []*SecondaryIpRangeSpec `protobuf:"bytes,16,rep,name=secondary_ip_range_specs,json=secondaryIpRangeSpecs,proto3" json:"secondary_ip_range_specs,omitempty"`
	Subnetwork                          string                  `protobuf:"bytes,17,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	SubnetworkUsers                     []string                `protobuf:"bytes,18,rep,name=subnetwork_users,json=subnetworkUsers,proto3" json:"subnetwork_users,omitempty"`
	UseCustomComputeIdempotencyWindow   bool                    `protobuf:"varint,19,opt,name=use_custom_compute_idempotency_window,json=useCustomComputeIdempotencyWindow,proto3" json:"use_custom_compute_idempotency_window,omitempty"`
}

func (x *AddSubnetworkRequest) Reset() {
	*x = AddSubnetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetworkRequest) ProtoMessage() {}

func (x *AddSubnetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetworkRequest.ProtoReflect.Descriptor instead.
func (*AddSubnetworkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{8}
}

func (x *AddSubnetworkRequest) GetAllowSubnetCidrRoutesOverlap() bool {
	if x != nil {
		return x.AllowSubnetCidrRoutesOverlap
	}
	return false
}

func (x *AddSubnetworkRequest) GetCheckServiceNetworkingUsePermission() bool {
	if x != nil {
		return x.CheckServiceNetworkingUsePermission
	}
	return false
}

func (x *AddSubnetworkRequest) GetComputeIdempotencyWindow() *duration.Duration {
	if x != nil {
		return x.ComputeIdempotencyWindow
	}
	return nil
}

func (x *AddSubnetworkRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *AddSubnetworkRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *AddSubnetworkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddSubnetworkRequest) GetInternalRange() string {
	if x != nil {
		return x.InternalRange
	}
	return ""
}

func (x *AddSubnetworkRequest) GetIpPrefixLength() int32 {
	if x != nil {
		return x.IpPrefixLength
	}
	return 0
}

func (x *AddSubnetworkRequest) GetOutsideAllocationPublicIpRange() string {
	if x != nil {
		return x.OutsideAllocationPublicIpRange
	}
	return ""
}

func (x *AddSubnetworkRequest) GetPrivateIpv6GoogleAccess() string {
	if x != nil {
		return x.PrivateIpv6GoogleAccess
	}
	return ""
}

func (x *AddSubnetworkRequest) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *AddSubnetworkRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddSubnetworkRequest) GetRequestedAddress() string {
	if x != nil {
		return x.RequestedAddress
	}
	return ""
}

func (x *AddSubnetworkRequest) GetRequestedRanges() []string {
	if x != nil {
		return x.RequestedRanges
	}
	return nil
}

func (x *AddSubnetworkRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AddSubnetworkRequest) GetSecondaryIpRangeSpecs() []*SecondaryIpRangeSpec {
	if x != nil {
		return x.SecondaryIpRangeSpecs
	}
	return nil
}

func (x *AddSubnetworkRequest) GetSubnetwork() string {
	if x != nil {
		return x.Subnetwork
	}
	return ""
}

func (x *AddSubnetworkRequest) GetSubnetworkUsers() []string {
	if x != nil {
		return x.SubnetworkUsers
	}
	return nil
}

func (x *AddSubnetworkRequest) GetUseCustomComputeIdempotencyWindow() bool {
	if x != nil {
		return x.UseCustomComputeIdempotencyWindow
	}
	return false
}

type Api struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods       []*Method      `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	Mixins        []*Mixin       `protobuf:"bytes,2,rep,name=mixins,proto3" json:"mixins,omitempty"`
	Name          string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Options       []*Option      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	SourceContext *SourceContext `protobuf:"bytes,5,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
	Syntax        string         `protobuf:"bytes,6,opt,name=syntax,proto3" json:"syntax,omitempty"`
	Version       string         `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Api) Reset() {
	*x = Api{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Api) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Api) ProtoMessage() {}

func (x *Api) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Api.ProtoReflect.Descriptor instead.
func (*Api) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{9}
}

func (x *Api) GetMethods() []*Method {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Api) GetMixins() []*Mixin {
	if x != nil {
		return x.Mixins
	}
	return nil
}

func (x *Api) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Api) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Api) GetSourceContext() *SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

func (x *Api) GetSyntax() string {
	if x != nil {
		return x.Syntax
	}
	return ""
}

func (x *Api) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AuthProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audiences        string         `protobuf:"bytes,1,opt,name=audiences,proto3" json:"audiences,omitempty"`
	AuthorizationUrl string         `protobuf:"bytes,2,opt,name=authorization_url,json=authorizationUrl,proto3" json:"authorization_url,omitempty"`
	Id               string         `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Issuer           string         `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	JwksUri          string         `protobuf:"bytes,5,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	JwtLocations     []*JwtLocation `protobuf:"bytes,6,rep,name=jwt_locations,json=jwtLocations,proto3" json:"jwt_locations,omitempty"`
}

func (x *AuthProvider) Reset() {
	*x = AuthProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthProvider) ProtoMessage() {}

func (x *AuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthProvider.ProtoReflect.Descriptor instead.
func (*AuthProvider) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{10}
}

func (x *AuthProvider) GetAudiences() string {
	if x != nil {
		return x.Audiences
	}
	return ""
}

func (x *AuthProvider) GetAuthorizationUrl() string {
	if x != nil {
		return x.AuthorizationUrl
	}
	return ""
}

func (x *AuthProvider) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AuthProvider) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *AuthProvider) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *AuthProvider) GetJwtLocations() []*JwtLocation {
	if x != nil {
		return x.JwtLocations
	}
	return nil
}

type AuthRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audiences  string `protobuf:"bytes,1,opt,name=audiences,proto3" json:"audiences,omitempty"`
	ProviderId string `protobuf:"bytes,2,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
}

func (x *AuthRequirement) Reset() {
	*x = AuthRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequirement) ProtoMessage() {}

func (x *AuthRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequirement.ProtoReflect.Descriptor instead.
func (*AuthRequirement) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{11}
}

func (x *AuthRequirement) GetAudiences() string {
	if x != nil {
		return x.Audiences
	}
	return ""
}

func (x *AuthRequirement) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

type Authentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Providers []*AuthProvider       `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	Rules     []*AuthenticationRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Authentication) Reset() {
	*x = Authentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authentication) ProtoMessage() {}

func (x *Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authentication.ProtoReflect.Descriptor instead.
func (*Authentication) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{12}
}

func (x *Authentication) GetProviders() []*AuthProvider {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *Authentication) GetRules() []*AuthenticationRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type AuthenticationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowWithoutCredential bool               `protobuf:"varint,1,opt,name=allow_without_credential,json=allowWithoutCredential,proto3" json:"allow_without_credential,omitempty"`
	Oauth                  *OAuthRequirements `protobuf:"bytes,2,opt,name=oauth,proto3" json:"oauth,omitempty"`
	Requirements           []*AuthRequirement `protobuf:"bytes,3,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Selector               string             `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *AuthenticationRule) Reset() {
	*x = AuthenticationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRule) ProtoMessage() {}

func (x *AuthenticationRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRule.ProtoReflect.Descriptor instead.
func (*AuthenticationRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{13}
}

func (x *AuthenticationRule) GetAllowWithoutCredential() bool {
	if x != nil {
		return x.AllowWithoutCredential
	}
	return false
}

func (x *AuthenticationRule) GetOauth() *OAuthRequirements {
	if x != nil {
		return x.Oauth
	}
	return nil
}

func (x *AuthenticationRule) GetRequirements() []*AuthRequirement {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *AuthenticationRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*BackendRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{14}
}

func (x *Backend) GetRules() []*BackendRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type BackendRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                    string                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Deadline                   float64                 `protobuf:"fixed64,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	DisableAuth                bool                    `protobuf:"varint,3,opt,name=disable_auth,json=disableAuth,proto3" json:"disable_auth,omitempty"`
	JwtAudience                string                  `protobuf:"bytes,4,opt,name=jwt_audience,json=jwtAudience,proto3" json:"jwt_audience,omitempty"`
	MinDeadline                float64                 `protobuf:"fixed64,5,opt,name=min_deadline,json=minDeadline,proto3" json:"min_deadline,omitempty"`
	OperationDeadline          float64                 `protobuf:"fixed64,6,opt,name=operation_deadline,json=operationDeadline,proto3" json:"operation_deadline,omitempty"`
	OverridesByRequestProtocol map[string]*BackendRule `protobuf:"bytes,7,rep,name=overrides_by_request_protocol,json=overridesByRequestProtocol,proto3" json:"overrides_by_request_protocol,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathTranslation            string                  `protobuf:"bytes,8,opt,name=path_translation,json=pathTranslation,proto3" json:"path_translation,omitempty"`
	Protocol                   string                  `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Selector                   string                  `protobuf:"bytes,10,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *BackendRule) Reset() {
	*x = BackendRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendRule) ProtoMessage() {}

func (x *BackendRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendRule.ProtoReflect.Descriptor instead.
func (*BackendRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{15}
}

func (x *BackendRule) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BackendRule) GetDeadline() float64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *BackendRule) GetDisableAuth() bool {
	if x != nil {
		return x.DisableAuth
	}
	return false
}

func (x *BackendRule) GetJwtAudience() string {
	if x != nil {
		return x.JwtAudience
	}
	return ""
}

func (x *BackendRule) GetMinDeadline() float64 {
	if x != nil {
		return x.MinDeadline
	}
	return 0
}

func (x *BackendRule) GetOperationDeadline() float64 {
	if x != nil {
		return x.OperationDeadline
	}
	return 0
}

func (x *BackendRule) GetOverridesByRequestProtocol() map[string]*BackendRule {
	if x != nil {
		return x.OverridesByRequestProtocol
	}
	return nil
}

func (x *BackendRule) GetPathTranslation() string {
	if x != nil {
		return x.PathTranslation
	}
	return ""
}

func (x *BackendRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *BackendRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type Billing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerDestinations []*BillingDestination `protobuf:"bytes,1,rep,name=consumer_destinations,json=consumerDestinations,proto3" json:"consumer_destinations,omitempty"`
}

func (x *Billing) Reset() {
	*x = Billing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Billing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Billing) ProtoMessage() {}

func (x *Billing) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Billing.ProtoReflect.Descriptor instead.
func (*Billing) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{16}
}

func (x *Billing) GetConsumerDestinations() []*BillingDestination {
	if x != nil {
		return x.ConsumerDestinations
	}
	return nil
}

type BillingDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics           []string `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	MonitoredResource string   `protobuf:"bytes,2,opt,name=monitored_resource,json=monitoredResource,proto3" json:"monitored_resource,omitempty"`
}

func (x *BillingDestination) Reset() {
	*x = BillingDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillingDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillingDestination) ProtoMessage() {}

func (x *BillingDestination) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillingDestination.ProtoReflect.Descriptor instead.
func (*BillingDestination) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{17}
}

func (x *BillingDestination) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *BillingDestination) GetMonitoredResource() string {
	if x != nil {
		return x.MonitoredResource
	}
	return ""
}

type CancelOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelOperationRequest) Reset() {
	*x = CancelOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOperationRequest) ProtoMessage() {}

func (x *CancelOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOperationRequest.ProtoReflect.Descriptor instead.
func (*CancelOperationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{18}
}

type ClientLibrarySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSettings      *CppSettings    `protobuf:"bytes,1,opt,name=cpp_settings,json=cppSettings,proto3" json:"cpp_settings,omitempty"`
	DotnetSettings   *DotnetSettings `protobuf:"bytes,2,opt,name=dotnet_settings,json=dotnetSettings,proto3" json:"dotnet_settings,omitempty"`
	GoSettings       *GoSettings     `protobuf:"bytes,3,opt,name=go_settings,json=goSettings,proto3" json:"go_settings,omitempty"`
	JavaSettings     *JavaSettings   `protobuf:"bytes,4,opt,name=java_settings,json=javaSettings,proto3" json:"java_settings,omitempty"`
	LaunchStage      string          `protobuf:"bytes,5,opt,name=launch_stage,json=launchStage,proto3" json:"launch_stage,omitempty"`
	NodeSettings     *NodeSettings   `protobuf:"bytes,6,opt,name=node_settings,json=nodeSettings,proto3" json:"node_settings,omitempty"`
	PhpSettings      *PhpSettings    `protobuf:"bytes,7,opt,name=php_settings,json=phpSettings,proto3" json:"php_settings,omitempty"`
	PythonSettings   *PythonSettings `protobuf:"bytes,8,opt,name=python_settings,json=pythonSettings,proto3" json:"python_settings,omitempty"`
	RestNumericEnums bool            `protobuf:"varint,9,opt,name=rest_numeric_enums,json=restNumericEnums,proto3" json:"rest_numeric_enums,omitempty"`
	RubySettings     *RubySettings   `protobuf:"bytes,10,opt,name=ruby_settings,json=rubySettings,proto3" json:"ruby_settings,omitempty"`
	Version          string          `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClientLibrarySettings) Reset() {
	*x = ClientLibrarySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientLibrarySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLibrarySettings) ProtoMessage() {}

func (x *ClientLibrarySettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLibrarySettings.ProtoReflect.Descriptor instead.
func (*ClientLibrarySettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{19}
}

func (x *ClientLibrarySettings) GetCppSettings() *CppSettings {
	if x != nil {
		return x.CppSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetDotnetSettings() *DotnetSettings {
	if x != nil {
		return x.DotnetSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetGoSettings() *GoSettings {
	if x != nil {
		return x.GoSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetJavaSettings() *JavaSettings {
	if x != nil {
		return x.JavaSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetLaunchStage() string {
	if x != nil {
		return x.LaunchStage
	}
	return ""
}

func (x *ClientLibrarySettings) GetNodeSettings() *NodeSettings {
	if x != nil {
		return x.NodeSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetPhpSettings() *PhpSettings {
	if x != nil {
		return x.PhpSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetPythonSettings() *PythonSettings {
	if x != nil {
		return x.PythonSettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetRestNumericEnums() bool {
	if x != nil {
		return x.RestNumericEnums
	}
	return false
}

func (x *ClientLibrarySettings) GetRubySettings() *RubySettings {
	if x != nil {
		return x.RubySettings
	}
	return nil
}

func (x *ClientLibrarySettings) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CloudSQLConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service         string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	UmbrellaNetwork string `protobuf:"bytes,2,opt,name=umbrella_network,json=umbrellaNetwork,proto3" json:"umbrella_network,omitempty"`
	UmbrellaProject int64  `protobuf:"varint,3,opt,name=umbrella_project,json=umbrellaProject,proto3" json:"umbrella_project,omitempty"`
}

func (x *CloudSQLConfig) Reset() {
	*x = CloudSQLConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudSQLConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSQLConfig) ProtoMessage() {}

func (x *CloudSQLConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSQLConfig.ProtoReflect.Descriptor instead.
func (*CloudSQLConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{20}
}

func (x *CloudSQLConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CloudSQLConfig) GetUmbrellaNetwork() string {
	if x != nil {
		return x.UmbrellaNetwork
	}
	return ""
}

func (x *CloudSQLConfig) GetUmbrellaProject() int64 {
	if x != nil {
		return x.UmbrellaProject
	}
	return 0
}

type CommonLanguageSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destinations     []string `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	ReferenceDocsUri string   `protobuf:"bytes,2,opt,name=reference_docs_uri,json=referenceDocsUri,proto3" json:"reference_docs_uri,omitempty"`
}

func (x *CommonLanguageSettings) Reset() {
	*x = CommonLanguageSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonLanguageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonLanguageSettings) ProtoMessage() {}

func (x *CommonLanguageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonLanguageSettings.ProtoReflect.Descriptor instead.
func (*CommonLanguageSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{21}
}

func (x *CommonLanguageSettings) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *CommonLanguageSettings) GetReferenceDocsUri() string {
	if x != nil {
		return x.ReferenceDocsUri
	}
	return ""
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network               string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Peering               string   `protobuf:"bytes,2,opt,name=peering,proto3" json:"peering,omitempty"`
	ReservedPeeringRanges []string `protobuf:"bytes,3,rep,name=reserved_peering_ranges,json=reservedPeeringRanges,proto3" json:"reserved_peering_ranges,omitempty"`
	Service               string   `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{22}
}

func (x *Connection) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Connection) GetPeering() string {
	if x != nil {
		return x.Peering
	}
	return ""
}

func (x *Connection) GetReservedPeeringRanges() []string {
	if x != nil {
		return x.ReservedPeeringRanges
	}
	return nil
}

func (x *Connection) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ConsumerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudsqlConfigs                        []*CloudSQLConfig                                            `protobuf:"bytes,1,rep,name=cloudsql_configs,json=cloudsqlConfigs,proto3" json:"cloudsql_configs,omitempty"`
	ConsumerExportCustomRoutes             bool                                                         `protobuf:"varint,2,opt,name=consumer_export_custom_routes,json=consumerExportCustomRoutes,proto3" json:"consumer_export_custom_routes,omitempty"`
	ConsumerExportSubnetRoutesWithPublicIp bool                                                         `protobuf:"varint,3,opt,name=consumer_export_subnet_routes_with_public_ip,json=consumerExportSubnetRoutesWithPublicIp,proto3" json:"consumer_export_subnet_routes_with_public_ip,omitempty"`
	ConsumerImportCustomRoutes             bool                                                         `protobuf:"varint,4,opt,name=consumer_import_custom_routes,json=consumerImportCustomRoutes,proto3" json:"consumer_import_custom_routes,omitempty"`
	ConsumerImportSubnetRoutesWithPublicIp bool                                                         `protobuf:"varint,5,opt,name=consumer_import_subnet_routes_with_public_ip,json=consumerImportSubnetRoutesWithPublicIp,proto3" json:"consumer_import_subnet_routes_with_public_ip,omitempty"`
	ProducerExportCustomRoutes             bool                                                         `protobuf:"varint,6,opt,name=producer_export_custom_routes,json=producerExportCustomRoutes,proto3" json:"producer_export_custom_routes,omitempty"`
	ProducerExportSubnetRoutesWithPublicIp bool                                                         `protobuf:"varint,7,opt,name=producer_export_subnet_routes_with_public_ip,json=producerExportSubnetRoutesWithPublicIp,proto3" json:"producer_export_subnet_routes_with_public_ip,omitempty"`
	ProducerImportCustomRoutes             bool                                                         `protobuf:"varint,8,opt,name=producer_import_custom_routes,json=producerImportCustomRoutes,proto3" json:"producer_import_custom_routes,omitempty"`
	ProducerImportSubnetRoutesWithPublicIp bool                                                         `protobuf:"varint,9,opt,name=producer_import_subnet_routes_with_public_ip,json=producerImportSubnetRoutesWithPublicIp,proto3" json:"producer_import_subnet_routes_with_public_ip,omitempty"`
	ProducerNetwork                        string                                                       `protobuf:"bytes,10,opt,name=producer_network,json=producerNetwork,proto3" json:"producer_network,omitempty"`
	ReservedRanges                         []*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange `protobuf:"bytes,11,rep,name=reserved_ranges,json=reservedRanges,proto3" json:"reserved_ranges,omitempty"`
	UsedIpRanges                           []string                                                     `protobuf:"bytes,12,rep,name=used_ip_ranges,json=usedIpRanges,proto3" json:"used_ip_ranges,omitempty"`
	VpcScReferenceArchitectureEnabled      bool                                                         `protobuf:"varint,13,opt,name=vpc_sc_reference_architecture_enabled,json=vpcScReferenceArchitectureEnabled,proto3" json:"vpc_sc_reference_architecture_enabled,omitempty"`
}

func (x *ConsumerConfig) Reset() {
	*x = ConsumerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerConfig) ProtoMessage() {}

func (x *ConsumerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerConfig.ProtoReflect.Descriptor instead.
func (*ConsumerConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{23}
}

func (x *ConsumerConfig) GetCloudsqlConfigs() []*CloudSQLConfig {
	if x != nil {
		return x.CloudsqlConfigs
	}
	return nil
}

func (x *ConsumerConfig) GetConsumerExportCustomRoutes() bool {
	if x != nil {
		return x.ConsumerExportCustomRoutes
	}
	return false
}

func (x *ConsumerConfig) GetConsumerExportSubnetRoutesWithPublicIp() bool {
	if x != nil {
		return x.ConsumerExportSubnetRoutesWithPublicIp
	}
	return false
}

func (x *ConsumerConfig) GetConsumerImportCustomRoutes() bool {
	if x != nil {
		return x.ConsumerImportCustomRoutes
	}
	return false
}

func (x *ConsumerConfig) GetConsumerImportSubnetRoutesWithPublicIp() bool {
	if x != nil {
		return x.ConsumerImportSubnetRoutesWithPublicIp
	}
	return false
}

func (x *ConsumerConfig) GetProducerExportCustomRoutes() bool {
	if x != nil {
		return x.ProducerExportCustomRoutes
	}
	return false
}

func (x *ConsumerConfig) GetProducerExportSubnetRoutesWithPublicIp() bool {
	if x != nil {
		return x.ProducerExportSubnetRoutesWithPublicIp
	}
	return false
}

func (x *ConsumerConfig) GetProducerImportCustomRoutes() bool {
	if x != nil {
		return x.ProducerImportCustomRoutes
	}
	return false
}

func (x *ConsumerConfig) GetProducerImportSubnetRoutesWithPublicIp() bool {
	if x != nil {
		return x.ProducerImportSubnetRoutesWithPublicIp
	}
	return false
}

func (x *ConsumerConfig) GetProducerNetwork() string {
	if x != nil {
		return x.ProducerNetwork
	}
	return ""
}

func (x *ConsumerConfig) GetReservedRanges() []*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange {
	if x != nil {
		return x.ReservedRanges
	}
	return nil
}

func (x *ConsumerConfig) GetUsedIpRanges() []string {
	if x != nil {
		return x.UsedIpRanges
	}
	return nil
}

func (x *ConsumerConfig) GetVpcScReferenceArchitectureEnabled() bool {
	if x != nil {
		return x.VpcScReferenceArchitectureEnabled
	}
	return false
}

type ConsumerConfigMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsumerConfigMetadata) Reset() {
	*x = ConsumerConfigMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerConfigMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerConfigMetadata) ProtoMessage() {}

func (x *ConsumerConfigMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerConfigMetadata.ProtoReflect.Descriptor instead.
func (*ConsumerConfigMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{24}
}

type ConsumerProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectNum int64 `protobuf:"varint,1,opt,name=project_num,json=projectNum,proto3" json:"project_num,omitempty"`
}

func (x *ConsumerProject) Reset() {
	*x = ConsumerProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerProject) ProtoMessage() {}

func (x *ConsumerProject) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerProject.ProtoReflect.Descriptor instead.
func (*ConsumerProject) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{25}
}

func (x *ConsumerProject) GetProjectNum() int64 {
	if x != nil {
		return x.ProjectNum
	}
	return 0
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*ContextRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{26}
}

func (x *Context) GetRules() []*ContextRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ContextRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedRequestExtensions  []string `protobuf:"bytes,1,rep,name=allowed_request_extensions,json=allowedRequestExtensions,proto3" json:"allowed_request_extensions,omitempty"`
	AllowedResponseExtensions []string `protobuf:"bytes,2,rep,name=allowed_response_extensions,json=allowedResponseExtensions,proto3" json:"allowed_response_extensions,omitempty"`
	Provided                  []string `protobuf:"bytes,3,rep,name=provided,proto3" json:"provided,omitempty"`
	Requested                 []string `protobuf:"bytes,4,rep,name=requested,proto3" json:"requested,omitempty"`
	Selector                  string   `protobuf:"bytes,5,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ContextRule) Reset() {
	*x = ContextRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextRule) ProtoMessage() {}

func (x *ContextRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextRule.ProtoReflect.Descriptor instead.
func (*ContextRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{27}
}

func (x *ContextRule) GetAllowedRequestExtensions() []string {
	if x != nil {
		return x.AllowedRequestExtensions
	}
	return nil
}

func (x *ContextRule) GetAllowedResponseExtensions() []string {
	if x != nil {
		return x.AllowedResponseExtensions
	}
	return nil
}

func (x *ContextRule) GetProvided() []string {
	if x != nil {
		return x.Provided
	}
	return nil
}

func (x *ContextRule) GetRequested() []string {
	if x != nil {
		return x.Requested
	}
	return nil
}

func (x *ContextRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Environment    string          `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	MethodPolicies []*MethodPolicy `protobuf:"bytes,2,rep,name=method_policies,json=methodPolicies,proto3" json:"method_policies,omitempty"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{28}
}

func (x *Control) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Control) GetMethodPolicies() []*MethodPolicy {
	if x != nil {
		return x.MethodPolicies
	}
	return nil
}

type CppSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *CppSettings) Reset() {
	*x = CppSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppSettings) ProtoMessage() {}

func (x *CppSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppSettings.ProtoReflect.Descriptor instead.
func (*CppSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{29}
}

func (x *CppSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type CustomError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*CustomErrorRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Types []string           `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *CustomError) Reset() {
	*x = CustomError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomError) ProtoMessage() {}

func (x *CustomError) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomError.ProtoReflect.Descriptor instead.
func (*CustomError) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{30}
}

func (x *CustomError) GetRules() []*CustomErrorRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *CustomError) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type CustomErrorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsErrorType bool   `protobuf:"varint,1,opt,name=is_error_type,json=isErrorType,proto3" json:"is_error_type,omitempty"`
	Selector    string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *CustomErrorRule) Reset() {
	*x = CustomErrorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomErrorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomErrorRule) ProtoMessage() {}

func (x *CustomErrorRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomErrorRule.ProtoReflect.Descriptor instead.
func (*CustomErrorRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{31}
}

func (x *CustomErrorRule) GetIsErrorType() bool {
	if x != nil {
		return x.IsErrorType
	}
	return false
}

func (x *CustomErrorRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type CustomHttpPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *CustomHttpPattern) Reset() {
	*x = CustomHttpPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomHttpPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomHttpPattern) ProtoMessage() {}

func (x *CustomHttpPattern) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomHttpPattern.ProtoReflect.Descriptor instead.
func (*CustomHttpPattern) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{32}
}

func (x *CustomHttpPattern) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CustomHttpPattern) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DeleteConnectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConnectionMetadata) Reset() {
	*x = DeleteConnectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionMetadata) ProtoMessage() {}

func (x *DeleteConnectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionMetadata.ProtoReflect.Descriptor instead.
func (*DeleteConnectionMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{33}
}

type DeleteConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
}

func (x *DeleteConnectionRequest) Reset() {
	*x = DeleteConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteConnectionRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

type DeletePeeredDnsDomainMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePeeredDnsDomainMetadata) Reset() {
	*x = DeletePeeredDnsDomainMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePeeredDnsDomainMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePeeredDnsDomainMetadata) ProtoMessage() {}

func (x *DeletePeeredDnsDomainMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePeeredDnsDomainMetadata.ProtoReflect.Descriptor instead.
func (*DeletePeeredDnsDomainMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{35}
}

type DisableVpcServiceControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
}

func (x *DisableVpcServiceControlsRequest) Reset() {
	*x = DisableVpcServiceControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableVpcServiceControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableVpcServiceControlsRequest) ProtoMessage() {}

func (x *DisableVpcServiceControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableVpcServiceControlsRequest.ProtoReflect.Descriptor instead.
func (*DisableVpcServiceControlsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{36}
}

func (x *DisableVpcServiceControlsRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

type DnsRecordSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []string           `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Domain string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Ttl    *duration.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Type   string             `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DnsRecordSet) Reset() {
	*x = DnsRecordSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsRecordSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsRecordSet) ProtoMessage() {}

func (x *DnsRecordSet) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsRecordSet.ProtoReflect.Descriptor instead.
func (*DnsRecordSet) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{37}
}

func (x *DnsRecordSet) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DnsRecordSet) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DnsRecordSet) GetTtl() *duration.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *DnsRecordSet) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type DnsZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsSuffix string `protobuf:"bytes,1,opt,name=dns_suffix,json=dnsSuffix,proto3" json:"dns_suffix,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DnsZone) Reset() {
	*x = DnsZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsZone) ProtoMessage() {}

func (x *DnsZone) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsZone.ProtoReflect.Descriptor instead.
func (*DnsZone) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{38}
}

func (x *DnsZone) GetDnsSuffix() string {
	if x != nil {
		return x.DnsSuffix
	}
	return ""
}

func (x *DnsZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DnsZonePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerPeeringZone *DnsZone `protobuf:"bytes,1,opt,name=consumer_peering_zone,json=consumerPeeringZone,proto3" json:"consumer_peering_zone,omitempty"`
	ProducerPrivateZone *DnsZone `protobuf:"bytes,2,opt,name=producer_private_zone,json=producerPrivateZone,proto3" json:"producer_private_zone,omitempty"`
}

func (x *DnsZonePair) Reset() {
	*x = DnsZonePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsZonePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsZonePair) ProtoMessage() {}

func (x *DnsZonePair) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsZonePair.ProtoReflect.Descriptor instead.
func (*DnsZonePair) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{39}
}

func (x *DnsZonePair) GetConsumerPeeringZone() *DnsZone {
	if x != nil {
		return x.ConsumerPeeringZone
	}
	return nil
}

func (x *DnsZonePair) GetProducerPrivateZone() *DnsZone {
	if x != nil {
		return x.ProducerPrivateZone
	}
	return nil
}

type Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentationRootUrl string               `protobuf:"bytes,1,opt,name=documentation_root_url,json=documentationRootUrl,proto3" json:"documentation_root_url,omitempty"`
	Overview             string               `protobuf:"bytes,2,opt,name=overview,proto3" json:"overview,omitempty"`
	Pages                []*Page              `protobuf:"bytes,3,rep,name=pages,proto3" json:"pages,omitempty"`
	Rules                []*DocumentationRule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
	SectionOverrides     []*Page              `protobuf:"bytes,5,rep,name=section_overrides,json=sectionOverrides,proto3" json:"section_overrides,omitempty"`
	ServiceRootUrl       string               `protobuf:"bytes,6,opt,name=service_root_url,json=serviceRootUrl,proto3" json:"service_root_url,omitempty"`
	Summary              string               `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *Documentation) Reset() {
	*x = Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation) ProtoMessage() {}

func (x *Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation.ProtoReflect.Descriptor instead.
func (*Documentation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{40}
}

func (x *Documentation) GetDocumentationRootUrl() string {
	if x != nil {
		return x.DocumentationRootUrl
	}
	return ""
}

func (x *Documentation) GetOverview() string {
	if x != nil {
		return x.Overview
	}
	return ""
}

func (x *Documentation) GetPages() []*Page {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *Documentation) GetRules() []*DocumentationRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Documentation) GetSectionOverrides() []*Page {
	if x != nil {
		return x.SectionOverrides
	}
	return nil
}

func (x *Documentation) GetServiceRootUrl() string {
	if x != nil {
		return x.ServiceRootUrl
	}
	return ""
}

func (x *Documentation) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type DocumentationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeprecationDescription  string `protobuf:"bytes,1,opt,name=deprecation_description,json=deprecationDescription,proto3" json:"deprecation_description,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DisableReplacementWords string `protobuf:"bytes,3,opt,name=disable_replacement_words,json=disableReplacementWords,proto3" json:"disable_replacement_words,omitempty"`
	Selector                string `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *DocumentationRule) Reset() {
	*x = DocumentationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationRule) ProtoMessage() {}

func (x *DocumentationRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationRule.ProtoReflect.Descriptor instead.
func (*DocumentationRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{41}
}

func (x *DocumentationRule) GetDeprecationDescription() string {
	if x != nil {
		return x.DeprecationDescription
	}
	return ""
}

func (x *DocumentationRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DocumentationRule) GetDisableReplacementWords() string {
	if x != nil {
		return x.DisableReplacementWords
	}
	return ""
}

func (x *DocumentationRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type DotnetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common                 *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	ForcedNamespaceAliases []string                `protobuf:"bytes,2,rep,name=forced_namespace_aliases,json=forcedNamespaceAliases,proto3" json:"forced_namespace_aliases,omitempty"`
	HandwrittenSignatures  []string                `protobuf:"bytes,3,rep,name=handwritten_signatures,json=handwrittenSignatures,proto3" json:"handwritten_signatures,omitempty"`
	IgnoredResources       []string                `protobuf:"bytes,4,rep,name=ignored_resources,json=ignoredResources,proto3" json:"ignored_resources,omitempty"`
	RenamedResources       map[string]string       `protobuf:"bytes,5,rep,name=renamed_resources,json=renamedResources,proto3" json:"renamed_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RenamedServices        map[string]string       `protobuf:"bytes,6,rep,name=renamed_services,json=renamedServices,proto3" json:"renamed_services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DotnetSettings) Reset() {
	*x = DotnetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DotnetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DotnetSettings) ProtoMessage() {}

func (x *DotnetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DotnetSettings.ProtoReflect.Descriptor instead.
func (*DotnetSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{42}
}

func (x *DotnetSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *DotnetSettings) GetForcedNamespaceAliases() []string {
	if x != nil {
		return x.ForcedNamespaceAliases
	}
	return nil
}

func (x *DotnetSettings) GetHandwrittenSignatures() []string {
	if x != nil {
		return x.HandwrittenSignatures
	}
	return nil
}

func (x *DotnetSettings) GetIgnoredResources() []string {
	if x != nil {
		return x.IgnoredResources
	}
	return nil
}

func (x *DotnetSettings) GetRenamedResources() map[string]string {
	if x != nil {
		return x.RenamedResources
	}
	return nil
}

func (x *DotnetSettings) GetRenamedServices() map[string]string {
	if x != nil {
		return x.RenamedServices
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{43}
}

type EnableVpcServiceControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
}

func (x *EnableVpcServiceControlsRequest) Reset() {
	*x = EnableVpcServiceControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableVpcServiceControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVpcServiceControlsRequest) ProtoMessage() {}

func (x *EnableVpcServiceControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVpcServiceControlsRequest.ProtoReflect.Descriptor instead.
func (*EnableVpcServiceControlsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{44}
}

func (x *EnableVpcServiceControlsRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aliases   []string `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
	AllowCors bool     `protobuf:"varint,2,opt,name=allow_cors,json=allowCors,proto3" json:"allow_cors,omitempty"`
	Name      string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Target    string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{45}
}

func (x *Endpoint) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Endpoint) GetAllowCors() bool {
	if x != nil {
		return x.AllowCors
	}
	return false
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edition       string         `protobuf:"bytes,1,opt,name=edition,proto3" json:"edition,omitempty"`
	Enumvalue     []*EnumValue   `protobuf:"bytes,2,rep,name=enumvalue,proto3" json:"enumvalue,omitempty"`
	Name          string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Options       []*Option      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	SourceContext *SourceContext `protobuf:"bytes,5,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
	Syntax        string         `protobuf:"bytes,6,opt,name=syntax,proto3" json:"syntax,omitempty"`
}

func (x *Enum) Reset() {
	*x = Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{46}
}

func (x *Enum) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Enum) GetEnumvalue() []*EnumValue {
	if x != nil {
		return x.Enumvalue
	}
	return nil
}

func (x *Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Enum) GetSourceContext() *SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

func (x *Enum) GetSyntax() string {
	if x != nil {
		return x.Syntax
	}
	return ""
}

type EnumValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Number  int32     `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Options []*Option `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *EnumValue) Reset() {
	*x = EnumValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValue) ProtoMessage() {}

func (x *EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValue.ProtoReflect.Descriptor instead.
func (*EnumValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{47}
}

func (x *EnumValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumValue) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *EnumValue) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cardinality  string    `protobuf:"bytes,1,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	DefaultValue string    `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	JsonName     string    `protobuf:"bytes,3,opt,name=json_name,json=jsonName,proto3" json:"json_name,omitempty"`
	Kind         string    `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	Name         string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Number       int32     `protobuf:"varint,6,opt,name=number,proto3" json:"number,omitempty"`
	OneofIndex   int32     `protobuf:"varint,7,opt,name=oneof_index,json=oneofIndex,proto3" json:"oneof_index,omitempty"`
	Options      []*Option `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Packed       bool      `protobuf:"varint,9,opt,name=packed,proto3" json:"packed,omitempty"`
	TypeUrl      string    `protobuf:"bytes,10,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{48}
}

func (x *Field) GetCardinality() string {
	if x != nil {
		return x.Cardinality
	}
	return ""
}

func (x *Field) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *Field) GetJsonName() string {
	if x != nil {
		return x.JsonName
	}
	return ""
}

func (x *Field) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Field) GetOneofIndex() int32 {
	if x != nil {
		return x.OneofIndex
	}
	return 0
}

func (x *Field) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Field) GetPacked() bool {
	if x != nil {
		return x.Packed
	}
	return false
}

func (x *Field) GetTypeUrl() string {
	if x != nil {
		return x.TypeUrl
	}
	return ""
}

type FieldPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourcePermission string `protobuf:"bytes,1,opt,name=resource_permission,json=resourcePermission,proto3" json:"resource_permission,omitempty"`
	ResourceType       string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	Selector           string `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *FieldPolicy) Reset() {
	*x = FieldPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPolicy) ProtoMessage() {}

func (x *FieldPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPolicy.ProtoReflect.Descriptor instead.
func (*FieldPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{49}
}

func (x *FieldPolicy) GetResourcePermission() string {
	if x != nil {
		return x.ResourcePermission
	}
	return ""
}

func (x *FieldPolicy) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *FieldPolicy) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type GetDnsZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerPeeringZone *DnsZone `protobuf:"bytes,1,opt,name=consumer_peering_zone,json=consumerPeeringZone,proto3" json:"consumer_peering_zone,omitempty"`
	ProducerPrivateZone *DnsZone `protobuf:"bytes,2,opt,name=producer_private_zone,json=producerPrivateZone,proto3" json:"producer_private_zone,omitempty"`
}

func (x *GetDnsZoneResponse) Reset() {
	*x = GetDnsZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsZoneResponse) ProtoMessage() {}

func (x *GetDnsZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsZoneResponse.ProtoReflect.Descriptor instead.
func (*GetDnsZoneResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{50}
}

func (x *GetDnsZoneResponse) GetConsumerPeeringZone() *DnsZone {
	if x != nil {
		return x.ConsumerPeeringZone
	}
	return nil
}

func (x *GetDnsZoneResponse) GetProducerPrivateZone() *DnsZone {
	if x != nil {
		return x.ProducerPrivateZone
	}
	return nil
}

type GoSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *GoSettings) Reset() {
	*x = GoSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoSettings) ProtoMessage() {}

func (x *GoSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoSettings.ProtoReflect.Descriptor instead.
func (*GoSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{51}
}

func (x *GoSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type GoogleCloudServicenetworkingV1ConsumerConfigReservedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IpPrefixLength int32  `protobuf:"varint,2,opt,name=ip_prefix_length,json=ipPrefixLength,proto3" json:"ip_prefix_length,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) Reset() {
	*x = GoogleCloudServicenetworkingV1ConsumerConfigReservedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) ProtoMessage() {}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudServicenetworkingV1ConsumerConfigReservedRange.ProtoReflect.Descriptor instead.
func (*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{52}
}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) GetIpPrefixLength() int32 {
	if x != nil {
		return x.IpPrefixLength
	}
	return 0
}

func (x *GoogleCloudServicenetworkingV1ConsumerConfigReservedRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GoogleCloudServicenetworkingV1BetaConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network               string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Peering               string   `protobuf:"bytes,2,opt,name=peering,proto3" json:"peering,omitempty"`
	ReservedPeeringRanges []string `protobuf:"bytes,3,rep,name=reserved_peering_ranges,json=reservedPeeringRanges,proto3" json:"reserved_peering_ranges,omitempty"`
	Service               string   `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) Reset() {
	*x = GoogleCloudServicenetworkingV1BetaConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudServicenetworkingV1BetaConnection) ProtoMessage() {}

func (x *GoogleCloudServicenetworkingV1BetaConnection) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudServicenetworkingV1BetaConnection.ProtoReflect.Descriptor instead.
func (*GoogleCloudServicenetworkingV1BetaConnection) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{53}
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) GetPeering() string {
	if x != nil {
		return x.Peering
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) GetReservedPeeringRanges() []string {
	if x != nil {
		return x.ReservedPeeringRanges
	}
	return nil
}

func (x *GoogleCloudServicenetworkingV1BetaConnection) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GoogleCloudServicenetworkingV1BetaSubnetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpCidrRange       string `protobuf:"bytes,1,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Network           string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	OutsideAllocation bool   `protobuf:"varint,4,opt,name=outside_allocation,json=outsideAllocation,proto3" json:"outside_allocation,omitempty"`
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) Reset() {
	*x = GoogleCloudServicenetworkingV1BetaSubnetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudServicenetworkingV1BetaSubnetwork) ProtoMessage() {}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudServicenetworkingV1BetaSubnetwork.ProtoReflect.Descriptor instead.
func (*GoogleCloudServicenetworkingV1BetaSubnetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{54}
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GoogleCloudServicenetworkingV1BetaSubnetwork) GetOutsideAllocation() bool {
	if x != nil {
		return x.OutsideAllocation
	}
	return false
}

type Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullyDecodeReservedExpansion bool        `protobuf:"varint,1,opt,name=fully_decode_reserved_expansion,json=fullyDecodeReservedExpansion,proto3" json:"fully_decode_reserved_expansion,omitempty"`
	Rules                        []*HttpRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Http) Reset() {
	*x = Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http.ProtoReflect.Descriptor instead.
func (*Http) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{55}
}

func (x *Http) GetFullyDecodeReservedExpansion() bool {
	if x != nil {
		return x.FullyDecodeReservedExpansion
	}
	return false
}

func (x *Http) GetRules() []*HttpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type HttpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdditionalBindings []*HttpRule        `protobuf:"bytes,1,rep,name=additional_bindings,json=additionalBindings,proto3" json:"additional_bindings,omitempty"`
	Body               string             `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Custom             *CustomHttpPattern `protobuf:"bytes,3,opt,name=custom,proto3" json:"custom,omitempty"`
	Delete             string             `protobuf:"bytes,4,opt,name=delete,proto3" json:"delete,omitempty"`
	Get                string             `protobuf:"bytes,5,opt,name=get,proto3" json:"get,omitempty"`
	Patch              string             `protobuf:"bytes,6,opt,name=patch,proto3" json:"patch,omitempty"`
	Post               string             `protobuf:"bytes,7,opt,name=post,proto3" json:"post,omitempty"`
	Put                string             `protobuf:"bytes,8,opt,name=put,proto3" json:"put,omitempty"`
	ResponseBody       string             `protobuf:"bytes,9,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Selector           string             `protobuf:"bytes,10,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *HttpRule) Reset() {
	*x = HttpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRule) ProtoMessage() {}

func (x *HttpRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRule.ProtoReflect.Descriptor instead.
func (*HttpRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{56}
}

func (x *HttpRule) GetAdditionalBindings() []*HttpRule {
	if x != nil {
		return x.AdditionalBindings
	}
	return nil
}

func (x *HttpRule) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *HttpRule) GetCustom() *CustomHttpPattern {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *HttpRule) GetDelete() string {
	if x != nil {
		return x.Delete
	}
	return ""
}

func (x *HttpRule) GetGet() string {
	if x != nil {
		return x.Get
	}
	return ""
}

func (x *HttpRule) GetPatch() string {
	if x != nil {
		return x.Patch
	}
	return ""
}

func (x *HttpRule) GetPost() string {
	if x != nil {
		return x.Post
	}
	return ""
}

func (x *HttpRule) GetPut() string {
	if x != nil {
		return x.Put
	}
	return ""
}

func (x *HttpRule) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *HttpRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type JavaSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common            *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	LibraryPackage    string                  `protobuf:"bytes,2,opt,name=library_package,json=libraryPackage,proto3" json:"library_package,omitempty"`
	ServiceClassNames map[string]string       `protobuf:"bytes,3,rep,name=service_class_names,json=serviceClassNames,proto3" json:"service_class_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JavaSettings) Reset() {
	*x = JavaSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaSettings) ProtoMessage() {}

func (x *JavaSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaSettings.ProtoReflect.Descriptor instead.
func (*JavaSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{57}
}

func (x *JavaSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *JavaSettings) GetLibraryPackage() string {
	if x != nil {
		return x.LibraryPackage
	}
	return ""
}

func (x *JavaSettings) GetServiceClassNames() map[string]string {
	if x != nil {
		return x.ServiceClassNames
	}
	return nil
}

type JwtLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie      string `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Header      string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Query       string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	ValuePrefix string `protobuf:"bytes,4,opt,name=value_prefix,json=valuePrefix,proto3" json:"value_prefix,omitempty"`
}

func (x *JwtLocation) Reset() {
	*x = JwtLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtLocation) ProtoMessage() {}

func (x *JwtLocation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtLocation.ProtoReflect.Descriptor instead.
func (*JwtLocation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{58}
}

func (x *JwtLocation) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *JwtLocation) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *JwtLocation) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *JwtLocation) GetValuePrefix() string {
	if x != nil {
		return x.ValuePrefix
	}
	return ""
}

type LabelDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ValueType   string `protobuf:"bytes,3,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (x *LabelDescriptor) Reset() {
	*x = LabelDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelDescriptor) ProtoMessage() {}

func (x *LabelDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelDescriptor.ProtoReflect.Descriptor instead.
func (*LabelDescriptor) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{59}
}

func (x *LabelDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LabelDescriptor) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelDescriptor) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

type ListConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{60}
}

func (x *ListConnectionsResponse) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type ListDnsRecordSetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsRecordSets []*DnsRecordSet `protobuf:"bytes,1,rep,name=dns_record_sets,json=dnsRecordSets,proto3" json:"dns_record_sets,omitempty"`
}

func (x *ListDnsRecordSetsResponse) Reset() {
	*x = ListDnsRecordSetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDnsRecordSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsRecordSetsResponse) ProtoMessage() {}

func (x *ListDnsRecordSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsRecordSetsResponse.ProtoReflect.Descriptor instead.
func (*ListDnsRecordSetsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{61}
}

func (x *ListDnsRecordSetsResponse) GetDnsRecordSets() []*DnsRecordSet {
	if x != nil {
		return x.DnsRecordSets
	}
	return nil
}

type ListDnsZonesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsZonePairs []*DnsZonePair `protobuf:"bytes,1,rep,name=dns_zone_pairs,json=dnsZonePairs,proto3" json:"dns_zone_pairs,omitempty"`
}

func (x *ListDnsZonesResponse) Reset() {
	*x = ListDnsZonesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDnsZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZonesResponse) ProtoMessage() {}

func (x *ListDnsZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZonesResponse.ProtoReflect.Descriptor instead.
func (*ListDnsZonesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{62}
}

func (x *ListDnsZonesResponse) GetDnsZonePairs() []*DnsZonePair {
	if x != nil {
		return x.DnsZonePairs
	}
	return nil
}

type ListOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string                     `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Operations    []*longrunningpb.Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ListOperationsResponse) Reset() {
	*x = ListOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOperationsResponse) ProtoMessage() {}

func (x *ListOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListOperationsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{63}
}

func (x *ListOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOperationsResponse) GetOperations() []*longrunningpb.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ListPeeredDnsDomainsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeeredDnsDomains []*PeeredDnsDomain `protobuf:"bytes,1,rep,name=peered_dns_domains,json=peeredDnsDomains,proto3" json:"peered_dns_domains,omitempty"`
}

func (x *ListPeeredDnsDomainsResponse) Reset() {
	*x = ListPeeredDnsDomainsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPeeredDnsDomainsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeeredDnsDomainsResponse) ProtoMessage() {}

func (x *ListPeeredDnsDomainsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeeredDnsDomainsResponse.ProtoReflect.Descriptor instead.
func (*ListPeeredDnsDomainsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{64}
}

func (x *ListPeeredDnsDomainsResponse) GetPeeredDnsDomains() []*PeeredDnsDomain {
	if x != nil {
		return x.PeeredDnsDomains
	}
	return nil
}

type LogDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string             `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DisplayName string             `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Labels      []*LabelDescriptor `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Name        string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LogDescriptor) Reset() {
	*x = LogDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogDescriptor) ProtoMessage() {}

func (x *LogDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogDescriptor.ProtoReflect.Descriptor instead.
func (*LogDescriptor) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{65}
}

func (x *LogDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LogDescriptor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *LogDescriptor) GetLabels() []*LabelDescriptor {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LogDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Logging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerDestinations []*LoggingDestination `protobuf:"bytes,1,rep,name=consumer_destinations,json=consumerDestinations,proto3" json:"consumer_destinations,omitempty"`
	ProducerDestinations []*LoggingDestination `protobuf:"bytes,2,rep,name=producer_destinations,json=producerDestinations,proto3" json:"producer_destinations,omitempty"`
}

func (x *Logging) Reset() {
	*x = Logging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging) ProtoMessage() {}

func (x *Logging) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging.ProtoReflect.Descriptor instead.
func (*Logging) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{66}
}

func (x *Logging) GetConsumerDestinations() []*LoggingDestination {
	if x != nil {
		return x.ConsumerDestinations
	}
	return nil
}

func (x *Logging) GetProducerDestinations() []*LoggingDestination {
	if x != nil {
		return x.ProducerDestinations
	}
	return nil
}

type LoggingDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs              []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	MonitoredResource string   `protobuf:"bytes,2,opt,name=monitored_resource,json=monitoredResource,proto3" json:"monitored_resource,omitempty"`
}

func (x *LoggingDestination) Reset() {
	*x = LoggingDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingDestination) ProtoMessage() {}

func (x *LoggingDestination) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingDestination.ProtoReflect.Descriptor instead.
func (*LoggingDestination) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{67}
}

func (x *LoggingDestination) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *LoggingDestination) GetMonitoredResource() string {
	if x != nil {
		return x.MonitoredResource
	}
	return ""
}

type LongRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialPollDelay    *duration.Duration `protobuf:"bytes,1,opt,name=initial_poll_delay,json=initialPollDelay,proto3" json:"initial_poll_delay,omitempty"`
	MaxPollDelay        *duration.Duration `protobuf:"bytes,2,opt,name=max_poll_delay,json=maxPollDelay,proto3" json:"max_poll_delay,omitempty"`
	PollDelayMultiplier float32            `protobuf:"fixed32,3,opt,name=poll_delay_multiplier,json=pollDelayMultiplier,proto3" json:"poll_delay_multiplier,omitempty"`
	TotalPollTimeout    *duration.Duration `protobuf:"bytes,4,opt,name=total_poll_timeout,json=totalPollTimeout,proto3" json:"total_poll_timeout,omitempty"`
}

func (x *LongRunning) Reset() {
	*x = LongRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LongRunning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LongRunning) ProtoMessage() {}

func (x *LongRunning) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LongRunning.ProtoReflect.Descriptor instead.
func (*LongRunning) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{68}
}

func (x *LongRunning) GetInitialPollDelay() *duration.Duration {
	if x != nil {
		return x.InitialPollDelay
	}
	return nil
}

func (x *LongRunning) GetMaxPollDelay() *duration.Duration {
	if x != nil {
		return x.MaxPollDelay
	}
	return nil
}

func (x *LongRunning) GetPollDelayMultiplier() float32 {
	if x != nil {
		return x.PollDelayMultiplier
	}
	return 0
}

func (x *LongRunning) GetTotalPollTimeout() *duration.Duration {
	if x != nil {
		return x.TotalPollTimeout
	}
	return nil
}

type Method struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options           []*Option `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	RequestStreaming  bool      `protobuf:"varint,3,opt,name=request_streaming,json=requestStreaming,proto3" json:"request_streaming,omitempty"`
	RequestTypeUrl    string    `protobuf:"bytes,4,opt,name=request_type_url,json=requestTypeUrl,proto3" json:"request_type_url,omitempty"`
	ResponseStreaming bool      `protobuf:"varint,5,opt,name=response_streaming,json=responseStreaming,proto3" json:"response_streaming,omitempty"`
	ResponseTypeUrl   string    `protobuf:"bytes,6,opt,name=response_type_url,json=responseTypeUrl,proto3" json:"response_type_url,omitempty"`
	Syntax            string    `protobuf:"bytes,7,opt,name=syntax,proto3" json:"syntax,omitempty"`
}

func (x *Method) Reset() {
	*x = Method{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Method) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Method) ProtoMessage() {}

func (x *Method) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Method.ProtoReflect.Descriptor instead.
func (*Method) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{69}
}

func (x *Method) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Method) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Method) GetRequestStreaming() bool {
	if x != nil {
		return x.RequestStreaming
	}
	return false
}

func (x *Method) GetRequestTypeUrl() string {
	if x != nil {
		return x.RequestTypeUrl
	}
	return ""
}

func (x *Method) GetResponseStreaming() bool {
	if x != nil {
		return x.ResponseStreaming
	}
	return false
}

func (x *Method) GetResponseTypeUrl() string {
	if x != nil {
		return x.ResponseTypeUrl
	}
	return ""
}

func (x *Method) GetSyntax() string {
	if x != nil {
		return x.Syntax
	}
	return ""
}

type MethodPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestPolicies []*FieldPolicy `protobuf:"bytes,1,rep,name=request_policies,json=requestPolicies,proto3" json:"request_policies,omitempty"`
	Selector        string         `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *MethodPolicy) Reset() {
	*x = MethodPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodPolicy) ProtoMessage() {}

func (x *MethodPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodPolicy.ProtoReflect.Descriptor instead.
func (*MethodPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{70}
}

func (x *MethodPolicy) GetRequestPolicies() []*FieldPolicy {
	if x != nil {
		return x.RequestPolicies
	}
	return nil
}

func (x *MethodPolicy) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type MethodSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoPopulatedFields []string     `protobuf:"bytes,1,rep,name=auto_populated_fields,json=autoPopulatedFields,proto3" json:"auto_populated_fields,omitempty"`
	LongRunning         *LongRunning `protobuf:"bytes,2,opt,name=long_running,json=longRunning,proto3" json:"long_running,omitempty"`
	Selector            string       `protobuf:"bytes,3,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *MethodSettings) Reset() {
	*x = MethodSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodSettings) ProtoMessage() {}

func (x *MethodSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodSettings.ProtoReflect.Descriptor instead.
func (*MethodSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{71}
}

func (x *MethodSettings) GetAutoPopulatedFields() []string {
	if x != nil {
		return x.AutoPopulatedFields
	}
	return nil
}

func (x *MethodSettings) GetLongRunning() *LongRunning {
	if x != nil {
		return x.LongRunning
	}
	return nil
}

func (x *MethodSettings) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type MetricDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description            string                    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DisplayName            string                    `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Labels                 []*LabelDescriptor        `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LaunchStage            string                    `protobuf:"bytes,4,opt,name=launch_stage,json=launchStage,proto3" json:"launch_stage,omitempty"`
	Metadata               *MetricDescriptorMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MetricKind             string                    `protobuf:"bytes,6,opt,name=metric_kind,json=metricKind,proto3" json:"metric_kind,omitempty"`
	MonitoredResourceTypes []string                  `protobuf:"bytes,7,rep,name=monitored_resource_types,json=monitoredResourceTypes,proto3" json:"monitored_resource_types,omitempty"`
	Name                   string                    `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Type                   string                    `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Unit                   string                    `protobuf:"bytes,10,opt,name=unit,proto3" json:"unit,omitempty"`
	ValueType              string                    `protobuf:"bytes,11,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
}

func (x *MetricDescriptor) Reset() {
	*x = MetricDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDescriptor) ProtoMessage() {}

func (x *MetricDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDescriptor.ProtoReflect.Descriptor instead.
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{72}
}

func (x *MetricDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetricDescriptor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MetricDescriptor) GetLabels() []*LabelDescriptor {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetricDescriptor) GetLaunchStage() string {
	if x != nil {
		return x.LaunchStage
	}
	return ""
}

func (x *MetricDescriptor) GetMetadata() *MetricDescriptorMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *MetricDescriptor) GetMetricKind() string {
	if x != nil {
		return x.MetricKind
	}
	return ""
}

func (x *MetricDescriptor) GetMonitoredResourceTypes() []string {
	if x != nil {
		return x.MonitoredResourceTypes
	}
	return nil
}

func (x *MetricDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetricDescriptor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetricDescriptor) GetValueType() string {
	if x != nil {
		return x.ValueType
	}
	return ""
}

type MetricDescriptorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestDelay  *duration.Duration `protobuf:"bytes,1,opt,name=ingest_delay,json=ingestDelay,proto3" json:"ingest_delay,omitempty"`
	LaunchStage  string             `protobuf:"bytes,2,opt,name=launch_stage,json=launchStage,proto3" json:"launch_stage,omitempty"`
	SamplePeriod *duration.Duration `protobuf:"bytes,3,opt,name=sample_period,json=samplePeriod,proto3" json:"sample_period,omitempty"`
}

func (x *MetricDescriptorMetadata) Reset() {
	*x = MetricDescriptorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricDescriptorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricDescriptorMetadata) ProtoMessage() {}

func (x *MetricDescriptorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricDescriptorMetadata.ProtoReflect.Descriptor instead.
func (*MetricDescriptorMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{73}
}

func (x *MetricDescriptorMetadata) GetIngestDelay() *duration.Duration {
	if x != nil {
		return x.IngestDelay
	}
	return nil
}

func (x *MetricDescriptorMetadata) GetLaunchStage() string {
	if x != nil {
		return x.LaunchStage
	}
	return ""
}

func (x *MetricDescriptorMetadata) GetSamplePeriod() *duration.Duration {
	if x != nil {
		return x.SamplePeriod
	}
	return nil
}

type MetricRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricCosts map[string]int64 `protobuf:"bytes,1,rep,name=metric_costs,json=metricCosts,proto3" json:"metric_costs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Selector    string           `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *MetricRule) Reset() {
	*x = MetricRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricRule) ProtoMessage() {}

func (x *MetricRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricRule.ProtoReflect.Descriptor instead.
func (*MetricRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{74}
}

func (x *MetricRule) GetMetricCosts() map[string]int64 {
	if x != nil {
		return x.MetricCosts
	}
	return nil
}

func (x *MetricRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type Mixin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Root string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *Mixin) Reset() {
	*x = Mixin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mixin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mixin) ProtoMessage() {}

func (x *Mixin) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mixin.ProtoReflect.Descriptor instead.
func (*Mixin) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{75}
}

func (x *Mixin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mixin) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type MonitoredResourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string             `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DisplayName string             `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Labels      []*LabelDescriptor `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	LaunchStage string             `protobuf:"bytes,4,opt,name=launch_stage,json=launchStage,proto3" json:"launch_stage,omitempty"`
	Name        string             `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type        string             `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *MonitoredResourceDescriptor) Reset() {
	*x = MonitoredResourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoredResourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoredResourceDescriptor) ProtoMessage() {}

func (x *MonitoredResourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoredResourceDescriptor.ProtoReflect.Descriptor instead.
func (*MonitoredResourceDescriptor) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{76}
}

func (x *MonitoredResourceDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetLabels() []*LabelDescriptor {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MonitoredResourceDescriptor) GetLaunchStage() string {
	if x != nil {
		return x.LaunchStage
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Monitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerDestinations []*MonitoringDestination `protobuf:"bytes,1,rep,name=consumer_destinations,json=consumerDestinations,proto3" json:"consumer_destinations,omitempty"`
	ProducerDestinations []*MonitoringDestination `protobuf:"bytes,2,rep,name=producer_destinations,json=producerDestinations,proto3" json:"producer_destinations,omitempty"`
}

func (x *Monitoring) Reset() {
	*x = Monitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monitoring) ProtoMessage() {}

func (x *Monitoring) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monitoring.ProtoReflect.Descriptor instead.
func (*Monitoring) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{77}
}

func (x *Monitoring) GetConsumerDestinations() []*MonitoringDestination {
	if x != nil {
		return x.ConsumerDestinations
	}
	return nil
}

func (x *Monitoring) GetProducerDestinations() []*MonitoringDestination {
	if x != nil {
		return x.ProducerDestinations
	}
	return nil
}

type MonitoringDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics           []string `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	MonitoredResource string   `protobuf:"bytes,2,opt,name=monitored_resource,json=monitoredResource,proto3" json:"monitored_resource,omitempty"`
}

func (x *MonitoringDestination) Reset() {
	*x = MonitoringDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringDestination) ProtoMessage() {}

func (x *MonitoringDestination) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringDestination.ProtoReflect.Descriptor instead.
func (*MonitoringDestination) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{78}
}

func (x *MonitoringDestination) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *MonitoringDestination) GetMonitoredResource() string {
	if x != nil {
		return x.MonitoredResource
	}
	return ""
}

type NodeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *NodeSettings) Reset() {
	*x = NodeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSettings) ProtoMessage() {}

func (x *NodeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSettings.ProtoReflect.Descriptor instead.
func (*NodeSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{79}
}

func (x *NodeSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type OAuthRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanonicalScopes string `protobuf:"bytes,1,opt,name=canonical_scopes,json=canonicalScopes,proto3" json:"canonical_scopes,omitempty"`
}

func (x *OAuthRequirements) Reset() {
	*x = OAuthRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthRequirements) ProtoMessage() {}

func (x *OAuthRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthRequirements.ProtoReflect.Descriptor instead.
func (*OAuthRequirements) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{80}
}

func (x *OAuthRequirements) GetCanonicalScopes() string {
	if x != nil {
		return x.CanonicalScopes
	}
	return ""
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done     bool                 `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Error    *Status              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Metadata map[string]*any1.Any `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name     string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Response map[string]*any1.Any `protobuf:"bytes,5,rep,name=response,proto3" json:"response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{81}
}

func (x *Operation) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *Operation) GetError() *Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Operation) GetMetadata() map[string]*any1.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Operation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Operation) GetResponse() map[string]*any1.Any {
	if x != nil {
		return x.Response
	}
	return nil
}

type Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value map[string]*any1.Any `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Option) Reset() {
	*x = Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Option) ProtoMessage() {}

func (x *Option) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Option.ProtoReflect.Descriptor instead.
func (*Option) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{82}
}

func (x *Option) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Option) GetValue() map[string]*any1.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content  string  `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Subpages []*Page `protobuf:"bytes,3,rep,name=subpages,proto3" json:"subpages,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{83}
}

func (x *Page) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Page) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Page) GetSubpages() []*Page {
	if x != nil {
		return x.Subpages
	}
	return nil
}

type PartialDeleteConnectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PartialDeleteConnectionMetadata) Reset() {
	*x = PartialDeleteConnectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialDeleteConnectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialDeleteConnectionMetadata) ProtoMessage() {}

func (x *PartialDeleteConnectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialDeleteConnectionMetadata.ProtoReflect.Descriptor instead.
func (*PartialDeleteConnectionMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{84}
}

type PeeredDnsDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsSuffix string `protobuf:"bytes,1,opt,name=dns_suffix,json=dnsSuffix,proto3" json:"dns_suffix,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PeeredDnsDomain) Reset() {
	*x = PeeredDnsDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeredDnsDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeredDnsDomain) ProtoMessage() {}

func (x *PeeredDnsDomain) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeredDnsDomain.ProtoReflect.Descriptor instead.
func (*PeeredDnsDomain) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{85}
}

func (x *PeeredDnsDomain) GetDnsSuffix() string {
	if x != nil {
		return x.DnsSuffix
	}
	return ""
}

func (x *PeeredDnsDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PeeredDnsDomainMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PeeredDnsDomainMetadata) Reset() {
	*x = PeeredDnsDomainMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeredDnsDomainMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeredDnsDomainMetadata) ProtoMessage() {}

func (x *PeeredDnsDomainMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeredDnsDomainMetadata.ProtoReflect.Descriptor instead.
func (*PeeredDnsDomainMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{86}
}

type PhpSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *PhpSettings) Reset() {
	*x = PhpSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhpSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhpSettings) ProtoMessage() {}

func (x *PhpSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhpSettings.ProtoReflect.Descriptor instead.
func (*PhpSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{87}
}

func (x *PhpSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type PolicyBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member string `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Role   string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *PolicyBinding) Reset() {
	*x = PolicyBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyBinding) ProtoMessage() {}

func (x *PolicyBinding) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyBinding.ProtoReflect.Descriptor instead.
func (*PolicyBinding) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{88}
}

func (x *PolicyBinding) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *PolicyBinding) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type Publishing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiShortName                   string                   `protobuf:"bytes,1,opt,name=api_short_name,json=apiShortName,proto3" json:"api_short_name,omitempty"`
	CodeownerGithubTeams           []string                 `protobuf:"bytes,2,rep,name=codeowner_github_teams,json=codeownerGithubTeams,proto3" json:"codeowner_github_teams,omitempty"`
	DocTagPrefix                   string                   `protobuf:"bytes,3,opt,name=doc_tag_prefix,json=docTagPrefix,proto3" json:"doc_tag_prefix,omitempty"`
	DocumentationUri               string                   `protobuf:"bytes,4,opt,name=documentation_uri,json=documentationUri,proto3" json:"documentation_uri,omitempty"`
	GithubLabel                    string                   `protobuf:"bytes,5,opt,name=github_label,json=githubLabel,proto3" json:"github_label,omitempty"`
	LibrarySettings                []*ClientLibrarySettings `protobuf:"bytes,6,rep,name=library_settings,json=librarySettings,proto3" json:"library_settings,omitempty"`
	MethodSettings                 []*MethodSettings        `protobuf:"bytes,7,rep,name=method_settings,json=methodSettings,proto3" json:"method_settings,omitempty"`
	NewIssueUri                    string                   `protobuf:"bytes,8,opt,name=new_issue_uri,json=newIssueUri,proto3" json:"new_issue_uri,omitempty"`
	Organization                   string                   `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	ProtoReferenceDocumentationUri string                   `protobuf:"bytes,10,opt,name=proto_reference_documentation_uri,json=protoReferenceDocumentationUri,proto3" json:"proto_reference_documentation_uri,omitempty"`
	RestReferenceDocumentationUri  string                   `protobuf:"bytes,11,opt,name=rest_reference_documentation_uri,json=restReferenceDocumentationUri,proto3" json:"rest_reference_documentation_uri,omitempty"`
}

func (x *Publishing) Reset() {
	*x = Publishing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Publishing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publishing) ProtoMessage() {}

func (x *Publishing) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publishing.ProtoReflect.Descriptor instead.
func (*Publishing) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{89}
}

func (x *Publishing) GetApiShortName() string {
	if x != nil {
		return x.ApiShortName
	}
	return ""
}

func (x *Publishing) GetCodeownerGithubTeams() []string {
	if x != nil {
		return x.CodeownerGithubTeams
	}
	return nil
}

func (x *Publishing) GetDocTagPrefix() string {
	if x != nil {
		return x.DocTagPrefix
	}
	return ""
}

func (x *Publishing) GetDocumentationUri() string {
	if x != nil {
		return x.DocumentationUri
	}
	return ""
}

func (x *Publishing) GetGithubLabel() string {
	if x != nil {
		return x.GithubLabel
	}
	return ""
}

func (x *Publishing) GetLibrarySettings() []*ClientLibrarySettings {
	if x != nil {
		return x.LibrarySettings
	}
	return nil
}

func (x *Publishing) GetMethodSettings() []*MethodSettings {
	if x != nil {
		return x.MethodSettings
	}
	return nil
}

func (x *Publishing) GetNewIssueUri() string {
	if x != nil {
		return x.NewIssueUri
	}
	return ""
}

func (x *Publishing) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Publishing) GetProtoReferenceDocumentationUri() string {
	if x != nil {
		return x.ProtoReferenceDocumentationUri
	}
	return ""
}

func (x *Publishing) GetRestReferenceDocumentationUri() string {
	if x != nil {
		return x.RestReferenceDocumentationUri
	}
	return ""
}

type PythonSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *PythonSettings) Reset() {
	*x = PythonSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonSettings) ProtoMessage() {}

func (x *PythonSettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonSettings.ProtoReflect.Descriptor instead.
func (*PythonSettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{90}
}

func (x *PythonSettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits      []*QuotaLimit `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,omitempty"`
	MetricRules []*MetricRule `protobuf:"bytes,2,rep,name=metric_rules,json=metricRules,proto3" json:"metric_rules,omitempty"`
}

func (x *Quota) Reset() {
	*x = Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quota) ProtoMessage() {}

func (x *Quota) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quota.ProtoReflect.Descriptor instead.
func (*Quota) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{91}
}

func (x *Quota) GetLimits() []*QuotaLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Quota) GetMetricRules() []*MetricRule {
	if x != nil {
		return x.MetricRules
	}
	return nil
}

type QuotaLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultLimit int64            `protobuf:"varint,1,opt,name=default_limit,json=defaultLimit,proto3" json:"default_limit,omitempty"`
	Description  string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DisplayName  string           `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Duration     string           `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	FreeTier     int64            `protobuf:"varint,5,opt,name=free_tier,json=freeTier,proto3" json:"free_tier,omitempty"`
	MaxLimit     int64            `protobuf:"varint,6,opt,name=max_limit,json=maxLimit,proto3" json:"max_limit,omitempty"`
	Metric       string           `protobuf:"bytes,7,opt,name=metric,proto3" json:"metric,omitempty"`
	Name         string           `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Unit         string           `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	Values       map[string]int64 `protobuf:"bytes,10,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QuotaLimit) Reset() {
	*x = QuotaLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotaLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaLimit) ProtoMessage() {}

func (x *QuotaLimit) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaLimit.ProtoReflect.Descriptor instead.
func (*QuotaLimit) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{92}
}

func (x *QuotaLimit) GetDefaultLimit() int64 {
	if x != nil {
		return x.DefaultLimit
	}
	return 0
}

func (x *QuotaLimit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuotaLimit) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *QuotaLimit) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *QuotaLimit) GetFreeTier() int64 {
	if x != nil {
		return x.FreeTier
	}
	return 0
}

func (x *QuotaLimit) GetMaxLimit() int64 {
	if x != nil {
		return x.MaxLimit
	}
	return 0
}

func (x *QuotaLimit) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *QuotaLimit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuotaLimit) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *QuotaLimit) GetValues() map[string]int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpCidrRange string `protobuf:"bytes,1,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	Network     string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{93}
}

func (x *Range) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *Range) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type RangeReservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefixLength                int32         `protobuf:"varint,1,opt,name=ip_prefix_length,json=ipPrefixLength,proto3" json:"ip_prefix_length,omitempty"`
	RequestedRanges               []string      `protobuf:"bytes,2,rep,name=requested_ranges,json=requestedRanges,proto3" json:"requested_ranges,omitempty"`
	SecondaryRangeIpPrefixLengths []int32       `protobuf:"varint,3,rep,packed,name=secondary_range_ip_prefix_lengths,json=secondaryRangeIpPrefixLengths,proto3" json:"secondary_range_ip_prefix_lengths,omitempty"`
	SubnetworkCandidates          []*Subnetwork `protobuf:"bytes,4,rep,name=subnetwork_candidates,json=subnetworkCandidates,proto3" json:"subnetwork_candidates,omitempty"`
}

func (x *RangeReservation) Reset() {
	*x = RangeReservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeReservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeReservation) ProtoMessage() {}

func (x *RangeReservation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeReservation.ProtoReflect.Descriptor instead.
func (*RangeReservation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{94}
}

func (x *RangeReservation) GetIpPrefixLength() int32 {
	if x != nil {
		return x.IpPrefixLength
	}
	return 0
}

func (x *RangeReservation) GetRequestedRanges() []string {
	if x != nil {
		return x.RequestedRanges
	}
	return nil
}

func (x *RangeReservation) GetSecondaryRangeIpPrefixLengths() []int32 {
	if x != nil {
		return x.SecondaryRangeIpPrefixLengths
	}
	return nil
}

func (x *RangeReservation) GetSubnetworkCandidates() []*Subnetwork {
	if x != nil {
		return x.SubnetworkCandidates
	}
	return nil
}

type RemoveDnsRecordSetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDnsRecordSetMetadata) Reset() {
	*x = RemoveDnsRecordSetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsRecordSetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsRecordSetMetadata) ProtoMessage() {}

func (x *RemoveDnsRecordSetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsRecordSetMetadata.ProtoReflect.Descriptor instead.
func (*RemoveDnsRecordSetMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{95}
}

type RemoveDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string        `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	DnsRecordSet    *DnsRecordSet `protobuf:"bytes,2,opt,name=dns_record_set,json=dnsRecordSet,proto3" json:"dns_record_set,omitempty"`
	Zone            string        `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *RemoveDnsRecordSetRequest) Reset() {
	*x = RemoveDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsRecordSetRequest) ProtoMessage() {}

func (x *RemoveDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*RemoveDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{96}
}

func (x *RemoveDnsRecordSetRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *RemoveDnsRecordSetRequest) GetDnsRecordSet() *DnsRecordSet {
	if x != nil {
		return x.DnsRecordSet
	}
	return nil
}

func (x *RemoveDnsRecordSetRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type RemoveDnsRecordSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDnsRecordSetResponse) Reset() {
	*x = RemoveDnsRecordSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsRecordSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsRecordSetResponse) ProtoMessage() {}

func (x *RemoveDnsRecordSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsRecordSetResponse.ProtoReflect.Descriptor instead.
func (*RemoveDnsRecordSetResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{97}
}

type RemoveDnsZoneMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDnsZoneMetadata) Reset() {
	*x = RemoveDnsZoneMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsZoneMetadata) ProtoMessage() {}

func (x *RemoveDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*RemoveDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{98}
}

type RemoveDnsZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveDnsZoneRequest) Reset() {
	*x = RemoveDnsZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsZoneRequest) ProtoMessage() {}

func (x *RemoveDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*RemoveDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{99}
}

func (x *RemoveDnsZoneRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *RemoveDnsZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveDnsZoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDnsZoneResponse) Reset() {
	*x = RemoveDnsZoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDnsZoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDnsZoneResponse) ProtoMessage() {}

func (x *RemoveDnsZoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDnsZoneResponse.ProtoReflect.Descriptor instead.
func (*RemoveDnsZoneResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{100}
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestRange      string `protobuf:"bytes,1,opt,name=dest_range,json=destRange,proto3" json:"dest_range,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Network        string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	NextHopGateway string `protobuf:"bytes,4,opt,name=next_hop_gateway,json=nextHopGateway,proto3" json:"next_hop_gateway,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{101}
}

func (x *Route) GetDestRange() string {
	if x != nil {
		return x.DestRange
	}
	return ""
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Route) GetNextHopGateway() string {
	if x != nil {
		return x.NextHopGateway
	}
	return ""
}

type RubySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *CommonLanguageSettings `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
}

func (x *RubySettings) Reset() {
	*x = RubySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RubySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RubySettings) ProtoMessage() {}

func (x *RubySettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RubySettings.ProtoReflect.Descriptor instead.
func (*RubySettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{102}
}

func (x *RubySettings) GetCommon() *CommonLanguageSettings {
	if x != nil {
		return x.Common
	}
	return nil
}

type SearchRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefixLength int32  `protobuf:"varint,1,opt,name=ip_prefix_length,json=ipPrefixLength,proto3" json:"ip_prefix_length,omitempty"`
	Network        string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *SearchRangeRequest) Reset() {
	*x = SearchRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRangeRequest) ProtoMessage() {}

func (x *SearchRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRangeRequest.ProtoReflect.Descriptor instead.
func (*SearchRangeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{103}
}

func (x *SearchRangeRequest) GetIpPrefixLength() int32 {
	if x != nil {
		return x.IpPrefixLength
	}
	return 0
}

func (x *SearchRangeRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type SecondaryIpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpCidrRange string `protobuf:"bytes,1,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	RangeName   string `protobuf:"bytes,2,opt,name=range_name,json=rangeName,proto3" json:"range_name,omitempty"`
}

func (x *SecondaryIpRange) Reset() {
	*x = SecondaryIpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryIpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryIpRange) ProtoMessage() {}

func (x *SecondaryIpRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryIpRange.ProtoReflect.Descriptor instead.
func (*SecondaryIpRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{104}
}

func (x *SecondaryIpRange) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *SecondaryIpRange) GetRangeName() string {
	if x != nil {
		return x.RangeName
	}
	return ""
}

type SecondaryIpRangeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpPrefixLength                 int32  `protobuf:"varint,1,opt,name=ip_prefix_length,json=ipPrefixLength,proto3" json:"ip_prefix_length,omitempty"`
	OutsideAllocationPublicIpRange string `protobuf:"bytes,2,opt,name=outside_allocation_public_ip_range,json=outsideAllocationPublicIpRange,proto3" json:"outside_allocation_public_ip_range,omitempty"`
	RangeName                      string `protobuf:"bytes,3,opt,name=range_name,json=rangeName,proto3" json:"range_name,omitempty"`
	RequestedAddress               string `protobuf:"bytes,4,opt,name=requested_address,json=requestedAddress,proto3" json:"requested_address,omitempty"`
}

func (x *SecondaryIpRangeSpec) Reset() {
	*x = SecondaryIpRangeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryIpRangeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryIpRangeSpec) ProtoMessage() {}

func (x *SecondaryIpRangeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryIpRangeSpec.ProtoReflect.Descriptor instead.
func (*SecondaryIpRangeSpec) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{105}
}

func (x *SecondaryIpRangeSpec) GetIpPrefixLength() int32 {
	if x != nil {
		return x.IpPrefixLength
	}
	return 0
}

func (x *SecondaryIpRangeSpec) GetOutsideAllocationPublicIpRange() string {
	if x != nil {
		return x.OutsideAllocationPublicIpRange
	}
	return ""
}

func (x *SecondaryIpRangeSpec) GetRangeName() string {
	if x != nil {
		return x.RangeName
	}
	return ""
}

func (x *SecondaryIpRangeSpec) GetRequestedAddress() string {
	if x != nil {
		return x.RequestedAddress
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apis               []*Api                         `protobuf:"bytes,1,rep,name=apis,proto3" json:"apis,omitempty"`
	Authentication     *Authentication                `protobuf:"bytes,2,opt,name=authentication,proto3" json:"authentication,omitempty"`
	Backend            *Backend                       `protobuf:"bytes,3,opt,name=backend,proto3" json:"backend,omitempty"`
	Billing            *Billing                       `protobuf:"bytes,4,opt,name=billing,proto3" json:"billing,omitempty"`
	ConfigVersion      uint32                         `protobuf:"varint,5,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	Context            *Context                       `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	Control            *Control                       `protobuf:"bytes,7,opt,name=control,proto3" json:"control,omitempty"`
	CustomError        *CustomError                   `protobuf:"bytes,8,opt,name=custom_error,json=customError,proto3" json:"custom_error,omitempty"`
	Documentation      *Documentation                 `protobuf:"bytes,9,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Endpoints          []*Endpoint                    `protobuf:"bytes,10,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Enums              []*Enum                        `protobuf:"bytes,11,rep,name=enums,proto3" json:"enums,omitempty"`
	Http               *Http                          `protobuf:"bytes,12,opt,name=http,proto3" json:"http,omitempty"`
	Id                 string                         `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	Logging            *Logging                       `protobuf:"bytes,14,opt,name=logging,proto3" json:"logging,omitempty"`
	Logs               []*LogDescriptor               `protobuf:"bytes,15,rep,name=logs,proto3" json:"logs,omitempty"`
	Metrics            []*MetricDescriptor            `protobuf:"bytes,16,rep,name=metrics,proto3" json:"metrics,omitempty"`
	MonitoredResources []*MonitoredResourceDescriptor `protobuf:"bytes,17,rep,name=monitored_resources,json=monitoredResources,proto3" json:"monitored_resources,omitempty"`
	Monitoring         *Monitoring                    `protobuf:"bytes,18,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	Name               string                         `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	ProducerProjectId  string                         `protobuf:"bytes,20,opt,name=producer_project_id,json=producerProjectId,proto3" json:"producer_project_id,omitempty"`
	Publishing         *Publishing                    `protobuf:"bytes,21,opt,name=publishing,proto3" json:"publishing,omitempty"`
	Quota              *Quota                         `protobuf:"bytes,22,opt,name=quota,proto3" json:"quota,omitempty"`
	SourceInfo         *SourceInfo                    `protobuf:"bytes,23,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	SystemParameters   *SystemParameters              `protobuf:"bytes,24,opt,name=system_parameters,json=systemParameters,proto3" json:"system_parameters,omitempty"`
	SystemTypes        []*Type                        `protobuf:"bytes,25,rep,name=system_types,json=systemTypes,proto3" json:"system_types,omitempty"`
	Title              string                         `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`
	Types              []*Type                        `protobuf:"bytes,27,rep,name=types,proto3" json:"types,omitempty"`
	Usage              *Usage                         `protobuf:"bytes,28,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{106}
}

func (x *Service) GetApis() []*Api {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *Service) GetAuthentication() *Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *Service) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *Service) GetBilling() *Billing {
	if x != nil {
		return x.Billing
	}
	return nil
}

func (x *Service) GetConfigVersion() uint32 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *Service) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Service) GetControl() *Control {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *Service) GetCustomError() *CustomError {
	if x != nil {
		return x.CustomError
	}
	return nil
}

func (x *Service) GetDocumentation() *Documentation {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *Service) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Service) GetEnums() []*Enum {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *Service) GetHttp() *Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetLogging() *Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *Service) GetLogs() []*LogDescriptor {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Service) GetMetrics() []*MetricDescriptor {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Service) GetMonitoredResources() []*MonitoredResourceDescriptor {
	if x != nil {
		return x.MonitoredResources
	}
	return nil
}

func (x *Service) GetMonitoring() *Monitoring {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetProducerProjectId() string {
	if x != nil {
		return x.ProducerProjectId
	}
	return ""
}

func (x *Service) GetPublishing() *Publishing {
	if x != nil {
		return x.Publishing
	}
	return nil
}

func (x *Service) GetQuota() *Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *Service) GetSourceInfo() *SourceInfo {
	if x != nil {
		return x.SourceInfo
	}
	return nil
}

func (x *Service) GetSystemParameters() *SystemParameters {
	if x != nil {
		return x.SystemParameters
	}
	return nil
}

func (x *Service) GetSystemTypes() []*Type {
	if x != nil {
		return x.SystemTypes
	}
	return nil
}

func (x *Service) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Service) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Service) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type SourceContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *SourceContext) Reset() {
	*x = SourceContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceContext) ProtoMessage() {}

func (x *SourceContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceContext.ProtoReflect.Descriptor instead.
func (*SourceContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{107}
}

func (x *SourceContext) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type SourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceFiles []*any1.Any `protobuf:"bytes,1,rep,name=source_files,json=sourceFiles,proto3" json:"source_files,omitempty"`
}

func (x *SourceInfo) Reset() {
	*x = SourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInfo) ProtoMessage() {}

func (x *SourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInfo.ProtoReflect.Descriptor instead.
func (*SourceInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{108}
}

func (x *SourceInfo) GetSourceFiles() []*any1.Any {
	if x != nil {
		return x.SourceFiles
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Details []*any1.Any `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{109}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetDetails() []*any1.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Subnetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpCidrRange       string              `protobuf:"bytes,1,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Network           string              `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	OutsideAllocation bool                `protobuf:"varint,4,opt,name=outside_allocation,json=outsideAllocation,proto3" json:"outside_allocation,omitempty"`
	Region            string              `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	SecondaryIpRanges []*SecondaryIpRange `protobuf:"bytes,6,rep,name=secondary_ip_ranges,json=secondaryIpRanges,proto3" json:"secondary_ip_ranges,omitempty"`
}

func (x *Subnetwork) Reset() {
	*x = Subnetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnetwork) ProtoMessage() {}

func (x *Subnetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnetwork.ProtoReflect.Descriptor instead.
func (*Subnetwork) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{110}
}

func (x *Subnetwork) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *Subnetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subnetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Subnetwork) GetOutsideAllocation() bool {
	if x != nil {
		return x.OutsideAllocation
	}
	return false
}

func (x *Subnetwork) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Subnetwork) GetSecondaryIpRanges() []*SecondaryIpRange {
	if x != nil {
		return x.SecondaryIpRanges
	}
	return nil
}

type SystemParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpHeader        string `protobuf:"bytes,1,opt,name=http_header,json=httpHeader,proto3" json:"http_header,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UrlQueryParameter string `protobuf:"bytes,3,opt,name=url_query_parameter,json=urlQueryParameter,proto3" json:"url_query_parameter,omitempty"`
}

func (x *SystemParameter) Reset() {
	*x = SystemParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemParameter) ProtoMessage() {}

func (x *SystemParameter) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemParameter.ProtoReflect.Descriptor instead.
func (*SystemParameter) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{111}
}

func (x *SystemParameter) GetHttpHeader() string {
	if x != nil {
		return x.HttpHeader
	}
	return ""
}

func (x *SystemParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemParameter) GetUrlQueryParameter() string {
	if x != nil {
		return x.UrlQueryParameter
	}
	return ""
}

type SystemParameterRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters []*SystemParameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	Selector   string             `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *SystemParameterRule) Reset() {
	*x = SystemParameterRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemParameterRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemParameterRule) ProtoMessage() {}

func (x *SystemParameterRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemParameterRule.ProtoReflect.Descriptor instead.
func (*SystemParameterRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{112}
}

func (x *SystemParameterRule) GetParameters() []*SystemParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SystemParameterRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

type SystemParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*SystemParameterRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SystemParameters) Reset() {
	*x = SystemParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemParameters) ProtoMessage() {}

func (x *SystemParameters) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemParameters.ProtoReflect.Descriptor instead.
func (*SystemParameters) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{113}
}

func (x *SystemParameters) GetRules() []*SystemParameterRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edition       string         `protobuf:"bytes,1,opt,name=edition,proto3" json:"edition,omitempty"`
	Fields        []*Field       `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Name          string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Oneofs        []string       `protobuf:"bytes,4,rep,name=oneofs,proto3" json:"oneofs,omitempty"`
	Options       []*Option      `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	SourceContext *SourceContext `protobuf:"bytes,6,opt,name=source_context,json=sourceContext,proto3" json:"source_context,omitempty"`
	Syntax        string         `protobuf:"bytes,7,opt,name=syntax,proto3" json:"syntax,omitempty"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{114}
}

func (x *Type) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Type) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Type) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Type) GetOneofs() []string {
	if x != nil {
		return x.Oneofs
	}
	return nil
}

func (x *Type) GetOptions() []*Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Type) GetSourceContext() *SourceContext {
	if x != nil {
		return x.SourceContext
	}
	return nil
}

func (x *Type) GetSyntax() string {
	if x != nil {
		return x.Syntax
	}
	return ""
}

type UpdateConsumerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerConfig *ConsumerConfig `protobuf:"bytes,1,opt,name=consumer_config,json=consumerConfig,proto3" json:"consumer_config,omitempty"`
}

func (x *UpdateConsumerConfigRequest) Reset() {
	*x = UpdateConsumerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsumerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerConfigRequest) ProtoMessage() {}

func (x *UpdateConsumerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConsumerConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateConsumerConfigRequest) GetConsumerConfig() *ConsumerConfig {
	if x != nil {
		return x.ConsumerConfig
	}
	return nil
}

type UpdateDnsRecordSetMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDnsRecordSetMetadata) Reset() {
	*x = UpdateDnsRecordSetMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDnsRecordSetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsRecordSetMetadata) ProtoMessage() {}

func (x *UpdateDnsRecordSetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsRecordSetMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDnsRecordSetMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{116}
}

type UpdateDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork      string        `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	ExistingDnsRecordSet *DnsRecordSet `protobuf:"bytes,2,opt,name=existing_dns_record_set,json=existingDnsRecordSet,proto3" json:"existing_dns_record_set,omitempty"`
	NewDnsRecordSet      *DnsRecordSet `protobuf:"bytes,3,opt,name=new_dns_record_set,json=newDnsRecordSet,proto3" json:"new_dns_record_set,omitempty"`
	Zone                 string        `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *UpdateDnsRecordSetRequest) Reset() {
	*x = UpdateDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsRecordSetRequest) ProtoMessage() {}

func (x *UpdateDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateDnsRecordSetRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *UpdateDnsRecordSetRequest) GetExistingDnsRecordSet() *DnsRecordSet {
	if x != nil {
		return x.ExistingDnsRecordSet
	}
	return nil
}

func (x *UpdateDnsRecordSetRequest) GetNewDnsRecordSet() *DnsRecordSet {
	if x != nil {
		return x.NewDnsRecordSet
	}
	return nil
}

func (x *UpdateDnsRecordSetRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerNotificationChannel string       `protobuf:"bytes,1,opt,name=producer_notification_channel,json=producerNotificationChannel,proto3" json:"producer_notification_channel,omitempty"`
	Requirements                []string     `protobuf:"bytes,2,rep,name=requirements,proto3" json:"requirements,omitempty"`
	Rules                       []*UsageRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{118}
}

func (x *Usage) GetProducerNotificationChannel() string {
	if x != nil {
		return x.ProducerNotificationChannel
	}
	return ""
}

func (x *Usage) GetRequirements() []string {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Usage) GetRules() []*UsageRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type UsageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowUnregisteredCalls bool   `protobuf:"varint,1,opt,name=allow_unregistered_calls,json=allowUnregisteredCalls,proto3" json:"allow_unregistered_calls,omitempty"`
	Selector               string `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	SkipServiceControl     bool   `protobuf:"varint,3,opt,name=skip_service_control,json=skipServiceControl,proto3" json:"skip_service_control,omitempty"`
}

func (x *UsageRule) Reset() {
	*x = UsageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageRule) ProtoMessage() {}

func (x *UsageRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageRule.ProtoReflect.Descriptor instead.
func (*UsageRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{119}
}

func (x *UsageRule) GetAllowUnregisteredCalls() bool {
	if x != nil {
		return x.AllowUnregisteredCalls
	}
	return false
}

func (x *UsageRule) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *UsageRule) GetSkipServiceControl() bool {
	if x != nil {
		return x.SkipServiceControl
	}
	return false
}

type ValidateConsumerConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckServiceNetworkingUsePermission bool              `protobuf:"varint,1,opt,name=check_service_networking_use_permission,json=checkServiceNetworkingUsePermission,proto3" json:"check_service_networking_use_permission,omitempty"`
	ConsumerNetwork                     string            `protobuf:"bytes,2,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	ConsumerProject                     *ConsumerProject  `protobuf:"bytes,3,opt,name=consumer_project,json=consumerProject,proto3" json:"consumer_project,omitempty"`
	RangeReservation                    *RangeReservation `protobuf:"bytes,4,opt,name=range_reservation,json=rangeReservation,proto3" json:"range_reservation,omitempty"`
	ValidateNetwork                     bool              `protobuf:"varint,5,opt,name=validate_network,json=validateNetwork,proto3" json:"validate_network,omitempty"`
}

func (x *ValidateConsumerConfigRequest) Reset() {
	*x = ValidateConsumerConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateConsumerConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConsumerConfigRequest) ProtoMessage() {}

func (x *ValidateConsumerConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConsumerConfigRequest.ProtoReflect.Descriptor instead.
func (*ValidateConsumerConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{120}
}

func (x *ValidateConsumerConfigRequest) GetCheckServiceNetworkingUsePermission() bool {
	if x != nil {
		return x.CheckServiceNetworkingUsePermission
	}
	return false
}

func (x *ValidateConsumerConfigRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *ValidateConsumerConfigRequest) GetConsumerProject() *ConsumerProject {
	if x != nil {
		return x.ConsumerProject
	}
	return nil
}

func (x *ValidateConsumerConfigRequest) GetRangeReservation() *RangeReservation {
	if x != nil {
		return x.RangeReservation
	}
	return nil
}

func (x *ValidateConsumerConfigRequest) GetValidateNetwork() bool {
	if x != nil {
		return x.ValidateNetwork
	}
	return false
}

type ValidateConsumerConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExistingSubnetworkCandidates []*Subnetwork `protobuf:"bytes,1,rep,name=existing_subnetwork_candidates,json=existingSubnetworkCandidates,proto3" json:"existing_subnetwork_candidates,omitempty"`
	IsValid                      bool          `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ValidationError              string        `protobuf:"bytes,3,opt,name=validation_error,json=validationError,proto3" json:"validation_error,omitempty"`
}

func (x *ValidateConsumerConfigResponse) Reset() {
	*x = ValidateConsumerConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateConsumerConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConsumerConfigResponse) ProtoMessage() {}

func (x *ValidateConsumerConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConsumerConfigResponse.ProtoReflect.Descriptor instead.
func (*ValidateConsumerConfigResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{121}
}

func (x *ValidateConsumerConfigResponse) GetExistingSubnetworkCandidates() []*Subnetwork {
	if x != nil {
		return x.ExistingSubnetworkCandidates
	}
	return nil
}

func (x *ValidateConsumerConfigResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateConsumerConfigResponse) GetValidationError() string {
	if x != nil {
		return x.ValidationError
	}
	return ""
}

type VpcServiceControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *VpcServiceControls) Reset() {
	*x = VpcServiceControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcServiceControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcServiceControls) ProtoMessage() {}

func (x *VpcServiceControls) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcServiceControls.ProtoReflect.Descriptor instead.
func (*VpcServiceControls) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{122}
}

func (x *VpcServiceControls) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AddSubnetworkServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  string                `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Service *AddSubnetworkRequest `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *AddSubnetworkServiceRequest) Reset() {
	*x = AddSubnetworkServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetworkServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetworkServiceRequest) ProtoMessage() {}

func (x *AddSubnetworkServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetworkServiceRequest.ProtoReflect.Descriptor instead.
func (*AddSubnetworkServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{123}
}

func (x *AddSubnetworkServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddSubnetworkServiceRequest) GetService() *AddSubnetworkRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

type DisableVpcServiceControlsServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  string                            `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Service *DisableVpcServiceControlsRequest `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *DisableVpcServiceControlsServiceRequest) Reset() {
	*x = DisableVpcServiceControlsServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableVpcServiceControlsServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableVpcServiceControlsServiceRequest) ProtoMessage() {}

func (x *DisableVpcServiceControlsServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableVpcServiceControlsServiceRequest.ProtoReflect.Descriptor instead.
func (*DisableVpcServiceControlsServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{124}
}

func (x *DisableVpcServiceControlsServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DisableVpcServiceControlsServiceRequest) GetService() *DisableVpcServiceControlsRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

type EnableVpcServiceControlsServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Service *EnableVpcServiceControlsRequest `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *EnableVpcServiceControlsServiceRequest) Reset() {
	*x = EnableVpcServiceControlsServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableVpcServiceControlsServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableVpcServiceControlsServiceRequest) ProtoMessage() {}

func (x *EnableVpcServiceControlsServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableVpcServiceControlsServiceRequest.ProtoReflect.Descriptor instead.
func (*EnableVpcServiceControlsServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{125}
}

func (x *EnableVpcServiceControlsServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *EnableVpcServiceControlsServiceRequest) GetService() *EnableVpcServiceControlsRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

type SearchRangeServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  string              `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Service *SearchRangeRequest `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *SearchRangeServiceRequest) Reset() {
	*x = SearchRangeServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRangeServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRangeServiceRequest) ProtoMessage() {}

func (x *SearchRangeServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRangeServiceRequest.ProtoReflect.Descriptor instead.
func (*SearchRangeServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{126}
}

func (x *SearchRangeServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SearchRangeServiceRequest) GetService() *SearchRangeRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

type ValidateServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  string                         `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Service *ValidateConsumerConfigRequest `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ValidateServiceRequest) Reset() {
	*x = ValidateServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateServiceRequest) ProtoMessage() {}

func (x *ValidateServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateServiceRequest.ProtoReflect.Descriptor instead.
func (*ValidateServiceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{127}
}

func (x *ValidateServiceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ValidateServiceRequest) GetService() *ValidateConsumerConfigRequest {
	if x != nil {
		return x.Service
	}
	return nil
}

type CreateServicesConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent             string      `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesConnection *Connection `protobuf:"bytes,2,opt,name=services_connection,json=servicesConnection,proto3" json:"services_connection,omitempty"`
}

func (x *CreateServicesConnectionRequest) Reset() {
	*x = CreateServicesConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServicesConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServicesConnectionRequest) ProtoMessage() {}

func (x *CreateServicesConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServicesConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateServicesConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{128}
}

func (x *CreateServicesConnectionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateServicesConnectionRequest) GetServicesConnection() *Connection {
	if x != nil {
		return x.ServicesConnection
	}
	return nil
}

type DeleteConnectionServicesConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServicesConnection *DeleteConnectionRequest `protobuf:"bytes,2,opt,name=services_connection,json=servicesConnection,proto3" json:"services_connection,omitempty"`
}

func (x *DeleteConnectionServicesConnectionRequest) Reset() {
	*x = DeleteConnectionServicesConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConnectionServicesConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectionServicesConnectionRequest) ProtoMessage() {}

func (x *DeleteConnectionServicesConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectionServicesConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectionServicesConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{129}
}

func (x *DeleteConnectionServicesConnectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteConnectionServicesConnectionRequest) GetServicesConnection() *DeleteConnectionRequest {
	if x != nil {
		return x.ServicesConnection
	}
	return nil
}

type ListServicesConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Parent  string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListServicesConnectionsRequest) Reset() {
	*x = ListServicesConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesConnectionsRequest) ProtoMessage() {}

func (x *ListServicesConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListServicesConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{130}
}

func (x *ListServicesConnectionsRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListServicesConnectionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchServicesConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force              bool        `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
	Name               string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask         string      `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	ServicesConnection *Connection `protobuf:"bytes,4,opt,name=services_connection,json=servicesConnection,proto3" json:"services_connection,omitempty"`
}

func (x *PatchServicesConnectionRequest) Reset() {
	*x = PatchServicesConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchServicesConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchServicesConnectionRequest) ProtoMessage() {}

func (x *PatchServicesConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchServicesConnectionRequest.ProtoReflect.Descriptor instead.
func (*PatchServicesConnectionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{131}
}

func (x *PatchServicesConnectionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *PatchServicesConnectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchServicesConnectionRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchServicesConnectionRequest) GetServicesConnection() *Connection {
	if x != nil {
		return x.ServicesConnection
	}
	return nil
}

type AddServicesDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent               string                  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesDnsRecordSet *AddDnsRecordSetRequest `protobuf:"bytes,2,opt,name=services_dns_record_set,json=servicesDnsRecordSet,proto3" json:"services_dns_record_set,omitempty"`
}

func (x *AddServicesDnsRecordSetRequest) Reset() {
	*x = AddServicesDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServicesDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServicesDnsRecordSetRequest) ProtoMessage() {}

func (x *AddServicesDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServicesDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*AddServicesDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{132}
}

func (x *AddServicesDnsRecordSetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddServicesDnsRecordSetRequest) GetServicesDnsRecordSet() *AddDnsRecordSetRequest {
	if x != nil {
		return x.ServicesDnsRecordSet
	}
	return nil
}

type GetServicesDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	Domain          string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Parent          string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Type            string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Zone            string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *GetServicesDnsRecordSetRequest) Reset() {
	*x = GetServicesDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesDnsRecordSetRequest) ProtoMessage() {}

func (x *GetServicesDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*GetServicesDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{133}
}

func (x *GetServicesDnsRecordSetRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *GetServicesDnsRecordSetRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetServicesDnsRecordSetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *GetServicesDnsRecordSetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetServicesDnsRecordSetRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type ListServicesDnsRecordSetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsumerNetwork string `protobuf:"bytes,1,opt,name=consumer_network,json=consumerNetwork,proto3" json:"consumer_network,omitempty"`
	Parent          string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Zone            string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *ListServicesDnsRecordSetsRequest) Reset() {
	*x = ListServicesDnsRecordSetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesDnsRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesDnsRecordSetsRequest) ProtoMessage() {}

func (x *ListServicesDnsRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesDnsRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*ListServicesDnsRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{134}
}

func (x *ListServicesDnsRecordSetsRequest) GetConsumerNetwork() string {
	if x != nil {
		return x.ConsumerNetwork
	}
	return ""
}

func (x *ListServicesDnsRecordSetsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListServicesDnsRecordSetsRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type DeleteServicesDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent               string                     `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesDnsRecordSet *RemoveDnsRecordSetRequest `protobuf:"bytes,2,opt,name=services_dns_record_set,json=servicesDnsRecordSet,proto3" json:"services_dns_record_set,omitempty"`
}

func (x *DeleteServicesDnsRecordSetRequest) Reset() {
	*x = DeleteServicesDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServicesDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServicesDnsRecordSetRequest) ProtoMessage() {}

func (x *DeleteServicesDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServicesDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteServicesDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteServicesDnsRecordSetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DeleteServicesDnsRecordSetRequest) GetServicesDnsRecordSet() *RemoveDnsRecordSetRequest {
	if x != nil {
		return x.ServicesDnsRecordSet
	}
	return nil
}

type UpdateServicesDnsRecordSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent               string                     `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesDnsRecordSet *UpdateDnsRecordSetRequest `protobuf:"bytes,2,opt,name=services_dns_record_set,json=servicesDnsRecordSet,proto3" json:"services_dns_record_set,omitempty"`
}

func (x *UpdateServicesDnsRecordSetRequest) Reset() {
	*x = UpdateServicesDnsRecordSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServicesDnsRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServicesDnsRecordSetRequest) ProtoMessage() {}

func (x *UpdateServicesDnsRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServicesDnsRecordSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateServicesDnsRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{136}
}

func (x *UpdateServicesDnsRecordSetRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UpdateServicesDnsRecordSetRequest) GetServicesDnsRecordSet() *UpdateDnsRecordSetRequest {
	if x != nil {
		return x.ServicesDnsRecordSet
	}
	return nil
}

type AddServicesDnsZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent          string             `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesDnsZone *AddDnsZoneRequest `protobuf:"bytes,2,opt,name=services_dns_zone,json=servicesDnsZone,proto3" json:"services_dns_zone,omitempty"`
}

func (x *AddServicesDnsZoneRequest) Reset() {
	*x = AddServicesDnsZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServicesDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServicesDnsZoneRequest) ProtoMessage() {}

func (x *AddServicesDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServicesDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*AddServicesDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{137}
}

func (x *AddServicesDnsZoneRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddServicesDnsZoneRequest) GetServicesDnsZone() *AddDnsZoneRequest {
	if x != nil {
		return x.ServicesDnsZone
	}
	return nil
}

type DeleteServicesDnsZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent          string                `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesDnsZone *RemoveDnsZoneRequest `protobuf:"bytes,2,opt,name=services_dns_zone,json=servicesDnsZone,proto3" json:"services_dns_zone,omitempty"`
}

func (x *DeleteServicesDnsZoneRequest) Reset() {
	*x = DeleteServicesDnsZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServicesDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServicesDnsZoneRequest) ProtoMessage() {}

func (x *DeleteServicesDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServicesDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteServicesDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{138}
}

func (x *DeleteServicesDnsZoneRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DeleteServicesDnsZoneRequest) GetServicesDnsZone() *RemoveDnsZoneRequest {
	if x != nil {
		return x.ServicesDnsZone
	}
	return nil
}

type GetServicesProjectsGlobalNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUsedIpRanges bool   `protobuf:"varint,1,opt,name=include_used_ip_ranges,json=includeUsedIpRanges,proto3" json:"include_used_ip_ranges,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetServicesProjectsGlobalNetworkRequest) Reset() {
	*x = GetServicesProjectsGlobalNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesProjectsGlobalNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesProjectsGlobalNetworkRequest) ProtoMessage() {}

func (x *GetServicesProjectsGlobalNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesProjectsGlobalNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetServicesProjectsGlobalNetworkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{139}
}

func (x *GetServicesProjectsGlobalNetworkRequest) GetIncludeUsedIpRanges() bool {
	if x != nil {
		return x.IncludeUsedIpRanges
	}
	return false
}

func (x *GetServicesProjectsGlobalNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetVpcServiceControlsServicesProjectsGlobalNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) Reset() {
	*x = GetVpcServiceControlsServicesProjectsGlobalNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) ProtoMessage() {}

func (x *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVpcServiceControlsServicesProjectsGlobalNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{140}
}

func (x *GetVpcServiceControlsServicesProjectsGlobalNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateConsumerConfigServicesProjectsGlobalNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                        string                       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesProjectsGlobalNetwork *UpdateConsumerConfigRequest `protobuf:"bytes,2,opt,name=services_projects_global_network,json=servicesProjectsGlobalNetwork,proto3" json:"services_projects_global_network,omitempty"`
}

func (x *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) Reset() {
	*x = UpdateConsumerConfigServicesProjectsGlobalNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) ProtoMessage() {}

func (x *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConsumerConfigServicesProjectsGlobalNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{141}
}

func (x *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UpdateConsumerConfigServicesProjectsGlobalNetworkRequest) GetServicesProjectsGlobalNetwork() *UpdateConsumerConfigRequest {
	if x != nil {
		return x.ServicesProjectsGlobalNetwork
	}
	return nil
}

type GetServicesProjectsGlobalNetworksDnsZoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetServicesProjectsGlobalNetworksDnsZoneRequest) Reset() {
	*x = GetServicesProjectsGlobalNetworksDnsZoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesProjectsGlobalNetworksDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesProjectsGlobalNetworksDnsZoneRequest) ProtoMessage() {}

func (x *GetServicesProjectsGlobalNetworksDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesProjectsGlobalNetworksDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*GetServicesProjectsGlobalNetworksDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{142}
}

func (x *GetServicesProjectsGlobalNetworksDnsZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListServicesProjectsGlobalNetworksDnsZonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListServicesProjectsGlobalNetworksDnsZonesRequest) Reset() {
	*x = ListServicesProjectsGlobalNetworksDnsZonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesProjectsGlobalNetworksDnsZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesProjectsGlobalNetworksDnsZonesRequest) ProtoMessage() {}

func (x *ListServicesProjectsGlobalNetworksDnsZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesProjectsGlobalNetworksDnsZonesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesProjectsGlobalNetworksDnsZonesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{143}
}

func (x *ListServicesProjectsGlobalNetworksDnsZonesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                        string           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesProjectsGlobalNetworksPeeredDnsDomain *PeeredDnsDomain `protobuf:"bytes,2,opt,name=services_projects_global_networks_peered_dns_domain,json=servicesProjectsGlobalNetworksPeeredDnsDomain,proto3" json:"services_projects_global_networks_peered_dns_domain,omitempty"`
}

func (x *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) Reset() {
	*x = CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) ProtoMessage() {}

func (x *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest.ProtoReflect.Descriptor instead.
func (*CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{144}
}

func (x *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest) GetServicesProjectsGlobalNetworksPeeredDnsDomain() *PeeredDnsDomain {
	if x != nil {
		return x.ServicesProjectsGlobalNetworksPeeredDnsDomain
	}
	return nil
}

type DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) Reset() {
	*x = DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) ProtoMessage() {}

func (x *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest.ProtoReflect.Descriptor instead.
func (*DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{145}
}

func (x *DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) Reset() {
	*x = ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) ProtoMessage() {}

func (x *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest.ProtoReflect.Descriptor instead.
func (*ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{146}
}

func (x *ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type AddServicesRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent       string           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ServicesRole *AddRolesRequest `protobuf:"bytes,2,opt,name=services_role,json=servicesRole,proto3" json:"services_role,omitempty"`
}

func (x *AddServicesRoleRequest) Reset() {
	*x = AddServicesRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddServicesRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddServicesRoleRequest) ProtoMessage() {}

func (x *AddServicesRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddServicesRoleRequest.ProtoReflect.Descriptor instead.
func (*AddServicesRoleRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP(), []int{147}
}

func (x *AddServicesRoleRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AddServicesRoleRequest) GetServicesRole() *AddRolesRequest {
	if x != nil {
		return x.ServicesRole
	}
	return nil
}

var File_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x55,
	0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x71, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x01,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x0e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0xfd, 0x07, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x43, 0x69, 0x64, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x22,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x50, 0x0a, 0x25, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x21, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x22, 0xf0, 0x02, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x43, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x40, 0x0a, 0x06, 0x6d, 0x69, 0x78, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x78, 0x69, 0x6e, 0x52, 0x06, 0x6d, 0x69, 0x78, 0x69, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b,
	0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b,
	0x73, 0x55, 0x72, 0x69, 0x12, 0x53, 0x0a, 0x0d, 0x6a, 0x77, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4a, 0x77, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6a, 0x77, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a, 0x0f, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x12, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x05, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x07, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xd1, 0x04, 0x0a,
	0x0b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x77, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x77, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1d, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x42, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x42, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x7d, 0x0a, 0x1f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x75, 0x0a, 0x07, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x12, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb2, 0x06, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0b, 0x63, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a,
	0x0f, 0x64, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x64, 0x6f, 0x74, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x67, 0x6f, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x67,
	0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x6a, 0x61, 0x76,
	0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0c, 0x6a, 0x61, 0x76, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x70, 0x68, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x68, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b,
	0x70, 0x68, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x72, 0x75, 0x62, 0x79, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x72,
	0x75, 0x62, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6d,
	0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x29, 0x0a,
	0x10, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x6d, 0x62, 0x72, 0x65, 0x6c, 0x6c,
	0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6a, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x63,
	0x73, 0x55, 0x72, 0x69, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x9d, 0x08, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x10,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x51, 0x4c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a,
	0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x26, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c,
	0x0a, 0x2c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x41, 0x0a, 0x1d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x41, 0x0a,
	0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x5c, 0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x49,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x76, 0x70, 0x63, 0x5f, 0x73,
	0x63, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x76, 0x70, 0x63, 0x53, 0x63, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x85, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0b, 0x43, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3b, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x44, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x1f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4d, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x7b, 0x0a, 0x0c, 0x44, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xf3, 0x04, 0x0a, 0x0e, 0x44, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x71,
	0x0a, 0x10, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x74,
	0x6e, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x1a, 0x43, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x4c, 0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x22, 0x6f, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x22, 0x7c, 0x0a, 0x09, 0x45,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x7f, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x5a,
	0x6f, 0x6e, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x22, 0x5f, 0x0a, 0x0a, 0x47, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x39, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x70, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xb4, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x04, 0x48, 0x74, 0x74,
	0x70, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x08,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x74, 0x74, 0x70, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22,
	0xc8, 0x02, 0x0a, 0x0c, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x13,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61,
	0x76, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0b, 0x4a, 0x77,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x64, 0x0a, 0x0f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x64, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x54, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x5a,
	0x6f, 0x6e, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x7f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x70, 0x65,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x65,
	0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72,
	0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x6a, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x94, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x47, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x50, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6f,
	0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xb3, 0x01,
	0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x67,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xd5, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x18,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x05, 0x4d, 0x69, 0x78, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x1b, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x6d, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x60, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x11, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x51, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4e,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79,
	0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x0f,
	0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a,
	0x0b, 0x50, 0x68, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22,
	0x3b, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xfb, 0x04, 0x0a,
	0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x64, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x6f, 0x64, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x54, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x63, 0x0a,
	0x10, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x69, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x22, 0x63, 0x0a, 0x0e, 0x50, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22,
	0xa0, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x50, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x51, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x45, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x95, 0x02, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x21, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1d, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x70, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x1c,
	0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0c,
	0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x61, 0x0a, 0x0c, 0x52, 0x75, 0x62, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x12, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x22, 0x55, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x63,
	0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a,
	0x0a, 0x22, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe2, 0x0e, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x04, 0x61, 0x70, 0x69, 0x73, 0x12, 0x59,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x44, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3d,
	0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x3b, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x44, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x6f, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x0d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x0a, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x70, 0x43, 0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x75, 0x72, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x72, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x85, 0x01,
	0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x22, 0x79,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa0, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x66, 0x0a, 0x17, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x14, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6e, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x05, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x8c, 0x03, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x60, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xdb, 0x01, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x1c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x2e, 0x0a, 0x12, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x27, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x26, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x5e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x70, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x79, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x73, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x60, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x22,
	0x72, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x55, 0x73, 0x65, 0x64, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x39, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x38, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x22, 0x45, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x3a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9e,
	0x01, 0x0a, 0x33, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22,
	0x50, 0x0a, 0x3a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x53, 0x0a, 0x39, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x32, 0xd8, 0x07, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x2a, 0x2f,
	0x2a, 0x7d, 0x3a, 0x61, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x3a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd1, 0x01, 0x0a, 0x20, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x32, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x3a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce, 0x01,
	0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x32, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x3a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa7,
	0x01, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xc2, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0xbb, 0x06,
	0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xbf, 0x01, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xd3, 0x01,
	0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x13,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xc5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbd, 0x01, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3a, 0x32, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xa5, 0x08, 0x0a, 0x1b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc7, 0x01, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x44, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x3a, 0x61, 0x64, 0x64, 0x3a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x74, 0x12, 0xd2, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xd0, 0x01,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12, 0x44, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x73,
	0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x12, 0xd0, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x12,
	0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x2c, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x32, 0x8b, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb2,
	0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e,
	0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x61, 0x64, 0x64,
	0x3a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64,
	0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x32, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0x1e, 0x0a, 0x1c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0xc8, 0x06, 0x0a, 0x24,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xdd, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x76, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12,
	0xa4, 0x02, 0x0a, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x32, 0x49, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x3a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x32, 0xb7, 0x04, 0x0a, 0x2c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xfc, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x6e, 0x73, 0x5a, 0x6f,
	0x6e, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x87, 0x02, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73,
	0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x6e, 0x73, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74,
	0x32, 0x9b, 0x07, 0x0a, 0x34, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb8, 0x02, 0x0a, 0x33, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x5d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x82, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x7c, 0x22, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70,
	0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x3a,
	0x33, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x82, 0x02, 0x0a, 0x33, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x5d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x47, 0x2a, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa2, 0x02, 0x0a, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x5c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x32, 0xbd,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x3a, 0x61, 0x64, 0x64, 0x3a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x55,
	0x5a, 0x53, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescData = file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDesc
)

func file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescData)
	})
	return file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDescData
}

var file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes = make([]protoimpl.MessageInfo, 157)
var file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_goTypes = []interface{}{
	(*AddDnsRecordSetMetadata)(nil),          // 0: google.cloud.servicenetworking.v1.AddDnsRecordSetMetadata
	(*AddDnsRecordSetRequest)(nil),           // 1: google.cloud.servicenetworking.v1.AddDnsRecordSetRequest
	(*AddDnsZoneMetadata)(nil),               // 2: google.cloud.servicenetworking.v1.AddDnsZoneMetadata
	(*AddDnsZoneRequest)(nil),                // 3: google.cloud.servicenetworking.v1.AddDnsZoneRequest
	(*AddDnsZoneResponse)(nil),               // 4: google.cloud.servicenetworking.v1.AddDnsZoneResponse
	(*AddRolesMetadata)(nil),                 // 5: google.cloud.servicenetworking.v1.AddRolesMetadata
	(*AddRolesRequest)(nil),                  // 6: google.cloud.servicenetworking.v1.AddRolesRequest
	(*AddRolesResponse)(nil),                 // 7: google.cloud.servicenetworking.v1.AddRolesResponse
	(*AddSubnetworkRequest)(nil),             // 8: google.cloud.servicenetworking.v1.AddSubnetworkRequest
	(*Api)(nil),                              // 9: google.cloud.servicenetworking.v1.Api
	(*AuthProvider)(nil),                     // 10: google.cloud.servicenetworking.v1.AuthProvider
	(*AuthRequirement)(nil),                  // 11: google.cloud.servicenetworking.v1.AuthRequirement
	(*Authentication)(nil),                   // 12: google.cloud.servicenetworking.v1.Authentication
	(*AuthenticationRule)(nil),               // 13: google.cloud.servicenetworking.v1.AuthenticationRule
	(*Backend)(nil),                          // 14: google.cloud.servicenetworking.v1.Backend
	(*BackendRule)(nil),                      // 15: google.cloud.servicenetworking.v1.BackendRule
	(*Billing)(nil),                          // 16: google.cloud.servicenetworking.v1.Billing
	(*BillingDestination)(nil),               // 17: google.cloud.servicenetworking.v1.BillingDestination
	(*CancelOperationRequest)(nil),           // 18: google.cloud.servicenetworking.v1.CancelOperationRequest
	(*ClientLibrarySettings)(nil),            // 19: google.cloud.servicenetworking.v1.ClientLibrarySettings
	(*CloudSQLConfig)(nil),                   // 20: google.cloud.servicenetworking.v1.CloudSQLConfig
	(*CommonLanguageSettings)(nil),           // 21: google.cloud.servicenetworking.v1.CommonLanguageSettings
	(*Connection)(nil),                       // 22: google.cloud.servicenetworking.v1.Connection
	(*ConsumerConfig)(nil),                   // 23: google.cloud.servicenetworking.v1.ConsumerConfig
	(*ConsumerConfigMetadata)(nil),           // 24: google.cloud.servicenetworking.v1.ConsumerConfigMetadata
	(*ConsumerProject)(nil),                  // 25: google.cloud.servicenetworking.v1.ConsumerProject
	(*Context)(nil),                          // 26: google.cloud.servicenetworking.v1.Context
	(*ContextRule)(nil),                      // 27: google.cloud.servicenetworking.v1.ContextRule
	(*Control)(nil),                          // 28: google.cloud.servicenetworking.v1.Control
	(*CppSettings)(nil),                      // 29: google.cloud.servicenetworking.v1.CppSettings
	(*CustomError)(nil),                      // 30: google.cloud.servicenetworking.v1.CustomError
	(*CustomErrorRule)(nil),                  // 31: google.cloud.servicenetworking.v1.CustomErrorRule
	(*CustomHttpPattern)(nil),                // 32: google.cloud.servicenetworking.v1.CustomHttpPattern
	(*DeleteConnectionMetadata)(nil),         // 33: google.cloud.servicenetworking.v1.DeleteConnectionMetadata
	(*DeleteConnectionRequest)(nil),          // 34: google.cloud.servicenetworking.v1.DeleteConnectionRequest
	(*DeletePeeredDnsDomainMetadata)(nil),    // 35: google.cloud.servicenetworking.v1.DeletePeeredDnsDomainMetadata
	(*DisableVpcServiceControlsRequest)(nil), // 36: google.cloud.servicenetworking.v1.DisableVpcServiceControlsRequest
	(*DnsRecordSet)(nil),                     // 37: google.cloud.servicenetworking.v1.DnsRecordSet
	(*DnsZone)(nil),                          // 38: google.cloud.servicenetworking.v1.DnsZone
	(*DnsZonePair)(nil),                      // 39: google.cloud.servicenetworking.v1.DnsZonePair
	(*Documentation)(nil),                    // 40: google.cloud.servicenetworking.v1.Documentation
	(*DocumentationRule)(nil),                // 41: google.cloud.servicenetworking.v1.DocumentationRule
	(*DotnetSettings)(nil),                   // 42: google.cloud.servicenetworking.v1.DotnetSettings
	(*Empty)(nil),                            // 43: google.cloud.servicenetworking.v1.Empty
	(*EnableVpcServiceControlsRequest)(nil),  // 44: google.cloud.servicenetworking.v1.EnableVpcServiceControlsRequest
	(*Endpoint)(nil),                         // 45: google.cloud.servicenetworking.v1.Endpoint
	(*Enum)(nil),                             // 46: google.cloud.servicenetworking.v1.Enum
	(*EnumValue)(nil),                        // 47: google.cloud.servicenetworking.v1.EnumValue
	(*Field)(nil),                            // 48: google.cloud.servicenetworking.v1.Field
	(*FieldPolicy)(nil),                      // 49: google.cloud.servicenetworking.v1.FieldPolicy
	(*GetDnsZoneResponse)(nil),               // 50: google.cloud.servicenetworking.v1.GetDnsZoneResponse
	(*GoSettings)(nil),                       // 51: google.cloud.servicenetworking.v1.GoSettings
	(*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange)(nil), // 52: google.cloud.servicenetworking.v1.GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
	(*GoogleCloudServicenetworkingV1BetaConnection)(nil),              // 53: google.cloud.servicenetworking.v1.GoogleCloudServicenetworkingV1betaConnection
	(*GoogleCloudServicenetworkingV1BetaSubnetwork)(nil),              // 54: google.cloud.servicenetworking.v1.GoogleCloudServicenetworkingV1betaSubnetwork
	(*Http)(nil),                                      // 55: google.cloud.servicenetworking.v1.Http
	(*HttpRule)(nil),                                  // 56: google.cloud.servicenetworking.v1.HttpRule
	(*JavaSettings)(nil),                              // 57: google.cloud.servicenetworking.v1.JavaSettings
	(*JwtLocation)(nil),                               // 58: google.cloud.servicenetworking.v1.JwtLocation
	(*LabelDescriptor)(nil),                           // 59: google.cloud.servicenetworking.v1.LabelDescriptor
	(*ListConnectionsResponse)(nil),                   // 60: google.cloud.servicenetworking.v1.ListConnectionsResponse
	(*ListDnsRecordSetsResponse)(nil),                 // 61: google.cloud.servicenetworking.v1.ListDnsRecordSetsResponse
	(*ListDnsZonesResponse)(nil),                      // 62: google.cloud.servicenetworking.v1.ListDnsZonesResponse
	(*ListOperationsResponse)(nil),                    // 63: google.cloud.servicenetworking.v1.ListOperationsResponse
	(*ListPeeredDnsDomainsResponse)(nil),              // 64: google.cloud.servicenetworking.v1.ListPeeredDnsDomainsResponse
	(*LogDescriptor)(nil),                             // 65: google.cloud.servicenetworking.v1.LogDescriptor
	(*Logging)(nil),                                   // 66: google.cloud.servicenetworking.v1.Logging
	(*LoggingDestination)(nil),                        // 67: google.cloud.servicenetworking.v1.LoggingDestination
	(*LongRunning)(nil),                               // 68: google.cloud.servicenetworking.v1.LongRunning
	(*Method)(nil),                                    // 69: google.cloud.servicenetworking.v1.Method
	(*MethodPolicy)(nil),                              // 70: google.cloud.servicenetworking.v1.MethodPolicy
	(*MethodSettings)(nil),                            // 71: google.cloud.servicenetworking.v1.MethodSettings
	(*MetricDescriptor)(nil),                          // 72: google.cloud.servicenetworking.v1.MetricDescriptor
	(*MetricDescriptorMetadata)(nil),                  // 73: google.cloud.servicenetworking.v1.MetricDescriptorMetadata
	(*MetricRule)(nil),                                // 74: google.cloud.servicenetworking.v1.MetricRule
	(*Mixin)(nil),                                     // 75: google.cloud.servicenetworking.v1.Mixin
	(*MonitoredResourceDescriptor)(nil),               // 76: google.cloud.servicenetworking.v1.MonitoredResourceDescriptor
	(*Monitoring)(nil),                                // 77: google.cloud.servicenetworking.v1.Monitoring
	(*MonitoringDestination)(nil),                     // 78: google.cloud.servicenetworking.v1.MonitoringDestination
	(*NodeSettings)(nil),                              // 79: google.cloud.servicenetworking.v1.NodeSettings
	(*OAuthRequirements)(nil),                         // 80: google.cloud.servicenetworking.v1.OAuthRequirements
	(*Operation)(nil),                                 // 81: google.cloud.servicenetworking.v1.Operation
	(*Option)(nil),                                    // 82: google.cloud.servicenetworking.v1.Option
	(*Page)(nil),                                      // 83: google.cloud.servicenetworking.v1.Page
	(*PartialDeleteConnectionMetadata)(nil),           // 84: google.cloud.servicenetworking.v1.PartialDeleteConnectionMetadata
	(*PeeredDnsDomain)(nil),                           // 85: google.cloud.servicenetworking.v1.PeeredDnsDomain
	(*PeeredDnsDomainMetadata)(nil),                   // 86: google.cloud.servicenetworking.v1.PeeredDnsDomainMetadata
	(*PhpSettings)(nil),                               // 87: google.cloud.servicenetworking.v1.PhpSettings
	(*PolicyBinding)(nil),                             // 88: google.cloud.servicenetworking.v1.PolicyBinding
	(*Publishing)(nil),                                // 89: google.cloud.servicenetworking.v1.Publishing
	(*PythonSettings)(nil),                            // 90: google.cloud.servicenetworking.v1.PythonSettings
	(*Quota)(nil),                                     // 91: google.cloud.servicenetworking.v1.Quota
	(*QuotaLimit)(nil),                                // 92: google.cloud.servicenetworking.v1.QuotaLimit
	(*Range)(nil),                                     // 93: google.cloud.servicenetworking.v1.Range
	(*RangeReservation)(nil),                          // 94: google.cloud.servicenetworking.v1.RangeReservation
	(*RemoveDnsRecordSetMetadata)(nil),                // 95: google.cloud.servicenetworking.v1.RemoveDnsRecordSetMetadata
	(*RemoveDnsRecordSetRequest)(nil),                 // 96: google.cloud.servicenetworking.v1.RemoveDnsRecordSetRequest
	(*RemoveDnsRecordSetResponse)(nil),                // 97: google.cloud.servicenetworking.v1.RemoveDnsRecordSetResponse
	(*RemoveDnsZoneMetadata)(nil),                     // 98: google.cloud.servicenetworking.v1.RemoveDnsZoneMetadata
	(*RemoveDnsZoneRequest)(nil),                      // 99: google.cloud.servicenetworking.v1.RemoveDnsZoneRequest
	(*RemoveDnsZoneResponse)(nil),                     // 100: google.cloud.servicenetworking.v1.RemoveDnsZoneResponse
	(*Route)(nil),                                     // 101: google.cloud.servicenetworking.v1.Route
	(*RubySettings)(nil),                              // 102: google.cloud.servicenetworking.v1.RubySettings
	(*SearchRangeRequest)(nil),                        // 103: google.cloud.servicenetworking.v1.SearchRangeRequest
	(*SecondaryIpRange)(nil),                          // 104: google.cloud.servicenetworking.v1.SecondaryIpRange
	(*SecondaryIpRangeSpec)(nil),                      // 105: google.cloud.servicenetworking.v1.SecondaryIpRangeSpec
	(*Service)(nil),                                   // 106: google.cloud.servicenetworking.v1.Service
	(*SourceContext)(nil),                             // 107: google.cloud.servicenetworking.v1.SourceContext
	(*SourceInfo)(nil),                                // 108: google.cloud.servicenetworking.v1.SourceInfo
	(*Status)(nil),                                    // 109: google.cloud.servicenetworking.v1.Status
	(*Subnetwork)(nil),                                // 110: google.cloud.servicenetworking.v1.Subnetwork
	(*SystemParameter)(nil),                           // 111: google.cloud.servicenetworking.v1.SystemParameter
	(*SystemParameterRule)(nil),                       // 112: google.cloud.servicenetworking.v1.SystemParameterRule
	(*SystemParameters)(nil),                          // 113: google.cloud.servicenetworking.v1.SystemParameters
	(*Type)(nil),                                      // 114: google.cloud.servicenetworking.v1.Type
	(*UpdateConsumerConfigRequest)(nil),               // 115: google.cloud.servicenetworking.v1.UpdateConsumerConfigRequest
	(*UpdateDnsRecordSetMetadata)(nil),                // 116: google.cloud.servicenetworking.v1.UpdateDnsRecordSetMetadata
	(*UpdateDnsRecordSetRequest)(nil),                 // 117: google.cloud.servicenetworking.v1.UpdateDnsRecordSetRequest
	(*Usage)(nil),                                     // 118: google.cloud.servicenetworking.v1.Usage
	(*UsageRule)(nil),                                 // 119: google.cloud.servicenetworking.v1.UsageRule
	(*ValidateConsumerConfigRequest)(nil),             // 120: google.cloud.servicenetworking.v1.ValidateConsumerConfigRequest
	(*ValidateConsumerConfigResponse)(nil),            // 121: google.cloud.servicenetworking.v1.ValidateConsumerConfigResponse
	(*VpcServiceControls)(nil),                        // 122: google.cloud.servicenetworking.v1.VpcServiceControls
	(*AddSubnetworkServiceRequest)(nil),               // 123: google.cloud.servicenetworking.v1.AddSubnetworkServiceRequest
	(*DisableVpcServiceControlsServiceRequest)(nil),   // 124: google.cloud.servicenetworking.v1.DisableVpcServiceControlsServiceRequest
	(*EnableVpcServiceControlsServiceRequest)(nil),    // 125: google.cloud.servicenetworking.v1.EnableVpcServiceControlsServiceRequest
	(*SearchRangeServiceRequest)(nil),                 // 126: google.cloud.servicenetworking.v1.SearchRangeServiceRequest
	(*ValidateServiceRequest)(nil),                    // 127: google.cloud.servicenetworking.v1.ValidateServiceRequest
	(*CreateServicesConnectionRequest)(nil),           // 128: google.cloud.servicenetworking.v1.CreateServicesConnectionRequest
	(*DeleteConnectionServicesConnectionRequest)(nil), // 129: google.cloud.servicenetworking.v1.DeleteConnectionServicesConnectionRequest
	(*ListServicesConnectionsRequest)(nil),            // 130: google.cloud.servicenetworking.v1.ListServicesConnectionsRequest
	(*PatchServicesConnectionRequest)(nil),            // 131: google.cloud.servicenetworking.v1.PatchServicesConnectionRequest
	(*AddServicesDnsRecordSetRequest)(nil),            // 132: google.cloud.servicenetworking.v1.AddServicesDnsRecordSetRequest
	(*GetServicesDnsRecordSetRequest)(nil),            // 133: google.cloud.servicenetworking.v1.GetServicesDnsRecordSetRequest
	(*ListServicesDnsRecordSetsRequest)(nil),          // 134: google.cloud.servicenetworking.v1.ListServicesDnsRecordSetsRequest
	(*DeleteServicesDnsRecordSetRequest)(nil),         // 135: google.cloud.servicenetworking.v1.DeleteServicesDnsRecordSetRequest
	(*UpdateServicesDnsRecordSetRequest)(nil),         // 136: google.cloud.servicenetworking.v1.UpdateServicesDnsRecordSetRequest
	(*AddServicesDnsZoneRequest)(nil),                 // 137: google.cloud.servicenetworking.v1.AddServicesDnsZoneRequest
	(*DeleteServicesDnsZoneRequest)(nil),              // 138: google.cloud.servicenetworking.v1.DeleteServicesDnsZoneRequest
	(*GetServicesProjectsGlobalNetworkRequest)(nil),   // 139: google.cloud.servicenetworking.v1.GetServicesProjectsGlobalNetworkRequest
	(*GetVpcServiceControlsServicesProjectsGlobalNetworkRequest)(nil),  // 140: google.cloud.servicenetworking.v1.GetVpcServiceControlsServicesProjectsGlobalNetworkRequest
	(*UpdateConsumerConfigServicesProjectsGlobalNetworkRequest)(nil),   // 141: google.cloud.servicenetworking.v1.UpdateConsumerConfigServicesProjectsGlobalNetworkRequest
	(*GetServicesProjectsGlobalNetworksDnsZoneRequest)(nil),            // 142: google.cloud.servicenetworking.v1.GetServicesProjectsGlobalNetworksDnsZoneRequest
	(*ListServicesProjectsGlobalNetworksDnsZonesRequest)(nil),          // 143: google.cloud.servicenetworking.v1.ListServicesProjectsGlobalNetworksDnsZonesRequest
	(*CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest)(nil), // 144: google.cloud.servicenetworking.v1.CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	(*DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest)(nil), // 145: google.cloud.servicenetworking.v1.DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	(*ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest)(nil),  // 146: google.cloud.servicenetworking.v1.ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest
	(*AddServicesRoleRequest)(nil),                                     // 147: google.cloud.servicenetworking.v1.AddServicesRoleRequest
	nil,                                                                // 148: google.cloud.servicenetworking.v1.BackendRule.OverridesByRequestProtocolEntry
	nil,                                                                // 149: google.cloud.servicenetworking.v1.DotnetSettings.RenamedResourcesEntry
	nil,                                                                // 150: google.cloud.servicenetworking.v1.DotnetSettings.RenamedServicesEntry
	nil,                                                                // 151: google.cloud.servicenetworking.v1.JavaSettings.ServiceClassNamesEntry
	nil,                                                                // 152: google.cloud.servicenetworking.v1.MetricRule.MetricCostsEntry
	nil,                                                                // 153: google.cloud.servicenetworking.v1.Operation.MetadataEntry
	nil,                                                                // 154: google.cloud.servicenetworking.v1.Operation.ResponseEntry
	nil,                                                                // 155: google.cloud.servicenetworking.v1.Option.ValueEntry
	nil,                                                                // 156: google.cloud.servicenetworking.v1.QuotaLimit.ValuesEntry
	(*duration.Duration)(nil),                                          // 157: google.protobuf.Duration
	(*longrunningpb.Operation)(nil),                                    // 158: google.longrunning.Operation
	(*any1.Any)(nil),                                                   // 159: google.protobuf.Any
}
var file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_depIdxs = []int32{
	37,  // 0: google.cloud.servicenetworking.v1.AddDnsRecordSetRequest.dns_record_set:type_name -> google.cloud.servicenetworking.v1.DnsRecordSet
	38,  // 1: google.cloud.servicenetworking.v1.AddDnsZoneResponse.consumer_peering_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	38,  // 2: google.cloud.servicenetworking.v1.AddDnsZoneResponse.producer_private_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	88,  // 3: google.cloud.servicenetworking.v1.AddRolesRequest.policy_binding:type_name -> google.cloud.servicenetworking.v1.PolicyBinding
	88,  // 4: google.cloud.servicenetworking.v1.AddRolesResponse.policy_binding:type_name -> google.cloud.servicenetworking.v1.PolicyBinding
	157, // 5: google.cloud.servicenetworking.v1.AddSubnetworkRequest.compute_idempotency_window:type_name -> google.protobuf.Duration
	105, // 6: google.cloud.servicenetworking.v1.AddSubnetworkRequest.secondary_ip_range_specs:type_name -> google.cloud.servicenetworking.v1.SecondaryIpRangeSpec
	69,  // 7: google.cloud.servicenetworking.v1.Api.methods:type_name -> google.cloud.servicenetworking.v1.Method
	75,  // 8: google.cloud.servicenetworking.v1.Api.mixins:type_name -> google.cloud.servicenetworking.v1.Mixin
	82,  // 9: google.cloud.servicenetworking.v1.Api.options:type_name -> google.cloud.servicenetworking.v1.Option
	107, // 10: google.cloud.servicenetworking.v1.Api.source_context:type_name -> google.cloud.servicenetworking.v1.SourceContext
	58,  // 11: google.cloud.servicenetworking.v1.AuthProvider.jwt_locations:type_name -> google.cloud.servicenetworking.v1.JwtLocation
	10,  // 12: google.cloud.servicenetworking.v1.Authentication.providers:type_name -> google.cloud.servicenetworking.v1.AuthProvider
	13,  // 13: google.cloud.servicenetworking.v1.Authentication.rules:type_name -> google.cloud.servicenetworking.v1.AuthenticationRule
	80,  // 14: google.cloud.servicenetworking.v1.AuthenticationRule.oauth:type_name -> google.cloud.servicenetworking.v1.OAuthRequirements
	11,  // 15: google.cloud.servicenetworking.v1.AuthenticationRule.requirements:type_name -> google.cloud.servicenetworking.v1.AuthRequirement
	15,  // 16: google.cloud.servicenetworking.v1.Backend.rules:type_name -> google.cloud.servicenetworking.v1.BackendRule
	148, // 17: google.cloud.servicenetworking.v1.BackendRule.overrides_by_request_protocol:type_name -> google.cloud.servicenetworking.v1.BackendRule.OverridesByRequestProtocolEntry
	17,  // 18: google.cloud.servicenetworking.v1.Billing.consumer_destinations:type_name -> google.cloud.servicenetworking.v1.BillingDestination
	29,  // 19: google.cloud.servicenetworking.v1.ClientLibrarySettings.cpp_settings:type_name -> google.cloud.servicenetworking.v1.CppSettings
	42,  // 20: google.cloud.servicenetworking.v1.ClientLibrarySettings.dotnet_settings:type_name -> google.cloud.servicenetworking.v1.DotnetSettings
	51,  // 21: google.cloud.servicenetworking.v1.ClientLibrarySettings.go_settings:type_name -> google.cloud.servicenetworking.v1.GoSettings
	57,  // 22: google.cloud.servicenetworking.v1.ClientLibrarySettings.java_settings:type_name -> google.cloud.servicenetworking.v1.JavaSettings
	79,  // 23: google.cloud.servicenetworking.v1.ClientLibrarySettings.node_settings:type_name -> google.cloud.servicenetworking.v1.NodeSettings
	87,  // 24: google.cloud.servicenetworking.v1.ClientLibrarySettings.php_settings:type_name -> google.cloud.servicenetworking.v1.PhpSettings
	90,  // 25: google.cloud.servicenetworking.v1.ClientLibrarySettings.python_settings:type_name -> google.cloud.servicenetworking.v1.PythonSettings
	102, // 26: google.cloud.servicenetworking.v1.ClientLibrarySettings.ruby_settings:type_name -> google.cloud.servicenetworking.v1.RubySettings
	20,  // 27: google.cloud.servicenetworking.v1.ConsumerConfig.cloudsql_configs:type_name -> google.cloud.servicenetworking.v1.CloudSQLConfig
	52,  // 28: google.cloud.servicenetworking.v1.ConsumerConfig.reserved_ranges:type_name -> google.cloud.servicenetworking.v1.GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
	27,  // 29: google.cloud.servicenetworking.v1.Context.rules:type_name -> google.cloud.servicenetworking.v1.ContextRule
	70,  // 30: google.cloud.servicenetworking.v1.Control.method_policies:type_name -> google.cloud.servicenetworking.v1.MethodPolicy
	21,  // 31: google.cloud.servicenetworking.v1.CppSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	31,  // 32: google.cloud.servicenetworking.v1.CustomError.rules:type_name -> google.cloud.servicenetworking.v1.CustomErrorRule
	157, // 33: google.cloud.servicenetworking.v1.DnsRecordSet.ttl:type_name -> google.protobuf.Duration
	38,  // 34: google.cloud.servicenetworking.v1.DnsZonePair.consumer_peering_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	38,  // 35: google.cloud.servicenetworking.v1.DnsZonePair.producer_private_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	83,  // 36: google.cloud.servicenetworking.v1.Documentation.pages:type_name -> google.cloud.servicenetworking.v1.Page
	41,  // 37: google.cloud.servicenetworking.v1.Documentation.rules:type_name -> google.cloud.servicenetworking.v1.DocumentationRule
	83,  // 38: google.cloud.servicenetworking.v1.Documentation.section_overrides:type_name -> google.cloud.servicenetworking.v1.Page
	21,  // 39: google.cloud.servicenetworking.v1.DotnetSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	149, // 40: google.cloud.servicenetworking.v1.DotnetSettings.renamed_resources:type_name -> google.cloud.servicenetworking.v1.DotnetSettings.RenamedResourcesEntry
	150, // 41: google.cloud.servicenetworking.v1.DotnetSettings.renamed_services:type_name -> google.cloud.servicenetworking.v1.DotnetSettings.RenamedServicesEntry
	47,  // 42: google.cloud.servicenetworking.v1.Enum.enumvalue:type_name -> google.cloud.servicenetworking.v1.EnumValue
	82,  // 43: google.cloud.servicenetworking.v1.Enum.options:type_name -> google.cloud.servicenetworking.v1.Option
	107, // 44: google.cloud.servicenetworking.v1.Enum.source_context:type_name -> google.cloud.servicenetworking.v1.SourceContext
	82,  // 45: google.cloud.servicenetworking.v1.EnumValue.options:type_name -> google.cloud.servicenetworking.v1.Option
	82,  // 46: google.cloud.servicenetworking.v1.Field.options:type_name -> google.cloud.servicenetworking.v1.Option
	38,  // 47: google.cloud.servicenetworking.v1.GetDnsZoneResponse.consumer_peering_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	38,  // 48: google.cloud.servicenetworking.v1.GetDnsZoneResponse.producer_private_zone:type_name -> google.cloud.servicenetworking.v1.DnsZone
	21,  // 49: google.cloud.servicenetworking.v1.GoSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	56,  // 50: google.cloud.servicenetworking.v1.Http.rules:type_name -> google.cloud.servicenetworking.v1.HttpRule
	56,  // 51: google.cloud.servicenetworking.v1.HttpRule.additional_bindings:type_name -> google.cloud.servicenetworking.v1.HttpRule
	32,  // 52: google.cloud.servicenetworking.v1.HttpRule.custom:type_name -> google.cloud.servicenetworking.v1.CustomHttpPattern
	21,  // 53: google.cloud.servicenetworking.v1.JavaSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	151, // 54: google.cloud.servicenetworking.v1.JavaSettings.service_class_names:type_name -> google.cloud.servicenetworking.v1.JavaSettings.ServiceClassNamesEntry
	22,  // 55: google.cloud.servicenetworking.v1.ListConnectionsResponse.connections:type_name -> google.cloud.servicenetworking.v1.Connection
	37,  // 56: google.cloud.servicenetworking.v1.ListDnsRecordSetsResponse.dns_record_sets:type_name -> google.cloud.servicenetworking.v1.DnsRecordSet
	39,  // 57: google.cloud.servicenetworking.v1.ListDnsZonesResponse.dns_zone_pairs:type_name -> google.cloud.servicenetworking.v1.DnsZonePair
	158, // 58: google.cloud.servicenetworking.v1.ListOperationsResponse.operations:type_name -> google.longrunning.Operation
	85,  // 59: google.cloud.servicenetworking.v1.ListPeeredDnsDomainsResponse.peered_dns_domains:type_name -> google.cloud.servicenetworking.v1.PeeredDnsDomain
	59,  // 60: google.cloud.servicenetworking.v1.LogDescriptor.labels:type_name -> google.cloud.servicenetworking.v1.LabelDescriptor
	67,  // 61: google.cloud.servicenetworking.v1.Logging.consumer_destinations:type_name -> google.cloud.servicenetworking.v1.LoggingDestination
	67,  // 62: google.cloud.servicenetworking.v1.Logging.producer_destinations:type_name -> google.cloud.servicenetworking.v1.LoggingDestination
	157, // 63: google.cloud.servicenetworking.v1.LongRunning.initial_poll_delay:type_name -> google.protobuf.Duration
	157, // 64: google.cloud.servicenetworking.v1.LongRunning.max_poll_delay:type_name -> google.protobuf.Duration
	157, // 65: google.cloud.servicenetworking.v1.LongRunning.total_poll_timeout:type_name -> google.protobuf.Duration
	82,  // 66: google.cloud.servicenetworking.v1.Method.options:type_name -> google.cloud.servicenetworking.v1.Option
	49,  // 67: google.cloud.servicenetworking.v1.MethodPolicy.request_policies:type_name -> google.cloud.servicenetworking.v1.FieldPolicy
	68,  // 68: google.cloud.servicenetworking.v1.MethodSettings.long_running:type_name -> google.cloud.servicenetworking.v1.LongRunning
	59,  // 69: google.cloud.servicenetworking.v1.MetricDescriptor.labels:type_name -> google.cloud.servicenetworking.v1.LabelDescriptor
	73,  // 70: google.cloud.servicenetworking.v1.MetricDescriptor.metadata:type_name -> google.cloud.servicenetworking.v1.MetricDescriptorMetadata
	157, // 71: google.cloud.servicenetworking.v1.MetricDescriptorMetadata.ingest_delay:type_name -> google.protobuf.Duration
	157, // 72: google.cloud.servicenetworking.v1.MetricDescriptorMetadata.sample_period:type_name -> google.protobuf.Duration
	152, // 73: google.cloud.servicenetworking.v1.MetricRule.metric_costs:type_name -> google.cloud.servicenetworking.v1.MetricRule.MetricCostsEntry
	59,  // 74: google.cloud.servicenetworking.v1.MonitoredResourceDescriptor.labels:type_name -> google.cloud.servicenetworking.v1.LabelDescriptor
	78,  // 75: google.cloud.servicenetworking.v1.Monitoring.consumer_destinations:type_name -> google.cloud.servicenetworking.v1.MonitoringDestination
	78,  // 76: google.cloud.servicenetworking.v1.Monitoring.producer_destinations:type_name -> google.cloud.servicenetworking.v1.MonitoringDestination
	21,  // 77: google.cloud.servicenetworking.v1.NodeSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	109, // 78: google.cloud.servicenetworking.v1.Operation.error:type_name -> google.cloud.servicenetworking.v1.Status
	153, // 79: google.cloud.servicenetworking.v1.Operation.metadata:type_name -> google.cloud.servicenetworking.v1.Operation.MetadataEntry
	154, // 80: google.cloud.servicenetworking.v1.Operation.response:type_name -> google.cloud.servicenetworking.v1.Operation.ResponseEntry
	155, // 81: google.cloud.servicenetworking.v1.Option.value:type_name -> google.cloud.servicenetworking.v1.Option.ValueEntry
	83,  // 82: google.cloud.servicenetworking.v1.Page.subpages:type_name -> google.cloud.servicenetworking.v1.Page
	21,  // 83: google.cloud.servicenetworking.v1.PhpSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	19,  // 84: google.cloud.servicenetworking.v1.Publishing.library_settings:type_name -> google.cloud.servicenetworking.v1.ClientLibrarySettings
	71,  // 85: google.cloud.servicenetworking.v1.Publishing.method_settings:type_name -> google.cloud.servicenetworking.v1.MethodSettings
	21,  // 86: google.cloud.servicenetworking.v1.PythonSettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	92,  // 87: google.cloud.servicenetworking.v1.Quota.limits:type_name -> google.cloud.servicenetworking.v1.QuotaLimit
	74,  // 88: google.cloud.servicenetworking.v1.Quota.metric_rules:type_name -> google.cloud.servicenetworking.v1.MetricRule
	156, // 89: google.cloud.servicenetworking.v1.QuotaLimit.values:type_name -> google.cloud.servicenetworking.v1.QuotaLimit.ValuesEntry
	110, // 90: google.cloud.servicenetworking.v1.RangeReservation.subnetwork_candidates:type_name -> google.cloud.servicenetworking.v1.Subnetwork
	37,  // 91: google.cloud.servicenetworking.v1.RemoveDnsRecordSetRequest.dns_record_set:type_name -> google.cloud.servicenetworking.v1.DnsRecordSet
	21,  // 92: google.cloud.servicenetworking.v1.RubySettings.common:type_name -> google.cloud.servicenetworking.v1.CommonLanguageSettings
	9,   // 93: google.cloud.servicenetworking.v1.Service.apis:type_name -> google.cloud.servicenetworking.v1.Api
	12,  // 94: google.cloud.servicenetworking.v1.Service.authentication:type_name -> google.cloud.servicenetworking.v1.Authentication
	14,  // 95: google.cloud.servicenetworking.v1.Service.backend:type_name -> google.cloud.servicenetworking.v1.Backend
	16,  // 96: google.cloud.servicenetworking.v1.Service.billing:type_name -> google.cloud.servicenetworking.v1.Billing
	26,  // 97: google.cloud.servicenetworking.v1.Service.context:type_name -> google.cloud.servicenetworking.v1.Context
	28,  // 98: google.cloud.servicenetworking.v1.Service.control:type_name -> google.cloud.servicenetworking.v1.Control
	30,  // 99: google.cloud.servicenetworking.v1.Service.custom_error:type_name -> google.cloud.servicenetworking.v1.CustomError
	40,  // 100: google.cloud.servicenetworking.v1.Service.documentation:type_name -> google.cloud.servicenetworking.v1.Documentation
	45,  // 101: google.cloud.servicenetworking.v1.Service.endpoints:type_name -> google.cloud.servicenetworking.v1.Endpoint
	46,  // 102: google.cloud.servicenetworking.v1.Service.enums:type_name -> google.cloud.servicenetworking.v1.Enum
	55,  // 103: google.cloud.servicenetworking.v1.Service.http:type_name -> google.cloud.servicenetworking.v1.Http
	66,  // 104: google.cloud.servicenetworking.v1.Service.logging:type_name -> google.cloud.servicenetworking.v1.Logging
	65,  // 105: google.cloud.servicenetworking.v1.Service.logs:type_name -> google.cloud.servicenetworking.v1.LogDescriptor
	72,  // 106: google.cloud.servicenetworking.v1.Service.metrics:type_name -> google.cloud.servicenetworking.v1.MetricDescriptor
	76,  // 107: google.cloud.servicenetworking.v1.Service.monitored_resources:type_name -> google.cloud.servicenetworking.v1.MonitoredResourceDescriptor
	77,  // 108: google.cloud.servicenetworking.v1.Service.monitoring:type_name -> google.cloud.servicenetworking.v1.Monitoring
	89,  // 109: google.cloud.servicenetworking.v1.Service.publishing:type_name -> google.cloud.servicenetworking.v1.Publishing
	91,  // 110: google.cloud.servicenetworking.v1.Service.quota:type_name -> google.cloud.servicenetworking.v1.Quota
	108, // 111: google.cloud.servicenetworking.v1.Service.source_info:type_name -> google.cloud.servicenetworking.v1.SourceInfo
	113, // 112: google.cloud.servicenetworking.v1.Service.system_parameters:type_name -> google.cloud.servicenetworking.v1.SystemParameters
	114, // 113: google.cloud.servicenetworking.v1.Service.system_types:type_name -> google.cloud.servicenetworking.v1.Type
	114, // 114: google.cloud.servicenetworking.v1.Service.types:type_name -> google.cloud.servicenetworking.v1.Type
	118, // 115: google.cloud.servicenetworking.v1.Service.usage:type_name -> google.cloud.servicenetworking.v1.Usage
	159, // 116: google.cloud.servicenetworking.v1.SourceInfo.source_files:type_name -> google.protobuf.Any
	159, // 117: google.cloud.servicenetworking.v1.Status.details:type_name -> google.protobuf.Any
	104, // 118: google.cloud.servicenetworking.v1.Subnetwork.secondary_ip_ranges:type_name -> google.cloud.servicenetworking.v1.SecondaryIpRange
	111, // 119: google.cloud.servicenetworking.v1.SystemParameterRule.parameters:type_name -> google.cloud.servicenetworking.v1.SystemParameter
	112, // 120: google.cloud.servicenetworking.v1.SystemParameters.rules:type_name -> google.cloud.servicenetworking.v1.SystemParameterRule
	48,  // 121: google.cloud.servicenetworking.v1.Type.fields:type_name -> google.cloud.servicenetworking.v1.Field
	82,  // 122: google.cloud.servicenetworking.v1.Type.options:type_name -> google.cloud.servicenetworking.v1.Option
	107, // 123: google.cloud.servicenetworking.v1.Type.source_context:type_name -> google.cloud.servicenetworking.v1.SourceContext
	23,  // 124: google.cloud.servicenetworking.v1.UpdateConsumerConfigRequest.consumer_config:type_name -> google.cloud.servicenetworking.v1.ConsumerConfig
	37,  // 125: google.cloud.servicenetworking.v1.UpdateDnsRecordSetRequest.existing_dns_record_set:type_name -> google.cloud.servicenetworking.v1.DnsRecordSet
	37,  // 126: google.cloud.servicenetworking.v1.UpdateDnsRecordSetRequest.new_dns_record_set:type_name -> google.cloud.servicenetworking.v1.DnsRecordSet
	119, // 127: google.cloud.servicenetworking.v1.Usage.rules:type_name -> google.cloud.servicenetworking.v1.UsageRule
	25,  // 128: google.cloud.servicenetworking.v1.ValidateConsumerConfigRequest.consumer_project:type_name -> google.cloud.servicenetworking.v1.ConsumerProject
	94,  // 129: google.cloud.servicenetworking.v1.ValidateConsumerConfigRequest.range_reservation:type_name -> google.cloud.servicenetworking.v1.RangeReservation
	110, // 130: google.cloud.servicenetworking.v1.ValidateConsumerConfigResponse.existing_subnetwork_candidates:type_name -> google.cloud.servicenetworking.v1.Subnetwork
	8,   // 131: google.cloud.servicenetworking.v1.AddSubnetworkServiceRequest.service:type_name -> google.cloud.servicenetworking.v1.AddSubnetworkRequest
	36,  // 132: google.cloud.servicenetworking.v1.DisableVpcServiceControlsServiceRequest.service:type_name -> google.cloud.servicenetworking.v1.DisableVpcServiceControlsRequest
	44,  // 133: google.cloud.servicenetworking.v1.EnableVpcServiceControlsServiceRequest.service:type_name -> google.cloud.servicenetworking.v1.EnableVpcServiceControlsRequest
	103, // 134: google.cloud.servicenetworking.v1.SearchRangeServiceRequest.service:type_name -> google.cloud.servicenetworking.v1.SearchRangeRequest
	120, // 135: google.cloud.servicenetworking.v1.ValidateServiceRequest.service:type_name -> google.cloud.servicenetworking.v1.ValidateConsumerConfigRequest
	22,  // 136: google.cloud.servicenetworking.v1.CreateServicesConnectionRequest.services_connection:type_name -> google.cloud.servicenetworking.v1.Connection
	34,  // 137: google.cloud.servicenetworking.v1.DeleteConnectionServicesConnectionRequest.services_connection:type_name -> google.cloud.servicenetworking.v1.DeleteConnectionRequest
	22,  // 138: google.cloud.servicenetworking.v1.PatchServicesConnectionRequest.services_connection:type_name -> google.cloud.servicenetworking.v1.Connection
	1,   // 139: google.cloud.servicenetworking.v1.AddServicesDnsRecordSetRequest.services_dns_record_set:type_name -> google.cloud.servicenetworking.v1.AddDnsRecordSetRequest
	96,  // 140: google.cloud.servicenetworking.v1.DeleteServicesDnsRecordSetRequest.services_dns_record_set:type_name -> google.cloud.servicenetworking.v1.RemoveDnsRecordSetRequest
	117, // 141: google.cloud.servicenetworking.v1.UpdateServicesDnsRecordSetRequest.services_dns_record_set:type_name -> google.cloud.servicenetworking.v1.UpdateDnsRecordSetRequest
	3,   // 142: google.cloud.servicenetworking.v1.AddServicesDnsZoneRequest.services_dns_zone:type_name -> google.cloud.servicenetworking.v1.AddDnsZoneRequest
	99,  // 143: google.cloud.servicenetworking.v1.DeleteServicesDnsZoneRequest.services_dns_zone:type_name -> google.cloud.servicenetworking.v1.RemoveDnsZoneRequest
	115, // 144: google.cloud.servicenetworking.v1.UpdateConsumerConfigServicesProjectsGlobalNetworkRequest.services_projects_global_network:type_name -> google.cloud.servicenetworking.v1.UpdateConsumerConfigRequest
	85,  // 145: google.cloud.servicenetworking.v1.CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest.services_projects_global_networks_peered_dns_domain:type_name -> google.cloud.servicenetworking.v1.PeeredDnsDomain
	6,   // 146: google.cloud.servicenetworking.v1.AddServicesRoleRequest.services_role:type_name -> google.cloud.servicenetworking.v1.AddRolesRequest
	15,  // 147: google.cloud.servicenetworking.v1.BackendRule.OverridesByRequestProtocolEntry.value:type_name -> google.cloud.servicenetworking.v1.BackendRule
	159, // 148: google.cloud.servicenetworking.v1.Operation.MetadataEntry.value:type_name -> google.protobuf.Any
	159, // 149: google.cloud.servicenetworking.v1.Operation.ResponseEntry.value:type_name -> google.protobuf.Any
	159, // 150: google.cloud.servicenetworking.v1.Option.ValueEntry.value:type_name -> google.protobuf.Any
	123, // 151: google.cloud.servicenetworking.v1.ServicesServer.AddSubnetworkService:input_type -> google.cloud.servicenetworking.v1.AddSubnetworkServiceRequest
	124, // 152: google.cloud.servicenetworking.v1.ServicesServer.DisableVpcServiceControlsService:input_type -> google.cloud.servicenetworking.v1.DisableVpcServiceControlsServiceRequest
	125, // 153: google.cloud.servicenetworking.v1.ServicesServer.EnableVpcServiceControlsService:input_type -> google.cloud.servicenetworking.v1.EnableVpcServiceControlsServiceRequest
	126, // 154: google.cloud.servicenetworking.v1.ServicesServer.SearchRangeService:input_type -> google.cloud.servicenetworking.v1.SearchRangeServiceRequest
	127, // 155: google.cloud.servicenetworking.v1.ServicesServer.ValidateService:input_type -> google.cloud.servicenetworking.v1.ValidateServiceRequest
	128, // 156: google.cloud.servicenetworking.v1.ServicesConnectionsServer.CreateServicesConnection:input_type -> google.cloud.servicenetworking.v1.CreateServicesConnectionRequest
	129, // 157: google.cloud.servicenetworking.v1.ServicesConnectionsServer.DeleteConnectionServicesConnection:input_type -> google.cloud.servicenetworking.v1.DeleteConnectionServicesConnectionRequest
	130, // 158: google.cloud.servicenetworking.v1.ServicesConnectionsServer.ListServicesConnections:input_type -> google.cloud.servicenetworking.v1.ListServicesConnectionsRequest
	131, // 159: google.cloud.servicenetworking.v1.ServicesConnectionsServer.PatchServicesConnection:input_type -> google.cloud.servicenetworking.v1.PatchServicesConnectionRequest
	132, // 160: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.AddServicesDnsRecordSet:input_type -> google.cloud.servicenetworking.v1.AddServicesDnsRecordSetRequest
	133, // 161: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.GetServicesDnsRecordSet:input_type -> google.cloud.servicenetworking.v1.GetServicesDnsRecordSetRequest
	134, // 162: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.ListServicesDnsRecordSets:input_type -> google.cloud.servicenetworking.v1.ListServicesDnsRecordSetsRequest
	135, // 163: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.DeleteServicesDnsRecordSet:input_type -> google.cloud.servicenetworking.v1.DeleteServicesDnsRecordSetRequest
	136, // 164: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.UpdateServicesDnsRecordSet:input_type -> google.cloud.servicenetworking.v1.UpdateServicesDnsRecordSetRequest
	137, // 165: google.cloud.servicenetworking.v1.ServicesDnsZonesServer.AddServicesDnsZone:input_type -> google.cloud.servicenetworking.v1.AddServicesDnsZoneRequest
	138, // 166: google.cloud.servicenetworking.v1.ServicesDnsZonesServer.DeleteServicesDnsZone:input_type -> google.cloud.servicenetworking.v1.DeleteServicesDnsZoneRequest
	139, // 167: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.GetServicesProjectsGlobalNetwork:input_type -> google.cloud.servicenetworking.v1.GetServicesProjectsGlobalNetworkRequest
	140, // 168: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.GetVpcServiceControlsServicesProjectsGlobalNetwork:input_type -> google.cloud.servicenetworking.v1.GetVpcServiceControlsServicesProjectsGlobalNetworkRequest
	141, // 169: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.UpdateConsumerConfigServicesProjectsGlobalNetwork:input_type -> google.cloud.servicenetworking.v1.UpdateConsumerConfigServicesProjectsGlobalNetworkRequest
	142, // 170: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer.GetServicesProjectsGlobalNetworksDnsZone:input_type -> google.cloud.servicenetworking.v1.GetServicesProjectsGlobalNetworksDnsZoneRequest
	143, // 171: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer.ListServicesProjectsGlobalNetworksDnsZones:input_type -> google.cloud.servicenetworking.v1.ListServicesProjectsGlobalNetworksDnsZonesRequest
	144, // 172: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.CreateServicesProjectsGlobalNetworksPeeredDnsDomain:input_type -> google.cloud.servicenetworking.v1.CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	145, // 173: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.DeleteServicesProjectsGlobalNetworksPeeredDnsDomain:input_type -> google.cloud.servicenetworking.v1.DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	146, // 174: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.ListServicesProjectsGlobalNetworksPeeredDnsDomains:input_type -> google.cloud.servicenetworking.v1.ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest
	147, // 175: google.cloud.servicenetworking.v1.ServicesRolesServer.AddServicesRole:input_type -> google.cloud.servicenetworking.v1.AddServicesRoleRequest
	158, // 176: google.cloud.servicenetworking.v1.ServicesServer.AddSubnetworkService:output_type -> google.longrunning.Operation
	158, // 177: google.cloud.servicenetworking.v1.ServicesServer.DisableVpcServiceControlsService:output_type -> google.longrunning.Operation
	158, // 178: google.cloud.servicenetworking.v1.ServicesServer.EnableVpcServiceControlsService:output_type -> google.longrunning.Operation
	158, // 179: google.cloud.servicenetworking.v1.ServicesServer.SearchRangeService:output_type -> google.longrunning.Operation
	121, // 180: google.cloud.servicenetworking.v1.ServicesServer.ValidateService:output_type -> google.cloud.servicenetworking.v1.ValidateConsumerConfigResponse
	158, // 181: google.cloud.servicenetworking.v1.ServicesConnectionsServer.CreateServicesConnection:output_type -> google.longrunning.Operation
	158, // 182: google.cloud.servicenetworking.v1.ServicesConnectionsServer.DeleteConnectionServicesConnection:output_type -> google.longrunning.Operation
	60,  // 183: google.cloud.servicenetworking.v1.ServicesConnectionsServer.ListServicesConnections:output_type -> google.cloud.servicenetworking.v1.ListConnectionsResponse
	158, // 184: google.cloud.servicenetworking.v1.ServicesConnectionsServer.PatchServicesConnection:output_type -> google.longrunning.Operation
	158, // 185: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.AddServicesDnsRecordSet:output_type -> google.longrunning.Operation
	37,  // 186: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.GetServicesDnsRecordSet:output_type -> google.cloud.servicenetworking.v1.DnsRecordSet
	61,  // 187: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.ListServicesDnsRecordSets:output_type -> google.cloud.servicenetworking.v1.ListDnsRecordSetsResponse
	158, // 188: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.DeleteServicesDnsRecordSet:output_type -> google.longrunning.Operation
	158, // 189: google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer.UpdateServicesDnsRecordSet:output_type -> google.longrunning.Operation
	158, // 190: google.cloud.servicenetworking.v1.ServicesDnsZonesServer.AddServicesDnsZone:output_type -> google.longrunning.Operation
	158, // 191: google.cloud.servicenetworking.v1.ServicesDnsZonesServer.DeleteServicesDnsZone:output_type -> google.longrunning.Operation
	23,  // 192: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.GetServicesProjectsGlobalNetwork:output_type -> google.cloud.servicenetworking.v1.ConsumerConfig
	122, // 193: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.GetVpcServiceControlsServicesProjectsGlobalNetwork:output_type -> google.cloud.servicenetworking.v1.VpcServiceControls
	158, // 194: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer.UpdateConsumerConfigServicesProjectsGlobalNetwork:output_type -> google.longrunning.Operation
	50,  // 195: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer.GetServicesProjectsGlobalNetworksDnsZone:output_type -> google.cloud.servicenetworking.v1.GetDnsZoneResponse
	62,  // 196: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer.ListServicesProjectsGlobalNetworksDnsZones:output_type -> google.cloud.servicenetworking.v1.ListDnsZonesResponse
	158, // 197: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.CreateServicesProjectsGlobalNetworksPeeredDnsDomain:output_type -> google.longrunning.Operation
	158, // 198: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.DeleteServicesProjectsGlobalNetworksPeeredDnsDomain:output_type -> google.longrunning.Operation
	64,  // 199: google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer.ListServicesProjectsGlobalNetworksPeeredDnsDomains:output_type -> google.cloud.servicenetworking.v1.ListPeeredDnsDomainsResponse
	158, // 200: google.cloud.servicenetworking.v1.ServicesRolesServer.AddServicesRole:output_type -> google.longrunning.Operation
	176, // [176:201] is the sub-list for method output_type
	151, // [151:176] is the sub-list for method input_type
	151, // [151:151] is the sub-list for extension type_name
	151, // [151:151] is the sub-list for extension extendee
	0,   // [0:151] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_init() }
func file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_init() {
	if File_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDnsRecordSetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDnsZoneMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDnsZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDnsZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRolesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRolesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRolesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Api); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Billing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillingDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientLibrarySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudSQLConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonLanguageSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerConfigMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CppSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomErrorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomHttpPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePeeredDnsDomainMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableVpcServiceControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsRecordSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsZonePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DotnetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableVpcServiceControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudServicenetworkingV1ConsumerConfigReservedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudServicenetworkingV1BetaConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudServicenetworkingV1BetaSubnetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDnsRecordSetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDnsZonesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPeeredDnsDomainsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LongRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Method); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricDescriptorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mixin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoredResourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialDeleteConnectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeredDnsDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeredDnsDomainMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhpSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Publishing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PythonSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotaLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeReservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsRecordSetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsRecordSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsZoneMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDnsZoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RubySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryIpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryIpRangeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemParameterRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsumerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDnsRecordSetMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateConsumerConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateConsumerConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcServiceControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetworkServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableVpcServiceControlsServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableVpcServiceControlsServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRangeServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServicesConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConnectionServicesConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchServicesConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServicesDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesDnsRecordSetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServicesDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServicesDnsRecordSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServicesDnsZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServicesDnsZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesProjectsGlobalNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVpcServiceControlsServicesProjectsGlobalNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConsumerConfigServicesProjectsGlobalNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesProjectsGlobalNetworksDnsZoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesProjectsGlobalNetworksDnsZonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddServicesRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   157,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_depIdxs,
		MessageInfos:      file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto = out.File
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_rawDesc = nil
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_goTypes = nil
	file_mockgcp_cloud_servicenetworking_v1_servicenetworking_proto_depIdxs = nil
}
