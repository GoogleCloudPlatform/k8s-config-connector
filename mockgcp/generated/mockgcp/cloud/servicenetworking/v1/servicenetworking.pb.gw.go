// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: mockgcp/cloud/servicenetworking/v1/servicenetworking.proto

/*
Package servicenetworkingpb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package servicenetworkingpb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

func request_ServicesServer_AddSubnetworkService_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddSubnetworkServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.AddSubnetworkService(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesServer_AddSubnetworkService_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddSubnetworkServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.AddSubnetworkService(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesServer_DisableVpcServiceControlsService_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DisableVpcServiceControlsServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.DisableVpcServiceControlsService(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesServer_DisableVpcServiceControlsService_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DisableVpcServiceControlsServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.DisableVpcServiceControlsService(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesServer_EnableVpcServiceControlsService_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq EnableVpcServiceControlsServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.EnableVpcServiceControlsService(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesServer_EnableVpcServiceControlsService_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq EnableVpcServiceControlsServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.EnableVpcServiceControlsService(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesServer_SearchRangeService_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SearchRangeServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.SearchRangeService(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesServer_SearchRangeService_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SearchRangeServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.SearchRangeService(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesServer_ValidateService_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ValidateServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ValidateService(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesServer_ValidateService_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ValidateServiceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Service); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ValidateService(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesConnectionsServer_CreateServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesConnectionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateServicesConnection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesConnectionsServer_CreateServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesConnectionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateServicesConnection(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesConnectionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteConnectionServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteConnectionServicesConnection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesConnectionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteConnectionServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteConnectionServicesConnection(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_ServicesConnectionsServer_ListServicesConnections_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_ServicesConnectionsServer_ListServicesConnections_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesConnectionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesConnectionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesConnectionsServer_ListServicesConnections_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListServicesConnections(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesConnectionsServer_ListServicesConnections_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesConnectionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesConnectionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesConnectionsServer_ListServicesConnections_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListServicesConnections(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_ServicesConnectionsServer_PatchServicesConnection_0 = &utilities.DoubleArray{Encoding: map[string]int{"services_connection": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_ServicesConnectionsServer_PatchServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesConnectionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesConnectionsServer_PatchServicesConnection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchServicesConnection(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesConnectionsServer_PatchServicesConnection_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesConnectionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchServicesConnectionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesConnection); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesConnectionsServer_PatchServicesConnection_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchServicesConnection(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsRecordSetsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.AddServicesDnsRecordSet(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsRecordSetsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.AddServicesDnsRecordSet(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsRecordSetsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetServicesDnsRecordSet(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsRecordSetsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetServicesDnsRecordSet(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsRecordSetsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesDnsRecordSetsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListServicesDnsRecordSets(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsRecordSetsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesDnsRecordSetsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListServicesDnsRecordSets(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsRecordSetsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.DeleteServicesDnsRecordSet(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsRecordSetsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.DeleteServicesDnsRecordSet(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsRecordSetsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.UpdateServicesDnsRecordSet(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsRecordSetsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateServicesDnsRecordSetRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsRecordSet); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.UpdateServicesDnsRecordSet(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesDnsZonesServer_AddServicesDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsZonesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesDnsZoneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsZone); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.AddServicesDnsZone(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsZonesServer_AddServicesDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsZonesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesDnsZoneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsZone); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.AddServicesDnsZone(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesDnsZonesServer_DeleteServicesDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesDnsZonesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesDnsZoneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsZone); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.DeleteServicesDnsZone(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesDnsZonesServer_DeleteServicesDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesDnsZonesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesDnsZoneRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesDnsZone); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.DeleteServicesDnsZone(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetServicesProjectsGlobalNetwork(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetServicesProjectsGlobalNetwork(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetVpcServiceControlsServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetVpcServiceControlsServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetVpcServiceControlsServicesProjectsGlobalNetwork(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateConsumerConfigServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesProjectsGlobalNetwork); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateConsumerConfigServicesProjectsGlobalNetworkRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesProjectsGlobalNetwork); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.UpdateConsumerConfigServicesProjectsGlobalNetwork(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksDnsZonesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesProjectsGlobalNetworksDnsZoneRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetServicesProjectsGlobalNetworksDnsZone(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksDnsZonesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetServicesProjectsGlobalNetworksDnsZoneRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetServicesProjectsGlobalNetworksDnsZone(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksDnsZonesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesProjectsGlobalNetworksDnsZonesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListServicesProjectsGlobalNetworksDnsZones(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksDnsZonesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesProjectsGlobalNetworksDnsZonesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListServicesProjectsGlobalNetworksDnsZones(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesProjectsGlobalNetworksPeeredDnsDomain); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesProjectsGlobalNetworksPeeredDnsDomain); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteServicesProjectsGlobalNetworksPeeredDnsDomainRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteServicesProjectsGlobalNetworksPeeredDnsDomain(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListServicesProjectsGlobalNetworksPeeredDnsDomainsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListServicesProjectsGlobalNetworksPeeredDnsDomains(ctx, &protoReq)
	return msg, metadata, err

}

func request_ServicesRolesServer_AddServicesRole_0(ctx context.Context, marshaler runtime.Marshaler, client ServicesRolesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesRoleRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesRole); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.AddServicesRole(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ServicesRolesServer_AddServicesRole_0(ctx context.Context, marshaler runtime.Marshaler, server ServicesRolesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AddServicesRoleRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.ServicesRole); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.AddServicesRole(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterServicesServerHandlerServer registers the http handlers for service ServicesServer to "mux".
// UnaryRPC     :call ServicesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesServerHandlerFromEndpoint instead.
func RegisterServicesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesServerServer) error {

	mux.Handle("POST", pattern_ServicesServer_AddSubnetworkService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/AddSubnetworkService", runtime.WithHTTPPathPattern("/v1/{parent=services/*/*/*}:addSubnetwork"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesServer_AddSubnetworkService_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_AddSubnetworkService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesServer_DisableVpcServiceControlsService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/DisableVpcServiceControlsService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:disableVpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesServer_DisableVpcServiceControlsService_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_DisableVpcServiceControlsService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesServer_EnableVpcServiceControlsService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/EnableVpcServiceControlsService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:enableVpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesServer_EnableVpcServiceControlsService_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_EnableVpcServiceControlsService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesServer_SearchRangeService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/SearchRangeService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:searchRange"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesServer_SearchRangeService_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_SearchRangeService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesServer_ValidateService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/ValidateService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:validate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesServer_ValidateService_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_ValidateService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesConnectionsServerHandlerServer registers the http handlers for service ServicesConnectionsServer to "mux".
// UnaryRPC     :call ServicesConnectionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesConnectionsServerHandlerFromEndpoint instead.
func RegisterServicesConnectionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesConnectionsServerServer) error {

	mux.Handle("POST", pattern_ServicesConnectionsServer_CreateServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/CreateServicesConnection", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/connections"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesConnectionsServer_CreateServicesConnection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_CreateServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesConnectionsServer_DeleteConnectionServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/DeleteConnectionServicesConnection", runtime.WithHTTPPathPattern("/v1/{name=services/*/connections/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesConnectionsServer_ListServicesConnections_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/ListServicesConnections", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/connections"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesConnectionsServer_ListServicesConnections_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_ListServicesConnections_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesConnectionsServer_PatchServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/PatchServicesConnection", runtime.WithHTTPPathPattern("/v1/{name=services/*/connections/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesConnectionsServer_PatchServicesConnection_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_PatchServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesDnsRecordSetsServerHandlerServer registers the http handlers for service ServicesDnsRecordSetsServer to "mux".
// UnaryRPC     :call ServicesDnsRecordSetsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesDnsRecordSetsServerHandlerFromEndpoint instead.
func RegisterServicesDnsRecordSetsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesDnsRecordSetsServerServer) error {

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/AddServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/GetServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:get"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/ListServicesDnsRecordSets", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/DeleteServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:remove"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/UpdateServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:update"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesDnsZonesServerHandlerServer registers the http handlers for service ServicesDnsZonesServer to "mux".
// UnaryRPC     :call ServicesDnsZonesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesDnsZonesServerHandlerFromEndpoint instead.
func RegisterServicesDnsZonesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesDnsZonesServerServer) error {

	mux.Handle("POST", pattern_ServicesDnsZonesServer_AddServicesDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/AddServicesDnsZone", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsZones:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsZonesServer_AddServicesDnsZone_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsZonesServer_AddServicesDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsZonesServer_DeleteServicesDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/DeleteServicesDnsZone", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsZones:remove"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesDnsZonesServer_DeleteServicesDnsZone_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsZonesServer_DeleteServicesDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesProjectsGlobalNetworksServerHandlerServer registers the http handlers for service ServicesProjectsGlobalNetworksServer to "mux".
// UnaryRPC     :call ServicesProjectsGlobalNetworksServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesProjectsGlobalNetworksServerHandlerFromEndpoint instead.
func RegisterServicesProjectsGlobalNetworksServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesProjectsGlobalNetworksServerServer) error {

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetVpcServiceControlsServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*}/vpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/UpdateConsumerConfigServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}:updateConsumerConfig"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerServer registers the http handlers for service ServicesProjectsGlobalNetworksDnsZonesServer to "mux".
// UnaryRPC     :call ServicesProjectsGlobalNetworksDnsZonesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerFromEndpoint instead.
func RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesProjectsGlobalNetworksDnsZonesServerServer) error {

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/GetServicesProjectsGlobalNetworksDnsZone", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*/dnsZones/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/ListServicesProjectsGlobalNetworksDnsZones", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/dnsZones:list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerServer registers the http handlers for service ServicesProjectsGlobalNetworksPeeredDnsDomainsServer to "mux".
// UnaryRPC     :call ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerFromEndpoint instead.
func RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesProjectsGlobalNetworksPeeredDnsDomainsServerServer) error {

	mux.Handle("POST", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/CreateServicesProjectsGlobalNetworksPeeredDnsDomain", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/DeleteServicesProjectsGlobalNetworksPeeredDnsDomain", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*/peeredDnsDomains/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/ListServicesProjectsGlobalNetworksPeeredDnsDomains", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesRolesServerHandlerServer registers the http handlers for service ServicesRolesServer to "mux".
// UnaryRPC     :call ServicesRolesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterServicesRolesServerHandlerFromEndpoint instead.
func RegisterServicesRolesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ServicesRolesServerServer) error {

	mux.Handle("POST", pattern_ServicesRolesServer_AddServicesRole_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesRolesServer/AddServicesRole", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/roles:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ServicesRolesServer_AddServicesRole_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesRolesServer_AddServicesRole_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterServicesServerHandlerFromEndpoint is same as RegisterServicesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesServerHandler(ctx, mux, conn)
}

// RegisterServicesServerHandler registers the http handlers for service ServicesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesServerHandlerClient(ctx, mux, NewServicesServerClient(conn))
}

// RegisterServicesServerHandlerClient registers the http handlers for service ServicesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesServerClient" to call the correct interceptors.
func RegisterServicesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesServerClient) error {

	mux.Handle("POST", pattern_ServicesServer_AddSubnetworkService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/AddSubnetworkService", runtime.WithHTTPPathPattern("/v1/{parent=services/*/*/*}:addSubnetwork"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesServer_AddSubnetworkService_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_AddSubnetworkService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesServer_DisableVpcServiceControlsService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/DisableVpcServiceControlsService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:disableVpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesServer_DisableVpcServiceControlsService_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_DisableVpcServiceControlsService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesServer_EnableVpcServiceControlsService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/EnableVpcServiceControlsService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:enableVpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesServer_EnableVpcServiceControlsService_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_EnableVpcServiceControlsService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesServer_SearchRangeService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/SearchRangeService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:searchRange"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesServer_SearchRangeService_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_SearchRangeService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesServer_ValidateService_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesServer/ValidateService", runtime.WithHTTPPathPattern("/v1/{parent=services/*}:validate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesServer_ValidateService_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesServer_ValidateService_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesServer_AddSubnetworkService_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 1, 0, 1, 0, 4, 4, 5, 2}, []string{"v1", "services", "parent"}, "addSubnetwork"))

	pattern_ServicesServer_DisableVpcServiceControlsService_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "services", "parent"}, "disableVpcServiceControls"))

	pattern_ServicesServer_EnableVpcServiceControlsService_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "services", "parent"}, "enableVpcServiceControls"))

	pattern_ServicesServer_SearchRangeService_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "services", "parent"}, "searchRange"))

	pattern_ServicesServer_ValidateService_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "services", "parent"}, "validate"))
)

var (
	forward_ServicesServer_AddSubnetworkService_0 = runtime.ForwardResponseMessage

	forward_ServicesServer_DisableVpcServiceControlsService_0 = runtime.ForwardResponseMessage

	forward_ServicesServer_EnableVpcServiceControlsService_0 = runtime.ForwardResponseMessage

	forward_ServicesServer_SearchRangeService_0 = runtime.ForwardResponseMessage

	forward_ServicesServer_ValidateService_0 = runtime.ForwardResponseMessage
)

// RegisterServicesConnectionsServerHandlerFromEndpoint is same as RegisterServicesConnectionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesConnectionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesConnectionsServerHandler(ctx, mux, conn)
}

// RegisterServicesConnectionsServerHandler registers the http handlers for service ServicesConnectionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesConnectionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesConnectionsServerHandlerClient(ctx, mux, NewServicesConnectionsServerClient(conn))
}

// RegisterServicesConnectionsServerHandlerClient registers the http handlers for service ServicesConnectionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesConnectionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesConnectionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesConnectionsServerClient" to call the correct interceptors.
func RegisterServicesConnectionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesConnectionsServerClient) error {

	mux.Handle("POST", pattern_ServicesConnectionsServer_CreateServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/CreateServicesConnection", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/connections"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesConnectionsServer_CreateServicesConnection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_CreateServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesConnectionsServer_DeleteConnectionServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/DeleteConnectionServicesConnection", runtime.WithHTTPPathPattern("/v1/{name=services/*/connections/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_DeleteConnectionServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesConnectionsServer_ListServicesConnections_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/ListServicesConnections", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/connections"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesConnectionsServer_ListServicesConnections_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_ListServicesConnections_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesConnectionsServer_PatchServicesConnection_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesConnectionsServer/PatchServicesConnection", runtime.WithHTTPPathPattern("/v1/{name=services/*/connections/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesConnectionsServer_PatchServicesConnection_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesConnectionsServer_PatchServicesConnection_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesConnectionsServer_CreateServicesConnection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "connections"}, ""))

	pattern_ServicesConnectionsServer_DeleteConnectionServicesConnection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "services", "connections", "name"}, ""))

	pattern_ServicesConnectionsServer_ListServicesConnections_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "connections"}, ""))

	pattern_ServicesConnectionsServer_PatchServicesConnection_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "services", "connections", "name"}, ""))
)

var (
	forward_ServicesConnectionsServer_CreateServicesConnection_0 = runtime.ForwardResponseMessage

	forward_ServicesConnectionsServer_DeleteConnectionServicesConnection_0 = runtime.ForwardResponseMessage

	forward_ServicesConnectionsServer_ListServicesConnections_0 = runtime.ForwardResponseMessage

	forward_ServicesConnectionsServer_PatchServicesConnection_0 = runtime.ForwardResponseMessage
)

// RegisterServicesDnsRecordSetsServerHandlerFromEndpoint is same as RegisterServicesDnsRecordSetsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesDnsRecordSetsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesDnsRecordSetsServerHandler(ctx, mux, conn)
}

// RegisterServicesDnsRecordSetsServerHandler registers the http handlers for service ServicesDnsRecordSetsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesDnsRecordSetsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesDnsRecordSetsServerHandlerClient(ctx, mux, NewServicesDnsRecordSetsServerClient(conn))
}

// RegisterServicesDnsRecordSetsServerHandlerClient registers the http handlers for service ServicesDnsRecordSetsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesDnsRecordSetsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesDnsRecordSetsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesDnsRecordSetsServerClient" to call the correct interceptors.
func RegisterServicesDnsRecordSetsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesDnsRecordSetsServerClient) error {

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/AddServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/GetServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:get"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/ListServicesDnsRecordSets", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/DeleteServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:remove"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsRecordSetsServer/UpdateServicesDnsRecordSet", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsRecordSets:update"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsRecordSets"}, "add"))

	pattern_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsRecordSets"}, "get"))

	pattern_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsRecordSets"}, "list"))

	pattern_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsRecordSets"}, "remove"))

	pattern_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsRecordSets"}, "update"))
)

var (
	forward_ServicesDnsRecordSetsServer_AddServicesDnsRecordSet_0 = runtime.ForwardResponseMessage

	forward_ServicesDnsRecordSetsServer_GetServicesDnsRecordSet_0 = runtime.ForwardResponseMessage

	forward_ServicesDnsRecordSetsServer_ListServicesDnsRecordSets_0 = runtime.ForwardResponseMessage

	forward_ServicesDnsRecordSetsServer_DeleteServicesDnsRecordSet_0 = runtime.ForwardResponseMessage

	forward_ServicesDnsRecordSetsServer_UpdateServicesDnsRecordSet_0 = runtime.ForwardResponseMessage
)

// RegisterServicesDnsZonesServerHandlerFromEndpoint is same as RegisterServicesDnsZonesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesDnsZonesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesDnsZonesServerHandler(ctx, mux, conn)
}

// RegisterServicesDnsZonesServerHandler registers the http handlers for service ServicesDnsZonesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesDnsZonesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesDnsZonesServerHandlerClient(ctx, mux, NewServicesDnsZonesServerClient(conn))
}

// RegisterServicesDnsZonesServerHandlerClient registers the http handlers for service ServicesDnsZonesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesDnsZonesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesDnsZonesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesDnsZonesServerClient" to call the correct interceptors.
func RegisterServicesDnsZonesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesDnsZonesServerClient) error {

	mux.Handle("POST", pattern_ServicesDnsZonesServer_AddServicesDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/AddServicesDnsZone", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsZones:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsZonesServer_AddServicesDnsZone_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsZonesServer_AddServicesDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_ServicesDnsZonesServer_DeleteServicesDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesDnsZonesServer/DeleteServicesDnsZone", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/dnsZones:remove"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesDnsZonesServer_DeleteServicesDnsZone_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesDnsZonesServer_DeleteServicesDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesDnsZonesServer_AddServicesDnsZone_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsZones"}, "add"))

	pattern_ServicesDnsZonesServer_DeleteServicesDnsZone_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "dnsZones"}, "remove"))
)

var (
	forward_ServicesDnsZonesServer_AddServicesDnsZone_0 = runtime.ForwardResponseMessage

	forward_ServicesDnsZonesServer_DeleteServicesDnsZone_0 = runtime.ForwardResponseMessage
)

// RegisterServicesProjectsGlobalNetworksServerHandlerFromEndpoint is same as RegisterServicesProjectsGlobalNetworksServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesProjectsGlobalNetworksServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesProjectsGlobalNetworksServerHandler(ctx, mux, conn)
}

// RegisterServicesProjectsGlobalNetworksServerHandler registers the http handlers for service ServicesProjectsGlobalNetworksServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesProjectsGlobalNetworksServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesProjectsGlobalNetworksServerHandlerClient(ctx, mux, NewServicesProjectsGlobalNetworksServerClient(conn))
}

// RegisterServicesProjectsGlobalNetworksServerHandlerClient registers the http handlers for service ServicesProjectsGlobalNetworksServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesProjectsGlobalNetworksServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesProjectsGlobalNetworksServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesProjectsGlobalNetworksServerClient" to call the correct interceptors.
func RegisterServicesProjectsGlobalNetworksServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesProjectsGlobalNetworksServerClient) error {

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/GetVpcServiceControlsServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*}/vpcServiceControls"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksServer/UpdateConsumerConfigServicesProjectsGlobalNetwork", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}:updateConsumerConfig"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "services", "projects", "global", "networks", "name"}, ""))

	pattern_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5, 2, 6}, []string{"v1", "services", "projects", "global", "networks", "name", "vpcServiceControls"}, ""))

	pattern_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "services", "projects", "global", "networks", "parent"}, "updateConsumerConfig"))
)

var (
	forward_ServicesProjectsGlobalNetworksServer_GetServicesProjectsGlobalNetwork_0 = runtime.ForwardResponseMessage

	forward_ServicesProjectsGlobalNetworksServer_GetVpcServiceControlsServicesProjectsGlobalNetwork_0 = runtime.ForwardResponseMessage

	forward_ServicesProjectsGlobalNetworksServer_UpdateConsumerConfigServicesProjectsGlobalNetwork_0 = runtime.ForwardResponseMessage
)

// RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerFromEndpoint is same as RegisterServicesProjectsGlobalNetworksDnsZonesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesProjectsGlobalNetworksDnsZonesServerHandler(ctx, mux, conn)
}

// RegisterServicesProjectsGlobalNetworksDnsZonesServerHandler registers the http handlers for service ServicesProjectsGlobalNetworksDnsZonesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesProjectsGlobalNetworksDnsZonesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerClient(ctx, mux, NewServicesProjectsGlobalNetworksDnsZonesServerClient(conn))
}

// RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerClient registers the http handlers for service ServicesProjectsGlobalNetworksDnsZonesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesProjectsGlobalNetworksDnsZonesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesProjectsGlobalNetworksDnsZonesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesProjectsGlobalNetworksDnsZonesServerClient" to call the correct interceptors.
func RegisterServicesProjectsGlobalNetworksDnsZonesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesProjectsGlobalNetworksDnsZonesServerClient) error {

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/GetServicesProjectsGlobalNetworksDnsZone", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*/dnsZones/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksDnsZonesServer/ListServicesProjectsGlobalNetworksDnsZones", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/dnsZones:list"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 2, 5, 1, 0, 4, 9, 5, 6}, []string{"v1", "services", "projects", "global", "networks", "dnsZones", "name"}, ""))

	pattern_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5, 2, 6}, []string{"v1", "services", "projects", "global", "networks", "parent", "dnsZones"}, "list"))
)

var (
	forward_ServicesProjectsGlobalNetworksDnsZonesServer_GetServicesProjectsGlobalNetworksDnsZone_0 = runtime.ForwardResponseMessage

	forward_ServicesProjectsGlobalNetworksDnsZonesServer_ListServicesProjectsGlobalNetworksDnsZones_0 = runtime.ForwardResponseMessage
)

// RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerFromEndpoint is same as RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandler(ctx, mux, conn)
}

// RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandler registers the http handlers for service ServicesProjectsGlobalNetworksPeeredDnsDomainsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerClient(ctx, mux, NewServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient(conn))
}

// RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerClient registers the http handlers for service ServicesProjectsGlobalNetworksPeeredDnsDomainsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient" to call the correct interceptors.
func RegisterServicesProjectsGlobalNetworksPeeredDnsDomainsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesProjectsGlobalNetworksPeeredDnsDomainsServerClient) error {

	mux.Handle("POST", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/CreateServicesProjectsGlobalNetworksPeeredDnsDomain", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/DeleteServicesProjectsGlobalNetworksPeeredDnsDomain", runtime.WithHTTPPathPattern("/v1/{name=services/*/projects/*/global/networks/*/peeredDnsDomains/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesProjectsGlobalNetworksPeeredDnsDomainsServer/ListServicesProjectsGlobalNetworksPeeredDnsDomains", runtime.WithHTTPPathPattern("/v1/{parent=services/*/projects/*/global/networks/*}/peeredDnsDomains"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5, 2, 6}, []string{"v1", "services", "projects", "global", "networks", "parent", "peeredDnsDomains"}, ""))

	pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 2, 5, 1, 0, 4, 9, 5, 6}, []string{"v1", "services", "projects", "global", "networks", "peeredDnsDomains", "name"}, ""))

	pattern_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5, 2, 6}, []string{"v1", "services", "projects", "global", "networks", "parent", "peeredDnsDomains"}, ""))
)

var (
	forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_CreateServicesProjectsGlobalNetworksPeeredDnsDomain_0 = runtime.ForwardResponseMessage

	forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_DeleteServicesProjectsGlobalNetworksPeeredDnsDomain_0 = runtime.ForwardResponseMessage

	forward_ServicesProjectsGlobalNetworksPeeredDnsDomainsServer_ListServicesProjectsGlobalNetworksPeeredDnsDomains_0 = runtime.ForwardResponseMessage
)

// RegisterServicesRolesServerHandlerFromEndpoint is same as RegisterServicesRolesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterServicesRolesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterServicesRolesServerHandler(ctx, mux, conn)
}

// RegisterServicesRolesServerHandler registers the http handlers for service ServicesRolesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterServicesRolesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterServicesRolesServerHandlerClient(ctx, mux, NewServicesRolesServerClient(conn))
}

// RegisterServicesRolesServerHandlerClient registers the http handlers for service ServicesRolesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ServicesRolesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ServicesRolesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ServicesRolesServerClient" to call the correct interceptors.
func RegisterServicesRolesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ServicesRolesServerClient) error {

	mux.Handle("POST", pattern_ServicesRolesServer_AddServicesRole_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/google.cloud.servicenetworking.v1.ServicesRolesServer/AddServicesRole", runtime.WithHTTPPathPattern("/v1/{parent=services/*}/roles:add"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ServicesRolesServer_AddServicesRole_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ServicesRolesServer_AddServicesRole_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ServicesRolesServer_AddServicesRole_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "services", "parent", "roles"}, "add"))
)

var (
	forward_ServicesRolesServer_AddServicesRole_0 = runtime.ForwardResponseMessage
)
