// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/apigee/v1/service.proto

package apigeepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	any1 "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes why a bundle is invalid. Intended for use in error details.
type EdgeConfigstoreBundleBadBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes all precondition violations.
	Violations []*EdgeConfigstoreBundleBadBundleViolation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (x *EdgeConfigstoreBundleBadBundle) Reset() {
	*x = EdgeConfigstoreBundleBadBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeConfigstoreBundleBadBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeConfigstoreBundleBadBundle) ProtoMessage() {}

func (x *EdgeConfigstoreBundleBadBundle) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeConfigstoreBundleBadBundle.ProtoReflect.Descriptor instead.
func (*EdgeConfigstoreBundleBadBundle) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeConfigstoreBundleBadBundle) GetViolations() []*EdgeConfigstoreBundleBadBundleViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// A message type used to describe a single bundle validation error.
type EdgeConfigstoreBundleBadBundleViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A description of why the bundle is invalid and how to fix it.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The filename (including relative path from the bundle root) in which the error occurred.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *EdgeConfigstoreBundleBadBundleViolation) Reset() {
	*x = EdgeConfigstoreBundleBadBundleViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeConfigstoreBundleBadBundleViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeConfigstoreBundleBadBundleViolation) ProtoMessage() {}

func (x *EdgeConfigstoreBundleBadBundleViolation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeConfigstoreBundleBadBundleViolation.ProtoReflect.Descriptor instead.
func (*EdgeConfigstoreBundleBadBundleViolation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *EdgeConfigstoreBundleBadBundleViolation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EdgeConfigstoreBundleBadBundleViolation) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
type GoogleApiHttpBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP Content-Type header value specifying the content type of the body.
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The HTTP request/response body as raw binary.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Application specific response metadata. Must be set in the first response for streaming APIs.
	Extensions []*any1.Any `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *GoogleApiHttpBody) Reset() {
	*x = GoogleApiHttpBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleApiHttpBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleApiHttpBody) ProtoMessage() {}

func (x *GoogleApiHttpBody) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleApiHttpBody.ProtoReflect.Descriptor instead.
func (*GoogleApiHttpBody) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *GoogleApiHttpBody) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GoogleApiHttpBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleApiHttpBody) GetExtensions() []*any1.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

// APIProductAssociation has the API product and its administrative state association.
type GoogleCloudApigeeV1APIProductAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API product to be associated with the credential.
	Apiproduct string `protobuf:"bytes,1,opt,name=apiproduct,proto3" json:"apiproduct,omitempty"`
	// The API product credential associated status. Valid values are `approved` or `revoked`.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1APIProductAssociation) Reset() {
	*x = GoogleCloudApigeeV1APIProductAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1APIProductAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1APIProductAssociation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1APIProductAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1APIProductAssociation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1APIProductAssociation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GoogleCloudApigeeV1APIProductAssociation) GetApiproduct() string {
	if x != nil {
		return x.Apiproduct
	}
	return ""
}

func (x *GoogleCloudApigeeV1APIProductAssociation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Get    *GoogleCloudApigeeV1AccessGet    `protobuf:"bytes,1,opt,name=get,json=Get,proto3" json:"get,omitempty"`
	Remove *GoogleCloudApigeeV1AccessRemove `protobuf:"bytes,2,opt,name=remove,json=Remove,proto3" json:"remove,omitempty"`
	Set    *GoogleCloudApigeeV1AccessSet    `protobuf:"bytes,3,opt,name=set,json=Set,proto3" json:"set,omitempty"`
}

func (x *GoogleCloudApigeeV1Access) Reset() {
	*x = GoogleCloudApigeeV1Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Access) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Access) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Access.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Access) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *GoogleCloudApigeeV1Access) GetGet() *GoogleCloudApigeeV1AccessGet {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *GoogleCloudApigeeV1Access) GetRemove() *GoogleCloudApigeeV1AccessRemove {
	if x != nil {
		return x.Remove
	}
	return nil
}

func (x *GoogleCloudApigeeV1Access) GetSet() *GoogleCloudApigeeV1AccessSet {
	if x != nil {
		return x.Set
	}
	return nil
}

// Get action. For example, "Get" : { "name" : "target.name", "value" : "default" }
type GoogleCloudApigeeV1AccessGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1AccessGet) Reset() {
	*x = GoogleCloudApigeeV1AccessGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AccessGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AccessGet) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AccessGet) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AccessGet.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AccessGet) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *GoogleCloudApigeeV1AccessGet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AccessGet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Access logging configuration enables customers to ship the access logs from the tenant projects to their own project's cloud logging. The feature is at the instance level ad disabled by default. It can be enabled during CreateInstance or UpdateInstance.
type GoogleCloudApigeeV1AccessLoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Boolean flag that specifies whether the customer access log feature is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Optional. Ship the access log entries that match the status_code defined in the filter. The status_code is the only expected/supported filter field. (Ex: status_code) The filter will parse it to the Common Expression Language semantics for expression evaluation to build the filter condition. (Ex: "filter": status_code >= 200 && status_code < 300 )
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GoogleCloudApigeeV1AccessLoggingConfig) Reset() {
	*x = GoogleCloudApigeeV1AccessLoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AccessLoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AccessLoggingConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AccessLoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AccessLoggingConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AccessLoggingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *GoogleCloudApigeeV1AccessLoggingConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1AccessLoggingConfig) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Remove action. For example, "Remove" : { "name" : "target.name", "success" : true }
type GoogleCloudApigeeV1AccessRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GoogleCloudApigeeV1AccessRemove) Reset() {
	*x = GoogleCloudApigeeV1AccessRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AccessRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AccessRemove) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AccessRemove) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AccessRemove.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AccessRemove) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GoogleCloudApigeeV1AccessRemove) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AccessRemove) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Set action. For example, "Set" : { "name" : "target.name", "success" : true, "value" : "default" }
type GoogleCloudApigeeV1AccessSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1AccessSet) Reset() {
	*x = GoogleCloudApigeeV1AccessSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AccessSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AccessSet) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AccessSet) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AccessSet.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AccessSet) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *GoogleCloudApigeeV1AccessSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AccessSet) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GoogleCloudApigeeV1AccessSet) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Request for ActivateNatAddressRequest. Activate the nat address request.
type GoogleCloudApigeeV1ActivateNatAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ActivateNatAddressRequest) Reset() {
	*x = GoogleCloudApigeeV1ActivateNatAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ActivateNatAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ActivateNatAddressRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ActivateNatAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ActivateNatAddressRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ActivateNatAddressRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{9}
}

// Add-on configurations for the Apigee organization.
type GoogleCloudApigeeV1AddonsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration for the Advanced API Ops add-on.
	AdvancedApiOpsConfig *GoogleCloudApigeeV1AdvancedApiOpsConfig `protobuf:"bytes,1,opt,name=advanced_api_ops_config,json=advancedApiOpsConfig,proto3" json:"advanced_api_ops_config,omitempty"`
	// Configuration for the Analytics add-on. Only used in organizations.environments.addonsConfig.
	AnalyticsConfig *GoogleCloudApigeeV1AnalyticsConfig `protobuf:"bytes,2,opt,name=analytics_config,json=analyticsConfig,proto3" json:"analytics_config,omitempty"`
	// Configuration for the API Security add-on.
	ApiSecurityConfig *GoogleCloudApigeeV1ApiSecurityConfig `protobuf:"bytes,3,opt,name=api_security_config,json=apiSecurityConfig,proto3" json:"api_security_config,omitempty"`
	// Configuration for the Connectors Platform add-on.
	ConnectorsPlatformConfig *GoogleCloudApigeeV1ConnectorsPlatformConfig `protobuf:"bytes,4,opt,name=connectors_platform_config,json=connectorsPlatformConfig,proto3" json:"connectors_platform_config,omitempty"`
	// Configuration for the Integration add-on.
	IntegrationConfig *GoogleCloudApigeeV1IntegrationConfig `protobuf:"bytes,5,opt,name=integration_config,json=integrationConfig,proto3" json:"integration_config,omitempty"`
	// Configuration for the Monetization add-on.
	MonetizationConfig *GoogleCloudApigeeV1MonetizationConfig `protobuf:"bytes,6,opt,name=monetization_config,json=monetizationConfig,proto3" json:"monetization_config,omitempty"`
}

func (x *GoogleCloudApigeeV1AddonsConfig) Reset() {
	*x = GoogleCloudApigeeV1AddonsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AddonsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AddonsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AddonsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AddonsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AddonsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetAdvancedApiOpsConfig() *GoogleCloudApigeeV1AdvancedApiOpsConfig {
	if x != nil {
		return x.AdvancedApiOpsConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetAnalyticsConfig() *GoogleCloudApigeeV1AnalyticsConfig {
	if x != nil {
		return x.AnalyticsConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetApiSecurityConfig() *GoogleCloudApigeeV1ApiSecurityConfig {
	if x != nil {
		return x.ApiSecurityConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetConnectorsPlatformConfig() *GoogleCloudApigeeV1ConnectorsPlatformConfig {
	if x != nil {
		return x.ConnectorsPlatformConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetIntegrationConfig() *GoogleCloudApigeeV1IntegrationConfig {
	if x != nil {
		return x.IntegrationConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1AddonsConfig) GetMonetizationConfig() *GoogleCloudApigeeV1MonetizationConfig {
	if x != nil {
		return x.MonetizationConfig
	}
	return nil
}

// Request for AdjustDeveloperBalance.
type GoogleCloudApigeeV1AdjustDeveloperBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * A positive value of `adjustment` means that that the API provider wants to adjust the balance for an under-charged developer i.e. the balance of the developer will decrease. * A negative value of `adjustment` means that that the API provider wants to adjust the balance for an over-charged developer i.e. the balance of the developer will increase.
	Adjustment *GoogleTypeMoney `protobuf:"bytes,1,opt,name=adjustment,proto3" json:"adjustment,omitempty"`
}

func (x *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) Reset() {
	*x = GoogleCloudApigeeV1AdjustDeveloperBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AdjustDeveloperBalanceRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest) GetAdjustment() *GoogleTypeMoney {
	if x != nil {
		return x.Adjustment
	}
	return nil
}

// Configuration for the Advanced API Ops add-on.
type GoogleCloudApigeeV1AdvancedApiOpsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the Advanced API Ops add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1AdvancedApiOpsConfig) Reset() {
	*x = GoogleCloudApigeeV1AdvancedApiOpsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AdvancedApiOpsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AdvancedApiOpsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AdvancedApiOpsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AdvancedApiOpsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AdvancedApiOpsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *GoogleCloudApigeeV1AdvancedApiOpsConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Reference to a certificate or key/certificate pair.
type GoogleCloudApigeeV1Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID for this alias. Values must match the regular expression `[^/]{1,255}`.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Chain of certificates under this alias.
	CertsInfo *GoogleCloudApigeeV1Certificate `protobuf:"bytes,2,opt,name=certs_info,json=certsInfo,proto3" json:"certs_info,omitempty"`
	// Type of alias.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1Alias) Reset() {
	*x = GoogleCloudApigeeV1Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Alias) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Alias) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Alias.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Alias) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *GoogleCloudApigeeV1Alias) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GoogleCloudApigeeV1Alias) GetCertsInfo() *GoogleCloudApigeeV1Certificate {
	if x != nil {
		return x.CertsInfo
	}
	return nil
}

func (x *GoogleCloudApigeeV1Alias) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GoogleCloudApigeeV1AliasRevisionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the alias file. For example, a Google Cloud Storage URI.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the alias revision included in the keystore in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}/revisions/{rev}`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) Reset() {
	*x = GoogleCloudApigeeV1AliasRevisionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AliasRevisionConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AliasRevisionConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AliasRevisionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AliasRevisionConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Configuration for the Analytics add-on.
type GoogleCloudApigeeV1AnalyticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the Analytics add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Output only. Time at which the Analytics add-on expires in milliseconds since epoch. If unspecified, the add-on will never expire.
	ExpireTimeMillis int64 `protobuf:"varint,2,opt,name=expire_time_millis,json=expireTimeMillis,proto3" json:"expire_time_millis,omitempty"`
	// Output only. The state of the Analytics add-on.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. The latest update time.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) Reset() {
	*x = GoogleCloudApigeeV1AnalyticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AnalyticsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AnalyticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AnalyticsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AnalyticsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) GetExpireTimeMillis() int64 {
	if x != nil {
		return x.ExpireTimeMillis
	}
	return 0
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1AnalyticsConfig) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// `ApiCategory` represents an API category. [Catalog items](/apigee/docs/reference/apis/apigee/rest/v1/organizations.sites.apidocs) can be tagged with API categories; users viewing the API catalog in the portal will have the option to browse the catalog by category.
type GoogleCloudApigeeV1ApiCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the category (a UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the category.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the portal.
	SiteId string `protobuf:"bytes,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// Time the category was last modified in milliseconds since epoch.
	UpdateTime int64 `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiCategory) Reset() {
	*x = GoogleCloudApigeeV1ApiCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiCategory) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiCategory) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiCategory.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiCategory) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *GoogleCloudApigeeV1ApiCategory) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategory) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategory) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// The API category resource wrapped with response status, error_code, etc.
type GoogleCloudApigeeV1ApiCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API category resource.
	Data *GoogleCloudApigeeV1ApiCategory `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Unique ID of the request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Status of the operation.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) Reset() {
	*x = GoogleCloudApigeeV1ApiCategoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiCategoryResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiCategoryResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiCategoryResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) GetData() *GoogleCloudApigeeV1ApiCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiCategoryResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// `ApiDoc` represents an API catalog item. Catalog items are used in two ways in a portal: - Users can browse and interact with a visual representation of the API documentation - The `api_product_name` field provides a link to a backing [API product] (/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts). Through this link, portal users can create and manage developer apps linked to one or more API products.
type GoogleCloudApigeeV1ApiDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Boolean flag that manages user access to the catalog item. When true, the catalog item has public visibility and can be viewed anonymously; otherwise, only registered users may view it. Note: when the parent portal is enrolled in the [audience management feature](https://cloud.google.com/apigee/docs/api-platform/publish/portal/portal-audience#enrolling_in_the_beta_release_of_the_audience_management_feature), and this flag is set to false, visibility is set to an indeterminate state and must be explicitly specified in the management UI (see [Manage the visibility of an API in your portal](https://cloud.google.com/apigee/docs/api-platform/publish/portal/publish-apis#visibility)). Additionally, when enrolled in the audience management feature, updates to this flag will be ignored as visibility permissions must be updated in the management UI.
	AnonAllowed bool `protobuf:"varint,1,opt,name=anon_allowed,json=anonAllowed,proto3" json:"anon_allowed,omitempty"`
	// Required. Immutable. The `name` field of the associated [API product](/apigee/docs/reference/apis/apigee/rest/v1/organizations.apiproducts). A portal may have only one catalog item associated with a given API product.
	ApiProductName string `protobuf:"bytes,2,opt,name=api_product_name,json=apiProductName,proto3" json:"api_product_name,omitempty"`
	// Optional. The IDs of the API categories to which this catalog item belongs.
	CategoryIds []string `protobuf:"bytes,3,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	// Optional. Description of the catalog item. Max length is 10,000 characters.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Immutable. DEPRECATED: use the `apiProductName` field instead
	EdgeAPIProductName string `protobuf:"bytes,5,opt,name=edge_a_p_i_product_name,json=edgeAPIProductName,proto3" json:"edge_a_p_i_product_name,omitempty"`
	// Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods
	GraphqlEndpointUrl string `protobuf:"bytes,6,opt,name=graphql_endpoint_url,json=graphqlEndpointUrl,proto3" json:"graphql_endpoint_url,omitempty"`
	// Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods
	GraphqlSchema string `protobuf:"bytes,7,opt,name=graphql_schema,json=graphqlSchema,proto3" json:"graphql_schema,omitempty"`
	// Optional. DEPRECATED: manage documentation through the `getDocumentation` and `updateDocumentation` methods
	GraphqlSchemaDisplayName string `protobuf:"bytes,8,opt,name=graphql_schema_display_name,json=graphqlSchemaDisplayName,proto3" json:"graphql_schema_display_name,omitempty"`
	// Output only. The ID of the catalog item.
	Id int64 `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	// Optional. Location of the image used for the catalog item in the catalog. This can be either an image with an external URL or a file path for [image files stored in the portal](/apigee/docs/api-platform/publish/portal/portal-files"), for example, `/files/book-tree.jpg`. When specifying the URL of an external image, the image won't be uploaded to your assets; additionally, loading the image in the integrated portal will be subject to its availability, which may be blocked or restricted by [content security policies](/apigee/docs/api-platform/publish/portal/csp). Max length of file path is 2,083 characters.
	ImageUrl string `protobuf:"bytes,10,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	// Output only. Time the catalog item was last modified in milliseconds since epoch.
	Modified int64 `protobuf:"varint,11,opt,name=modified,proto3" json:"modified,omitempty"`
	// Optional. Denotes whether the catalog item is published to the portal or is in a draft state. When the parent portal is enrolled in the [audience management feature](https://cloud.google.com/apigee/docs/api-platform/publish/portal/portal-audience#enrolling_in_the_beta_release_of_the_audience_management_feature), the visibility can be set to public on creation by setting the anonAllowed flag to true or further managed in the management UI (see [Manage the visibility of an API in your portal](https://cloud.google.com/apigee/docs/api-platform/publish/portal/publish-apis#visibility)) before it can be visible to any users. If not enrolled in the audience management feature, the visibility is managed by the `anonAllowed` flag.
	Published bool `protobuf:"varint,12,opt,name=published,proto3" json:"published,omitempty"`
	// Optional. Whether a callback URL is required when this catalog item's API product is enabled in a developer app. When true, a portal user will be required to input a URL when managing the app (this is typically used for the app's OAuth flow).
	RequireCallbackUrl bool `protobuf:"varint,13,opt,name=require_callback_url,json=requireCallbackUrl,proto3" json:"require_callback_url,omitempty"`
	// Output only. The ID of the parent portal.
	SiteId string `protobuf:"bytes,14,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// Optional. DEPRECATED: DO NOT USE
	SpecId string `protobuf:"bytes,15,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	// Required. The user-facing name of the catalog item. `title` must be a non-empty string with a max length of 255 characters.
	Title string `protobuf:"bytes,16,opt,name=title,proto3" json:"title,omitempty"`
	// Optional. DEPRECATED: use the `published` field instead
	Visibility bool `protobuf:"varint,17,opt,name=visibility,proto3" json:"visibility,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiDoc) Reset() {
	*x = GoogleCloudApigeeV1ApiDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiDoc) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiDoc) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiDoc.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiDoc) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *GoogleCloudApigeeV1ApiDoc) GetAnonAllowed() bool {
	if x != nil {
		return x.AnonAllowed
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiDoc) GetApiProductName() string {
	if x != nil {
		return x.ApiProductName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiDoc) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetEdgeAPIProductName() string {
	if x != nil {
		return x.EdgeAPIProductName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetGraphqlEndpointUrl() string {
	if x != nil {
		return x.GraphqlEndpointUrl
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetGraphqlSchema() string {
	if x != nil {
		return x.GraphqlSchema
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetGraphqlSchemaDisplayName() string {
	if x != nil {
		return x.GraphqlSchemaDisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiDoc) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiDoc) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiDoc) GetRequireCallbackUrl() bool {
	if x != nil {
		return x.RequireCallbackUrl
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiDoc) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDoc) GetVisibility() bool {
	if x != nil {
		return x.Visibility
	}
	return false
}

// The documentation for a catalog item.
type GoogleCloudApigeeV1ApiDocDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. GraphQL documentation.
	GraphqlDocumentation *GoogleCloudApigeeV1GraphqlDocumentation `protobuf:"bytes,1,opt,name=graphql_documentation,json=graphqlDocumentation,proto3" json:"graphql_documentation,omitempty"`
	// Optional. OpenAPI Specification documentation.
	OasDocumentation *GoogleCloudApigeeV1OASDocumentation `protobuf:"bytes,2,opt,name=oas_documentation,json=oasDocumentation,proto3" json:"oas_documentation,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiDocDocumentation) Reset() {
	*x = GoogleCloudApigeeV1ApiDocDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiDocDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiDocDocumentation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiDocDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiDocDocumentation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiDocDocumentation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *GoogleCloudApigeeV1ApiDocDocumentation) GetGraphqlDocumentation() *GoogleCloudApigeeV1GraphqlDocumentation {
	if x != nil {
		return x.GraphqlDocumentation
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiDocDocumentation) GetOasDocumentation() *GoogleCloudApigeeV1OASDocumentation {
	if x != nil {
		return x.OasDocumentation
	}
	return nil
}

// The catalog item documentation wrapped with response status, error_code, etc.
type GoogleCloudApigeeV1ApiDocDocumentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The documentation resource.
	Data *GoogleCloudApigeeV1ApiDocDocumentation `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Output only. Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Output only. Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Output only. Unique ID of the request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Output only. Status of the operation.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) Reset() {
	*x = GoogleCloudApigeeV1ApiDocDocumentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiDocDocumentationResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiDocDocumentationResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiDocDocumentationResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) GetData() *GoogleCloudApigeeV1ApiDocDocumentation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocDocumentationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// The catalog item resource wrapped with response status, error_code, etc.
type GoogleCloudApigeeV1ApiDocResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The catalog item resource.
	Data *GoogleCloudApigeeV1ApiDoc `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Unique ID of the request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Status of the operation.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiDocResponse) Reset() {
	*x = GoogleCloudApigeeV1ApiDocResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiDocResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiDocResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiDocResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiDocResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiDocResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *GoogleCloudApigeeV1ApiDocResponse) GetData() *GoogleCloudApigeeV1ApiDoc {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiDocResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiDocResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1ApiProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comma-separated list of API resources to be bundled in the API product. By default, the resource paths are mapped from the `proxy.pathsuffix` variable. The proxy path suffix is defined as the URI fragment following the ProxyEndpoint base path. For example, if the `apiResources` element is defined to be `/forecastrss` and the base path defined for the API proxy is `/weather`, then only requests to `/weather/forecastrss` are permitted by the API product. You can select a specific path, or you can select all subpaths with the following wildcard: - `/**`: Indicates that all sub-URIs are included. - `/*` : Indicates that only URIs one level down are included. By default, / supports the same resources as /** as well as the base path defined by the API proxy. For example, if the base path of the API proxy is `/v1/weatherapikey`, then the API product supports requests to `/v1/weatherapikey` and to any sub-URIs, such as `/v1/weatherapikey/forecastrss`, `/v1/weatherapikey/region/CA`, and so on. For more information, see Managing API products.
	ApiResources []string `protobuf:"bytes,1,rep,name=api_resources,json=apiResources,proto3" json:"api_resources,omitempty"`
	// Flag that specifies how API keys are approved to access the APIs defined by the API product. If set to `manual`, the consumer key is generated and returned in "pending" state. In this case, the API keys won't work until they have been explicitly approved. If set to `auto`, the consumer key is generated and returned in "approved" state and can be used immediately. **Note:** Typically, `auto` is used to provide access to free or trial API products that provide limited quota or capabilities.
	ApprovalType string `protobuf:"bytes,2,opt,name=approval_type,json=approvalType,proto3" json:"approval_type,omitempty"`
	// Array of attributes that may be used to extend the default API product profile with customer-specific metadata. You can specify a maximum of 18 attributes. Use this property to specify the access level of the API product as either `public`, `private`, or `internal`. Only products marked `public` are available to developers in the Apigee developer portal. For example, you can set a product to `internal` while it is in development and then change access to `public` when it is ready to release on the portal. API products marked as `private` do not appear on the portal, but can be accessed by external developers.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Response only. Creation time of this environment as milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Description of the API product. Include key information about the API product that is not captured by other fields.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Name displayed in the UI or developer portal to developers registering for API access.
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Comma-separated list of environment names to which the API product is bound. Requests to environments that are not listed are rejected. By specifying one or more environments, you can bind the resources listed in the API product to a specific environment, preventing developers from accessing those resources through API proxies deployed in another environment. This setting is used, for example, to prevent resources associated with API proxies in `prod` from being accessed by API proxies deployed in `test`.
	Environments []string `protobuf:"bytes,7,rep,name=environments,proto3" json:"environments,omitempty"`
	// Configuration used to group Apigee proxies or remote services with graphQL operation name, graphQL operation type and quotas. This grouping allows us to precisely set quota for a particular combination of graphQL name and operation type for a particular proxy request. If graphQL name is not set, this would imply quota will be applied on all graphQL requests matching the operation type.
	GraphqlOperationGroup *GoogleCloudApigeeV1GraphQLOperationGroup `protobuf:"bytes,8,opt,name=graphql_operation_group,json=graphqlOperationGroup,proto3" json:"graphql_operation_group,omitempty"`
	// Optional. Configuration used to group Apigee proxies with gRPC services and method names. This grouping allows us to set quota for a particular proxy with the gRPC service name and method. If a method name is not set, this implies quota and authorization are applied to all gRPC methods implemented by that proxy for that particular gRPC service.
	GrpcOperationGroup *GoogleCloudApigeeV1GrpcOperationGroup `protobuf:"bytes,9,opt,name=grpc_operation_group,json=grpcOperationGroup,proto3" json:"grpc_operation_group,omitempty"`
	// Response only. Modified time of this environment as milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,10,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Internal name of the API product. Characters you can use in the name are restricted to: `A-Z0-9._\-$ %`. **Note:** The internal name cannot be edited when updating the API product.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration used to group Apigee proxies or remote services with resources, method types, and quotas. The resource refers to the resource URI (excluding the base path). With this grouping, the API product creator is able to fine-tune and give precise control over which REST methods have access to specific resources and how many calls can be made (using the `quota` setting). **Note:** The `api_resources` setting cannot be specified for both the API product and operation group; otherwise the call will fail.
	OperationGroup *GoogleCloudApigeeV1OperationGroup `protobuf:"bytes,12,opt,name=operation_group,json=operationGroup,proto3" json:"operation_group,omitempty"`
	// Comma-separated list of API proxy names to which this API product is bound. By specifying API proxies, you can associate resources in the API product with specific API proxies, preventing developers from accessing those resources through other API proxies. Apigee rejects requests to API proxies that are not listed. **Note:** The API proxy names must already exist in the specified environment as they will be validated upon creation.
	Proxies []string `protobuf:"bytes,13,rep,name=proxies,proto3" json:"proxies,omitempty"`
	// Number of request messages permitted per app by this API product for the specified `quotaInterval` and `quotaTimeUnit`. For example, a `quota` of 50, for a `quotaInterval` of 12 and a `quotaTimeUnit` of hours means 50 requests are allowed every 12 hours.
	Quota string `protobuf:"bytes,14,opt,name=quota,proto3" json:"quota,omitempty"`
	// Scope of the quota decides how the quota counter gets applied and evaluate for quota violation. If the Scope is set as PROXY, then all the operations defined for the APIproduct that are associated with the same proxy will share the same quota counter set at the APIproduct level, making it a global counter at a proxy level. If the Scope is set as OPERATION, then each operations get the counter set at the API product dedicated, making it a local counter. Note that, the QuotaCounterScope applies only when an operation does not have dedicated quota set for itself.
	QuotaCounterScope string `protobuf:"bytes,15,opt,name=quota_counter_scope,json=quotaCounterScope,proto3" json:"quota_counter_scope,omitempty"`
	// Time interval over which the number of request messages is calculated.
	QuotaInterval string `protobuf:"bytes,16,opt,name=quota_interval,json=quotaInterval,proto3" json:"quota_interval,omitempty"`
	// Time unit defined for the `quotaInterval`. Valid values include `minute`, `hour`, `day`, or `month`.
	QuotaTimeUnit string `protobuf:"bytes,17,opt,name=quota_time_unit,json=quotaTimeUnit,proto3" json:"quota_time_unit,omitempty"`
	// Comma-separated list of OAuth scopes that are validated at runtime. Apigee validates that the scopes in any access token presented match the scopes defined in the OAuth policy associated with the API product.
	Scopes []string `protobuf:"bytes,18,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiProduct) Reset() {
	*x = GoogleCloudApigeeV1ApiProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiProduct) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiProduct) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiProduct.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiProduct) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *GoogleCloudApigeeV1ApiProduct) GetApiResources() []string {
	if x != nil {
		return x.ApiResources
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetApprovalType() string {
	if x != nil {
		return x.ApprovalType
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiProduct) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetGraphqlOperationGroup() *GoogleCloudApigeeV1GraphQLOperationGroup {
	if x != nil {
		return x.GraphqlOperationGroup
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetGrpcOperationGroup() *GoogleCloudApigeeV1GrpcOperationGroup {
	if x != nil {
		return x.GrpcOperationGroup
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetOperationGroup() *GoogleCloudApigeeV1OperationGroup {
	if x != nil {
		return x.OperationGroup
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProduct) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetQuotaCounterScope() string {
	if x != nil {
		return x.QuotaCounterScope
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetQuotaInterval() string {
	if x != nil {
		return x.QuotaInterval
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetQuotaTimeUnit() string {
	if x != nil {
		return x.QuotaTimeUnit
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProduct) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GoogleCloudApigeeV1ApiProductRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the API product.
	Apiproduct string `protobuf:"bytes,1,opt,name=apiproduct,proto3" json:"apiproduct,omitempty"`
	// Status of the API product. Valid values are `approved` or `revoked`.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiProductRef) Reset() {
	*x = GoogleCloudApigeeV1ApiProductRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiProductRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiProductRef) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiProductRef) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiProductRef.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiProductRef) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *GoogleCloudApigeeV1ApiProductRef) GetApiproduct() string {
	if x != nil {
		return x.Apiproduct
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProductRef) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Metadata describing the API proxy
type GoogleCloudApigeeV1ApiProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The type of the API proxy.
	ApiProxyType string `protobuf:"bytes,1,opt,name=api_proxy_type,json=apiProxyType,proto3" json:"api_proxy_type,omitempty"`
	// User labels applied to this API Proxy.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The id of the most recently created revision for this api proxy.
	LatestRevisionId string `protobuf:"bytes,3,opt,name=latest_revision_id,json=latestRevisionId,proto3" json:"latest_revision_id,omitempty"`
	// Output only. Metadata describing the API proxy.
	MetaData *GoogleCloudApigeeV1EntityMetadata `protobuf:"bytes,4,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	// Output only. Name of the API proxy.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Whether this proxy is read-only. A read-only proxy cannot have new revisions created through calls to CreateApiProxyRevision. A proxy is read-only if it was generated by an archive.
	ReadOnly bool `protobuf:"varint,6,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Output only. List of revisions defined for the API proxy.
	Revision []string `protobuf:"bytes,7,rep,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiProxy) Reset() {
	*x = GoogleCloudApigeeV1ApiProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiProxy) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiProxy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiProxy.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiProxy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *GoogleCloudApigeeV1ApiProxy) GetApiProxyType() string {
	if x != nil {
		return x.ApiProxyType
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxy) GetLatestRevisionId() string {
	if x != nil {
		return x.LatestRevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxy) GetMetaData() *GoogleCloudApigeeV1EntityMetadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxy) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiProxy) GetRevision() []string {
	if x != nil {
		return x.Revision
	}
	return nil
}

// API proxy revision.
type GoogleCloudApigeeV1ApiProxyRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The archive that generated this proxy revision. This field is only present on proxy revisions that were generated by an archive. Proxies generated by archives cannot be updated, deleted, or deployed to other environments. Format: `organizations/*/environments/*/archiveDeployments/*`
	Archive string `protobuf:"bytes,1,opt,name=archive,proto3" json:"archive,omitempty"`
	// Base URL of the API proxy.
	Basepaths []string `protobuf:"bytes,2,rep,name=basepaths,proto3" json:"basepaths,omitempty"`
	// Version of the API proxy configuration schema to which the API proxy conforms. Currently, the only supported value is 4.0 (`majorVersion.minorVersion`). This setting may be used in the future to track the evolution of the API proxy format.
	ConfigurationVersion *GoogleCloudApigeeV1ConfigVersion `protobuf:"bytes,3,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty"`
	// Revision number, app name, and organization for the API proxy.
	ContextInfo string `protobuf:"bytes,4,opt,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty"`
	// Time that the API proxy revision was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Description of the API proxy revision.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Human-readable name of the API proxy.
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Metadata describing the API proxy revision as a key-value map.
	EntityMetaDataAsProperties map[string]string `protobuf:"bytes,8,rep,name=entity_meta_data_as_properties,json=entityMetaDataAsProperties,proto3" json:"entity_meta_data_as_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. This field will be marked as true if revision contains any policies marked as extensible.
	HasExtensiblePolicy bool `protobuf:"varint,9,opt,name=has_extensible_policy,json=hasExtensiblePolicy,proto3" json:"has_extensible_policy,omitempty"`
	// List of IntegrationEndpoints in the '/integration-endpoints' directory of the API proxy. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.
	IntegrationEndpoints []string `protobuf:"bytes,10,rep,name=integration_endpoints,json=integrationEndpoints,proto3" json:"integration_endpoints,omitempty"`
	// Time that the API proxy revision was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,11,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Name of the API proxy.
	Name string `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
	// List of policy names included in the API proxy revision..
	Policies []string `protobuf:"bytes,13,rep,name=policies,proto3" json:"policies,omitempty"`
	// List of proxy names included in the API proxy revision.
	Proxies []string `protobuf:"bytes,14,rep,name=proxies,proto3" json:"proxies,omitempty"`
	// List of ProxyEndpoints in the `/proxies` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.
	ProxyEndpoints []string `protobuf:"bytes,15,rep,name=proxy_endpoints,json=proxyEndpoints,proto3" json:"proxy_endpoints,omitempty"`
	// List of resource files included in the API proxy revision.
	ResourceFiles *GoogleCloudApigeeV1ResourceFiles `protobuf:"bytes,16,opt,name=resource_files,json=resourceFiles,proto3" json:"resource_files,omitempty"`
	// List of the resources included in the API proxy revision formatted as "{type}://{name}".
	Resources []string `protobuf:"bytes,17,rep,name=resources,proto3" json:"resources,omitempty"`
	// API proxy revision.
	Revision string `protobuf:"bytes,18,opt,name=revision,proto3" json:"revision,omitempty"`
	// List of the shared flows included in the API proxy revision.
	SharedFlows []string `protobuf:"bytes,19,rep,name=shared_flows,json=sharedFlows,proto3" json:"shared_flows,omitempty"`
	// OpenAPI Specification that is associated with the API proxy. The value is set to a URL or to a path in the specification store.
	Spec string `protobuf:"bytes,20,opt,name=spec,proto3" json:"spec,omitempty"`
	// List of TargetEndpoints in the `/targets` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.
	TargetEndpoints []string `protobuf:"bytes,21,rep,name=target_endpoints,json=targetEndpoints,proto3" json:"target_endpoints,omitempty"`
	// List of TargetServers referenced in any TargetEndpoint in the API proxy. Typically, you will see this element only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.
	TargetServers []string `protobuf:"bytes,22,rep,name=target_servers,json=targetServers,proto3" json:"target_servers,omitempty"`
	// List of the targets included in the API proxy revision.
	Targets []string `protobuf:"bytes,23,rep,name=targets,proto3" json:"targets,omitempty"`
	// List of the teams included in the API proxy revision.
	Teams []string `protobuf:"bytes,24,rep,name=teams,proto3" json:"teams,omitempty"`
	// Type. Set to `Application`. Maintained for compatibility with the Apigee Edge API.
	Type string `protobuf:"bytes,25,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) Reset() {
	*x = GoogleCloudApigeeV1ApiProxyRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiProxyRevision) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiProxyRevision) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiProxyRevision.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiProxyRevision) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetArchive() string {
	if x != nil {
		return x.Archive
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetBasepaths() []string {
	if x != nil {
		return x.Basepaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetConfigurationVersion() *GoogleCloudApigeeV1ConfigVersion {
	if x != nil {
		return x.ConfigurationVersion
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetContextInfo() string {
	if x != nil {
		return x.ContextInfo
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetEntityMetaDataAsProperties() map[string]string {
	if x != nil {
		return x.EntityMetaDataAsProperties
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetHasExtensiblePolicy() bool {
	if x != nil {
		return x.HasExtensiblePolicy
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetIntegrationEndpoints() []string {
	if x != nil {
		return x.IntegrationEndpoints
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetProxies() []string {
	if x != nil {
		return x.Proxies
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetProxyEndpoints() []string {
	if x != nil {
		return x.ProxyEndpoints
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetResourceFiles() *GoogleCloudApigeeV1ResourceFiles {
	if x != nil {
		return x.ResourceFiles
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetSharedFlows() []string {
	if x != nil {
		return x.SharedFlows
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetTargetEndpoints() []string {
	if x != nil {
		return x.TargetEndpoints
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetTargetServers() []string {
	if x != nil {
		return x.TargetServers
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiProxyRevision) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Configurations of the API Security add-on.
type GoogleCloudApigeeV1ApiSecurityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the API security add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Output only. Time at which the API Security add-on expires in in milliseconds since epoch. If unspecified, the add-on will never expire.
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiSecurityConfig) Reset() {
	*x = GoogleCloudApigeeV1ApiSecurityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiSecurityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiSecurityConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiSecurityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiSecurityConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiSecurityConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *GoogleCloudApigeeV1ApiSecurityConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1ApiSecurityConfig) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// Response for GetApiSecurityRuntimeConfig[EnvironmentService.GetApiSecurityRuntimeConfig].
type GoogleCloudApigeeV1ApiSecurityRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of up to 5 Cloud Storage Blobs that contain SecurityActions.
	Location []string `protobuf:"bytes,1,rep,name=location,proto3" json:"location,omitempty"`
	// Name of the environment API Security Runtime configuration resource. Format: `organizations/{org}/environments/{env}/apiSecurityRuntimeConfig`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Revision ID of the API Security Runtime configuration. The higher the value, the more recently the configuration was deployed.
	RevisionId int64 `protobuf:"varint,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Unique ID for the API Security Runtime configuration. The ID will only change if the environment is deleted and recreated.
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	// Time that the API Security Runtime configuration was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) Reset() {
	*x = GoogleCloudApigeeV1ApiSecurityRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ApiSecurityRuntimeConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GoogleCloudApigeeV1ApiSecurityRuntimeConfig) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type GoogleCloudApigeeV1App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of API products associated with the app.
	ApiProducts []*GoogleCloudApigeeV1ApiProductRef `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// Name of the AppGroup
	AppGroup string `protobuf:"bytes,2,opt,name=app_group,json=appGroup,proto3" json:"app_group,omitempty"`
	// ID of the app.
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// List of attributes.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to apps.
	CallbackUrl string `protobuf:"bytes,5,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	// Name of the company that owns the app.
	CompanyName string `protobuf:"bytes,6,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// Output only. Unix time when the app was created.
	CreatedAt int64 `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output only. Set of credentials for the app. Credentials are API key/secret pairs associated with API products.
	Credentials []*GoogleCloudApigeeV1Credential `protobuf:"bytes,8,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Email of the developer.
	DeveloperEmail string `protobuf:"bytes,9,opt,name=developer_email,json=developerEmail,proto3" json:"developer_email,omitempty"`
	// ID of the developer.
	DeveloperId string `protobuf:"bytes,10,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	// Duration, in milliseconds, of the consumer key that will be generated for the app. The default value, -1, indicates an infinite validity period. Once set, the expiration can't be updated. json key: keyExpiresIn
	KeyExpiresIn int64 `protobuf:"varint,11,opt,name=key_expires_in,json=keyExpiresIn,proto3" json:"key_expires_in,omitempty"`
	// Output only. Last modified time as milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,12,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Name of the app.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Scopes to apply to the app. The specified scope names must already exist on the API product that you associate with the app.
	Scopes []string `protobuf:"bytes,14,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the credential.
	Status string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1App) Reset() {
	*x = GoogleCloudApigeeV1App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1App) ProtoMessage() {}

func (x *GoogleCloudApigeeV1App) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1App.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1App) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{28}
}

func (x *GoogleCloudApigeeV1App) GetApiProducts() []*GoogleCloudApigeeV1ApiProductRef {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1App) GetAppGroup() string {
	if x != nil {
		return x.AppGroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1App) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1App) GetCredentials() []*GoogleCloudApigeeV1Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *GoogleCloudApigeeV1App) GetDeveloperEmail() string {
	if x != nil {
		return x.DeveloperEmail
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetKeyExpiresIn() int64 {
	if x != nil {
		return x.KeyExpiresIn
	}
	return 0
}

func (x *GoogleCloudApigeeV1App) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1App) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1App) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// AppGroup contains the request/response fields representing the logical grouping of apps. Note that appgroup_id, create_time and update_time cannot be changed by the user, and gets updated by the system. The name and the organization once provided cannot be edited subsequently.
type GoogleCloudApigeeV1AppGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Internal identifier that cannot be edited
	AppGroupId string `protobuf:"bytes,1,opt,name=app_group_id,json=appGroupId,proto3" json:"app_group_id,omitempty"`
	// A list of attributes
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// channel identifier identifies the owner maintaing this grouping.
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// A reference to the associated storefront/marketplace.
	ChannelUri string `protobuf:"bytes,4,opt,name=channel_uri,json=channelUri,proto3" json:"channel_uri,omitempty"`
	// Output only. Created time as milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// app group name displayed in the UI
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Modified time as milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,7,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Immutable. Name of the AppGroup. Characters you can use in the name are restricted to: A-Z0-9._\-$ %.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Immutable. the org the app group is created
	Organization string `protobuf:"bytes,9,opt,name=organization,proto3" json:"organization,omitempty"`
	// Valid values are `active` or `inactive`. Note that the status of the AppGroup should be updated via UpdateAppGroupRequest by setting the action as `active` or `inactive`.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1AppGroup) Reset() {
	*x = GoogleCloudApigeeV1AppGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AppGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AppGroup) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AppGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AppGroup.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AppGroup) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{29}
}

func (x *GoogleCloudApigeeV1AppGroup) GetAppGroupId() string {
	if x != nil {
		return x.AppGroupId
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroup) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetChannelUri() string {
	if x != nil {
		return x.ChannelUri
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroup) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroup) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Response for [GetAppGroupApp].[AppGroupApps.GetAppGroupApp], [CreateAppGroupAppRequest].[AppGroupApp.CreateAppGroupAppRequest] and [DeleteAppGroupApp].[AppGroupApp.DeleteAppGroupApp]
type GoogleCloudApigeeV1AppGroupApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of API products associated with the AppGroup app.
	ApiProducts []string `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// Immutable. Name of the parent AppGroup whose resource name format is of syntax (organizations/*/appgroups/*).
	AppGroup string `protobuf:"bytes,2,opt,name=app_group,json=appGroup,proto3" json:"app_group,omitempty"`
	// Immutable. ID of the AppGroup app.
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// List of attributes for the AppGroup app.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to AppGroup apps.
	CallbackUrl string `protobuf:"bytes,5,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	// Output only. Time the AppGroup app was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output only. Set of credentials for the AppGroup app consisting of the consumer key/secret pairs associated with the API products.
	Credentials []*GoogleCloudApigeeV1Credential `protobuf:"bytes,7,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// Immutable. Expiration time, in seconds, for the consumer key that is generated for the AppGroup app. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn int64 `protobuf:"varint,8,opt,name=key_expires_in,json=keyExpiresIn,proto3" json:"key_expires_in,omitempty"`
	// Output only. Time the AppGroup app was modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,9,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Immutable. Name of the AppGroup app whose resource name format is of syntax (organizations/*/appgroups/*/apps/*).
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Scopes to apply to the AppGroup app. The specified scopes must already exist for the API product that you associate with the AppGroup app.
	Scopes []string `protobuf:"bytes,11,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the App. Valid values include `approved` or `revoked`.
	Status string `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1AppGroupApp) Reset() {
	*x = GoogleCloudApigeeV1AppGroupApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AppGroupApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AppGroupApp) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AppGroupApp) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AppGroupApp.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AppGroupApp) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{30}
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetApiProducts() []string {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetAppGroup() string {
	if x != nil {
		return x.AppGroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetCredentials() []*GoogleCloudApigeeV1Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetKeyExpiresIn() int64 {
	if x != nil {
		return x.KeyExpiresIn
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupApp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// AppGroupAppKey contains all the information associated with the credentials.
type GoogleCloudApigeeV1AppGroupAppKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of API products and its status for which the credential can be used. **Note**: Use UpdateAppGroupAppKeyApiProductRequest API to make the association after the consumer key and secret are created.
	ApiProducts []*GoogleCloudApigeeV1APIProductAssociation `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// List of attributes associated with the credential.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Immutable. Consumer key.
	ConsumerKey string `protobuf:"bytes,3,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	// Secret key.
	ConsumerSecret string `protobuf:"bytes,4,opt,name=consumer_secret,json=consumerSecret,proto3" json:"consumer_secret,omitempty"`
	// Output only. Time the AppGroup app expires in milliseconds since epoch.
	ExpiresAt int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Immutable. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	ExpiresInSeconds int64 `protobuf:"varint,6,opt,name=expires_in_seconds,json=expiresInSeconds,proto3" json:"expires_in_seconds,omitempty"`
	// Output only. Time the AppGroup app was created in milliseconds since epoch.
	IssuedAt int64 `protobuf:"varint,7,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
	Scopes []string `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) Reset() {
	*x = GoogleCloudApigeeV1AppGroupAppKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AppGroupAppKey) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AppGroupAppKey) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AppGroupAppKey.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AppGroupAppKey) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{31}
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetApiProducts() []*GoogleCloudApigeeV1APIProductAssociation {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetConsumerSecret() string {
	if x != nil {
		return x.ConsumerSecret
	}
	return ""
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetExpiresInSeconds() int64 {
	if x != nil {
		return x.ExpiresInSeconds
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1AppGroupAppKey) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Archive Deployment information.
type GoogleCloudApigeeV1ArchiveDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time at which the Archive Deployment was created in milliseconds since the epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Input only. The Google Cloud Storage signed URL returned from GenerateUploadUrl and used to upload the Archive zip file.
	GcsUri string `protobuf:"bytes,2,opt,name=gcs_uri,json=gcsUri,proto3" json:"gcs_uri,omitempty"`
	// User-supplied key-value pairs used to organize ArchiveDeployments. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \p{Ll}\p{Lo}{0,62} Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\p{Ll}\p{Lo}\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Name of the Archive Deployment in the following format: `organizations/{org}/environments/{env}/archiveDeployments/{id}`.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. A reference to the LRO that created this Archive Deployment in the following format: `organizations/{org}/operations/{id}`
	Operation string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	// Output only. The time at which the Archive Deployment was updated in milliseconds since the epoch.
	UpdatedAt int64 `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) Reset() {
	*x = GoogleCloudApigeeV1ArchiveDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ArchiveDeployment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ArchiveDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ArchiveDeployment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ArchiveDeployment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{32}
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetGcsUri() string {
	if x != nil {
		return x.GcsUri
	}
	return ""
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GoogleCloudApigeeV1ArchiveDeployment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GoogleCloudApigeeV1AsyncQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation time of the query.
	Created string `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Hostname is available only when query is executed at host level.
	EnvgroupHostname string `protobuf:"bytes,2,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	// Error is set when query fails.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// ExecutionTime is available only after the query is completed.
	ExecutionTime string `protobuf:"bytes,4,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Asynchronous Query Name.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Contains information like metrics, dimenstions etc of the AsyncQuery.
	QueryParams *GoogleCloudApigeeV1QueryMetadata `protobuf:"bytes,6,opt,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	// Asynchronous Report ID.
	ReportDefinitionId string `protobuf:"bytes,7,opt,name=report_definition_id,json=reportDefinitionId,proto3" json:"report_definition_id,omitempty"`
	// Result is available only after the query is completed.
	Result *GoogleCloudApigeeV1AsyncQueryResult `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	// ResultFileSize is available only after the query is completed.
	ResultFileSize string `protobuf:"bytes,9,opt,name=result_file_size,json=resultFileSize,proto3" json:"result_file_size,omitempty"`
	// ResultRows is available only after the query is completed.
	ResultRows int64 `protobuf:"varint,10,opt,name=result_rows,json=resultRows,proto3" json:"result_rows,omitempty"`
	// Self link of the query. Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd` or following format if query is running at host level: `/organizations/myorg/hostQueries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
	Self string `protobuf:"bytes,11,opt,name=self,proto3" json:"self,omitempty"`
	// Query state could be "enqueued", "running", "completed", "failed".
	State string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	// Last updated timestamp for the query.
	Updated string `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *GoogleCloudApigeeV1AsyncQuery) Reset() {
	*x = GoogleCloudApigeeV1AsyncQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AsyncQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AsyncQuery) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AsyncQuery) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AsyncQuery.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AsyncQuery) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{33}
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetQueryParams() *GoogleCloudApigeeV1QueryMetadata {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetReportDefinitionId() string {
	if x != nil {
		return x.ReportDefinitionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetResult() *GoogleCloudApigeeV1AsyncQueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetResultFileSize() string {
	if x != nil {
		return x.ResultFileSize
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetResultRows() int64 {
	if x != nil {
		return x.ResultRows
	}
	return 0
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQuery) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

type GoogleCloudApigeeV1AsyncQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query result will be unaccessable after this time.
	Expires string `protobuf:"bytes,1,opt,name=expires,proto3" json:"expires,omitempty"`
	// Self link of the query results. Example: `/organizations/myorg/environments/myenv/queries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result` or following format if query is running at host level: `/organizations/myorg/hostQueries/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result`
	Self string `protobuf:"bytes,2,opt,name=self,proto3" json:"self,omitempty"`
}

func (x *GoogleCloudApigeeV1AsyncQueryResult) Reset() {
	*x = GoogleCloudApigeeV1AsyncQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AsyncQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AsyncQueryResult) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AsyncQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AsyncQueryResult.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AsyncQueryResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{34}
}

func (x *GoogleCloudApigeeV1AsyncQueryResult) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQueryResult) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

type GoogleCloudApigeeV1AsyncQueryResultView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code when there is a failure.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error message when there is a failure.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Metadata contains information like metrics, dimenstions etc of the AsyncQuery.
	Metadata *GoogleCloudApigeeV1QueryMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Rows of query result. Each row is a JSON object. Example: {sum(message_count): 1, developer_app: "(not set)",…}
	Rows []*any1.Any `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	// State of retrieving ResultView.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) Reset() {
	*x = GoogleCloudApigeeV1AsyncQueryResultView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1AsyncQueryResultView) ProtoMessage() {}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1AsyncQueryResultView.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1AsyncQueryResultView) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{35}
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) GetMetadata() *GoogleCloudApigeeV1QueryMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) GetRows() []*any1.Any {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GoogleCloudApigeeV1AsyncQueryResultView) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// Key-value pair to store extra metadata.
type GoogleCloudApigeeV1Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key of the attribute.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the attribute.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1Attribute) Reset() {
	*x = GoogleCloudApigeeV1Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Attribute) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Attribute.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Attribute) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{36}
}

func (x *GoogleCloudApigeeV1Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GoogleCloudApigeeV1Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of attributes.
	Attribute []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,1,rep,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *GoogleCloudApigeeV1Attributes) Reset() {
	*x = GoogleCloudApigeeV1Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Attributes) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Attributes.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Attributes) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{37}
}

func (x *GoogleCloudApigeeV1Attributes) GetAttribute() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

// Request for BatchComputeSecurityAssessmentResults.
type GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Include only these resources.
	Include *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray `protobuf:"bytes,1,opt,name=include,proto3" json:"include,omitempty"`
	// Include all resources under the scope.
	IncludeAllResources *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll `protobuf:"bytes,2,opt,name=include_all_resources,json=includeAllResources,proto3" json:"include_all_resources,omitempty"`
	// Optional. The maximum number of results to return. The service may return fewer than this value. If unspecified, at most 50 results will be returned.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `BatchComputeSecurityAssessmentResults` call. Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Required. Name of the profile that is used for computation.
	Profile string `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	// Required. Scope of the resources for the computation. For Apigee, the environment is the scope of the resources.
	Scope string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) Reset() {
	*x = GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{38}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetInclude() *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray {
	if x != nil {
		return x.Include
	}
	return nil
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetIncludeAllResources() *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll {
	if x != nil {
		return x.IncludeAllResources
	}
	return nil
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

// Message for include_all option.
type GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll) Reset() {
	*x = GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{39}
}

// An array of resource messages.
type GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The array of resources. For Apigee, the proxies are resources.
	Resources []*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) Reset() {
	*x = GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{40}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray) GetResources() []*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Resource for which we are computing security assessment.
type GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of this resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Type of this resource.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) Reset() {
	*x = GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) ProtoMessage() {
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{41}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Response for BatchComputeSecurityAssessmentResults.
type GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time of the assessment api call.
	AssessmentTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=assessment_time,json=assessmentTime,proto3" json:"assessment_time,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page. If this field is blank, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Default sort order is by resource name in alphabetic order.
	SecurityAssessmentResults []*GoogleCloudApigeeV1SecurityAssessmentResult `protobuf:"bytes,3,rep,name=security_assessment_results,json=securityAssessmentResults,proto3" json:"security_assessment_results,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) Reset() {
	*x = GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{42}
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) GetAssessmentTime() *timestamp.Timestamp {
	if x != nil {
		return x.AssessmentTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse) GetSecurityAssessmentResults() []*GoogleCloudApigeeV1SecurityAssessmentResult {
	if x != nil {
		return x.SecurityAssessmentResults
	}
	return nil
}

// Request for BatchUpdateSecurityIncident.
type GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Required. The request message specifying the resources to update. A maximum of 1000 can be modified in a batch.
	Requests []*GoogleCloudApigeeV1UpdateSecurityIncidentRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) Reset() {
	*x = GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{43}
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest) GetRequests() []*GoogleCloudApigeeV1UpdateSecurityIncidentRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response for BatchUpdateSecurityIncident.
type GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Updated security incidents
	SecurityIncidents []*GoogleCloudApigeeV1SecurityIncident `protobuf:"bytes,1,rep,name=security_incidents,json=securityIncidents,proto3" json:"security_incidents,omitempty"`
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) Reset() {
	*x = GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{44}
}

func (x *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse) GetSecurityIncidents() []*GoogleCloudApigeeV1SecurityIncident {
	if x != nil {
		return x.SecurityIncidents
	}
	return nil
}

// CanaryEvaluation represents the canary analysis between two versions of the runtime that is serving requests.
type GoogleCloudApigeeV1CanaryEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The stable version that is serving requests.
	Control string `protobuf:"bytes,1,opt,name=control,proto3" json:"control,omitempty"`
	// Output only. Create time of the canary evaluation.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Required. End time for the evaluation's analysis.
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Required. Labels used to filter the metrics used for a canary evaluation.
	MetricLabels *GoogleCloudApigeeV1CanaryEvaluationMetricLabels `protobuf:"bytes,4,opt,name=metric_labels,json=metricLabels,proto3" json:"metric_labels,omitempty"`
	// Output only. Name of the canary evalution.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Start time for the canary evaluation's analysis.
	StartTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Output only. The current state of the canary evaluation.
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// Required. The newer version that is serving requests.
	Treatment string `protobuf:"bytes,8,opt,name=treatment,proto3" json:"treatment,omitempty"`
	// Output only. The resulting verdict of the canary evaluations: NONE, PASS, or FAIL.
	Verdict string `protobuf:"bytes,9,opt,name=verdict,proto3" json:"verdict,omitempty"`
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) Reset() {
	*x = GoogleCloudApigeeV1CanaryEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CanaryEvaluation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CanaryEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CanaryEvaluation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CanaryEvaluation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{45}
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetControl() string {
	if x != nil {
		return x.Control
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetMetricLabels() *GoogleCloudApigeeV1CanaryEvaluationMetricLabels {
	if x != nil {
		return x.MetricLabels
	}
	return nil
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetTreatment() string {
	if x != nil {
		return x.Treatment
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluation) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

// Labels that can be used to filter Apigee metrics.
type GoogleCloudApigeeV1CanaryEvaluationMetricLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The environment ID associated with the metrics.
	Env string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	// Required. The instance ID associated with the metrics. In Apigee Hybrid, the value is configured during installation.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,proto3" json:"instance_id,omitempty"`
	// Required. The location associated with the metrics.
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) Reset() {
	*x = GoogleCloudApigeeV1CanaryEvaluationMetricLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CanaryEvaluationMetricLabels) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CanaryEvaluationMetricLabels.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CanaryEvaluationMetricLabels) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{46}
}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *GoogleCloudApigeeV1CanaryEvaluationMetricLabels) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

// X.509 certificate as defined in RFC 5280.
type GoogleCloudApigeeV1CertInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X.509 basic constraints extension.
	BasicConstraints string `protobuf:"bytes,1,opt,name=basic_constraints,json=basicConstraints,proto3" json:"basic_constraints,omitempty"`
	// X.509 `notAfter` validity period in milliseconds since epoch.
	ExpiryDate int64 `protobuf:"varint,2,opt,name=expiry_date,json=expiryDate,proto3" json:"expiry_date,omitempty"`
	// Flag that specifies whether the certificate is valid. Flag is set to `Yes` if the certificate is valid, `No` if expired, or `Not yet` if not yet valid.
	IsValid string `protobuf:"bytes,3,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	// X.509 issuer.
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Public key component of the X.509 subject public key info.
	PublicKey string `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// X.509 serial number.
	SerialNumber string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// X.509 signatureAlgorithm.
	SigAlgName string `protobuf:"bytes,7,opt,name=sig_alg_name,json=sigAlgName,proto3" json:"sig_alg_name,omitempty"`
	// X.509 subject.
	Subject string `protobuf:"bytes,8,opt,name=subject,proto3" json:"subject,omitempty"`
	// X.509 subject alternative names (SANs) extension.
	SubjectAlternativeNames []string `protobuf:"bytes,9,rep,name=subject_alternative_names,json=subjectAlternativeNames,proto3" json:"subject_alternative_names,omitempty"`
	// X.509 `notBefore` validity period in milliseconds since epoch.
	ValidFrom int64 `protobuf:"varint,10,opt,name=valid_from,json=validFrom,proto3" json:"valid_from,omitempty"`
	// X.509 version.
	Version int32 `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GoogleCloudApigeeV1CertInfo) Reset() {
	*x = GoogleCloudApigeeV1CertInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CertInfo) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CertInfo.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CertInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{47}
}

func (x *GoogleCloudApigeeV1CertInfo) GetBasicConstraints() string {
	if x != nil {
		return x.BasicConstraints
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetExpiryDate() int64 {
	if x != nil {
		return x.ExpiryDate
	}
	return 0
}

func (x *GoogleCloudApigeeV1CertInfo) GetIsValid() string {
	if x != nil {
		return x.IsValid
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetSigAlgName() string {
	if x != nil {
		return x.SigAlgName
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GoogleCloudApigeeV1CertInfo) GetSubjectAlternativeNames() []string {
	if x != nil {
		return x.SubjectAlternativeNames
	}
	return nil
}

func (x *GoogleCloudApigeeV1CertInfo) GetValidFrom() int64 {
	if x != nil {
		return x.ValidFrom
	}
	return 0
}

func (x *GoogleCloudApigeeV1CertInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type GoogleCloudApigeeV1Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain of certificates under this name.
	CertInfo []*GoogleCloudApigeeV1CertInfo `protobuf:"bytes,1,rep,name=cert_info,json=certInfo,proto3" json:"cert_info,omitempty"`
}

func (x *GoogleCloudApigeeV1Certificate) Reset() {
	*x = GoogleCloudApigeeV1Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Certificate) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Certificate.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Certificate) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{48}
}

func (x *GoogleCloudApigeeV1Certificate) GetCertInfo() []*GoogleCloudApigeeV1CertInfo {
	if x != nil {
		return x.CertInfo
	}
	return nil
}

type GoogleCloudApigeeV1CommonNameConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchWildCards bool   `protobuf:"varint,1,opt,name=match_wild_cards,json=matchWildCards,proto3" json:"match_wild_cards,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1CommonNameConfig) Reset() {
	*x = GoogleCloudApigeeV1CommonNameConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CommonNameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CommonNameConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CommonNameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CommonNameConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CommonNameConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{49}
}

func (x *GoogleCloudApigeeV1CommonNameConfig) GetMatchWildCards() bool {
	if x != nil {
		return x.MatchWildCards
	}
	return false
}

func (x *GoogleCloudApigeeV1CommonNameConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for ComputeEnvironmentScores.
type GoogleCloudApigeeV1ComputeEnvironmentScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Filters are used to filter scored components. Return all the components if no filter is mentioned. Example: [{ "scorePath": "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source" }, { "scorePath": "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/target", }] This will return components with path: "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source" OR "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/target"
	Filters []*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. The maximum number of subcomponents to be returned in a single page. The service may return fewer than this value. If unspecified, at most 100 subcomponents will be returned in a single page.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Required. Time range for score calculation. At most 14 days of scores will be returned, and both the start and end dates must be within the last 90 days.
	TimeRange *GoogleTypeInterval `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) Reset() {
	*x = GoogleCloudApigeeV1ComputeEnvironmentScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ComputeEnvironmentScoresRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{50}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) GetFilters() []*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest) GetTimeRange() *GoogleTypeInterval {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

// Filter scores by component path. Used custom filter instead of AIP-160 as the use cases are highly constrained and predictable.
type GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Return scores for this component. Example: "/org@myorg/envgroup@myenvgroup/env@myenv/proxies/proxy@myproxy/source"
	ScorePath string `protobuf:"bytes,1,opt,name=score_path,json=scorePath,proto3" json:"score_path,omitempty"`
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) Reset() {
	*x = GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{51}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter) GetScorePath() string {
	if x != nil {
		return x.ScorePath
	}
	return ""
}

// Response for ComputeEnvironmentScores.
type GoogleCloudApigeeV1ComputeEnvironmentScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A page token, received from a previous `ComputeScore` call. Provide this to retrieve the subsequent page.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of scores. One score per day.
	Scores []*GoogleCloudApigeeV1Score `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) Reset() {
	*x = GoogleCloudApigeeV1ComputeEnvironmentScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ComputeEnvironmentScoresResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{52}
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ComputeEnvironmentScoresResponse) GetScores() []*GoogleCloudApigeeV1Score {
	if x != nil {
		return x.Scores
	}
	return nil
}

// Version of the API proxy configuration schema. Currently, only 4.0 is supported.
type GoogleCloudApigeeV1ConfigVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Major version of the API proxy configuration schema.
	MajorVersion int32 `protobuf:"varint,1,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	// Minor version of the API proxy configuration schema.
	MinorVersion int32 `protobuf:"varint,2,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
}

func (x *GoogleCloudApigeeV1ConfigVersion) Reset() {
	*x = GoogleCloudApigeeV1ConfigVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ConfigVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ConfigVersion) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ConfigVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ConfigVersion.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ConfigVersion) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{53}
}

func (x *GoogleCloudApigeeV1ConfigVersion) GetMajorVersion() int32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *GoogleCloudApigeeV1ConfigVersion) GetMinorVersion() int32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

// Configuration for the Connectors Platform add-on.
type GoogleCloudApigeeV1ConnectorsPlatformConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the Connectors Platform add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Output only. Time at which the Connectors Platform add-on expires in milliseconds since epoch. If unspecified, the add-on will never expire.
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *GoogleCloudApigeeV1ConnectorsPlatformConfig) Reset() {
	*x = GoogleCloudApigeeV1ConnectorsPlatformConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ConnectorsPlatformConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ConnectorsPlatformConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ConnectorsPlatformConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ConnectorsPlatformConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ConnectorsPlatformConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{54}
}

func (x *GoogleCloudApigeeV1ConnectorsPlatformConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1ConnectorsPlatformConfig) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// ControlPlaneAccess is the request body and response body of UpdateControlPlaneAccess. and the response body of GetControlPlaneAccess. The input identities contains an array of service accounts to grant access to the respective control plane resource, with each service account specified using the following format: `serviceAccount:`***service-account-name***. The ***service-account-name*** is formatted like an email address. For example: `my-control-plane-service_account@my_project_id.iam.gserviceaccount.com` You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one.
type GoogleCloudApigeeV1ControlPlaneAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Array of service accounts authorized to publish analytics data to the control plane (for the Message Processor component).
	AnalyticsPublisherIdentities []string `protobuf:"bytes,1,rep,name=analytics_publisher_identities,json=analyticsPublisherIdentities,proto3" json:"analytics_publisher_identities,omitempty"`
	// Identifier. The resource name of the ControlPlaneAccess. Format: "organizations/{org}/controlPlaneAccess"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Array of service accounts to grant access to control plane resources (for the Synchronizer component). The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).
	SynchronizerIdentities []string `protobuf:"bytes,3,rep,name=synchronizer_identities,json=synchronizerIdentities,proto3" json:"synchronizer_identities,omitempty"`
}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) Reset() {
	*x = GoogleCloudApigeeV1ControlPlaneAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ControlPlaneAccess) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ControlPlaneAccess.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ControlPlaneAccess) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{55}
}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) GetAnalyticsPublisherIdentities() []string {
	if x != nil {
		return x.AnalyticsPublisherIdentities
	}
	return nil
}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ControlPlaneAccess) GetSynchronizerIdentities() []string {
	if x != nil {
		return x.SynchronizerIdentities
	}
	return nil
}

type GoogleCloudApigeeV1Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of API products this credential can be used for.
	ApiProducts []*GoogleCloudApigeeV1ApiProductRef `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// List of attributes associated with this credential.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Consumer key.
	ConsumerKey string `protobuf:"bytes,3,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	// Secret key.
	ConsumerSecret string `protobuf:"bytes,4,opt,name=consumer_secret,json=consumerSecret,proto3" json:"consumer_secret,omitempty"`
	// Time the credential will expire in milliseconds since epoch.
	ExpiresAt int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Time the credential was issued in milliseconds since epoch.
	IssuedAt int64 `protobuf:"varint,6,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// List of scopes to apply to the app. Specified scopes must already exist on the API product that you associate with the app.
	Scopes []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1Credential) Reset() {
	*x = GoogleCloudApigeeV1Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Credential) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Credential) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Credential.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Credential) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{56}
}

func (x *GoogleCloudApigeeV1Credential) GetApiProducts() []*GoogleCloudApigeeV1ApiProductRef {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1Credential) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1Credential) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *GoogleCloudApigeeV1Credential) GetConsumerSecret() string {
	if x != nil {
		return x.ConsumerSecret
	}
	return ""
}

func (x *GoogleCloudApigeeV1Credential) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Credential) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Credential) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1Credential) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Request for CreditDeveloperBalance.
type GoogleCloudApigeeV1CreditDeveloperBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of money to be credited. The wallet corresponding to the currency specified within `transaction_amount` will be updated. For example, if you specified `currency_code` within `transaction_amount` as "USD", then the amount would be added to the wallet which has the "USD" currency or if no such wallet exists, a new wallet will be created with the "USD" currency.
	TransactionAmount *GoogleTypeMoney `protobuf:"bytes,1,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount,omitempty"`
	// Each transaction_id uniquely identifies a credit balance request. If multiple requests are received with the same transaction_id, only one of them will be considered.
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GoogleCloudApigeeV1CreditDeveloperBalanceRequest) Reset() {
	*x = GoogleCloudApigeeV1CreditDeveloperBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CreditDeveloperBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CreditDeveloperBalanceRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CreditDeveloperBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CreditDeveloperBalanceRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CreditDeveloperBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{57}
}

func (x *GoogleCloudApigeeV1CreditDeveloperBalanceRequest) GetTransactionAmount() *GoogleTypeMoney {
	if x != nil {
		return x.TransactionAmount
	}
	return nil
}

func (x *GoogleCloudApigeeV1CreditDeveloperBalanceRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GoogleCloudApigeeV1CustomReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field contains the chart type for the report
	ChartType string `protobuf:"bytes,1,opt,name=chart_type,json=chartType,proto3" json:"chart_type,omitempty"`
	// Legacy field: not used. This field contains a list of comments associated with custom report
	Comments []string `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	// Output only. Unix time when the app was created json key: createdAt
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// This contains the list of dimensions for the report
	Dimensions []string `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// This is the display name for the report
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Environment name
	Environment string `protobuf:"bytes,6,opt,name=environment,proto3" json:"environment,omitempty"`
	// This field contains the filter expression
	Filter string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	// Legacy field: not used. Contains the from time for the report
	FromTime string `protobuf:"bytes,8,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// Output only. Modified time of this entity as milliseconds since epoch. json key: lastModifiedAt
	LastModifiedAt int64 `protobuf:"varint,9,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Output only. Last viewed time of this entity as milliseconds since epoch
	LastViewedAt int64 `protobuf:"varint,10,opt,name=last_viewed_at,json=lastViewedAt,proto3" json:"last_viewed_at,omitempty"`
	// Legacy field: not used This field contains the limit for the result retrieved
	Limit string `protobuf:"bytes,11,opt,name=limit,proto3" json:"limit,omitempty"`
	// Required. This contains the list of metrics
	Metrics []*GoogleCloudApigeeV1CustomReportMetric `protobuf:"bytes,12,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Required. Unique identifier for the report T his is a legacy field used to encode custom report unique id
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// Legacy field: not used. This field contains the offset for the data
	Offset string `protobuf:"bytes,14,opt,name=offset,proto3" json:"offset,omitempty"`
	// Output only. Organization name
	Organization string `protobuf:"bytes,15,opt,name=organization,proto3" json:"organization,omitempty"`
	// This field contains report properties such as ui metadata etc.
	Properties []*GoogleCloudApigeeV1ReportProperty `protobuf:"bytes,16,rep,name=properties,proto3" json:"properties,omitempty"`
	// Legacy field: not used much. Contains the list of sort by columns
	SortByCols []string `protobuf:"bytes,17,rep,name=sort_by_cols,json=sortByCols,proto3" json:"sort_by_cols,omitempty"`
	// Legacy field: not used much. Contains the sort order for the sort columns
	SortOrder string `protobuf:"bytes,18,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	// Legacy field: not used. This field contains a list of tags associated with custom report
	Tags []string `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	// This field contains the time unit of aggregation for the report
	TimeUnit string `protobuf:"bytes,20,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	// Legacy field: not used. Contains the end time for the report
	ToTime string `protobuf:"bytes,21,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Legacy field: not used. This field contains the top k parameter value for restricting the result
	Topk string `protobuf:"bytes,22,opt,name=topk,proto3" json:"topk,omitempty"`
}

func (x *GoogleCloudApigeeV1CustomReport) Reset() {
	*x = GoogleCloudApigeeV1CustomReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CustomReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CustomReport) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CustomReport) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CustomReport.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CustomReport) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{58}
}

func (x *GoogleCloudApigeeV1CustomReport) GetChartType() string {
	if x != nil {
		return x.ChartType
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1CustomReport) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetFromTime() string {
	if x != nil {
		return x.FromTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1CustomReport) GetLastViewedAt() int64 {
	if x != nil {
		return x.LastViewedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1CustomReport) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetMetrics() []*GoogleCloudApigeeV1CustomReportMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetProperties() []*GoogleCloudApigeeV1ReportProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetSortByCols() []string {
	if x != nil {
		return x.SortByCols
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GoogleCloudApigeeV1CustomReport) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetToTime() string {
	if x != nil {
		return x.ToTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReport) GetTopk() string {
	if x != nil {
		return x.Topk
	}
	return ""
}

// This encapsulates a metric property of the form sum(message_count) where name is message_count and function is sum
type GoogleCloudApigeeV1CustomReportMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aggregate function
	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// name of the metric
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1CustomReportMetric) Reset() {
	*x = GoogleCloudApigeeV1CustomReportMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1CustomReportMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1CustomReportMetric) ProtoMessage() {}

func (x *GoogleCloudApigeeV1CustomReportMetric) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1CustomReportMetric.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1CustomReportMetric) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{59}
}

func (x *GoogleCloudApigeeV1CustomReportMetric) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *GoogleCloudApigeeV1CustomReportMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Data collector configuration.
type GoogleCloudApigeeV1DataCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time at which the data collector was created in milliseconds since the epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// A description of the data collector.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which the Data Collector was last updated in milliseconds since the epoch.
	LastModifiedAt int64 `protobuf:"varint,3,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// ID of the data collector. Must begin with `dc_`.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Immutable. The type of data this data collector will collect.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1DataCollector) Reset() {
	*x = GoogleCloudApigeeV1DataCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DataCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DataCollector) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DataCollector) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DataCollector.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DataCollector) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{60}
}

func (x *GoogleCloudApigeeV1DataCollector) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DataCollector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1DataCollector) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DataCollector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DataCollector) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Data collector and its configuration.
type GoogleCloudApigeeV1DataCollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the data collector in the following format: `organizations/{org}/datacollectors/{datacollector}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Data type accepted by the data collector.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1DataCollectorConfig) Reset() {
	*x = GoogleCloudApigeeV1DataCollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DataCollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DataCollectorConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DataCollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DataCollectorConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DataCollectorConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{61}
}

func (x *GoogleCloudApigeeV1DataCollectorConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DataCollectorConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The data store defines the connection to export data repository (Cloud Storage, BigQuery), including the credentials used to access the data repository.
type GoogleCloudApigeeV1Datastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Datastore create time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	CreateTime int64 `protobuf:"varint,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Datastore Configurations.
	DatastoreConfig *GoogleCloudApigeeV1DatastoreConfig `protobuf:"bytes,2,opt,name=datastore_config,json=datastoreConfig,proto3" json:"datastore_config,omitempty"`
	// Required. Display name in UI
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Datastore last update time, in milliseconds since the epoch of 1970-01-01T00:00:00Z
	LastUpdateTime int64 `protobuf:"varint,4,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Output only. Organization that the datastore belongs to
	Org string `protobuf:"bytes,5,opt,name=org,proto3" json:"org,omitempty"`
	// Output only. Resource link of Datastore. Example: `/organizations/{org}/analytics/datastores/{uuid}`
	Self string `protobuf:"bytes,6,opt,name=self,proto3" json:"self,omitempty"`
	// Destination storage type. Supported types `gcs` or `bigquery`.
	TargetType string `protobuf:"bytes,7,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
}

func (x *GoogleCloudApigeeV1Datastore) Reset() {
	*x = GoogleCloudApigeeV1Datastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Datastore) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Datastore.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Datastore) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{62}
}

func (x *GoogleCloudApigeeV1Datastore) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1Datastore) GetDatastoreConfig() *GoogleCloudApigeeV1DatastoreConfig {
	if x != nil {
		return x.DatastoreConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1Datastore) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Datastore) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1Datastore) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *GoogleCloudApigeeV1Datastore) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *GoogleCloudApigeeV1Datastore) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

// Configuration detail for datastore
type GoogleCloudApigeeV1DatastoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Cloud Storage bucket. Required for `gcs` target_type.
	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// BigQuery dataset name Required for `bigquery` target_type.
	DatasetName string `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	// Path of Cloud Storage bucket Required for `gcs` target_type.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Required. Google Cloud project in which the datastore exists
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Prefix of BigQuery table Required for `bigquery` target_type.
	TablePrefix string `protobuf:"bytes,5,opt,name=table_prefix,json=tablePrefix,proto3" json:"table_prefix,omitempty"`
}

func (x *GoogleCloudApigeeV1DatastoreConfig) Reset() {
	*x = GoogleCloudApigeeV1DatastoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DatastoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DatastoreConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DatastoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DatastoreConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DatastoreConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{63}
}

func (x *GoogleCloudApigeeV1DatastoreConfig) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GoogleCloudApigeeV1DatastoreConfig) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *GoogleCloudApigeeV1DatastoreConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GoogleCloudApigeeV1DatastoreConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GoogleCloudApigeeV1DatastoreConfig) GetTablePrefix() string {
	if x != nil {
		return x.TablePrefix
	}
	return ""
}

// Date range of the data to export.
type GoogleCloudApigeeV1DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. End date (exclusive) of the data to export in the format `yyyy-mm-dd`. The date range ends at 00:00:00 UTC on the end date- which will not be in the output.
	End string `protobuf:"bytes,1,opt,name=end,proto3" json:"end,omitempty"`
	// Required. Start date of the data to export in the format `yyyy-mm-dd`. The date range begins at 00:00:00 UTC on the start date.
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *GoogleCloudApigeeV1DateRange) Reset() {
	*x = GoogleCloudApigeeV1DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DateRange) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DateRange.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DateRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{64}
}

func (x *GoogleCloudApigeeV1DateRange) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GoogleCloudApigeeV1DateRange) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

type GoogleCloudApigeeV1DebugMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of JSON paths that specify the JSON elements to be filtered from JSON payloads in error flows.
	FaultJSONPaths []string `protobuf:"bytes,1,rep,name=fault_j_s_o_n_paths,json=faultJSONPaths,proto3" json:"fault_j_s_o_n_paths,omitempty"`
	// List of XPaths that specify the XML elements to be filtered from XML payloads in error flows.
	FaultXPaths []string `protobuf:"bytes,2,rep,name=fault_x_paths,json=faultXPaths,proto3" json:"fault_x_paths,omitempty"`
	// Name of the debug mask.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Map of namespaces to URIs.
	Namespaces map[string]string `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of JSON paths that specify the JSON elements to be filtered from JSON request message payloads.
	RequestJSONPaths []string `protobuf:"bytes,5,rep,name=request_j_s_o_n_paths,json=requestJSONPaths,proto3" json:"request_j_s_o_n_paths,omitempty"`
	// List of XPaths that specify the XML elements to be filtered from XML request message payloads.
	RequestXPaths []string `protobuf:"bytes,6,rep,name=request_x_paths,json=requestXPaths,proto3" json:"request_x_paths,omitempty"`
	// List of JSON paths that specify the JSON elements to be filtered from JSON response message payloads.
	ResponseJSONPaths []string `protobuf:"bytes,7,rep,name=response_j_s_o_n_paths,json=responseJSONPaths,proto3" json:"response_j_s_o_n_paths,omitempty"`
	// List of XPaths that specify the XML elements to be filtered from XML response message payloads.
	ResponseXPaths []string `protobuf:"bytes,8,rep,name=response_x_paths,json=responseXPaths,proto3" json:"response_x_paths,omitempty"`
	// List of variables that should be masked from the debug output.
	Variables []string `protobuf:"bytes,9,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *GoogleCloudApigeeV1DebugMask) Reset() {
	*x = GoogleCloudApigeeV1DebugMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DebugMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DebugMask) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DebugMask) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DebugMask.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DebugMask) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{65}
}

func (x *GoogleCloudApigeeV1DebugMask) GetFaultJSONPaths() []string {
	if x != nil {
		return x.FaultJSONPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetFaultXPaths() []string {
	if x != nil {
		return x.FaultXPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DebugMask) GetNamespaces() map[string]string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetRequestJSONPaths() []string {
	if x != nil {
		return x.RequestJSONPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetRequestXPaths() []string {
	if x != nil {
		return x.RequestXPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetResponseJSONPaths() []string {
	if x != nil {
		return x.ResponseJSONPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetResponseXPaths() []string {
	if x != nil {
		return x.ResponseXPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugMask) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type GoogleCloudApigeeV1DebugSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The number of request to be traced. Min = 1, Max = 15, Default = 10.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Output only. The first transaction creation timestamp, recorded by UAP.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. A conditional statement which is evaluated against the request message to determine if it should be traced. Syntax matches that of on API Proxy bundle flow Condition.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// A unique ID for this DebugSession.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The time in seconds after which this DebugSession should end. This value will override the value in query param, if both are provided.
	Timeout int64 `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Optional. The maximum number of bytes captured from the response payload. Min = 0, Max = 5120, Default = 5120.
	Tracesize int32 `protobuf:"varint,6,opt,name=tracesize,proto3" json:"tracesize,omitempty"`
	// Optional. The length of time, in seconds, that this debug session is valid, starting from when it's received in the control plane. Min = 1, Max = 15, Default = 10.
	Validity int32 `protobuf:"varint,7,opt,name=validity,proto3" json:"validity,omitempty"`
}

func (x *GoogleCloudApigeeV1DebugSession) Reset() {
	*x = GoogleCloudApigeeV1DebugSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DebugSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DebugSession) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DebugSession) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DebugSession.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DebugSession) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{66}
}

func (x *GoogleCloudApigeeV1DebugSession) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GoogleCloudApigeeV1DebugSession) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1DebugSession) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1DebugSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DebugSession) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *GoogleCloudApigeeV1DebugSession) GetTracesize() int32 {
	if x != nil {
		return x.Tracesize
	}
	return 0
}

func (x *GoogleCloudApigeeV1DebugSession) GetValidity() int32 {
	if x != nil {
		return x.Validity
	}
	return 0
}

// A transaction contains all of the debug information of the entire message flow of an API call processed by the runtime plane. The information is collected and recorded at critical points of the message flow in the runtime apiproxy.
type GoogleCloudApigeeV1DebugSessionTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag indicating whether a transaction is completed or not
	Completed bool `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`
	// List of debug data collected by runtime plane at various defined points in the flow.
	Point []*GoogleCloudApigeeV1Point `protobuf:"bytes,2,rep,name=point,proto3" json:"point,omitempty"`
}

func (x *GoogleCloudApigeeV1DebugSessionTransaction) Reset() {
	*x = GoogleCloudApigeeV1DebugSessionTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DebugSessionTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DebugSessionTransaction) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DebugSessionTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DebugSessionTransaction.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DebugSessionTransaction) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{67}
}

func (x *GoogleCloudApigeeV1DebugSessionTransaction) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *GoogleCloudApigeeV1DebugSessionTransaction) GetPoint() []*GoogleCloudApigeeV1Point {
	if x != nil {
		return x.Point
	}
	return nil
}

type GoogleCloudApigeeV1DeleteCustomReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response contains only a message field.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GoogleCloudApigeeV1DeleteCustomReportResponse) Reset() {
	*x = GoogleCloudApigeeV1DeleteCustomReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeleteCustomReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeleteCustomReportResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeleteCustomReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeleteCustomReportResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeleteCustomReportResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{68}
}

func (x *GoogleCloudApigeeV1DeleteCustomReportResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Response for certain delete operations.
type GoogleCloudApigeeV1DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Google Cloud name of deleted resource.
	GcpResource string `protobuf:"bytes,2,opt,name=gcp_resource,json=gcpResource,proto3" json:"gcp_resource,omitempty"`
	// Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Unique ID of the request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Status of the operation.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1DeleteResponse) Reset() {
	*x = GoogleCloudApigeeV1DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeleteResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeleteResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeleteResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{69}
}

func (x *GoogleCloudApigeeV1DeleteResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeleteResponse) GetGcpResource() string {
	if x != nil {
		return x.GcpResource
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeleteResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeleteResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API proxy.
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// Time the API proxy was marked `deployed` in the control plane in millisconds since epoch.
	DeployStartTime int64 `protobuf:"varint,2,opt,name=deploy_start_time,json=deployStartTime,proto3" json:"deploy_start_time,omitempty"`
	// Environment.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Errors reported for this deployment. Populated only when state == ERROR. **Note**: This field is displayed only when viewing deployment status.
	Errors []*GoogleRpcStatus `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	// Status reported by each runtime instance. **Note**: This field is displayed only when viewing deployment status.
	Instances []*GoogleCloudApigeeV1InstanceDeploymentStatus `protobuf:"bytes,5,rep,name=instances,proto3" json:"instances,omitempty"`
	// Status reported by runtime pods. **Note**: **This field is deprecated**. Runtime versions 1.3 and above report instance level status rather than pod status.
	Pods []*GoogleCloudApigeeV1PodStatus `protobuf:"bytes,6,rep,name=pods,proto3" json:"pods,omitempty"`
	// Output only. The type of the deployment (standard or extensible) Deployed proxy revision will be marked as extensible in following 2 cases. 1. The deployed proxy revision uses extensible policies. 2. If a environment supports flowhooks and flow hook is configured.
	ProxyDeploymentType string `protobuf:"bytes,7,opt,name=proxy_deployment_type,json=proxyDeploymentType,proto3" json:"proxy_deployment_type,omitempty"`
	// API proxy revision.
	Revision string `protobuf:"bytes,8,opt,name=revision,proto3" json:"revision,omitempty"`
	// Conflicts in the desired state routing configuration. The presence of conflicts does not cause the state to be `ERROR`, but it will mean that some of the deployment's base paths are not routed to its environment. If the conflicts change, the state will transition to `PROGRESSING` until the latest configuration is rolled out to all instances. **Note**: This field is displayed only when viewing deployment status.
	RouteConflicts []*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict `protobuf:"bytes,9,rep,name=route_conflicts,json=routeConflicts,proto3" json:"route_conflicts,omitempty"`
	// The full resource name of Cloud IAM Service Account that this deployment is using, eg, `projects/-/serviceAccounts/{email}`.
	ServiceAccount string `protobuf:"bytes,10,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Current state of the deployment. **Note**: This field is displayed only when viewing deployment status.
	State string `protobuf:"bytes,11,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1Deployment) Reset() {
	*x = GoogleCloudApigeeV1Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Deployment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Deployment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Deployment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{70}
}

func (x *GoogleCloudApigeeV1Deployment) GetApiProxy() string {
	if x != nil {
		return x.ApiProxy
	}
	return ""
}

func (x *GoogleCloudApigeeV1Deployment) GetDeployStartTime() int64 {
	if x != nil {
		return x.DeployStartTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1Deployment) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1Deployment) GetErrors() []*GoogleRpcStatus {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GoogleCloudApigeeV1Deployment) GetInstances() []*GoogleCloudApigeeV1InstanceDeploymentStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GoogleCloudApigeeV1Deployment) GetPods() []*GoogleCloudApigeeV1PodStatus {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *GoogleCloudApigeeV1Deployment) GetProxyDeploymentType() string {
	if x != nil {
		return x.ProxyDeploymentType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Deployment) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *GoogleCloudApigeeV1Deployment) GetRouteConflicts() []*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict {
	if x != nil {
		return x.RouteConflicts
	}
	return nil
}

func (x *GoogleCloudApigeeV1Deployment) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *GoogleCloudApigeeV1Deployment) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// Response for GenerateDeployChangeReport and GenerateUndeployChangeReport. This report contains any validation failures that would cause the deployment to be rejected, as well changes and conflicts in routing that may occur due to the new deployment. The existence of a routing warning does not necessarily imply that the deployment request is bad, if the desired state of the deployment request is to effect a routing change. The primary purposes of the routing messages are: 1) To inform users of routing changes that may have an effect on traffic currently being routed to other existing deployments. 2) To warn users if some base path in the proxy will not receive traffic due to an existing deployment having already claimed that base path. The presence of routing conflicts/changes will not cause non-dry-run DeployApiProxy/UndeployApiProxy requests to be rejected.
type GoogleCloudApigeeV1DeploymentChangeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All routing changes that may result from a deployment request.
	RoutingChanges []*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange `protobuf:"bytes,1,rep,name=routing_changes,json=routingChanges,proto3" json:"routing_changes,omitempty"`
	// All base path conflicts detected for a deployment request.
	RoutingConflicts []*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict `protobuf:"bytes,2,rep,name=routing_conflicts,json=routingConflicts,proto3" json:"routing_conflicts,omitempty"`
	// Validation errors that would cause the deployment change request to be rejected.
	ValidationErrors *GoogleRpcPreconditionFailure `protobuf:"bytes,3,opt,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) Reset() {
	*x = GoogleCloudApigeeV1DeploymentChangeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentChangeReport) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentChangeReport.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentChangeReport) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{71}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) GetRoutingChanges() []*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange {
	if x != nil {
		return x.RoutingChanges
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) GetRoutingConflicts() []*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict {
	if x != nil {
		return x.RoutingConflicts
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentChangeReport) GetValidationErrors() *GoogleRpcPreconditionFailure {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

// Describes a potential routing change that may occur as a result of some deployment operation.
type GoogleCloudApigeeV1DeploymentChangeReportRoutingChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable description of this routing change.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the environment group affected by this routing change.
	EnvironmentGroup string `protobuf:"bytes,2,opt,name=environment_group,json=environmentGroup,proto3" json:"environment_group,omitempty"`
	// Base path/deployment that may stop receiving some traffic.
	FromDeployment *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment `protobuf:"bytes,3,opt,name=from_deployment,json=fromDeployment,proto3" json:"from_deployment,omitempty"`
	// Set to `true` if using sequenced rollout would make this routing change safer. **Note**: This does not necessarily imply that automated sequenced rollout mode is supported for the operation.
	ShouldSequenceRollout bool `protobuf:"varint,4,opt,name=should_sequence_rollout,json=shouldSequenceRollout,proto3" json:"should_sequence_rollout,omitempty"`
	// Base path/deployment that may start receiving that traffic. May be null if no deployment is able to receive the traffic.
	ToDeployment *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment `protobuf:"bytes,5,opt,name=to_deployment,json=toDeployment,proto3" json:"to_deployment,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) Reset() {
	*x = GoogleCloudApigeeV1DeploymentChangeReportRoutingChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentChangeReportRoutingChange.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{72}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) GetEnvironmentGroup() string {
	if x != nil {
		return x.EnvironmentGroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) GetFromDeployment() *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment {
	if x != nil {
		return x.FromDeployment
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) GetShouldSequenceRollout() bool {
	if x != nil {
		return x.ShouldSequenceRollout
	}
	return false
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingChange) GetToDeployment() *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment {
	if x != nil {
		return x.ToDeployment
	}
	return nil
}

// Describes a routing conflict that may cause a deployment not to receive traffic at some base path.
type GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Existing base path/deployment causing the conflict.
	ConflictingDeployment *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment `protobuf:"bytes,1,opt,name=conflicting_deployment,json=conflictingDeployment,proto3" json:"conflicting_deployment,omitempty"`
	// Human-readable description of this conflict.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the environment group in which this conflict exists.
	EnvironmentGroup string `protobuf:"bytes,3,opt,name=environment_group,json=environmentGroup,proto3" json:"environment_group,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) Reset() {
	*x = GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{73}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) GetConflictingDeployment() *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment {
	if x != nil {
		return x.ConflictingDeployment
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict) GetEnvironmentGroup() string {
	if x != nil {
		return x.EnvironmentGroup
	}
	return ""
}

// Tuple representing a base path and the deployment containing it.
type GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the deployed API proxy revision containing the base path.
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// Base path receiving traffic.
	Basepath string `protobuf:"bytes,2,opt,name=basepath,proto3" json:"basepath,omitempty"`
	// Name of the environment in which the proxy is deployed.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Name of the deployed API proxy revision containing the base path.
	Revision string `protobuf:"bytes,4,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) Reset() {
	*x = GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{74}
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) GetApiProxy() string {
	if x != nil {
		return x.ApiProxy
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) GetBasepath() string {
	if x != nil {
		return x.Basepath
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// NEXT ID: 11
type GoogleCloudApigeeV1DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional key-value metadata for the deployment.
	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Base path where the application will be hosted. Defaults to "/".
	BasePath string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// The list of deployment groups in which this proxy should be deployed. Not currently populated for shared flows.
	DeploymentGroups []string `protobuf:"bytes,3,rep,name=deployment_groups,json=deploymentGroups,proto3" json:"deployment_groups,omitempty"`
	// A mapping from basepaths to proxy endpoint names in this proxy. Not populated for shared flows.
	Endpoints map[string]string `protobuf:"bytes,4,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of the API proxy bundle as a URI.
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the API or shared flow revision to be deployed in the following format: `organizations/{org}/apis/{api}/revisions/{rev}` or `organizations/{org}/sharedflows/{sharedflow}/revisions/{rev}`
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Unique ID of the API proxy revision.
	ProxyUid string `protobuf:"bytes,7,opt,name=proxy_uid,json=proxyUid,proto3" json:"proxy_uid,omitempty"`
	// The service account identity associated with this deployment. If non-empty, will be in the following format: `projects/-/serviceAccounts/{account_email}`
	ServiceAccount string `protobuf:"bytes,8,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Unique ID. The ID will only change if the deployment is deleted and recreated.
	Uid string `protobuf:"bytes,9,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentConfig) Reset() {
	*x = GoogleCloudApigeeV1DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{75}
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetBasePath() string {
	if x != nil {
		return x.BasePath
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetDeploymentGroups() []string {
	if x != nil {
		return x.DeploymentGroups
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetProxyUid() string {
	if x != nil {
		return x.ProxyUid
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// DeploymentGroupConfig represents a deployment group that should be present in a particular environment.
type GoogleCloudApigeeV1DeploymentGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the deployment group, which will be either Standard or Extensible.
	DeploymentGroupType string `protobuf:"bytes,1,opt,name=deployment_group_type,json=deploymentGroupType,proto3" json:"deployment_group_type,omitempty"`
	// Name of the deployment group in the following format: `organizations/{org}/environments/{env}/deploymentGroups/{group}`.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Revision number which can be used by the runtime to detect if the deployment group has changed between two versions.
	RevisionId int64 `protobuf:"varint,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Unique ID. The ID will only change if the deployment group is deleted and recreated.
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) Reset() {
	*x = GoogleCloudApigeeV1DeploymentGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeploymentGroupConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeploymentGroupConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeploymentGroupConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{76}
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) GetDeploymentGroupType() string {
	if x != nil {
		return x.DeploymentGroupType
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeploymentGroupConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type GoogleCloudApigeeV1Developer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access type.
	AccessType string `protobuf:"bytes,1,opt,name=access_type,json=accessType,proto3" json:"access_type,omitempty"`
	// Developer app family.
	AppFamily string `protobuf:"bytes,2,opt,name=app_family,json=appFamily,proto3" json:"app_family,omitempty"`
	// List of apps associated with the developer.
	Apps []string `protobuf:"bytes,3,rep,name=apps,proto3" json:"apps,omitempty"`
	// Optional. Developer attributes (name/value pairs). The custom attribute limit is 18.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// List of companies associated with the developer.
	Companies []string `protobuf:"bytes,5,rep,name=companies,proto3" json:"companies,omitempty"`
	// Output only. Time at which the developer was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ID of the developer. **Note**: IDs are generated internally by Apigee and are not guaranteed to stay the same over time.
	DeveloperId string `protobuf:"bytes,7,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	// Required. Email address of the developer. This value is used to uniquely identify the developer in Apigee hybrid. Note that the email address has to be in lowercase only.
	Email string `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	// Required. First name of the developer.
	FirstName string `protobuf:"bytes,9,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Output only. Time at which the developer was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,10,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Required. Last name of the developer.
	LastName string `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Output only. Name of the Apigee organization in which the developer resides.
	OrganizationName string `protobuf:"bytes,12,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// Output only. Status of the developer. Valid values are `active` and `inactive`.
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	// Required. User name of the developer. Not used by Apigee hybrid.
	UserName string `protobuf:"bytes,14,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *GoogleCloudApigeeV1Developer) Reset() {
	*x = GoogleCloudApigeeV1Developer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Developer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Developer) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Developer) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Developer.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Developer) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{77}
}

func (x *GoogleCloudApigeeV1Developer) GetAccessType() string {
	if x != nil {
		return x.AccessType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetAppFamily() string {
	if x != nil {
		return x.AppFamily
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetApps() []string {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *GoogleCloudApigeeV1Developer) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1Developer) GetCompanies() []string {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *GoogleCloudApigeeV1Developer) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Developer) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Developer) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GoogleCloudApigeeV1Developer) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type GoogleCloudApigeeV1DeveloperApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of API products associated with the developer app.
	ApiProducts []string `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// Developer app family.
	AppFamily string `protobuf:"bytes,2,opt,name=app_family,json=appFamily,proto3" json:"app_family,omitempty"`
	// ID of the developer app.
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// List of attributes for the developer app.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Callback URL used by OAuth 2.0 authorization servers to communicate authorization codes back to developer apps.
	CallbackUrl string `protobuf:"bytes,5,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	// Output only. Time the developer app was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Output only. Set of credentials for the developer app consisting of the consumer key/secret pairs associated with the API products.
	Credentials []*GoogleCloudApigeeV1Credential `protobuf:"bytes,7,rep,name=credentials,proto3" json:"credentials,omitempty"`
	// ID of the developer.
	DeveloperId string `protobuf:"bytes,8,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	// Expiration time, in milliseconds, for the consumer key that is generated for the developer app. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	KeyExpiresIn int64 `protobuf:"varint,9,opt,name=key_expires_in,json=keyExpiresIn,proto3" json:"key_expires_in,omitempty"`
	// Output only. Time the developer app was modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,10,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Name of the developer app.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Scopes to apply to the developer app. The specified scopes must already exist for the API product that you associate with the developer app.
	Scopes []string `protobuf:"bytes,12,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperApp) Reset() {
	*x = GoogleCloudApigeeV1DeveloperApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperApp) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperApp) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperApp.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperApp) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{78}
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetApiProducts() []string {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetAppFamily() string {
	if x != nil {
		return x.AppFamily
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetCredentials() []*GoogleCloudApigeeV1Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetKeyExpiresIn() int64 {
	if x != nil {
		return x.KeyExpiresIn
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperApp) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1DeveloperAppKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of API products for which the credential can be used. **Note**: Do not specify the list of API products when creating a consumer key and secret for a developer app. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created.
	ApiProducts []*any1.Any `protobuf:"bytes,1,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// List of attributes associated with the credential.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Consumer key.
	ConsumerKey string `protobuf:"bytes,3,opt,name=consumer_key,json=consumerKey,proto3" json:"consumer_key,omitempty"`
	// Secret key.
	ConsumerSecret string `protobuf:"bytes,4,opt,name=consumer_secret,json=consumerSecret,proto3" json:"consumer_secret,omitempty"`
	// Time the developer app expires in milliseconds since epoch.
	ExpiresAt int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Input only. Expiration time, in seconds, for the consumer key. If not set or left to the default value of `-1`, the API key never expires. The expiration time can't be updated after it is set.
	ExpiresInSeconds int64 `protobuf:"varint,6,opt,name=expires_in_seconds,json=expiresInSeconds,proto3" json:"expires_in_seconds,omitempty"`
	// Time the developer app was created in milliseconds since epoch.
	IssuedAt int64 `protobuf:"varint,7,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// Scopes to apply to the app. The specified scope names must already be defined for the API product that you associate with the app.
	Scopes []string `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// Status of the credential. Valid values include `approved` or `revoked`.
	Status string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) Reset() {
	*x = GoogleCloudApigeeV1DeveloperAppKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperAppKey) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperAppKey) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperAppKey.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperAppKey) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{79}
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetApiProducts() []*any1.Any {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetConsumerKey() string {
	if x != nil {
		return x.ConsumerKey
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetConsumerSecret() string {
	if x != nil {
		return x.ConsumerSecret
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetExpiresInSeconds() int64 {
	if x != nil {
		return x.ExpiresInSeconds
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperAppKey) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// Account balance for the developer.
type GoogleCloudApigeeV1DeveloperBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. List of all wallets. Each individual wallet stores the account balance for a particular currency.
	Wallets []*GoogleCloudApigeeV1DeveloperBalanceWallet `protobuf:"bytes,1,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperBalance) Reset() {
	*x = GoogleCloudApigeeV1DeveloperBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperBalance) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperBalance) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperBalance.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperBalance) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{80}
}

func (x *GoogleCloudApigeeV1DeveloperBalance) GetWallets() []*GoogleCloudApigeeV1DeveloperBalanceWallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

// Wallet used to manage an account balance for a particular currency.
type GoogleCloudApigeeV1DeveloperBalanceWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current remaining balance of the developer for a particular currency.
	Balance *GoogleTypeMoney `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// Output only. Time at which the developer last added credit to the account in milliseconds since epoch.
	LastCreditTime int64 `protobuf:"varint,2,opt,name=last_credit_time,json=lastCreditTime,proto3" json:"last_credit_time,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperBalanceWallet) Reset() {
	*x = GoogleCloudApigeeV1DeveloperBalanceWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperBalanceWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperBalanceWallet) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperBalanceWallet) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperBalanceWallet.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperBalanceWallet) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{81}
}

func (x *GoogleCloudApigeeV1DeveloperBalanceWallet) GetBalance() *GoogleTypeMoney {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *GoogleCloudApigeeV1DeveloperBalanceWallet) GetLastCreditTime() int64 {
	if x != nil {
		return x.LastCreditTime
	}
	return 0
}

// Monetization configuration for the developer.
type GoogleCloudApigeeV1DeveloperMonetizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Billing type.
	BillingType string `protobuf:"bytes,1,opt,name=billing_type,json=billingType,proto3" json:"billing_type,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperMonetizationConfig) Reset() {
	*x = GoogleCloudApigeeV1DeveloperMonetizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperMonetizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperMonetizationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperMonetizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperMonetizationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperMonetizationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{82}
}

func (x *GoogleCloudApigeeV1DeveloperMonetizationConfig) GetBillingType() string {
	if x != nil {
		return x.BillingType
	}
	return ""
}

// Structure of a DeveloperSubscription.
type GoogleCloudApigeeV1DeveloperSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the API product for which the developer is purchasing a subscription.
	Apiproduct string `protobuf:"bytes,1,opt,name=apiproduct,proto3" json:"apiproduct,omitempty"`
	// Output only. Time when the API product subscription was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time when the API product subscription ends in milliseconds since epoch.
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Time when the API product subscription was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,4,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Output only. Name of the API product subscription.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Time when the API product subscription starts in milliseconds since epoch.
	StartTime int64 `protobuf:"varint,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) Reset() {
	*x = GoogleCloudApigeeV1DeveloperSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DeveloperSubscription) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DeveloperSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DeveloperSubscription.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DeveloperSubscription) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{83}
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetApiproduct() string {
	if x != nil {
		return x.Apiproduct
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1DeveloperSubscription) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Encapsulates a metric grouped by dimension.
type GoogleCloudApigeeV1DimensionMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Individual dimension names. E.g. ["dim1_name", "dim2_name"].
	IndividualNames []string `protobuf:"bytes,1,rep,name=individual_names,json=individualNames,proto3" json:"individual_names,omitempty"`
	// List of metrics.
	Metrics []*GoogleCloudApigeeV1Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Comma joined dimension names. E.g. "dim1_name,dim2_name". Deprecated. If name already has comma before join, we may get wrong splits. Please use individual_names.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1DimensionMetric) Reset() {
	*x = GoogleCloudApigeeV1DimensionMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DimensionMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DimensionMetric) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DimensionMetric) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DimensionMetric.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DimensionMetric) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{84}
}

func (x *GoogleCloudApigeeV1DimensionMetric) GetIndividualNames() []string {
	if x != nil {
		return x.IndividualNames
	}
	return nil
}

func (x *GoogleCloudApigeeV1DimensionMetric) GetMetrics() []*GoogleCloudApigeeV1Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1DimensionMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message to disable an enabled SecurityAction.
type GoogleCloudApigeeV1DisableSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1DisableSecurityActionRequest) Reset() {
	*x = GoogleCloudApigeeV1DisableSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DisableSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DisableSecurityActionRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DisableSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DisableSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DisableSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{85}
}

// Documentation file contents for a catalog item.
type GoogleCloudApigeeV1DocumentationFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The file contents. The max size is 4 MB.
	Contents []byte `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	// Required. A display name for the file, shown in the management UI. Max length is 255 characters.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GoogleCloudApigeeV1DocumentationFile) Reset() {
	*x = GoogleCloudApigeeV1DocumentationFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1DocumentationFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1DocumentationFile) ProtoMessage() {}

func (x *GoogleCloudApigeeV1DocumentationFile) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1DocumentationFile.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1DocumentationFile) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{86}
}

func (x *GoogleCloudApigeeV1DocumentationFile) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *GoogleCloudApigeeV1DocumentationFile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// Message to enable a disabled SecurityAction.
type GoogleCloudApigeeV1EnableSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1EnableSecurityActionRequest) Reset() {
	*x = GoogleCloudApigeeV1EnableSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnableSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnableSecurityActionRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnableSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnableSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnableSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{87}
}

// Apigee endpoint attachment. For more information, see [Southbound networking patterns] (https://cloud.google.com/apigee/docs/api-platform/architecture/southbound-networking-patterns-endpoints).
type GoogleCloudApigeeV1EndpointAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. State of the endpoint attachment connection to the service attachment.
	ConnectionState string `protobuf:"bytes,1,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
	// Output only. Host that can be used in either the HTTP target endpoint directly or as the host in target server.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Required. Location of the endpoint attachment.
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the endpoint attachment. Use the following structure in your request: `organizations/{org}/endpointAttachments/{endpoint_attachment}`
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Format: projects/*/regions/*/serviceAttachments/*
	ServiceAttachment string `protobuf:"bytes,5,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
	// Output only. State of the endpoint attachment. Values other than `ACTIVE` mean the resource is not ready to use.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1EndpointAttachment) Reset() {
	*x = GoogleCloudApigeeV1EndpointAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EndpointAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EndpointAttachment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EndpointAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EndpointAttachment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EndpointAttachment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{88}
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetServiceAttachment() string {
	if x != nil {
		return x.ServiceAttachment
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointAttachment) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// EndpointChainingRule specifies the proxies contained in a particular deployment group, so that other deployment groups can find them in chaining calls.
type GoogleCloudApigeeV1EndpointChainingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deployment group to target for cross-shard chaining calls to these proxies.
	DeploymentGroup string `protobuf:"bytes,1,opt,name=deployment_group,json=deploymentGroup,proto3" json:"deployment_group,omitempty"`
	// List of proxy ids which may be found in the given deployment group.
	ProxyIds []string `protobuf:"bytes,2,rep,name=proxy_ids,json=proxyIds,proto3" json:"proxy_ids,omitempty"`
}

func (x *GoogleCloudApigeeV1EndpointChainingRule) Reset() {
	*x = GoogleCloudApigeeV1EndpointChainingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EndpointChainingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EndpointChainingRule) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EndpointChainingRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EndpointChainingRule.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EndpointChainingRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{89}
}

func (x *GoogleCloudApigeeV1EndpointChainingRule) GetDeploymentGroup() string {
	if x != nil {
		return x.DeploymentGroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1EndpointChainingRule) GetProxyIds() []string {
	if x != nil {
		return x.ProxyIds
	}
	return nil
}

// Metadata common to many entities in this API.
type GoogleCloudApigeeV1EntityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time at which the API proxy was created, in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time at which the API proxy was most recently modified, in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,2,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// The type of entity described
	SubType string `protobuf:"bytes,3,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
}

func (x *GoogleCloudApigeeV1EntityMetadata) Reset() {
	*x = GoogleCloudApigeeV1EntityMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EntityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EntityMetadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EntityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EntityMetadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EntityMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{90}
}

func (x *GoogleCloudApigeeV1EntityMetadata) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1EntityMetadata) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1EntityMetadata) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

type GoogleCloudApigeeV1Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. API Proxy type supported by the environment. The type can be set when creating the Environment and cannot be changed.
	ApiProxyType string `protobuf:"bytes,1,opt,name=api_proxy_type,json=apiProxyType,proto3" json:"api_proxy_type,omitempty"`
	// Optional. The algorithm to resolve IP. This will affect Analytics, API Security, and other features that use the client ip. To remove a client ip resolution config, update the field to an empty value. Example: '{ "clientIpResolutionConfig" = {} }' For more information, see: https://cloud.google.com/apigee/docs/api-platform/system-administration/client-ip-resolution.
	ClientIpResolutionConfig *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig `protobuf:"bytes,2,opt,name=client_ip_resolution_config,json=clientIpResolutionConfig,proto3" json:"client_ip_resolution_config,omitempty"`
	// Output only. Creation time of this environment as milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional. Deployment type supported by the environment. The deployment type can be set when creating the environment and cannot be changed. When you enable archive deployment, you will be **prevented from performing** a [subset of actions](/apigee/docs/api-platform/local-development/overview#prevented-actions) within the environment, including: * Managing the deployment of API proxy or shared flow revisions * Creating, updating, or deleting resource files * Creating, updating, or deleting target servers
	DeploymentType string `protobuf:"bytes,4,opt,name=deployment_type,json=deploymentType,proto3" json:"deployment_type,omitempty"`
	// Optional. Description of the environment.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Display name for this environment.
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. URI of the forward proxy to be applied to the runtime instances in this environment. Must be in the format of {scheme}://{hostname}:{port}. Note that the scheme must be one of "http" or "https", and the port must be supplied. To remove a forward proxy setting, update the field to an empty value. Note: At this time, PUT operations to add forwardProxyUri to an existing environment fail if the environment has nodeConfig set up. To successfully add the forwardProxyUri setting in this case, include the NodeConfig details with the request.
	ForwardProxyUri      string `protobuf:"bytes,7,opt,name=forward_proxy_uri,json=forwardProxyUri,proto3" json:"forward_proxy_uri,omitempty"`
	HasAttachedFlowHooks bool   `protobuf:"varint,8,opt,name=has_attached_flow_hooks,json=hasAttachedFlowHooks,proto3" json:"has_attached_flow_hooks,omitempty"`
	// Output only. Last modification time of this environment as milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,9,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Required. Name of the environment. Values must match the regular expression `^[.\\p{Alnum}-_]{1,255}$`
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. NodeConfig of the environment.
	NodeConfig *GoogleCloudApigeeV1NodeConfig `protobuf:"bytes,11,opt,name=node_config,json=nodeConfig,proto3" json:"node_config,omitempty"`
	// Optional. Key-value pairs that may be used for customizing the environment.
	Properties *GoogleCloudApigeeV1Properties `protobuf:"bytes,12,opt,name=properties,proto3" json:"properties,omitempty"`
	// Output only. State of the environment. Values other than ACTIVE means the resource is not ready to use.
	State string `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	// Optional. EnvironmentType selected for the environment.
	Type string `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1Environment) Reset() {
	*x = GoogleCloudApigeeV1Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Environment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Environment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Environment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Environment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{91}
}

func (x *GoogleCloudApigeeV1Environment) GetApiProxyType() string {
	if x != nil {
		return x.ApiProxyType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetClientIpResolutionConfig() *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig {
	if x != nil {
		return x.ClientIpResolutionConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1Environment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Environment) GetDeploymentType() string {
	if x != nil {
		return x.DeploymentType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetForwardProxyUri() string {
	if x != nil {
		return x.ForwardProxyUri
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetHasAttachedFlowHooks() bool {
	if x != nil {
		return x.HasAttachedFlowHooks
	}
	return false
}

func (x *GoogleCloudApigeeV1Environment) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Environment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetNodeConfig() *GoogleCloudApigeeV1NodeConfig {
	if x != nil {
		return x.NodeConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1Environment) GetProperties() *GoogleCloudApigeeV1Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GoogleCloudApigeeV1Environment) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1Environment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Configuration for resolving the client ip.
type GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolves the client ip based on a custom header.
	HeaderIndexAlgorithm *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm `protobuf:"bytes,1,opt,name=header_index_algorithm,json=headerIndexAlgorithm,proto3" json:"header_index_algorithm,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{92}
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig) GetHeaderIndexAlgorithm() *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm {
	if x != nil {
		return x.HeaderIndexAlgorithm
	}
	return nil
}

// Resolves the client ip based on a custom header.
type GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The index of the ip in the header. Positive indices 0, 1, 2, 3 chooses indices from the left (first ips) Negative indices -1, -2, -3 chooses indices from the right (last ips)
	IpHeaderIndex int32 `protobuf:"varint,1,opt,name=ip_header_index,json=ipHeaderIndex,proto3" json:"ip_header_index,omitempty"`
	// Required. The name of the header to extract the client ip from. We are currently only supporting the X-Forwarded-For header.
	IpHeaderName string `protobuf:"bytes,2,opt,name=ip_header_name,json=ipHeaderName,proto3" json:"ip_header_name,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{93}
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) GetIpHeaderIndex() int32 {
	if x != nil {
		return x.IpHeaderIndex
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm) GetIpHeaderName() string {
	if x != nil {
		return x.IpHeaderName
	}
	return ""
}

type GoogleCloudApigeeV1EnvironmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latest runtime configurations for add-ons.
	AddonsConfig *GoogleCloudApigeeV1RuntimeAddonsConfig `protobuf:"bytes,1,opt,name=addons_config,json=addonsConfig,proto3" json:"addons_config,omitempty"`
	// The location for the config blob of API Runtime Control, aka Envoy Adapter, for op-based authentication as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.
	ArcConfigLocation string `protobuf:"bytes,2,opt,name=arc_config_location,json=arcConfigLocation,proto3" json:"arc_config_location,omitempty"`
	// The algorithm to resolve IP.
	ClientIpResolutionConfig *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig `protobuf:"bytes,3,opt,name=client_ip_resolution_config,json=clientIpResolutionConfig,proto3" json:"client_ip_resolution_config,omitempty"`
	// Time that the environment configuration was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// List of data collectors used by the deployments in the environment.
	DataCollectors []*GoogleCloudApigeeV1DataCollectorConfig `protobuf:"bytes,5,rep,name=data_collectors,json=dataCollectors,proto3" json:"data_collectors,omitempty"`
	// Debug mask that applies to all deployments in the environment.
	DebugMask *GoogleCloudApigeeV1DebugMask `protobuf:"bytes,6,opt,name=debug_mask,json=debugMask,proto3" json:"debug_mask,omitempty"`
	// List of deployment groups in the environment.
	DeploymentGroups []*GoogleCloudApigeeV1DeploymentGroupConfig `protobuf:"bytes,7,rep,name=deployment_groups,json=deploymentGroups,proto3" json:"deployment_groups,omitempty"`
	// List of deployments in the environment.
	Deployments []*GoogleCloudApigeeV1DeploymentConfig `protobuf:"bytes,8,rep,name=deployments,proto3" json:"deployments,omitempty"`
	// Revision ID for environment-scoped resources (e.g. target servers, keystores) in this config. This ID will increment any time a resource not scoped to a deployment group changes.
	EnvScopedRevisionId int64 `protobuf:"varint,9,opt,name=env_scoped_revision_id,json=envScopedRevisionId,proto3" json:"env_scoped_revision_id,omitempty"`
	// Feature flags inherited from the organization and environment.
	FeatureFlags map[string]string `protobuf:"bytes,10,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of flow hooks in the environment.
	Flowhooks []*GoogleCloudApigeeV1FlowHookConfig `protobuf:"bytes,11,rep,name=flowhooks,proto3" json:"flowhooks,omitempty"`
	// The forward proxy's url to be used by the runtime. When set, runtime will send requests to the target via the given forward proxy. This is only used by programmable gateways.
	ForwardProxyUri string `protobuf:"bytes,12,opt,name=forward_proxy_uri,json=forwardProxyUri,proto3" json:"forward_proxy_uri,omitempty"`
	// The location for the gateway config blob as a URI, e.g. a Cloud Storage URI. This is only used by Envoy-based gateways.
	GatewayConfigLocation string `protobuf:"bytes,13,opt,name=gateway_config_location,json=gatewayConfigLocation,proto3" json:"gateway_config_location,omitempty"`
	// List of keystores in the environment.
	Keystores []*GoogleCloudApigeeV1KeystoreConfig `protobuf:"bytes,14,rep,name=keystores,proto3" json:"keystores,omitempty"`
	// Name of the environment configuration in the following format: `organizations/{org}/environments/{env}/configs/{config}`
	Name string `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	// Used by the Control plane to add context information to help detect the source of the document during diagnostics and debugging.
	Provider string `protobuf:"bytes,16,opt,name=provider,proto3" json:"provider,omitempty"`
	// Name of the PubSub topic for the environment.
	PubsubTopic string `protobuf:"bytes,17,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
	// List of resource references in the environment.
	ResourceReferences []*GoogleCloudApigeeV1ReferenceConfig `protobuf:"bytes,18,rep,name=resource_references,json=resourceReferences,proto3" json:"resource_references,omitempty"`
	// List of resource versions in the environment.
	Resources []*GoogleCloudApigeeV1ResourceConfig `protobuf:"bytes,19,rep,name=resources,proto3" json:"resources,omitempty"`
	// Revision ID of the environment configuration. The higher the value, the more recently the configuration was deployed.
	RevisionId int64 `protobuf:"varint,20,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// DEPRECATED: Use revision_id.
	SequenceNumber int64 `protobuf:"varint,21,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// List of target servers in the environment. Disabled target servers are not displayed.
	Targets []*GoogleCloudApigeeV1TargetServerConfig `protobuf:"bytes,22,rep,name=targets,proto3" json:"targets,omitempty"`
	// Trace configurations. Contains config for the environment and config overrides for specific API proxies.
	TraceConfig *GoogleCloudApigeeV1RuntimeTraceConfig `protobuf:"bytes,23,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	// Unique ID for the environment configuration. The ID will only change if the environment is deleted and recreated.
	Uid string `protobuf:"bytes,24,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{94}
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetAddonsConfig() *GoogleCloudApigeeV1RuntimeAddonsConfig {
	if x != nil {
		return x.AddonsConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetArcConfigLocation() string {
	if x != nil {
		return x.ArcConfigLocation
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetClientIpResolutionConfig() *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig {
	if x != nil {
		return x.ClientIpResolutionConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetDataCollectors() []*GoogleCloudApigeeV1DataCollectorConfig {
	if x != nil {
		return x.DataCollectors
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetDebugMask() *GoogleCloudApigeeV1DebugMask {
	if x != nil {
		return x.DebugMask
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetDeploymentGroups() []*GoogleCloudApigeeV1DeploymentGroupConfig {
	if x != nil {
		return x.DeploymentGroups
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetDeployments() []*GoogleCloudApigeeV1DeploymentConfig {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetEnvScopedRevisionId() int64 {
	if x != nil {
		return x.EnvScopedRevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetFeatureFlags() map[string]string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetFlowhooks() []*GoogleCloudApigeeV1FlowHookConfig {
	if x != nil {
		return x.Flowhooks
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetForwardProxyUri() string {
	if x != nil {
		return x.ForwardProxyUri
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetGatewayConfigLocation() string {
	if x != nil {
		return x.GatewayConfigLocation
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetKeystores() []*GoogleCloudApigeeV1KeystoreConfig {
	if x != nil {
		return x.Keystores
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetPubsubTopic() string {
	if x != nil {
		return x.PubsubTopic
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetResourceReferences() []*GoogleCloudApigeeV1ReferenceConfig {
	if x != nil {
		return x.ResourceReferences
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetResources() []*GoogleCloudApigeeV1ResourceConfig {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetSequenceNumber() int64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetTargets() []*GoogleCloudApigeeV1TargetServerConfig {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetTraceConfig() *GoogleCloudApigeeV1RuntimeTraceConfig {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Configuration for resolving the client ip.
type GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resolves the client ip based on a custom header.
	HeaderIndexAlgorithm *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm `protobuf:"bytes,1,opt,name=header_index_algorithm,json=headerIndexAlgorithm,proto3" json:"header_index_algorithm,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{95}
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig) GetHeaderIndexAlgorithm() *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm {
	if x != nil {
		return x.HeaderIndexAlgorithm
	}
	return nil
}

// Resolves the client ip based on a custom header.
type GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the ip in the header. (By default, value is 0 if missing)
	IpHeaderIndex int32 `protobuf:"varint,1,opt,name=ip_header_index,json=ipHeaderIndex,proto3" json:"ip_header_index,omitempty"`
	// The name of the header to extract the client ip from.
	IpHeaderName string `protobuf:"bytes,2,opt,name=ip_header_name,json=ipHeaderName,proto3" json:"ip_header_name,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) ProtoMessage() {
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{96}
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) GetIpHeaderIndex() int32 {
	if x != nil {
		return x.IpHeaderIndex
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm) GetIpHeaderName() string {
	if x != nil {
		return x.IpHeaderName
	}
	return ""
}

// EnvironmentGroup configuration. An environment group is used to group one or more Apigee environments under a single host name.
type GoogleCloudApigeeV1EnvironmentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time at which the environment group was created as milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Required. Host names for this environment group.
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Output only. The time at which the environment group was last updated as milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,3,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// ID of the environment group.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. State of the environment group. Values other than ACTIVE means the resource is not ready to use.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentGroup) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentGroup.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentGroup) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{97}
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentGroup) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// EnvironmentGroupAttachment is a resource which defines an attachment of an environment to an environment group.
type GoogleCloudApigeeV1EnvironmentGroupAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time at which the environment group attachment was created as milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Required. ID of the attached environment.
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// Output only. ID of the environment group.
	EnvironmentGroupId string `protobuf:"bytes,3,opt,name=environment_group_id,json=environmentGroupId,proto3" json:"environment_group_id,omitempty"`
	// ID of the environment group attachment.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentGroupAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentGroupAttachment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentGroupAttachment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentGroupAttachment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{98}
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) GetEnvironmentGroupId() string {
	if x != nil {
		return x.EnvironmentGroupId
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentGroupAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// EnvironmentGroupConfig is a revisioned snapshot of an EnvironmentGroup and its associated routing rules.
type GoogleCloudApigeeV1EnvironmentGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of proxies in each deployment group for proxy chaining calls.
	EndpointChainingRules []*GoogleCloudApigeeV1EndpointChainingRule `protobuf:"bytes,1,rep,name=endpoint_chaining_rules,json=endpointChainingRules,proto3" json:"endpoint_chaining_rules,omitempty"`
	// Host names for the environment group.
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// When this message appears in the top-level IngressConfig, this field will be populated in lieu of the inlined routing_rules and hostnames fields. Some URL for downloading the full EnvironmentGroupConfig for this group.
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the environment group in the following format: `organizations/{org}/envgroups/{envgroup}`.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Revision id that defines the ordering of the EnvironmentGroupConfig resource. The higher the revision, the more recently the configuration was deployed.
	RevisionId int64 `protobuf:"varint,5,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Ordered list of routing rules defining how traffic to this environment group's hostnames should be routed to different environments.
	RoutingRules []*GoogleCloudApigeeV1RoutingRule `protobuf:"bytes,6,rep,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"`
	// A unique id for the environment group config that will only change if the environment group is deleted and recreated.
	Uid string `protobuf:"bytes,7,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) Reset() {
	*x = GoogleCloudApigeeV1EnvironmentGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1EnvironmentGroupConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1EnvironmentGroupConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1EnvironmentGroupConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{99}
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetEndpointChainingRules() []*GoogleCloudApigeeV1EndpointChainingRule {
	if x != nil {
		return x.EndpointChainingRules
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetRoutingRules() []*GoogleCloudApigeeV1RoutingRule {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

func (x *GoogleCloudApigeeV1EnvironmentGroupConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Request for ExpireDeveloperSubscription.
type GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest) Reset() {
	*x = GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{100}
}

// Details of an export job.
type GoogleCloudApigeeV1Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Time the export job was created.
	Created string `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Name of the datastore that is the destination of the export job [datastore]
	DatastoreName string `protobuf:"bytes,2,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// Description of the export job.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Error is set when export fails
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. Execution time for this export job. If the job is still in progress, it will be set to the amount of time that has elapsed since`created`, in seconds. Else, it will set to (`updated` - `created`), in seconds.
	ExecutionTime string `protobuf:"bytes,5,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Display name of the export job.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Self link of the export job. A URI that can be used to retrieve the status of an export job. Example: `/organizations/myorg/environments/myenv/analytics/exports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
	Self string `protobuf:"bytes,7,opt,name=self,proto3" json:"self,omitempty"`
	// Output only. Status of the export job. Valid values include `enqueued`, `running`, `completed`, and `failed`.
	State string `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. Time the export job was last updated.
	Updated string `protobuf:"bytes,9,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *GoogleCloudApigeeV1Export) Reset() {
	*x = GoogleCloudApigeeV1Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Export) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Export) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Export.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Export) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{101}
}

func (x *GoogleCloudApigeeV1Export) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1Export) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

// Request body for [CreateExportRequest]
type GoogleCloudApigeeV1ExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
	CsvDelimiter string `protobuf:"bytes,1,opt,name=csv_delimiter,json=csvDelimiter,proto3" json:"csv_delimiter,omitempty"`
	// Required. Name of the preconfigured datastore.
	DatastoreName string `protobuf:"bytes,2,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	// Required. Date range of the data to export.
	DateRange *GoogleCloudApigeeV1DateRange `protobuf:"bytes,3,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Optional. Description of the export job.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Required. Display name of the export job.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Output format of the export. Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the `csvDelimiter` property.
	OutputFormat string `protobuf:"bytes,6,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
}

func (x *GoogleCloudApigeeV1ExportRequest) Reset() {
	*x = GoogleCloudApigeeV1ExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ExportRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ExportRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{102}
}

func (x *GoogleCloudApigeeV1ExportRequest) GetCsvDelimiter() string {
	if x != nil {
		return x.CsvDelimiter
	}
	return ""
}

func (x *GoogleCloudApigeeV1ExportRequest) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *GoogleCloudApigeeV1ExportRequest) GetDateRange() *GoogleCloudApigeeV1DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *GoogleCloudApigeeV1ExportRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1ExportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ExportRequest) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

type GoogleCloudApigeeV1FlowHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Flag that specifies whether execution should continue if the flow hook throws an exception. Set to `true` to continue execution. Set to `false` to stop execution if the flow hook throws an exception. Defaults to `true`.
	ContinueOnError bool `protobuf:"varint,1,opt,name=continue_on_error,json=continueOnError,proto3" json:"continue_on_error,omitempty"`
	// Description of the flow hook.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Where in the API call flow the flow hook is invoked. Must be one of `PreProxyFlowHook`, `PostProxyFlowHook`, `PreTargetFlowHook`, or `PostTargetFlowHook`.
	FlowHookPoint string `protobuf:"bytes,3,opt,name=flow_hook_point,json=flowHookPoint,proto3" json:"flow_hook_point,omitempty"`
	// Shared flow attached to this flow hook, or empty if there is none attached.
	SharedFlow string `protobuf:"bytes,4,opt,name=shared_flow,json=sharedFlow,proto3" json:"shared_flow,omitempty"`
}

func (x *GoogleCloudApigeeV1FlowHook) Reset() {
	*x = GoogleCloudApigeeV1FlowHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1FlowHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1FlowHook) ProtoMessage() {}

func (x *GoogleCloudApigeeV1FlowHook) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1FlowHook.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1FlowHook) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{103}
}

func (x *GoogleCloudApigeeV1FlowHook) GetContinueOnError() bool {
	if x != nil {
		return x.ContinueOnError
	}
	return false
}

func (x *GoogleCloudApigeeV1FlowHook) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1FlowHook) GetFlowHookPoint() string {
	if x != nil {
		return x.FlowHookPoint
	}
	return ""
}

func (x *GoogleCloudApigeeV1FlowHook) GetSharedFlow() string {
	if x != nil {
		return x.SharedFlow
	}
	return ""
}

type GoogleCloudApigeeV1FlowHookConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the flow should abort after an error in the flow hook. Defaults to `true` (continue on error).
	ContinueOnError bool `protobuf:"varint,1,opt,name=continue_on_error,json=continueOnError,proto3" json:"continue_on_error,omitempty"`
	// Name of the flow hook in the following format: `organizations/{org}/environments/{env}/flowhooks/{point}`. Valid `point` values include: `PreProxyFlowHook`, `PostProxyFlowHook`, `PreTargetFlowHook`, and `PostTargetFlowHook`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the shared flow to invoke in the following format: `organizations/{org}/sharedflows/{sharedflow}`
	SharedFlowName string `protobuf:"bytes,3,opt,name=shared_flow_name,json=sharedFlowName,proto3" json:"shared_flow_name,omitempty"`
}

func (x *GoogleCloudApigeeV1FlowHookConfig) Reset() {
	*x = GoogleCloudApigeeV1FlowHookConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1FlowHookConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1FlowHookConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1FlowHookConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1FlowHookConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1FlowHookConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{104}
}

func (x *GoogleCloudApigeeV1FlowHookConfig) GetContinueOnError() bool {
	if x != nil {
		return x.ContinueOnError
	}
	return false
}

func (x *GoogleCloudApigeeV1FlowHookConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1FlowHookConfig) GetSharedFlowName() string {
	if x != nil {
		return x.SharedFlowName
	}
	return ""
}

// Request for GenerateDownloadUrl method.
type GoogleCloudApigeeV1GenerateDownloadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlRequest) Reset() {
	*x = GoogleCloudApigeeV1GenerateDownloadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GenerateDownloadUrlRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GenerateDownloadUrlRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GenerateDownloadUrlRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{105}
}

// Response for GenerateDownloadUrl method.
type GoogleCloudApigeeV1GenerateDownloadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Google Cloud Storage signed URL that can be used to download the Archive zip file.
	DownloadUri string `protobuf:"bytes,1,opt,name=download_uri,json=downloadUri,proto3" json:"download_uri,omitempty"`
}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlResponse) Reset() {
	*x = GoogleCloudApigeeV1GenerateDownloadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GenerateDownloadUrlResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GenerateDownloadUrlResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GenerateDownloadUrlResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{106}
}

func (x *GoogleCloudApigeeV1GenerateDownloadUrlResponse) GetDownloadUri() string {
	if x != nil {
		return x.DownloadUri
	}
	return ""
}

// Request for GenerateUploadUrl method.
type GoogleCloudApigeeV1GenerateUploadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1GenerateUploadUrlRequest) Reset() {
	*x = GoogleCloudApigeeV1GenerateUploadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GenerateUploadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GenerateUploadUrlRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GenerateUploadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GenerateUploadUrlRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GenerateUploadUrlRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{107}
}

// Response for GenerateUploadUrl method.
type GoogleCloudApigeeV1GenerateUploadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Google Cloud Storage signed URL that can be used to upload a new Archive zip file.
	UploadUri string `protobuf:"bytes,1,opt,name=upload_uri,json=uploadUri,proto3" json:"upload_uri,omitempty"`
}

func (x *GoogleCloudApigeeV1GenerateUploadUrlResponse) Reset() {
	*x = GoogleCloudApigeeV1GenerateUploadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GenerateUploadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GenerateUploadUrlResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GenerateUploadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GenerateUploadUrlResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GenerateUploadUrlResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{108}
}

func (x *GoogleCloudApigeeV1GenerateUploadUrlResponse) GetUploadUri() string {
	if x != nil {
		return x.UploadUri
	}
	return ""
}

// The response for GetAsyncQueryResultUrl
type GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of Signed URLs generated by the CreateAsyncQuery request
	Urls []*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) Reset() {
	*x = GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{109}
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse) GetUrls() []*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo {
	if x != nil {
		return x.Urls
	}
	return nil
}

// A Signed URL and the relevant metadata associated with it.
type GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MD5 Hash of the JSON data
	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	// The size of the returned file in bytes
	SizeBytes int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The signed URL of the JSON data. Will be of the form `https://storage.googleapis.com/example-bucket/cat.jpeg?X-Goog-Algorithm= GOOG4-RSA-SHA256&X-Goog-Credential=example%40example-project.iam.gserviceaccount .com%2F20181026%2Fus-central1%2Fstorage%2Fgoog4_request&X-Goog-Date=20181026T18 1309Z&X-Goog-Expires=900&X-Goog-SignedHeaders=host&X-Goog-Signature=247a2aa45f16 9edf4d187d54e7cc46e4731b1e6273242c4f4c39a1d2507a0e58706e25e3a85a7dbb891d62afa849 6def8e260c1db863d9ace85ff0a184b894b117fe46d1225c82f2aa19efd52cf21d3e2022b3b868dc c1aca2741951ed5bf3bb25a34f5e9316a2841e8ff4c530b22ceaa1c5ce09c7cbb5732631510c2058 0e61723f5594de3aea497f195456a2ff2bdd0d13bad47289d8611b6f9cfeef0c46c91a455b94e90a 66924f722292d21e24d31dcfb38ce0c0f353ffa5a9756fc2a9f2b40bc2113206a81e324fc4fd6823 a29163fa845c8ae7eca1fcf6e5bb48b3200983c56c5ca81fffb151cca7402beddfc4a76b13344703 2ea7abedc098d2eb14a7`
	Uri string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) Reset() {
	*x = GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{110}
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Request for GetSyncAuthorization.
type GoogleCloudApigeeV1GetSyncAuthorizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1GetSyncAuthorizationRequest) Reset() {
	*x = GoogleCloudApigeeV1GetSyncAuthorizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GetSyncAuthorizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GetSyncAuthorizationRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GetSyncAuthorizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GetSyncAuthorizationRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GetSyncAuthorizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{111}
}

// Represents the pairing of GraphQL operation types and the GraphQL operation name.
type GoogleCloudApigeeV1GraphQLOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GraphQL operation name. The name and operation type will be used to apply quotas. If no name is specified, the quota will be applied to all GraphQL operations irrespective of their operation names in the payload.
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// Required. GraphQL operation types. Valid values include `query` or `mutation`. **Note**: Apigee does not currently support `subscription` types.
	OperationTypes []string `protobuf:"bytes,2,rep,name=operation_types,json=operationTypes,proto3" json:"operation_types,omitempty"`
}

func (x *GoogleCloudApigeeV1GraphQLOperation) Reset() {
	*x = GoogleCloudApigeeV1GraphQLOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GraphQLOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GraphQLOperation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GraphQLOperation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GraphQLOperation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GraphQLOperation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{112}
}

func (x *GoogleCloudApigeeV1GraphQLOperation) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GoogleCloudApigeeV1GraphQLOperation) GetOperationTypes() []string {
	if x != nil {
		return x.OperationTypes
	}
	return nil
}

// Binds the resources in a proxy or remote service with the GraphQL operation and its associated quota enforcement.
type GoogleCloudApigeeV1GraphQLOperationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the API proxy endpoint or remote service with which the GraphQL operation and quota are associated.
	ApiSource string `protobuf:"bytes,1,opt,name=api_source,json=apiSource,proto3" json:"api_source,omitempty"`
	// Custom attributes associated with the operation.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Required. List of GraphQL name/operation type pairs for the proxy or remote service to which quota will be applied. If only operation types are specified, the quota will be applied to all GraphQL requests irrespective of the GraphQL name. **Note**: Currently, you can specify only a single GraphQLOperation. Specifying more than one will cause the operation to fail.
	Operations []*GoogleCloudApigeeV1GraphQLOperation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	// Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.
	Quota *GoogleCloudApigeeV1Quota `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) Reset() {
	*x = GoogleCloudApigeeV1GraphQLOperationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GraphQLOperationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GraphQLOperationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GraphQLOperationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{113}
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) GetApiSource() string {
	if x != nil {
		return x.ApiSource
	}
	return ""
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) GetOperations() []*GoogleCloudApigeeV1GraphQLOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *GoogleCloudApigeeV1GraphQLOperationConfig) GetQuota() *GoogleCloudApigeeV1Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

// List of graphQL operation configuration details associated with Apigee API proxies or remote services. Remote services are non-Apigee proxies, such as Istio-Envoy.
type GoogleCloudApigeeV1GraphQLOperationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.
	OperationConfigType string `protobuf:"bytes,1,opt,name=operation_config_type,json=operationConfigType,proto3" json:"operation_config_type,omitempty"`
	// Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.
	OperationConfigs []*GoogleCloudApigeeV1GraphQLOperationConfig `protobuf:"bytes,2,rep,name=operation_configs,json=operationConfigs,proto3" json:"operation_configs,omitempty"`
}

func (x *GoogleCloudApigeeV1GraphQLOperationGroup) Reset() {
	*x = GoogleCloudApigeeV1GraphQLOperationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GraphQLOperationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GraphQLOperationGroup) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GraphQLOperationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GraphQLOperationGroup.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GraphQLOperationGroup) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{114}
}

func (x *GoogleCloudApigeeV1GraphQLOperationGroup) GetOperationConfigType() string {
	if x != nil {
		return x.OperationConfigType
	}
	return ""
}

func (x *GoogleCloudApigeeV1GraphQLOperationGroup) GetOperationConfigs() []*GoogleCloudApigeeV1GraphQLOperationConfig {
	if x != nil {
		return x.OperationConfigs
	}
	return nil
}

// GraphQL documentation for a catalog item.
type GoogleCloudApigeeV1GraphqlDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The GraphQL endpoint URI to be queried by API consumers. Max length is 2,083 characters.
	EndpointUri string `protobuf:"bytes,1,opt,name=endpoint_uri,json=endpointUri,proto3" json:"endpoint_uri,omitempty"`
	// Required. The documentation file contents for the GraphQL schema.
	Schema *GoogleCloudApigeeV1DocumentationFile `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GoogleCloudApigeeV1GraphqlDocumentation) Reset() {
	*x = GoogleCloudApigeeV1GraphqlDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GraphqlDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GraphqlDocumentation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GraphqlDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GraphqlDocumentation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GraphqlDocumentation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{115}
}

func (x *GoogleCloudApigeeV1GraphqlDocumentation) GetEndpointUri() string {
	if x != nil {
		return x.EndpointUri
	}
	return ""
}

func (x *GoogleCloudApigeeV1GraphqlDocumentation) GetSchema() *GoogleCloudApigeeV1DocumentationFile {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Binds the resources in a proxy or remote service with the gRPC operation and its associated quota enforcement.
type GoogleCloudApigeeV1GrpcOperationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the API proxy with which the gRPC operation and quota are associated.
	ApiSource string `protobuf:"bytes,1,opt,name=api_source,json=apiSource,proto3" json:"api_source,omitempty"`
	// Custom attributes associated with the operation.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// List of unqualified gRPC method names for the proxy to which quota will be applied. If this field is empty, the Quota will apply to all operations on the gRPC service defined on the proxy. Example: Given a proxy that is configured to serve com.petstore.PetService, the methods com.petstore.PetService.ListPets and com.petstore.PetService.GetPet would be specified here as simply ["ListPets", "GetPet"].
	Methods []string `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	// Quota parameters to be enforced for the methods and API source combination. If none are specified, quota enforcement will not be done.
	Quota *GoogleCloudApigeeV1Quota `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
	// Required. gRPC Service name associated to be associated with the API proxy, on which quota rules can be applied upon.
	Service string `protobuf:"bytes,5,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) Reset() {
	*x = GoogleCloudApigeeV1GrpcOperationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GrpcOperationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GrpcOperationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GrpcOperationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{116}
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) GetApiSource() string {
	if x != nil {
		return x.ApiSource
	}
	return ""
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) GetQuota() *GoogleCloudApigeeV1Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

func (x *GoogleCloudApigeeV1GrpcOperationConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// List of gRPC operation configuration details associated with Apigee API proxies.
type GoogleCloudApigeeV1GrpcOperationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. List of operation configurations for either Apigee API proxies that are associated with this API product.
	OperationConfigs []*GoogleCloudApigeeV1GrpcOperationConfig `protobuf:"bytes,1,rep,name=operation_configs,json=operationConfigs,proto3" json:"operation_configs,omitempty"`
}

func (x *GoogleCloudApigeeV1GrpcOperationGroup) Reset() {
	*x = GoogleCloudApigeeV1GrpcOperationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1GrpcOperationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1GrpcOperationGroup) ProtoMessage() {}

func (x *GoogleCloudApigeeV1GrpcOperationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1GrpcOperationGroup.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1GrpcOperationGroup) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{117}
}

func (x *GoogleCloudApigeeV1GrpcOperationGroup) GetOperationConfigs() []*GoogleCloudApigeeV1GrpcOperationConfig {
	if x != nil {
		return x.OperationConfigs
	}
	return nil
}

type GoogleCloudApigeeV1IngressConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of environment groups in the organization.
	EnvironmentGroups []*GoogleCloudApigeeV1EnvironmentGroupConfig `protobuf:"bytes,1,rep,name=environment_groups,json=environmentGroups,proto3" json:"environment_groups,omitempty"`
	// Name of the resource in the following format: `organizations/{org}/deployedIngressConfig`.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Time at which the IngressConfig revision was created.
	RevisionCreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Revision id that defines the ordering on IngressConfig resources. The higher the revision, the more recently the configuration was deployed.
	RevisionId int64 `protobuf:"varint,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// A unique id for the ingress config that will only change if the organization is deleted and recreated.
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1IngressConfig) Reset() {
	*x = GoogleCloudApigeeV1IngressConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1IngressConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1IngressConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1IngressConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1IngressConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1IngressConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{118}
}

func (x *GoogleCloudApigeeV1IngressConfig) GetEnvironmentGroups() []*GoogleCloudApigeeV1EnvironmentGroupConfig {
	if x != nil {
		return x.EnvironmentGroups
	}
	return nil
}

func (x *GoogleCloudApigeeV1IngressConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1IngressConfig) GetRevisionCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1IngressConfig) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1IngressConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Apigee runtime instance.
type GoogleCloudApigeeV1Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Access logging configuration enables the access logging feature at the instance. Apigee customers can enable access logging to ship the access logs to their own project's cloud logging.
	AccessLoggingConfig *GoogleCloudApigeeV1AccessLoggingConfig `protobuf:"bytes,1,opt,name=access_logging_config,json=accessLoggingConfig,proto3" json:"access_logging_config,omitempty"`
	// Optional. Customer accept list represents the list of projects (id/number) on customer side that can privately connect to the service attachment. It is an optional field which the customers can provide during the instance creation. By default, the customer project associated with the Apigee organization will be included to the list.
	ConsumerAcceptList []string `protobuf:"bytes,2,rep,name=consumer_accept_list,json=consumerAcceptList,proto3" json:"consumer_accept_list,omitempty"`
	// Output only. Time the instance was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional. Description of the instance.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Customer Managed Encryption Key (CMEK) used for disk and volume encryption. If not specified, a Google-Managed encryption key will be used. Use the following format: `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`
	DiskEncryptionKeyName string `protobuf:"bytes,5,opt,name=disk_encryption_key_name,json=diskEncryptionKeyName,proto3" json:"disk_encryption_key_name,omitempty"`
	// Optional. Display name for the instance.
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Internal hostname or IP address of the Apigee endpoint used by clients to connect to the service.
	Host string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	// Optional. Comma-separated list of CIDR blocks of length 22 and/or 28 used to create the Apigee instance. Providing CIDR ranges is optional. You can provide just /22 or /28 or both (or neither). Ranges you provide should be freely available as part of a larger named range you have allocated to the Service Networking peering. If this parameter is not provided, Apigee automatically requests an available /22 and /28 CIDR block from Service Networking. Use the /22 CIDR block for configuring your firewall needs to allow traffic from Apigee. Input formats: `a.b.c.d/22` or `e.f.g.h/28` or `a.b.c.d/22,e.f.g.h/28`
	IpRange string `protobuf:"bytes,8,opt,name=ip_range,json=ipRange,proto3" json:"ip_range,omitempty"`
	// Output only. Time the instance was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,9,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Required. Compute Engine location where the instance resides.
	Location string `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// Required. Resource ID of the instance. Values must match the regular expression `^a-z{0,30}[a-z\d]$`.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Size of the CIDR block range that will be reserved by the instance. PAID organizations support `SLASH_16` to `SLASH_20` and defaults to `SLASH_16`. Evaluation organizations support only `SLASH_23`.
	PeeringCidrRange string `protobuf:"bytes,12,opt,name=peering_cidr_range,json=peeringCidrRange,proto3" json:"peering_cidr_range,omitempty"`
	// Output only. Port number of the exposed Apigee endpoint.
	Port string `protobuf:"bytes,13,opt,name=port,proto3" json:"port,omitempty"`
	// Output only. Version of the runtime system running in the instance. The runtime system is the set of components that serve the API Proxy traffic in your Environments.
	RuntimeVersion string `protobuf:"bytes,14,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	// Output only. Resource name of the service attachment created for the instance in the format: `projects/*/regions/*/serviceAttachments/*` Apigee customers can privately forward traffic to this service attachment using the PSC endpoints.
	ServiceAttachment string `protobuf:"bytes,15,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
	// Output only. State of the instance. Values other than `ACTIVE` means the resource is not ready to use.
	State string `protobuf:"bytes,16,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1Instance) Reset() {
	*x = GoogleCloudApigeeV1Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Instance) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Instance) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Instance.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Instance) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{119}
}

func (x *GoogleCloudApigeeV1Instance) GetAccessLoggingConfig() *GoogleCloudApigeeV1AccessLoggingConfig {
	if x != nil {
		return x.AccessLoggingConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1Instance) GetConsumerAcceptList() []string {
	if x != nil {
		return x.ConsumerAcceptList
	}
	return nil
}

func (x *GoogleCloudApigeeV1Instance) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetDiskEncryptionKeyName() string {
	if x != nil {
		return x.DiskEncryptionKeyName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetIpRange() string {
	if x != nil {
		return x.IpRange
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Instance) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetPeeringCidrRange() string {
	if x != nil {
		return x.PeeringCidrRange
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetServiceAttachment() string {
	if x != nil {
		return x.ServiceAttachment
	}
	return ""
}

func (x *GoogleCloudApigeeV1Instance) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// InstanceAttachment represents the installation of an environment onto an instance.
type GoogleCloudApigeeV1InstanceAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Time the attachment was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// ID of the attached environment.
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// Output only. ID of the attachment.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1InstanceAttachment) Reset() {
	*x = GoogleCloudApigeeV1InstanceAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1InstanceAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1InstanceAttachment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1InstanceAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1InstanceAttachment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1InstanceAttachment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{120}
}

func (x *GoogleCloudApigeeV1InstanceAttachment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1InstanceAttachment) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1InstanceAttachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The status of a deployment as reported by a single instance.
type GoogleCloudApigeeV1InstanceDeploymentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Revisions currently deployed in MPs.
	DeployedRevisions []*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision `protobuf:"bytes,1,rep,name=deployed_revisions,json=deployedRevisions,proto3" json:"deployed_revisions,omitempty"`
	// Current routes deployed in the ingress routing table. A route which is missing will appear in `missing_routes`.
	DeployedRoutes []*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute `protobuf:"bytes,2,rep,name=deployed_routes,json=deployedRoutes,proto3" json:"deployed_routes,omitempty"`
	// ID of the instance reporting the status.
	Instance string `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) Reset() {
	*x = GoogleCloudApigeeV1InstanceDeploymentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1InstanceDeploymentStatus) ProtoMessage() {}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1InstanceDeploymentStatus.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1InstanceDeploymentStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{121}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) GetDeployedRevisions() []*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision {
	if x != nil {
		return x.DeployedRevisions
	}
	return nil
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) GetDeployedRoutes() []*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute {
	if x != nil {
		return x.DeployedRoutes
	}
	return nil
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatus) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

// Revisions deployed in the MPs.
type GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of MP replicas reporting this revision.
	Percentage int32 `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// API proxy revision reported as deployed.
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) Reset() {
	*x = GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) ProtoMessage() {}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{122}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

// Route deployed in the ingress routing table.
type GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base path in the routing table.
	Basepath string `protobuf:"bytes,1,opt,name=basepath,proto3" json:"basepath,omitempty"`
	// Environment group where this route is installed.
	Envgroup string `protobuf:"bytes,2,opt,name=envgroup,proto3" json:"envgroup,omitempty"`
	// Destination environment. This will be empty if the route is not yet reported.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Percentage of ingress replicas reporting this route.
	Percentage int32 `protobuf:"varint,4,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) Reset() {
	*x = GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) ProtoMessage() {}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{123}
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) GetBasepath() string {
	if x != nil {
		return x.Basepath
	}
	return ""
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) GetEnvgroup() string {
	if x != nil {
		return x.Envgroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

// Configuration for the Integration add-on.
type GoogleCloudApigeeV1IntegrationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the Integration add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1IntegrationConfig) Reset() {
	*x = GoogleCloudApigeeV1IntegrationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1IntegrationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1IntegrationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1IntegrationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1IntegrationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1IntegrationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{124}
}

func (x *GoogleCloudApigeeV1IntegrationConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GoogleCloudApigeeV1KeyAliasReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias ID. Must exist in the keystore referred to by the reference.
	AliasId string `protobuf:"bytes,1,opt,name=alias_id,json=aliasId,proto3" json:"alias_id,omitempty"`
	// Reference name in the following format: `organizations/{org}/environments/{env}/references/{reference}`
	Reference string `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *GoogleCloudApigeeV1KeyAliasReference) Reset() {
	*x = GoogleCloudApigeeV1KeyAliasReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1KeyAliasReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1KeyAliasReference) ProtoMessage() {}

func (x *GoogleCloudApigeeV1KeyAliasReference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1KeyAliasReference.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1KeyAliasReference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{125}
}

func (x *GoogleCloudApigeeV1KeyAliasReference) GetAliasId() string {
	if x != nil {
		return x.AliasId
	}
	return ""
}

func (x *GoogleCloudApigeeV1KeyAliasReference) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

// Key value map pair where the value represents the data associated with the corresponding key. **Note**: Supported for Apigee hybrid 1.8.x and higher.
type GoogleCloudApigeeV1KeyValueEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource URI that can be used to identify the scope of the key value map entries.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Data or payload that is being retrieved and associated with the unique key.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1KeyValueEntry) Reset() {
	*x = GoogleCloudApigeeV1KeyValueEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1KeyValueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1KeyValueEntry) ProtoMessage() {}

func (x *GoogleCloudApigeeV1KeyValueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1KeyValueEntry.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1KeyValueEntry) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{126}
}

func (x *GoogleCloudApigeeV1KeyValueEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1KeyValueEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Collection of key/value string pairs.
type GoogleCloudApigeeV1KeyValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Flag that specifies whether entry values will be encrypted. This field is retained for backward compatibility and the value of encrypted will always be `true`. Apigee X and hybrid do not support unencrypted key value maps.
	Encrypted bool `protobuf:"varint,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// Required. ID of the key value map.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1KeyValueMap) Reset() {
	*x = GoogleCloudApigeeV1KeyValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1KeyValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1KeyValueMap) ProtoMessage() {}

func (x *GoogleCloudApigeeV1KeyValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1KeyValueMap.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1KeyValueMap) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{127}
}

func (x *GoogleCloudApigeeV1KeyValueMap) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *GoogleCloudApigeeV1KeyValueMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Datastore for Certificates and Aliases.
type GoogleCloudApigeeV1Keystore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Aliases in this keystore.
	Aliases []string `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Required. Resource ID for this keystore. Values must match the regular expression `[\w[:space:].-]{1,255}`.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1Keystore) Reset() {
	*x = GoogleCloudApigeeV1Keystore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Keystore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Keystore) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Keystore) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Keystore.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Keystore) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{128}
}

func (x *GoogleCloudApigeeV1Keystore) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GoogleCloudApigeeV1Keystore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GoogleCloudApigeeV1KeystoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aliases in the keystore.
	Aliases []*GoogleCloudApigeeV1AliasRevisionConfig `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Resource name in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1KeystoreConfig) Reset() {
	*x = GoogleCloudApigeeV1KeystoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1KeystoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1KeystoreConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1KeystoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1KeystoreConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1KeystoreConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{129}
}

func (x *GoogleCloudApigeeV1KeystoreConfig) GetAliases() []*GoogleCloudApigeeV1AliasRevisionConfig {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GoogleCloudApigeeV1KeystoreConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The response for `ListApiCategoriesRequest`. Next ID: 6
type GoogleCloudApigeeV1ListApiCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The API category resources.
	Data []*GoogleCloudApigeeV1ApiCategory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Unique ID of the request.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Status of the operation.
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListApiCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListApiCategoriesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListApiCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListApiCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{130}
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) GetData() []*GoogleCloudApigeeV1ApiCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiCategoriesResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1ListApiDocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The catalog item resources.
	Data []*GoogleCloudApigeeV1ApiDoc `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// Unique error code for the request, if any.
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Description of the operation.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Unique ID of the request.
	RequestId string `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Status of the operation.
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListApiDocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListApiDocsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListApiDocsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListApiDocsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{131}
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetData() []*GoogleCloudApigeeV1ApiDoc {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListApiDocsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GoogleCloudApigeeV1ListApiProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lists all API product names defined for an organization.
	ApiProduct []*GoogleCloudApigeeV1ApiProduct `protobuf:"bytes,1,rep,name=api_product,json=apiProduct,proto3" json:"api_product,omitempty"`
}

func (x *GoogleCloudApigeeV1ListApiProductsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListApiProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListApiProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListApiProductsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListApiProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListApiProductsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListApiProductsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{132}
}

func (x *GoogleCloudApigeeV1ListApiProductsResponse) GetApiProduct() []*GoogleCloudApigeeV1ApiProduct {
	if x != nil {
		return x.ApiProduct
	}
	return nil
}

type GoogleCloudApigeeV1ListApiProxiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proxies []*GoogleCloudApigeeV1ApiProxy `protobuf:"bytes,1,rep,name=proxies,proto3" json:"proxies,omitempty"`
}

func (x *GoogleCloudApigeeV1ListApiProxiesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListApiProxiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListApiProxiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListApiProxiesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListApiProxiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListApiProxiesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListApiProxiesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{133}
}

func (x *GoogleCloudApigeeV1ListApiProxiesResponse) GetProxies() []*GoogleCloudApigeeV1ApiProxy {
	if x != nil {
		return x.Proxies
	}
	return nil
}

// Response for ListAppGroupApps
type GoogleCloudApigeeV1ListAppGroupAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AppGroup apps and their credentials.
	AppGroupApps []*GoogleCloudApigeeV1AppGroupApp `protobuf:"bytes,1,rep,name=app_group_apps,json=appGroupApps,proto3" json:"app_group_apps,omitempty"`
	// Token that can be sent as `next_page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListAppGroupAppsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListAppGroupAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListAppGroupAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListAppGroupAppsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListAppGroupAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListAppGroupAppsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListAppGroupAppsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{134}
}

func (x *GoogleCloudApigeeV1ListAppGroupAppsResponse) GetAppGroupApps() []*GoogleCloudApigeeV1AppGroupApp {
	if x != nil {
		return x.AppGroupApps
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListAppGroupAppsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// ListAppGroupsResponse contains the 0 or more AppGroups, along with the optional page token and the total count of apps.
type GoogleCloudApigeeV1ListAppGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AppGroups.
	AppGroups []*GoogleCloudApigeeV1AppGroup `protobuf:"bytes,1,rep,name=app_groups,json=appGroups,proto3" json:"app_groups,omitempty"`
	// Token that can be sent as `next_page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of AppGroups.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListAppGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListAppGroupsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListAppGroupsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListAppGroupsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{135}
}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) GetAppGroups() []*GoogleCloudApigeeV1AppGroup {
	if x != nil {
		return x.AppGroups
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListAppGroupsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type GoogleCloudApigeeV1ListAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App []*GoogleCloudApigeeV1App `protobuf:"bytes,1,rep,name=app,proto3" json:"app,omitempty"`
	// Token that can be sent as `next_page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of Apps.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GoogleCloudApigeeV1ListAppsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListAppsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListAppsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListAppsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{136}
}

func (x *GoogleCloudApigeeV1ListAppsResponse) GetApp() []*GoogleCloudApigeeV1App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListAppsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListAppsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// Response for ListArchiveDeployments method.
type GoogleCloudApigeeV1ListArchiveDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Archive Deployments in the specified environment.
	ArchiveDeployments []*GoogleCloudApigeeV1ArchiveDeployment `protobuf:"bytes,1,rep,name=archive_deployments,json=archiveDeployments,proto3" json:"archive_deployments,omitempty"`
	// Page token that you can include in a ListArchiveDeployments request to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListArchiveDeploymentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListArchiveDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListArchiveDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListArchiveDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListArchiveDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{137}
}

func (x *GoogleCloudApigeeV1ListArchiveDeploymentsResponse) GetArchiveDeployments() []*GoogleCloudApigeeV1ArchiveDeployment {
	if x != nil {
		return x.ArchiveDeployments
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListArchiveDeploymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The response for ListAsyncQueries.
type GoogleCloudApigeeV1ListAsyncQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The asynchronous queries belong to requested resource name.
	Queries []*GoogleCloudApigeeV1AsyncQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *GoogleCloudApigeeV1ListAsyncQueriesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListAsyncQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListAsyncQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListAsyncQueriesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListAsyncQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListAsyncQueriesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListAsyncQueriesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{138}
}

func (x *GoogleCloudApigeeV1ListAsyncQueriesResponse) GetQueries() []*GoogleCloudApigeeV1AsyncQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// This message encapsulates a list of custom report definitions
type GoogleCloudApigeeV1ListCustomReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qualifier []*GoogleCloudApigeeV1CustomReport `protobuf:"bytes,1,rep,name=qualifier,proto3" json:"qualifier,omitempty"`
}

func (x *GoogleCloudApigeeV1ListCustomReportsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListCustomReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListCustomReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListCustomReportsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListCustomReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListCustomReportsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListCustomReportsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{139}
}

func (x *GoogleCloudApigeeV1ListCustomReportsResponse) GetQualifier() []*GoogleCloudApigeeV1CustomReport {
	if x != nil {
		return x.Qualifier
	}
	return nil
}

// Response for ListDataCollectors.
type GoogleCloudApigeeV1ListDataCollectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data collectors in the specified organization.
	DataCollectors []*GoogleCloudApigeeV1DataCollector `protobuf:"bytes,1,rep,name=data_collectors,json=dataCollectors,proto3" json:"data_collectors,omitempty"`
	// Page token that you can include in a ListDataCollectors request to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDataCollectorsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDataCollectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDataCollectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDataCollectorsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDataCollectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDataCollectorsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDataCollectorsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{140}
}

func (x *GoogleCloudApigeeV1ListDataCollectorsResponse) GetDataCollectors() []*GoogleCloudApigeeV1DataCollector {
	if x != nil {
		return x.DataCollectors
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListDataCollectorsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The response for ListDatastores
type GoogleCloudApigeeV1ListDatastoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of datastores
	Datastores []*GoogleCloudApigeeV1Datastore `protobuf:"bytes,1,rep,name=datastores,proto3" json:"datastores,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDatastoresResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDatastoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDatastoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDatastoresResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDatastoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDatastoresResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDatastoresResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{141}
}

func (x *GoogleCloudApigeeV1ListDatastoresResponse) GetDatastores() []*GoogleCloudApigeeV1Datastore {
	if x != nil {
		return x.Datastores
	}
	return nil
}

type GoogleCloudApigeeV1ListDebugSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page token that you can include in a ListDebugSessionsRequest to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Session info that includes debug session ID and the first transaction creation timestamp.
	Sessions []*GoogleCloudApigeeV1Session `protobuf:"bytes,2,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDebugSessionsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDebugSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDebugSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDebugSessionsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDebugSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDebugSessionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDebugSessionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{142}
}

func (x *GoogleCloudApigeeV1ListDebugSessionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListDebugSessionsResponse) GetSessions() []*GoogleCloudApigeeV1Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GoogleCloudApigeeV1ListDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of deployments.
	Deployments []*GoogleCloudApigeeV1Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDeploymentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDeploymentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{143}
}

func (x *GoogleCloudApigeeV1ListDeploymentsResponse) GetDeployments() []*GoogleCloudApigeeV1Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

type GoogleCloudApigeeV1ListDeveloperAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of developer apps and their credentials.
	App []*GoogleCloudApigeeV1DeveloperApp `protobuf:"bytes,1,rep,name=app,proto3" json:"app,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDeveloperAppsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDeveloperAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDeveloperAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDeveloperAppsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDeveloperAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDeveloperAppsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDeveloperAppsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{144}
}

func (x *GoogleCloudApigeeV1ListDeveloperAppsResponse) GetApp() []*GoogleCloudApigeeV1DeveloperApp {
	if x != nil {
		return x.App
	}
	return nil
}

// Response for ListDeveloperSubscriptions.
type GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all subscriptions.
	DeveloperSubscriptions []*GoogleCloudApigeeV1DeveloperSubscription `protobuf:"bytes,1,rep,name=developer_subscriptions,json=developerSubscriptions,proto3" json:"developer_subscriptions,omitempty"`
	// Value that can be sent as `startKey` to retrieve the next page of content. If this field is omitted, there are no subsequent pages.
	NextStartKey string `protobuf:"bytes,2,opt,name=next_start_key,json=nextStartKey,proto3" json:"next_start_key,omitempty"`
}

func (x *GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{145}
}

func (x *GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) GetDeveloperSubscriptions() []*GoogleCloudApigeeV1DeveloperSubscription {
	if x != nil {
		return x.DeveloperSubscriptions
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse) GetNextStartKey() string {
	if x != nil {
		return x.NextStartKey
	}
	return ""
}

// Response for ListEndpointAttachments method.
type GoogleCloudApigeeV1ListEndpointAttachmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint attachments in the specified organization.
	EndpointAttachments []*GoogleCloudApigeeV1EndpointAttachment `protobuf:"bytes,1,rep,name=endpoint_attachments,json=endpointAttachments,proto3" json:"endpoint_attachments,omitempty"`
	// Page token that you can include in an `ListEndpointAttachments` request to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListEndpointAttachmentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListEndpointAttachmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListEndpointAttachmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListEndpointAttachmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListEndpointAttachmentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{146}
}

func (x *GoogleCloudApigeeV1ListEndpointAttachmentsResponse) GetEndpointAttachments() []*GoogleCloudApigeeV1EndpointAttachment {
	if x != nil {
		return x.EndpointAttachments
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListEndpointAttachmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Response for ListEnvironmentGroupAttachments.
type GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnvironmentGroupAttachments for the specified environment group.
	EnvironmentGroupAttachments []*GoogleCloudApigeeV1EnvironmentGroupAttachment `protobuf:"bytes,1,rep,name=environment_group_attachments,json=environmentGroupAttachments,proto3" json:"environment_group_attachments,omitempty"`
	// Page token that you can include in a ListEnvironmentGroupAttachments request to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{147}
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) GetEnvironmentGroupAttachments() []*GoogleCloudApigeeV1EnvironmentGroupAttachment {
	if x != nil {
		return x.EnvironmentGroupAttachments
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Response for ListEnvironmentGroups.
type GoogleCloudApigeeV1ListEnvironmentGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EnvironmentGroups in the specified organization.
	EnvironmentGroups []*GoogleCloudApigeeV1EnvironmentGroup `protobuf:"bytes,1,rep,name=environment_groups,json=environmentGroups,proto3" json:"environment_groups,omitempty"`
	// Page token that you can include in a ListEnvironmentGroups request to retrieve the next page. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListEnvironmentGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListEnvironmentGroupsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{148}
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupsResponse) GetEnvironmentGroups() []*GoogleCloudApigeeV1EnvironmentGroup {
	if x != nil {
		return x.EnvironmentGroups
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListEnvironmentGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Response for ListEnvironmentResources
type GoogleCloudApigeeV1ListEnvironmentResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of resources files.
	ResourceFile []*GoogleCloudApigeeV1ResourceFile `protobuf:"bytes,1,rep,name=resource_file,json=resourceFile,proto3" json:"resource_file,omitempty"`
}

func (x *GoogleCloudApigeeV1ListEnvironmentResourcesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListEnvironmentResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListEnvironmentResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListEnvironmentResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListEnvironmentResourcesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{149}
}

func (x *GoogleCloudApigeeV1ListEnvironmentResourcesResponse) GetResourceFile() []*GoogleCloudApigeeV1ResourceFile {
	if x != nil {
		return x.ResourceFile
	}
	return nil
}

// The response for ListExports
type GoogleCloudApigeeV1ListExportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the export jobs.
	Exports []*GoogleCloudApigeeV1Export `protobuf:"bytes,1,rep,name=exports,proto3" json:"exports,omitempty"`
}

func (x *GoogleCloudApigeeV1ListExportsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListExportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListExportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListExportsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListExportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListExportsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListExportsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{150}
}

func (x *GoogleCloudApigeeV1ListExportsResponse) GetExports() []*GoogleCloudApigeeV1Export {
	if x != nil {
		return x.Exports
	}
	return nil
}

type GoogleCloudApigeeV1ListHybridIssuersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lists of hybrid services and its trusted issuer email ids.
	Issuers []*GoogleCloudApigeeV1ServiceIssuersMapping `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers,omitempty"`
}

func (x *GoogleCloudApigeeV1ListHybridIssuersResponse) Reset() {
	*x = GoogleCloudApigeeV1ListHybridIssuersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListHybridIssuersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListHybridIssuersResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListHybridIssuersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListHybridIssuersResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListHybridIssuersResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{151}
}

func (x *GoogleCloudApigeeV1ListHybridIssuersResponse) GetIssuers() []*GoogleCloudApigeeV1ServiceIssuersMapping {
	if x != nil {
		return x.Issuers
	}
	return nil
}

// Response for ListInstanceAttachments.
type GoogleCloudApigeeV1ListInstanceAttachmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Attachments for the instance.
	Attachments []*GoogleCloudApigeeV1InstanceAttachment `protobuf:"bytes,1,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Page token that you can include in a ListInstanceAttachments request to retrieve the next page of content. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListInstanceAttachmentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListInstanceAttachmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListInstanceAttachmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListInstanceAttachmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListInstanceAttachmentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{152}
}

func (x *GoogleCloudApigeeV1ListInstanceAttachmentsResponse) GetAttachments() []*GoogleCloudApigeeV1InstanceAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListInstanceAttachmentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Response for ListInstances.
type GoogleCloudApigeeV1ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instances in the specified organization.
	Instances []*GoogleCloudApigeeV1Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// Page token that you can include in a ListInstance request to retrieve the next page of content. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListInstancesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListInstancesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{153}
}

func (x *GoogleCloudApigeeV1ListInstancesResponse) GetInstances() []*GoogleCloudApigeeV1Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListInstancesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request structure for listing key value map keys and its corresponding values.
type GoogleCloudApigeeV1ListKeyValueEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more key value map keys and values.
	KeyValueEntries []*GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,1,rep,name=key_value_entries,json=keyValueEntries,proto3" json:"key_value_entries,omitempty"`
	// Token that can be sent as `next_page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListKeyValueEntriesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListKeyValueEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListKeyValueEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListKeyValueEntriesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListKeyValueEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListKeyValueEntriesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListKeyValueEntriesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{154}
}

func (x *GoogleCloudApigeeV1ListKeyValueEntriesResponse) GetKeyValueEntries() []*GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.KeyValueEntries
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListKeyValueEntriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Response for ListNatAddresses.
type GoogleCloudApigeeV1ListNatAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of NAT Addresses for the instance.
	NatAddresses []*GoogleCloudApigeeV1NatAddress `protobuf:"bytes,1,rep,name=nat_addresses,json=natAddresses,proto3" json:"nat_addresses,omitempty"`
	// Page token that you can include in a ListNatAddresses request to retrieve the next page of content. If omitted, no subsequent pages exist.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GoogleCloudApigeeV1ListNatAddressesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListNatAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListNatAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListNatAddressesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListNatAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListNatAddressesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListNatAddressesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{155}
}

func (x *GoogleCloudApigeeV1ListNatAddressesResponse) GetNatAddresses() []*GoogleCloudApigeeV1NatAddress {
	if x != nil {
		return x.NatAddresses
	}
	return nil
}

func (x *GoogleCloudApigeeV1ListNatAddressesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GoogleCloudApigeeV1ListOfDevelopersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of developers.
	Developer []*GoogleCloudApigeeV1Developer `protobuf:"bytes,1,rep,name=developer,proto3" json:"developer,omitempty"`
}

func (x *GoogleCloudApigeeV1ListOfDevelopersResponse) Reset() {
	*x = GoogleCloudApigeeV1ListOfDevelopersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListOfDevelopersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListOfDevelopersResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListOfDevelopersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListOfDevelopersResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListOfDevelopersResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{156}
}

func (x *GoogleCloudApigeeV1ListOfDevelopersResponse) GetDeveloper() []*GoogleCloudApigeeV1Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

type GoogleCloudApigeeV1ListOrganizationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Apigee organizations and associated Google Cloud projects.
	Organizations []*GoogleCloudApigeeV1OrganizationProjectMapping `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations,omitempty"`
}

func (x *GoogleCloudApigeeV1ListOrganizationsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListOrganizationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListOrganizationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListOrganizationsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListOrganizationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListOrganizationsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListOrganizationsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{157}
}

func (x *GoogleCloudApigeeV1ListOrganizationsResponse) GetOrganizations() []*GoogleCloudApigeeV1OrganizationProjectMapping {
	if x != nil {
		return x.Organizations
	}
	return nil
}

// Response for ListRatePlans.
type GoogleCloudApigeeV1ListRatePlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value that can be sent as `startKey` to retrieve the next page of content. If this field is omitted, there are no subsequent pages.
	NextStartKey string `protobuf:"bytes,1,opt,name=next_start_key,json=nextStartKey,proto3" json:"next_start_key,omitempty"`
	// List of rate plans in an organization.
	RatePlans []*GoogleCloudApigeeV1RatePlan `protobuf:"bytes,2,rep,name=rate_plans,json=ratePlans,proto3" json:"rate_plans,omitempty"`
}

func (x *GoogleCloudApigeeV1ListRatePlansResponse) Reset() {
	*x = GoogleCloudApigeeV1ListRatePlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListRatePlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListRatePlansResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListRatePlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListRatePlansResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListRatePlansResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{158}
}

func (x *GoogleCloudApigeeV1ListRatePlansResponse) GetNextStartKey() string {
	if x != nil {
		return x.NextStartKey
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListRatePlansResponse) GetRatePlans() []*GoogleCloudApigeeV1RatePlan {
	if x != nil {
		return x.RatePlans
	}
	return nil
}

// Contains a list of SecurityActions in response to a ListSecurityActionRequest.
type GoogleCloudApigeeV1ListSecurityActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The SecurityActions for the specified environment.
	SecurityActions []*GoogleCloudApigeeV1SecurityAction `protobuf:"bytes,2,rep,name=security_actions,json=securityActions,proto3" json:"security_actions,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityActionsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityActionsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityActionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityActionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{159}
}

func (x *GoogleCloudApigeeV1ListSecurityActionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityActionsResponse) GetSecurityActions() []*GoogleCloudApigeeV1SecurityAction {
	if x != nil {
		return x.SecurityActions
	}
	return nil
}

// Response for ListSecurityIncidents.
type GoogleCloudApigeeV1ListSecurityIncidentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of security incidents in the organization
	SecurityIncidents []*GoogleCloudApigeeV1SecurityIncident `protobuf:"bytes,2,rep,name=security_incidents,json=securityIncidents,proto3" json:"security_incidents,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityIncidentsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityIncidentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityIncidentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityIncidentsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityIncidentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityIncidentsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityIncidentsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{160}
}

func (x *GoogleCloudApigeeV1ListSecurityIncidentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityIncidentsResponse) GetSecurityIncidents() []*GoogleCloudApigeeV1SecurityIncident {
	if x != nil {
		return x.SecurityIncidents
	}
	return nil
}

// Response for ListSecurityProfileRevisions.
type GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of security profile revisions. The revisions may be attached or unattached to any environment.
	SecurityProfiles []*GoogleCloudApigeeV1SecurityProfile `protobuf:"bytes,2,rep,name=security_profiles,json=securityProfiles,proto3" json:"security_profiles,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{161}
}

func (x *GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse) GetSecurityProfiles() []*GoogleCloudApigeeV1SecurityProfile {
	if x != nil {
		return x.SecurityProfiles
	}
	return nil
}

// Response for ListSecurityProfiles.
type GoogleCloudApigeeV1ListSecurityProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of security profiles in the organization. The profiles may be attached or unattached to any environment. This will return latest revision of each profile.
	SecurityProfiles []*GoogleCloudApigeeV1SecurityProfile `protobuf:"bytes,2,rep,name=security_profiles,json=securityProfiles,proto3" json:"security_profiles,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityProfilesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityProfilesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityProfilesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{162}
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesResponse) GetSecurityProfiles() []*GoogleCloudApigeeV1SecurityProfile {
	if x != nil {
		return x.SecurityProfiles
	}
	return nil
}

// Response for ListSecurityProfilesV2.
type GoogleCloudApigeeV1ListSecurityProfilesV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List of security profiles in the organization.
	SecurityProfilesV2 []*GoogleCloudApigeeV1SecurityProfileV2 `protobuf:"bytes,2,rep,name=security_profiles_v2,json=securityProfilesV2,proto3" json:"security_profiles_v2,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesV2Response) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityProfilesV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityProfilesV2Response) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityProfilesV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityProfilesV2Response.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityProfilesV2Response) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{163}
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesV2Response) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityProfilesV2Response) GetSecurityProfilesV2() []*GoogleCloudApigeeV1SecurityProfileV2 {
	if x != nil {
		return x.SecurityProfilesV2
	}
	return nil
}

// The response for SecurityReports.
type GoogleCloudApigeeV1ListSecurityReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the number of security reports exceeded the page size requested, the token can be used to fetch the next page in a subsequent call. If the response is the last page and there are no more reports to return this field is left empty.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The security reports belong to requested resource name.
	SecurityReports []*GoogleCloudApigeeV1SecurityReport `protobuf:"bytes,2,rep,name=security_reports,json=securityReports,proto3" json:"security_reports,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSecurityReportsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSecurityReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSecurityReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSecurityReportsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSecurityReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSecurityReportsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSecurityReportsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{164}
}

func (x *GoogleCloudApigeeV1ListSecurityReportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListSecurityReportsResponse) GetSecurityReports() []*GoogleCloudApigeeV1SecurityReport {
	if x != nil {
		return x.SecurityReports
	}
	return nil
}

type GoogleCloudApigeeV1ListSharedFlowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedFlows []*GoogleCloudApigeeV1SharedFlow `protobuf:"bytes,1,rep,name=shared_flows,json=sharedFlows,proto3" json:"shared_flows,omitempty"`
}

func (x *GoogleCloudApigeeV1ListSharedFlowsResponse) Reset() {
	*x = GoogleCloudApigeeV1ListSharedFlowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListSharedFlowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListSharedFlowsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListSharedFlowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListSharedFlowsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListSharedFlowsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{165}
}

func (x *GoogleCloudApigeeV1ListSharedFlowsResponse) GetSharedFlows() []*GoogleCloudApigeeV1SharedFlow {
	if x != nil {
		return x.SharedFlows
	}
	return nil
}

// Response for ListTraceConfigOverrides.
type GoogleCloudApigeeV1ListTraceConfigOverridesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token value that can be passed as `page_token` to retrieve the next page of content.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// List all trace configuration overrides in an environment.
	TraceConfigOverrides []*GoogleCloudApigeeV1TraceConfigOverride `protobuf:"bytes,2,rep,name=trace_config_overrides,json=traceConfigOverrides,proto3" json:"trace_config_overrides,omitempty"`
}

func (x *GoogleCloudApigeeV1ListTraceConfigOverridesResponse) Reset() {
	*x = GoogleCloudApigeeV1ListTraceConfigOverridesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ListTraceConfigOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ListTraceConfigOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ListTraceConfigOverridesResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{166}
}

func (x *GoogleCloudApigeeV1ListTraceConfigOverridesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1ListTraceConfigOverridesResponse) GetTraceConfigOverrides() []*GoogleCloudApigeeV1TraceConfigOverride {
	if x != nil {
		return x.TraceConfigOverrides
	}
	return nil
}

// Encapsulates additional information about query execution.
type GoogleCloudApigeeV1Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of error messages as strings.
	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	// List of additional information such as data source, if result was truncated. For example: ``` "notices": [ "Source:Postgres", "PG Host:uappg0rw.e2e.apigeeks.net", "query served by:4b64601e-40de-4eb1-bfb9-eeee7ac929ed", "Table used: edge.api.uapgroup2.agg_api" ]```
	Notices []string `protobuf:"bytes,2,rep,name=notices,proto3" json:"notices,omitempty"`
}

func (x *GoogleCloudApigeeV1Metadata) Reset() {
	*x = GoogleCloudApigeeV1Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Metadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Metadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Metadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{167}
}

func (x *GoogleCloudApigeeV1Metadata) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GoogleCloudApigeeV1Metadata) GetNotices() []string {
	if x != nil {
		return x.Notices
	}
	return nil
}

// Encapsulates the metric data point. For example: ```{ "name": "sum(message_count)", "values" : [ { "timestamp": 1549004400000, "value": "39.0" }, { "timestamp" : 1548997200000, "value" : "0.0" } ] }``` or ```{ "name": "sum(message_count)", "values" : ["39.0"] }```
type GoogleCloudApigeeV1Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of metric values. Possible value formats include: `"values":["39.0"]` or `"values":[ { "value": "39.0", "timestamp": 1232434354} ]`
	Values []*any1.Any `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GoogleCloudApigeeV1Metric) Reset() {
	*x = GoogleCloudApigeeV1Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Metric) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Metric) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Metric.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Metric) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{168}
}

func (x *GoogleCloudApigeeV1Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Metric) GetValues() []*any1.Any {
	if x != nil {
		return x.Values
	}
	return nil
}

// The optionally aggregated metric to query with its ordering.
type GoogleCloudApigeeV1MetricAggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregation function associated with the metric.
	Aggregation string `protobuf:"bytes,1,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	// Name of the metric
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Ordering for this aggregation in the result. For time series this is ignored since the ordering of points depends only on the timestamp, not the values.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GoogleCloudApigeeV1MetricAggregation) Reset() {
	*x = GoogleCloudApigeeV1MetricAggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1MetricAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1MetricAggregation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1MetricAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1MetricAggregation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1MetricAggregation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{169}
}

func (x *GoogleCloudApigeeV1MetricAggregation) GetAggregation() string {
	if x != nil {
		return x.Aggregation
	}
	return ""
}

func (x *GoogleCloudApigeeV1MetricAggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1MetricAggregation) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

// Configuration for the Monetization add-on.
type GoogleCloudApigeeV1MonetizationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifies whether the Monetization add-on is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1MonetizationConfig) Reset() {
	*x = GoogleCloudApigeeV1MonetizationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1MonetizationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1MonetizationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1MonetizationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1MonetizationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1MonetizationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{170}
}

func (x *GoogleCloudApigeeV1MonetizationConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Apigee NAT(network address translation) address. A NAT address is a static external IP address used for Internet egress traffic.
type GoogleCloudApigeeV1NatAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The static IPV4 address.
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// Required. Resource ID of the NAT address.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. State of the nat address.
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1NatAddress) Reset() {
	*x = GoogleCloudApigeeV1NatAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1NatAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1NatAddress) ProtoMessage() {}

func (x *GoogleCloudApigeeV1NatAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1NatAddress.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1NatAddress) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{171}
}

func (x *GoogleCloudApigeeV1NatAddress) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *GoogleCloudApigeeV1NatAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1NatAddress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// NodeConfig for setting the min/max number of nodes associated with the environment.
type GoogleCloudApigeeV1NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current total number of gateway nodes that each environment currently has across all instances.
	CurrentAggregateNodeCount int64 `protobuf:"varint,1,opt,name=current_aggregate_node_count,json=currentAggregateNodeCount,proto3" json:"current_aggregate_node_count,omitempty"`
	// Optional. The maximum total number of gateway nodes that the is reserved for all instances that has the specified environment. If not specified, the default is determined by the recommended maximum number of nodes for that gateway.
	MaxNodeCount int64 `protobuf:"varint,2,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// Optional. The minimum total number of gateway nodes that the is reserved for all instances that has the specified environment. If not specified, the default is determined by the recommended minimum number of nodes for that gateway.
	MinNodeCount int64 `protobuf:"varint,3,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
}

func (x *GoogleCloudApigeeV1NodeConfig) Reset() {
	*x = GoogleCloudApigeeV1NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1NodeConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1NodeConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1NodeConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{172}
}

func (x *GoogleCloudApigeeV1NodeConfig) GetCurrentAggregateNodeCount() int64 {
	if x != nil {
		return x.CurrentAggregateNodeCount
	}
	return 0
}

func (x *GoogleCloudApigeeV1NodeConfig) GetMaxNodeCount() int64 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *GoogleCloudApigeeV1NodeConfig) GetMinNodeCount() int64 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

// OpenAPI Specification documentation for a catalog item.
type GoogleCloudApigeeV1OASDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The format of the input specification file contents.
	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	// Required. The documentation file contents for the OpenAPI Specification. JSON and YAML file formats are supported.
	Spec *GoogleCloudApigeeV1DocumentationFile `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *GoogleCloudApigeeV1OASDocumentation) Reset() {
	*x = GoogleCloudApigeeV1OASDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OASDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OASDocumentation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OASDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OASDocumentation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OASDocumentation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{173}
}

func (x *GoogleCloudApigeeV1OASDocumentation) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GoogleCloudApigeeV1OASDocumentation) GetSpec() *GoogleCloudApigeeV1DocumentationFile {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Represents the pairing of REST resource path and the actions (verbs) allowed on the resource path.
type GoogleCloudApigeeV1Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// methods refers to the REST verbs as in https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html. When none specified, all verb types are allowed.
	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	// Required. REST resource path associated with the API proxy or remote service.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *GoogleCloudApigeeV1Operation) Reset() {
	*x = GoogleCloudApigeeV1Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Operation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Operation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Operation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{174}
}

func (x *GoogleCloudApigeeV1Operation) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *GoogleCloudApigeeV1Operation) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// Binds the resources in an API proxy or remote service with the allowed REST methods and associated quota enforcement.
type GoogleCloudApigeeV1OperationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the API proxy or remote service with which the resources, methods, and quota are associated.
	ApiSource string `protobuf:"bytes,1,opt,name=api_source,json=apiSource,proto3" json:"api_source,omitempty"`
	// Custom attributes associated with the operation.
	Attributes []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// List of resource/method pairs for the API proxy or remote service to which quota will applied. **Note**: Currently, you can specify only a single resource/method pair. The call will fail if more than one resource/method pair is provided.
	Operations []*GoogleCloudApigeeV1Operation `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	// Quota parameters to be enforced for the resources, methods, and API source combination. If none are specified, quota enforcement will not be done.
	Quota *GoogleCloudApigeeV1Quota `protobuf:"bytes,4,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (x *GoogleCloudApigeeV1OperationConfig) Reset() {
	*x = GoogleCloudApigeeV1OperationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OperationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OperationConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OperationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OperationConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OperationConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{175}
}

func (x *GoogleCloudApigeeV1OperationConfig) GetApiSource() string {
	if x != nil {
		return x.ApiSource
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationConfig) GetAttributes() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1OperationConfig) GetOperations() []*GoogleCloudApigeeV1Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *GoogleCloudApigeeV1OperationConfig) GetQuota() *GoogleCloudApigeeV1Quota {
	if x != nil {
		return x.Quota
	}
	return nil
}

// List of operation configuration details associated with Apigee API proxies or remote services. Remote services are non-Apigee proxies, such as Istio-Envoy.
type GoogleCloudApigeeV1OperationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag that specifes whether the configuration is for Apigee API proxy or a remote service. Valid values include `proxy` or `remoteservice`. Defaults to `proxy`. Set to `proxy` when Apigee API proxies are associated with the API product. Set to `remoteservice` when non-Apigee proxies like Istio-Envoy are associated with the API product.
	OperationConfigType string `protobuf:"bytes,1,opt,name=operation_config_type,json=operationConfigType,proto3" json:"operation_config_type,omitempty"`
	// Required. List of operation configurations for either Apigee API proxies or other remote services that are associated with this API product.
	OperationConfigs []*GoogleCloudApigeeV1OperationConfig `protobuf:"bytes,2,rep,name=operation_configs,json=operationConfigs,proto3" json:"operation_configs,omitempty"`
}

func (x *GoogleCloudApigeeV1OperationGroup) Reset() {
	*x = GoogleCloudApigeeV1OperationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OperationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OperationGroup) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OperationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OperationGroup.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OperationGroup) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{176}
}

func (x *GoogleCloudApigeeV1OperationGroup) GetOperationConfigType() string {
	if x != nil {
		return x.OperationConfigType
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationGroup) GetOperationConfigs() []*GoogleCloudApigeeV1OperationConfig {
	if x != nil {
		return x.OperationConfigs
	}
	return nil
}

// Metadata describing an Operation.
type GoogleCloudApigeeV1OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType string `protobuf:"bytes,1,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"`
	// Progress of the operation.
	Progress *GoogleCloudApigeeV1OperationMetadataProgress `protobuf:"bytes,2,opt,name=progress,proto3" json:"progress,omitempty"`
	State    string                                        `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Name of the resource for which the operation is operating on.
	TargetResourceName string `protobuf:"bytes,4,opt,name=target_resource_name,json=targetResourceName,proto3" json:"target_resource_name,omitempty"`
	// Warnings encountered while executing the operation.
	Warnings []string `protobuf:"bytes,5,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *GoogleCloudApigeeV1OperationMetadata) Reset() {
	*x = GoogleCloudApigeeV1OperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OperationMetadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OperationMetadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OperationMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{177}
}

func (x *GoogleCloudApigeeV1OperationMetadata) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationMetadata) GetProgress() *GoogleCloudApigeeV1OperationMetadataProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *GoogleCloudApigeeV1OperationMetadata) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationMetadata) GetTargetResourceName() string {
	if x != nil {
		return x.TargetResourceName
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationMetadata) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Information about operation progress.
type GoogleCloudApigeeV1OperationMetadataProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the operation's progress.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The additional details of the progress.
	Details map[string]*any1.Any `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The percentage of the operation progress.
	PercentDone int32 `protobuf:"varint,3,opt,name=percent_done,json=percentDone,proto3" json:"percent_done,omitempty"`
	// State of the operation.
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) Reset() {
	*x = GoogleCloudApigeeV1OperationMetadataProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OperationMetadataProgress) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OperationMetadataProgress.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OperationMetadataProgress) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{178}
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) GetDetails() map[string]*any1.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) GetPercentDone() int32 {
	if x != nil {
		return x.PercentDone
	}
	return 0
}

func (x *GoogleCloudApigeeV1OperationMetadataProgress) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GoogleCloudApigeeV1OptimizedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wraps the `stats` response for JavaScript Optimized Scenario with a response key. For example: ```{ "Response": { "TimeUnit": [], "metaData": { "errors": [], "notices": [ "Source:Postgres", "Table used: edge.api.aaxgroup001.agg_api", "PG Host:ruappg08-ro.production.apigeeks.net", "query served by:80c4ebca-6a10-4a2e-8faf-c60c1ee306ca" ] }, "resultTruncated": false, "stats": { "data": [ { "identifier": { "names": [ "apiproxy" ], "values": [ "sirjee" ] }, "metric": [ { "env": "prod", "name": "sum(message_count)", "values": [ 36.0 ] }, { "env": "prod", "name": "sum(is_error)", "values": [ 36.0 ] } ] } ] } } }```
	Response *GoogleCloudApigeeV1OptimizedStatsResponse `protobuf:"bytes,1,opt,name=response,json=Response,proto3" json:"response,omitempty"`
}

func (x *GoogleCloudApigeeV1OptimizedStats) Reset() {
	*x = GoogleCloudApigeeV1OptimizedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OptimizedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OptimizedStats) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OptimizedStats) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OptimizedStats.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OptimizedStats) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{179}
}

func (x *GoogleCloudApigeeV1OptimizedStats) GetResponse() *GoogleCloudApigeeV1OptimizedStatsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Encapsulates a data node as represented below: ``` { "identifier": { "names": [ "apiproxy" ], "values": [ "sirjee" ] }, "metric": [ { "env": "prod", "name": "sum(message_count)", "values": [ 36.0 ] } ] }``` or ``` { "env": "prod", "name": "sum(message_count)", "values": [ 36.0 ] }``` Depending on whether a dimension is present in the query or not the data node type can be a simple metric value or dimension identifier with list of metrics.
type GoogleCloudApigeeV1OptimizedStatsNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*any1.Any `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GoogleCloudApigeeV1OptimizedStatsNode) Reset() {
	*x = GoogleCloudApigeeV1OptimizedStatsNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OptimizedStatsNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OptimizedStatsNode) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OptimizedStatsNode) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OptimizedStatsNode.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OptimizedStatsNode) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{180}
}

func (x *GoogleCloudApigeeV1OptimizedStatsNode) GetData() []*any1.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// Encapsulates a response format for JavaScript Optimized Scenario.
type GoogleCloudApigeeV1OptimizedStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of time unit values. Time unit refers to an epoch timestamp value.
	TimeUnit []int64 `protobuf:"varint,1,rep,packed,name=time_unit,json=TimeUnit,proto3" json:"time_unit,omitempty"`
	// Metadata information about the query executed.
	MetaData *GoogleCloudApigeeV1Metadata `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	// Boolean flag that indicates whether the results were truncated based on the limit parameter.
	ResultTruncated bool `protobuf:"varint,3,opt,name=result_truncated,json=resultTruncated,proto3" json:"result_truncated,omitempty"`
	// `stats` results.
	Stats *GoogleCloudApigeeV1OptimizedStatsNode `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) Reset() {
	*x = GoogleCloudApigeeV1OptimizedStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OptimizedStatsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OptimizedStatsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OptimizedStatsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{181}
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) GetTimeUnit() []int64 {
	if x != nil {
		return x.TimeUnit
	}
	return nil
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) GetMetaData() *GoogleCloudApigeeV1Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) GetResultTruncated() bool {
	if x != nil {
		return x.ResultTruncated
	}
	return false
}

func (x *GoogleCloudApigeeV1OptimizedStatsResponse) GetStats() *GoogleCloudApigeeV1OptimizedStatsNode {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GoogleCloudApigeeV1Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Addon configurations of the Apigee organization.
	AddonsConfig *GoogleCloudApigeeV1AddonsConfig `protobuf:"bytes,1,opt,name=addons_config,json=addonsConfig,proto3" json:"addons_config,omitempty"`
	// Required. DEPRECATED: This field will eventually be deprecated and replaced with a differently-named field. Primary Google Cloud region for analytics data storage. For valid values, see [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
	AnalyticsRegion string `protobuf:"bytes,2,opt,name=analytics_region,json=analyticsRegion,proto3" json:"analytics_region,omitempty"`
	// Cloud KMS key name used for encrypting API consumer data. If not specified or [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	ApiConsumerDataEncryptionKeyName string `protobuf:"bytes,3,opt,name=api_consumer_data_encryption_key_name,json=apiConsumerDataEncryptionKeyName,proto3" json:"api_consumer_data_encryption_key_name,omitempty"`
	// This field is needed only for customers using non-default data residency regions. Apigee stores some control plane data only in single region. This field determines which single region Apigee should use. For example: "us-west1" when control plane is in US or "europe-west2" when control plane is in EU.
	ApiConsumerDataLocation string `protobuf:"bytes,4,opt,name=api_consumer_data_location,json=apiConsumerDataLocation,proto3" json:"api_consumer_data_location,omitempty"`
	// Output only. Apigee Project ID associated with the organization. Use this project to allowlist Apigee in the Service Attachment when using private service connect with Apigee.
	ApigeeProjectId string `protobuf:"bytes,5,opt,name=apigee_project_id,json=apigeeProjectId,proto3" json:"apigee_project_id,omitempty"`
	// Not used by Apigee.
	Attributes []string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Valid only when [RuntimeType](#RuntimeType) is set to `CLOUD`. The value must be set before the creation of a runtime instance and can be updated only when there are no runtime instances. For example: `default`. When changing authorizedNetwork, you must reconfigure VPC peering. After VPC peering with previous network is deleted, [run the following command](https://cloud.google.com/sdk/gcloud/reference/services/vpc-peerings/delete): `gcloud services vpc-peerings delete --network=NETWORK`, where `NETWORK` is the name of the previous network. This will delete the previous Service Networking. Otherwise, you will get the following error: `The resource 'projects/...-tp' is already linked to another shared VPC host 'projects/...-tp`. Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork` **Note:** Not supported for Apigee hybrid.
	AuthorizedNetwork string `protobuf:"bytes,7,opt,name=authorized_network,json=authorizedNetwork,proto3" json:"authorized_network,omitempty"`
	// Billing type of the Apigee organization. See [Apigee pricing](https://cloud.google.com/apigee/pricing).
	BillingType string `protobuf:"bytes,8,opt,name=billing_type,json=billingType,proto3" json:"billing_type,omitempty"`
	// Output only. Base64-encoded public certificate for the root CA of the Apigee organization. Valid only when [RuntimeType](#RuntimeType) is `CLOUD`.
	CaCertificate []byte `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	// Cloud KMS key name used for encrypting control plane data that is stored in a multi region. Only used for the data residency region "US" or "EU". If not specified or [BillingType](#BillingType) is `EVALUATION`, a Google-Managed encryption key will be used. Format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`
	ControlPlaneEncryptionKeyName string `protobuf:"bytes,10,opt,name=control_plane_encryption_key_name,json=controlPlaneEncryptionKeyName,proto3" json:"control_plane_encryption_key_name,omitempty"`
	// Output only. Time that the Apigee organization was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Not used by Apigee.
	CustomerName string `protobuf:"bytes,12,opt,name=customer_name,json=customerName,proto3" json:"customer_name,omitempty"`
	// Description of the Apigee organization.
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. Flag that specifies whether the VPC Peering through Private Google Access should be disabled between the consumer network and Apigee. Valid only when RuntimeType is set to CLOUD. Required if an authorizedNetwork on the consumer project is not provided, in which case the flag should be set to true. The value must be set before the creation of any Apigee runtime instance and can be updated only when there are no runtime instances. **Note:** Apigee will be deprecating the vpc peering model that requires you to provide 'authorizedNetwork', by making the non-peering model as the default way of provisioning Apigee organization in future. So, this will be a temporary flag to enable the transition. Not supported for Apigee hybrid.
	DisableVpcPeering bool `protobuf:"varint,14,opt,name=disable_vpc_peering,json=disableVpcPeering,proto3" json:"disable_vpc_peering,omitempty"`
	// Display name for the Apigee organization. Unused, but reserved for future use.
	DisplayName string `protobuf:"bytes,15,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. List of environments in the Apigee organization.
	Environments []string `protobuf:"bytes,16,rep,name=environments,proto3" json:"environments,omitempty"`
	// Output only. Time that the Apigee organization is scheduled for deletion.
	ExpiresAt int64 `protobuf:"varint,17,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Output only. Time that the Apigee organization was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,18,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Output only. Name of the Apigee organization.
	Name string `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration for the Portals settings.
	PortalDisabled bool `protobuf:"varint,20,opt,name=portal_disabled,json=portalDisabled,proto3" json:"portal_disabled,omitempty"`
	// Output only. Project ID associated with the Apigee organization.
	ProjectId string `protobuf:"bytes,21,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Properties defined in the Apigee organization profile.
	Properties *GoogleCloudApigeeV1Properties `protobuf:"bytes,22,opt,name=properties,proto3" json:"properties,omitempty"`
	// Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances. Update is not allowed after the organization is created. If not specified or [RuntimeType](#RuntimeType) is `TRIAL`, a Google-Managed encryption key will be used. For example: "projects/foo/locations/us/keyRings/bar/cryptoKeys/baz". **Note:** Not supported for Apigee hybrid.
	RuntimeDatabaseEncryptionKeyName string `protobuf:"bytes,23,opt,name=runtime_database_encryption_key_name,json=runtimeDatabaseEncryptionKeyName,proto3" json:"runtime_database_encryption_key_name,omitempty"`
	// Required. Runtime type of the Apigee organization based on the Apigee subscription purchased.
	RuntimeType string `protobuf:"bytes,24,opt,name=runtime_type,json=runtimeType,proto3" json:"runtime_type,omitempty"`
	// Output only. State of the organization. Values other than ACTIVE means the resource is not ready to use.
	State string `protobuf:"bytes,25,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. Subscription plan that the customer has purchased. Output only.
	SubscriptionPlan string `protobuf:"bytes,26,opt,name=subscription_plan,json=subscriptionPlan,proto3" json:"subscription_plan,omitempty"`
	// Output only. DEPRECATED: This will eventually be replaced by BillingType. Subscription type of the Apigee organization. Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased). See [Apigee pricing](https://cloud.google.com/apigee/pricing/).
	SubscriptionType string `protobuf:"bytes,27,opt,name=subscription_type,json=subscriptionType,proto3" json:"subscription_type,omitempty"`
	// Not used by Apigee.
	Type string `protobuf:"bytes,28,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1Organization) Reset() {
	*x = GoogleCloudApigeeV1Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Organization) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Organization) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Organization.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Organization) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{182}
}

func (x *GoogleCloudApigeeV1Organization) GetAddonsConfig() *GoogleCloudApigeeV1AddonsConfig {
	if x != nil {
		return x.AddonsConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1Organization) GetAnalyticsRegion() string {
	if x != nil {
		return x.AnalyticsRegion
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetApiConsumerDataEncryptionKeyName() string {
	if x != nil {
		return x.ApiConsumerDataEncryptionKeyName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetApiConsumerDataLocation() string {
	if x != nil {
		return x.ApiConsumerDataLocation
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetApigeeProjectId() string {
	if x != nil {
		return x.ApigeeProjectId
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *GoogleCloudApigeeV1Organization) GetAuthorizedNetwork() string {
	if x != nil {
		return x.AuthorizedNetwork
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetBillingType() string {
	if x != nil {
		return x.BillingType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetCaCertificate() []byte {
	if x != nil {
		return x.CaCertificate
	}
	return nil
}

func (x *GoogleCloudApigeeV1Organization) GetControlPlaneEncryptionKeyName() string {
	if x != nil {
		return x.ControlPlaneEncryptionKeyName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Organization) GetCustomerName() string {
	if x != nil {
		return x.CustomerName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetDisableVpcPeering() bool {
	if x != nil {
		return x.DisableVpcPeering
	}
	return false
}

func (x *GoogleCloudApigeeV1Organization) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GoogleCloudApigeeV1Organization) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Organization) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1Organization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetPortalDisabled() bool {
	if x != nil {
		return x.PortalDisabled
	}
	return false
}

func (x *GoogleCloudApigeeV1Organization) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetProperties() *GoogleCloudApigeeV1Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GoogleCloudApigeeV1Organization) GetRuntimeDatabaseEncryptionKeyName() string {
	if x != nil {
		return x.RuntimeDatabaseEncryptionKeyName
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetRuntimeType() string {
	if x != nil {
		return x.RuntimeType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetSubscriptionPlan() string {
	if x != nil {
		return x.SubscriptionPlan
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetSubscriptionType() string {
	if x != nil {
		return x.SubscriptionType
	}
	return ""
}

func (x *GoogleCloudApigeeV1Organization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GoogleCloudApigeeV1OrganizationProjectMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The Google Cloud region where control plane data is located. For more information, see https://cloud.google.com/about/locations/.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the Apigee organization.
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	// Google Cloud project associated with the Apigee organization
	ProjectId string `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// DEPRECATED: Use `project_id`. An Apigee Organization is mapped to a single project.
	ProjectIds []string `protobuf:"bytes,4,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) Reset() {
	*x = GoogleCloudApigeeV1OrganizationProjectMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1OrganizationProjectMapping) ProtoMessage() {}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1OrganizationProjectMapping.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1OrganizationProjectMapping) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{183}
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GoogleCloudApigeeV1OrganizationProjectMapping) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type GoogleCloudApigeeV1PodStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the application running in the pod.
	AppVersion string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// Status of the deployment. Valid values include: - `deployed`: Successful. - `error` : Failed. - `pending` : Pod has not yet reported on the deployment.
	DeploymentStatus string `protobuf:"bytes,2,opt,name=deployment_status,json=deploymentStatus,proto3" json:"deployment_status,omitempty"`
	// Time the deployment status was reported in milliseconds since epoch.
	DeploymentStatusTime int64 `protobuf:"varint,3,opt,name=deployment_status_time,json=deploymentStatusTime,proto3" json:"deployment_status_time,omitempty"`
	// Time the proxy was deployed in milliseconds since epoch.
	DeploymentTime int64 `protobuf:"varint,4,opt,name=deployment_time,json=deploymentTime,proto3" json:"deployment_time,omitempty"`
	// Name of the pod which is reporting the status.
	PodName string `protobuf:"bytes,5,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	// Overall status of the pod (not this specific deployment). Valid values include: - `active`: Up to date. - `stale` : Recently out of date. Pods that have not reported status in a long time are excluded from the output.
	PodStatus string `protobuf:"bytes,6,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty"`
	// Time the pod status was reported in milliseconds since epoch.
	PodStatusTime int64 `protobuf:"varint,7,opt,name=pod_status_time,json=podStatusTime,proto3" json:"pod_status_time,omitempty"`
	// Code associated with the deployment status.
	StatusCode string `protobuf:"bytes,8,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Human-readable message associated with the status code.
	StatusCodeDetails string `protobuf:"bytes,9,opt,name=status_code_details,json=statusCodeDetails,proto3" json:"status_code_details,omitempty"`
}

func (x *GoogleCloudApigeeV1PodStatus) Reset() {
	*x = GoogleCloudApigeeV1PodStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1PodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1PodStatus) ProtoMessage() {}

func (x *GoogleCloudApigeeV1PodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1PodStatus.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1PodStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{184}
}

func (x *GoogleCloudApigeeV1PodStatus) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *GoogleCloudApigeeV1PodStatus) GetDeploymentStatus() string {
	if x != nil {
		return x.DeploymentStatus
	}
	return ""
}

func (x *GoogleCloudApigeeV1PodStatus) GetDeploymentStatusTime() int64 {
	if x != nil {
		return x.DeploymentStatusTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1PodStatus) GetDeploymentTime() int64 {
	if x != nil {
		return x.DeploymentTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1PodStatus) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GoogleCloudApigeeV1PodStatus) GetPodStatus() string {
	if x != nil {
		return x.PodStatus
	}
	return ""
}

func (x *GoogleCloudApigeeV1PodStatus) GetPodStatusTime() int64 {
	if x != nil {
		return x.PodStatusTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1PodStatus) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1PodStatus) GetStatusCodeDetails() string {
	if x != nil {
		return x.StatusCodeDetails
	}
	return ""
}

// Point is a group of information collected by runtime plane at critical points of the message flow of the processed API request. This is a list of supported point IDs, categorized to three major buckets. For each category, debug points that we are currently supporting are listed below: - Flow status debug points: StateChange FlowInfo Condition Execution DebugMask Error - Flow control debug points: FlowCallout Paused Resumed FlowReturn BreakFlow Error - Runtime debug points: ScriptExecutor FlowCalloutStepDefinition CustomTarget StepDefinition Oauth2ServicePoint RaiseFault NodeJS The detail information of the given debug point is stored in a list of results.
type GoogleCloudApigeeV1Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a step in the transaction.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of results extracted from a given debug point.
	Results []*GoogleCloudApigeeV1Result `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GoogleCloudApigeeV1Point) Reset() {
	*x = GoogleCloudApigeeV1Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Point) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Point) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Point.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Point) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{185}
}

func (x *GoogleCloudApigeeV1Point) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GoogleCloudApigeeV1Point) GetResults() []*GoogleCloudApigeeV1Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// ProfileConfig defines a set of categories and policies which will be used to compute security score.
type GoogleCloudApigeeV1ProfileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of categories of profile config.
	Categories []*GoogleCloudApigeeV1ProfileConfigCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GoogleCloudApigeeV1ProfileConfig) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{186}
}

func (x *GoogleCloudApigeeV1ProfileConfig) GetCategories() []*GoogleCloudApigeeV1ProfileConfigCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Checks for abuse, which includes any requests sent to the API for purposes other than what it is intended for, such as high volumes of requests, data scraping, and abuse related to authorization.
type GoogleCloudApigeeV1ProfileConfigAbuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigAbuse) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigAbuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigAbuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigAbuse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigAbuse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigAbuse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigAbuse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{187}
}

// By default, following policies will be included: - JWS - JWT - OAuth - BasicAuth - APIKey
type GoogleCloudApigeeV1ProfileConfigAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigAuthorization) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigAuthorization) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigAuthorization.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigAuthorization) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{188}
}

// Checks to see if you have CORS policy in place.
type GoogleCloudApigeeV1ProfileConfigCORS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigCORS) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigCORS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigCORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigCORS) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigCORS) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigCORS.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigCORS) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{189}
}

// Advanced API Security provides security profile that scores the following categories.
type GoogleCloudApigeeV1ProfileConfigCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checks for abuse, which includes any requests sent to the API for purposes other than what it is intended for, such as high volumes of requests, data scraping, and abuse related to authorization.
	Abuse *GoogleCloudApigeeV1ProfileConfigAbuse `protobuf:"bytes,1,opt,name=abuse,proto3" json:"abuse,omitempty"`
	// Checks to see if you have an authorization policy in place.
	Authorization *GoogleCloudApigeeV1ProfileConfigAuthorization `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Checks to see if you have CORS policy in place.
	Cors *GoogleCloudApigeeV1ProfileConfigCORS `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// Checks to see if you have a mediation policy in place.
	Mediation *GoogleCloudApigeeV1ProfileConfigMediation `protobuf:"bytes,4,opt,name=mediation,proto3" json:"mediation,omitempty"`
	// Checks to see if you have configured mTLS for the target server.
	Mtls *GoogleCloudApigeeV1ProfileConfigMTLS `protobuf:"bytes,5,opt,name=mtls,proto3" json:"mtls,omitempty"`
	// Checks to see if you have a threat protection policy in place.
	Threat *GoogleCloudApigeeV1ProfileConfigThreat `protobuf:"bytes,6,opt,name=threat,proto3" json:"threat,omitempty"`
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigCategory) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigCategory.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigCategory) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{190}
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetAbuse() *GoogleCloudApigeeV1ProfileConfigAbuse {
	if x != nil {
		return x.Abuse
	}
	return nil
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetAuthorization() *GoogleCloudApigeeV1ProfileConfigAuthorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetCors() *GoogleCloudApigeeV1ProfileConfigCORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetMediation() *GoogleCloudApigeeV1ProfileConfigMediation {
	if x != nil {
		return x.Mediation
	}
	return nil
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetMtls() *GoogleCloudApigeeV1ProfileConfigMTLS {
	if x != nil {
		return x.Mtls
	}
	return nil
}

func (x *GoogleCloudApigeeV1ProfileConfigCategory) GetThreat() *GoogleCloudApigeeV1ProfileConfigThreat {
	if x != nil {
		return x.Threat
	}
	return nil
}

// Checks to see if you have configured mTLS for the target server.
type GoogleCloudApigeeV1ProfileConfigMTLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigMTLS) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigMTLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigMTLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigMTLS) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigMTLS) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigMTLS.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigMTLS) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{191}
}

// By default, following policies will be included: - OASValidation - SOAPMessageValidation
type GoogleCloudApigeeV1ProfileConfigMediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigMediation) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigMediation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigMediation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigMediation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigMediation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigMediation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigMediation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{192}
}

// By default, following policies will be included: - XMLThreatProtection - JSONThreatProtection
type GoogleCloudApigeeV1ProfileConfigThreat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ProfileConfigThreat) Reset() {
	*x = GoogleCloudApigeeV1ProfileConfigThreat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProfileConfigThreat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProfileConfigThreat) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProfileConfigThreat) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProfileConfigThreat.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProfileConfigThreat) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{193}
}

// Message for compatibility with legacy Edge specification for Java Properties object in JSON.
type GoogleCloudApigeeV1Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all properties in the object
	Property []*GoogleCloudApigeeV1Property `protobuf:"bytes,1,rep,name=property,proto3" json:"property,omitempty"`
}

func (x *GoogleCloudApigeeV1Properties) Reset() {
	*x = GoogleCloudApigeeV1Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Properties) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Properties) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Properties.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Properties) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{194}
}

func (x *GoogleCloudApigeeV1Properties) GetProperty() []*GoogleCloudApigeeV1Property {
	if x != nil {
		return x.Property
	}
	return nil
}

// A single property entry in the Properties message.
type GoogleCloudApigeeV1Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The property key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The property value
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1Property) Reset() {
	*x = GoogleCloudApigeeV1Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Property) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Property) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Property.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Property) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{195}
}

func (x *GoogleCloudApigeeV1Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Request for ProvisionOrganization.
type GoogleCloudApigeeV1ProvisionOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary Cloud Platform region for analytics data storage. For valid values, see [Create an organization](https://cloud.google.com/apigee/docs/hybrid/latest/precog-provision). Defaults to `us-west1`.
	AnalyticsRegion string `protobuf:"bytes,1,opt,name=analytics_region,json=analyticsRegion,proto3" json:"analytics_region,omitempty"`
	// Compute Engine network used for Service Networking to be peered with Apigee runtime instances. See [Getting started with the Service Networking API](https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started). Apigee also supports shared VPC (that is, the host network project is not the same as the one that is peering with Apigee). See [Shared VPC overview](https://cloud.google.com/vpc/docs/shared-vpc). To use a shared VPC network, use the following format: `projects/{host-project-id}/{region}/networks/{network-name}`. For example: `projects/my-sharedvpc-host/global/networks/mynetwork`
	AuthorizedNetwork string `protobuf:"bytes,2,opt,name=authorized_network,json=authorizedNetwork,proto3" json:"authorized_network,omitempty"`
	// Optional. Flag that specifies whether the VPC Peering through Private Google Access should be disabled between the consumer network and Apigee. Required if an authorizedNetwork on the consumer project is not provided, in which case the flag should be set to true. The value must be set before the creation of any Apigee runtime instance and can be updated only when there are no runtime instances. **Note:** Apigee will be deprecating the vpc peering model that requires you to provide 'authorizedNetwork', by making the non-peering model as the default way of provisioning Apigee organization in future. So, this will be a temporary flag to enable the transition. Not supported for Apigee hybrid.
	DisableVpcPeering bool `protobuf:"varint,3,opt,name=disable_vpc_peering,json=disableVpcPeering,proto3" json:"disable_vpc_peering,omitempty"`
	// Cloud Platform location for the runtime instance. Defaults to zone `us-west1-a`. If a region is provided, `EVAL` organizations will use the region for automatically selecting a zone for the runtime instance.
	RuntimeLocation string `protobuf:"bytes,4,opt,name=runtime_location,json=runtimeLocation,proto3" json:"runtime_location,omitempty"`
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) Reset() {
	*x = GoogleCloudApigeeV1ProvisionOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ProvisionOrganizationRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ProvisionOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ProvisionOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{196}
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) GetAnalyticsRegion() string {
	if x != nil {
		return x.AnalyticsRegion
	}
	return ""
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) GetAuthorizedNetwork() string {
	if x != nil {
		return x.AuthorizedNetwork
	}
	return ""
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) GetDisableVpcPeering() bool {
	if x != nil {
		return x.DisableVpcPeering
	}
	return false
}

func (x *GoogleCloudApigeeV1ProvisionOrganizationRequest) GetRuntimeLocation() string {
	if x != nil {
		return x.RuntimeLocation
	}
	return ""
}

type GoogleCloudApigeeV1Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
	CsvDelimiter string `protobuf:"bytes,1,opt,name=csv_delimiter,json=csvDelimiter,proto3" json:"csv_delimiter,omitempty"`
	// A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
	Dimensions []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostAsyncQuery where analytics data will be grouped by organization and hostname.
	EnvgroupHostname string `protobuf:"bytes,3,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	// Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
	GroupByTimeUnit string `protobuf:"bytes,5,opt,name=group_by_time_unit,json=groupByTimeUnit,proto3" json:"group_by_time_unit,omitempty"`
	// Maximum number of rows that can be returned in the result.
	Limit int32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	// A list of Metrics.
	Metrics []*GoogleCloudApigeeV1QueryMetric `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Asynchronous Query Name.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
	OutputFormat string `protobuf:"bytes,9,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
	// Asynchronous Report ID.
	ReportDefinitionId string `protobuf:"bytes,10,opt,name=report_definition_id,json=reportDefinitionId,proto3" json:"report_definition_id,omitempty"`
	// Required. Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: "timeRange": { "start": "2018-07-29T00:13:00Z", "end": "2018-08-01T00:18:00Z" }
	TimeRange *any1.Any `protobuf:"bytes,11,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GoogleCloudApigeeV1Query) Reset() {
	*x = GoogleCloudApigeeV1Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Query) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Query) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Query.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Query) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{197}
}

func (x *GoogleCloudApigeeV1Query) GetCsvDelimiter() string {
	if x != nil {
		return x.CsvDelimiter
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1Query) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetGroupByTimeUnit() string {
	if x != nil {
		return x.GroupByTimeUnit
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GoogleCloudApigeeV1Query) GetMetrics() []*GoogleCloudApigeeV1QueryMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1Query) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetReportDefinitionId() string {
	if x != nil {
		return x.ReportDefinitionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1Query) GetTimeRange() *any1.Any {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type GoogleCloudApigeeV1QueryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensions of the AsyncQuery.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// End timestamp of the query range.
	EndTimestamp string `protobuf:"bytes,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Metrics of the AsyncQuery. Example: ["name:message_count,func:sum,alias:sum_message_count"]
	Metrics []string `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Output format.
	OutputFormat string `protobuf:"bytes,4,opt,name=output_format,json=outputFormat,proto3" json:"output_format,omitempty"`
	// Start timestamp of the query range.
	StartTimestamp string `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Query GroupBy time unit.
	TimeUnit string `protobuf:"bytes,6,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryMetadata) Reset() {
	*x = GoogleCloudApigeeV1QueryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryMetadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryMetadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{198}
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetOutputFormat() string {
	if x != nil {
		return x.OutputFormat
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetadata) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

// More info about Metric: https://docs.apigee.com/api-platform/analytics/analytics-reference#metrics
type GoogleCloudApigeeV1QueryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias for the metric. Alias will be used to replace metric name in query results.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Aggregation function: avg, min, max, or sum.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Required. Metric name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// One of `+`, `-`, `/`, `%`, `*`.
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	// Operand value should be provided when operator is set.
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryMetric) Reset() {
	*x = GoogleCloudApigeeV1QueryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryMetric) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryMetric.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryMetric) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{199}
}

func (x *GoogleCloudApigeeV1QueryMetric) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetric) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetric) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryMetric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Request payload representing the query to be run for fetching security statistics as rows.
type GoogleCloudApigeeV1QueryTabularStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. List of dimension names to group the aggregations by.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Filter further on specific dimension values. Follows the same grammar as custom report's filter expressions. Example, apiproxy eq 'foobar'. https://cloud.google.com/apigee/docs/api-platform/analytics/analytics-reference#filters
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Required. List of metrics and their aggregations.
	Metrics []*GoogleCloudApigeeV1MetricAggregation `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Page size represents the number of rows.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Identifies a sequence of rows.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Time range for the stats.
	TimeRange *GoogleTypeInterval `protobuf:"bytes,6,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) Reset() {
	*x = GoogleCloudApigeeV1QueryTabularStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTabularStatsRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTabularStatsRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTabularStatsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{200}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetMetrics() []*GoogleCloudApigeeV1MetricAggregation {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTabularStatsRequest) GetTimeRange() *GoogleTypeInterval {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type GoogleCloudApigeeV1QueryTabularStatsResponseValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*any1.Any `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponseValues) Reset() {
	*x = GoogleCloudApigeeV1QueryTabularStatsResponseValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponseValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTabularStatsResponseValues) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponseValues) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTabularStatsResponseValues.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTabularStatsResponseValues) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{201}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponseValues) GetItems() []*any1.Any {
	if x != nil {
		return x.Items
	}
	return nil
}

// Encapsulates two kinds of stats that are results of the dimensions and aggregations requested. - Tabular rows. - Time series data. Example of tabular rows, Represents security stats results as a row of flat values.
type GoogleCloudApigeeV1QueryTabularStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column names corresponding to the same order as the inner values in the stats field.
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Resultant rows from the executed query.
	Values []*GoogleCloudApigeeV1QueryTabularStatsResponseValues `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) Reset() {
	*x = GoogleCloudApigeeV1QueryTabularStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTabularStatsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTabularStatsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTabularStatsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{202}
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTabularStatsResponse) GetValues() []*GoogleCloudApigeeV1QueryTabularStatsResponseValues {
	if x != nil {
		return x.Values
	}
	return nil
}

// QueryTimeSeriesStatsRequest represents a query that returns a collection of time series sequences grouped by their values.
type GoogleCloudApigeeV1QueryTimeSeriesStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of dimension names to group the aggregations by. If no dimensions are passed, a single trend line representing the requested metric aggregations grouped by environment is returned.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Filter further on specific dimension values. Follows the same grammar as custom report's filter expressions. Example, apiproxy eq 'foobar'. https://cloud.google.com/apigee/docs/api-platform/analytics/analytics-reference#filters
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// Required. List of metrics and their aggregations.
	Metrics []*GoogleCloudApigeeV1MetricAggregation `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Page size represents the number of time series sequences, one per unique set of dimensions and their values.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token stands for a specific collection of time series sequences.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Required. Time range for the stats.
	TimeRange *GoogleTypeInterval `protobuf:"bytes,6,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Order the sequences in increasing or decreasing order of timestamps. Default is descending order of timestamps (latest first).
	TimestampOrder string `protobuf:"bytes,7,opt,name=timestamp_order,json=timestampOrder,proto3" json:"timestamp_order,omitempty"`
	// Time buckets to group the stats by.
	WindowSize string `protobuf:"bytes,8,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) Reset() {
	*x = GoogleCloudApigeeV1QueryTimeSeriesStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTimeSeriesStatsRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{203}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetMetrics() []*GoogleCloudApigeeV1MetricAggregation {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetTimeRange() *GoogleTypeInterval {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetTimestampOrder() string {
	if x != nil {
		return x.TimestampOrder
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest) GetWindowSize() string {
	if x != nil {
		return x.WindowSize
	}
	return ""
}

// Represents security stats result as a collection of time series sequences.
type GoogleCloudApigeeV1QueryTimeSeriesStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Column names corresponding to the same order as the inner values in the stats field.
	Columns []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Results of the query returned as a JSON array.
	Values []*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) Reset() {
	*x = GoogleCloudApigeeV1QueryTimeSeriesStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTimeSeriesStatsResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{204}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponse) GetValues() []*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence {
	if x != nil {
		return x.Values
	}
	return nil
}

type GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*any1.Any `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) Reset() {
	*x = GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{205}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints) GetItems() []*any1.Any {
	if x != nil {
		return x.Items
	}
	return nil
}

// A sequence of time series.
type GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of dimensions and their values that uniquely identifies a time series sequence.
	Dimensions map[string]string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of points. First value of each inner list is a timestamp.
	Points []*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) Reset() {
	*x = GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) ProtoMessage() {}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{206}
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) GetDimensions() map[string]string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence) GetPoints() []*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints {
	if x != nil {
		return x.Points
	}
	return nil
}

// Quota contains the essential parameters needed that can be applied on the resources, methods, API source combination associated with this API product. While Quota is optional, setting it prevents requests from exceeding the provisioned parameters.
type GoogleCloudApigeeV1Quota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Time interval over which the number of request messages is calculated.
	Interval string `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// Required. Upper limit allowed for the time interval and time unit specified. Requests exceeding this limit will be rejected.
	Limit string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Time unit defined for the `interval`. Valid values include `minute`, `hour`, `day`, or `month`. If `limit` and `interval` are valid, the default value is `hour`; otherwise, the default is null.
	TimeUnit string `protobuf:"bytes,3,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
}

func (x *GoogleCloudApigeeV1Quota) Reset() {
	*x = GoogleCloudApigeeV1Quota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Quota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Quota) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Quota) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Quota.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Quota) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{207}
}

func (x *GoogleCloudApigeeV1Quota) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *GoogleCloudApigeeV1Quota) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GoogleCloudApigeeV1Quota) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

// Rate plan details.
type GoogleCloudApigeeV1RatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the API product that the rate plan is associated with.
	Apiproduct string `protobuf:"bytes,1,opt,name=apiproduct,proto3" json:"apiproduct,omitempty"`
	// Frequency at which the customer will be billed.
	BillingPeriod string `protobuf:"bytes,2,opt,name=billing_period,json=billingPeriod,proto3" json:"billing_period,omitempty"`
	// API call volume ranges and the fees charged when the total number of API calls is within a given range. The method used to calculate the final fee depends on the selected pricing model. For example, if the pricing model is `STAIRSTEP` and the ranges are defined as follows: ``` { "start": 1, "end": 100, "fee": 75 }, { "start": 101, "end": 200, "fee": 100 }, } ``` Then the following fees would be charged based on the total number of API calls (assuming the currency selected is `USD`): * 1 call costs $75 * 50 calls cost $75 * 150 calls cost $100 The number of API calls cannot exceed 200.
	ConsumptionPricingRates []*GoogleCloudApigeeV1RateRange `protobuf:"bytes,3,rep,name=consumption_pricing_rates,json=consumptionPricingRates,proto3" json:"consumption_pricing_rates,omitempty"`
	// Pricing model used for consumption-based charges.
	ConsumptionPricingType string `protobuf:"bytes,4,opt,name=consumption_pricing_type,json=consumptionPricingType,proto3" json:"consumption_pricing_type,omitempty"`
	// Output only. Time that the rate plan was created in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Currency to be used for billing. Consists of a three-letter code as defined by the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) standard.
	CurrencyCode string `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Description of the rate plan.
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Display name of the rate plan.
	DisplayName string `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Time when the rate plan will expire in milliseconds since epoch. Set to 0 or `null` to indicate that the rate plan should never expire.
	EndTime int64 `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Frequency at which the fixed fee is charged.
	FixedFeeFrequency int32 `protobuf:"varint,10,opt,name=fixed_fee_frequency,json=fixedFeeFrequency,proto3" json:"fixed_fee_frequency,omitempty"`
	// Fixed amount that is charged at a defined interval and billed in advance of use of the API product. The fee will be prorated for the first billing period.
	FixedRecurringFee *GoogleTypeMoney `protobuf:"bytes,11,opt,name=fixed_recurring_fee,json=fixedRecurringFee,proto3" json:"fixed_recurring_fee,omitempty"`
	// Output only. Time the rate plan was last modified in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,12,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// Output only. Name of the rate plan.
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// DEPRECATED: This field is no longer supported and will eventually be removed when Apigee Hybrid 1.5/1.6 is no longer supported. Instead, use the `billingType` field inside `DeveloperMonetizationConfig` resource. Flag that specifies the billing account type, prepaid or postpaid.
	PaymentFundingModel string `protobuf:"bytes,14,opt,name=payment_funding_model,json=paymentFundingModel,proto3" json:"payment_funding_model,omitempty"`
	// Details of the revenue sharing model.
	RevenueShareRates []*GoogleCloudApigeeV1RevenueShareRange `protobuf:"bytes,15,rep,name=revenue_share_rates,json=revenueShareRates,proto3" json:"revenue_share_rates,omitempty"`
	// Method used to calculate the revenue that is shared with developers.
	RevenueShareType string `protobuf:"bytes,16,opt,name=revenue_share_type,json=revenueShareType,proto3" json:"revenue_share_type,omitempty"`
	// Initial, one-time fee paid when purchasing the API product.
	SetupFee *GoogleTypeMoney `protobuf:"bytes,17,opt,name=setup_fee,json=setupFee,proto3" json:"setup_fee,omitempty"`
	// Time when the rate plan becomes active in milliseconds since epoch.
	StartTime int64 `protobuf:"varint,18,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Current state of the rate plan (draft or published).
	State string `protobuf:"bytes,19,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1RatePlan) Reset() {
	*x = GoogleCloudApigeeV1RatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RatePlan) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RatePlan) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RatePlan.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RatePlan) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{208}
}

func (x *GoogleCloudApigeeV1RatePlan) GetApiproduct() string {
	if x != nil {
		return x.Apiproduct
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetBillingPeriod() string {
	if x != nil {
		return x.BillingPeriod
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetConsumptionPricingRates() []*GoogleCloudApigeeV1RateRange {
	if x != nil {
		return x.ConsumptionPricingRates
	}
	return nil
}

func (x *GoogleCloudApigeeV1RatePlan) GetConsumptionPricingType() string {
	if x != nil {
		return x.ConsumptionPricingType
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1RatePlan) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1RatePlan) GetFixedFeeFrequency() int32 {
	if x != nil {
		return x.FixedFeeFrequency
	}
	return 0
}

func (x *GoogleCloudApigeeV1RatePlan) GetFixedRecurringFee() *GoogleTypeMoney {
	if x != nil {
		return x.FixedRecurringFee
	}
	return nil
}

func (x *GoogleCloudApigeeV1RatePlan) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1RatePlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetPaymentFundingModel() string {
	if x != nil {
		return x.PaymentFundingModel
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetRevenueShareRates() []*GoogleCloudApigeeV1RevenueShareRange {
	if x != nil {
		return x.RevenueShareRates
	}
	return nil
}

func (x *GoogleCloudApigeeV1RatePlan) GetRevenueShareType() string {
	if x != nil {
		return x.RevenueShareType
	}
	return ""
}

func (x *GoogleCloudApigeeV1RatePlan) GetSetupFee() *GoogleTypeMoney {
	if x != nil {
		return x.SetupFee
	}
	return nil
}

func (x *GoogleCloudApigeeV1RatePlan) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GoogleCloudApigeeV1RatePlan) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// API call volume range and the fees charged when the total number of API calls is within the range.
type GoogleCloudApigeeV1RateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ending value of the range. Set to 0 or `null` for the last range of values.
	End int64 `protobuf:"varint,1,opt,name=end,proto3" json:"end,omitempty"`
	// Fee to charge when total number of API calls falls within this range.
	Fee *GoogleTypeMoney `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Starting value of the range. Set to 0 or `null` for the initial range of values.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *GoogleCloudApigeeV1RateRange) Reset() {
	*x = GoogleCloudApigeeV1RateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RateRange) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RateRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RateRange.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RateRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{209}
}

func (x *GoogleCloudApigeeV1RateRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *GoogleCloudApigeeV1RateRange) GetFee() *GoogleTypeMoney {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *GoogleCloudApigeeV1RateRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

// A Reference configuration. References must refer to a keystore that also exists in the parent environment.
type GoogleCloudApigeeV1Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A human-readable description of this reference.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The resource id of this reference. Values must match the regular expression [\w\s\-.]+.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The id of the resource to which this reference refers. Must be the id of a resource that exists in the parent environment and is of the given resource_type.
	Refers string `protobuf:"bytes,3,opt,name=refers,proto3" json:"refers,omitempty"`
	// The type of resource referred to by this reference. Valid values are 'KeyStore' or 'TrustStore'.
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *GoogleCloudApigeeV1Reference) Reset() {
	*x = GoogleCloudApigeeV1Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Reference) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Reference) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Reference.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Reference) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{210}
}

func (x *GoogleCloudApigeeV1Reference) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1Reference) GetRefers() string {
	if x != nil {
		return x.Refers
	}
	return ""
}

func (x *GoogleCloudApigeeV1Reference) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type GoogleCloudApigeeV1ReferenceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the reference in the following format: `organizations/{org}/environments/{env}/references/{reference}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the referenced resource in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}` Only references to keystore resources are supported.
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *GoogleCloudApigeeV1ReferenceConfig) Reset() {
	*x = GoogleCloudApigeeV1ReferenceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ReferenceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ReferenceConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ReferenceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ReferenceConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ReferenceConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{211}
}

func (x *GoogleCloudApigeeV1ReferenceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ReferenceConfig) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

// Request for ReportInstanceStatus.
type GoogleCloudApigeeV1ReportInstanceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for the instance which is guaranteed to be unique in case the user installs multiple hybrid runtimes with the same instance ID.
	InstanceUid string `protobuf:"bytes,1,opt,name=instance_uid,json=instanceUid,proto3" json:"instance_uid,omitempty"`
	// The time the report was generated in the runtime. Used to prevent an old status from overwriting a newer one. An instance should space out it's status reports so that clock skew does not play a factor.
	ReportTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	// Status for config resources
	Resources []*GoogleCloudApigeeV1ResourceStatus `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) Reset() {
	*x = GoogleCloudApigeeV1ReportInstanceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ReportInstanceStatusRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ReportInstanceStatusRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ReportInstanceStatusRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{212}
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) GetInstanceUid() string {
	if x != nil {
		return x.InstanceUid
	}
	return ""
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) GetReportTime() *timestamp.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusRequest) GetResources() []*GoogleCloudApigeeV1ResourceStatus {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Placeholder for future enhancements to status reporting protocol
type GoogleCloudApigeeV1ReportInstanceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusResponse) Reset() {
	*x = GoogleCloudApigeeV1ReportInstanceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ReportInstanceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ReportInstanceStatusResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ReportInstanceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ReportInstanceStatusResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ReportInstanceStatusResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{213}
}

type GoogleCloudApigeeV1ReportProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the property
	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	// property values
	Value []*GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1ReportProperty) Reset() {
	*x = GoogleCloudApigeeV1ReportProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ReportProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ReportProperty) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ReportProperty) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ReportProperty.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ReportProperty) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{214}
}

func (x *GoogleCloudApigeeV1ReportProperty) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *GoogleCloudApigeeV1ReportProperty) GetValue() []*GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.Value
	}
	return nil
}

type GoogleCloudApigeeV1ResourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the resource as a URI.
	Location string `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	// Resource name in the following format: `organizations/{org}/environments/{env}/resourcefiles/{type}/{file}/revisions/{rev}` Only environment-scoped resource files are supported.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1ResourceConfig) Reset() {
	*x = GoogleCloudApigeeV1ResourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ResourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ResourceConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ResourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ResourceConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ResourceConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{215}
}

func (x *GoogleCloudApigeeV1ResourceConfig) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleCloudApigeeV1ResourceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Metadata about a resource file.
type GoogleCloudApigeeV1ResourceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the resource file.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource file type. {{ resource_file_type }}
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1ResourceFile) Reset() {
	*x = GoogleCloudApigeeV1ResourceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ResourceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ResourceFile) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ResourceFile) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ResourceFile.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ResourceFile) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{216}
}

func (x *GoogleCloudApigeeV1ResourceFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1ResourceFile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// List of resource files.
type GoogleCloudApigeeV1ResourceFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of resource files.
	ResourceFile []*GoogleCloudApigeeV1ResourceFile `protobuf:"bytes,1,rep,name=resource_file,json=resourceFile,proto3" json:"resource_file,omitempty"`
}

func (x *GoogleCloudApigeeV1ResourceFiles) Reset() {
	*x = GoogleCloudApigeeV1ResourceFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ResourceFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ResourceFiles) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ResourceFiles) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ResourceFiles.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ResourceFiles) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{217}
}

func (x *GoogleCloudApigeeV1ResourceFiles) GetResourceFile() []*GoogleCloudApigeeV1ResourceFile {
	if x != nil {
		return x.ResourceFile
	}
	return nil
}

// The status of a resource loaded in the runtime.
type GoogleCloudApigeeV1ResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name. Currently only two resources are supported: EnvironmentGroup - organizations/{org}/envgroups/{envgroup} EnvironmentConfig - organizations/{org}/environments/{environment}/deployedConfig
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Revisions of the resource currently deployed in the instance.
	Revisions []*GoogleCloudApigeeV1RevisionStatus `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty"`
	// The total number of replicas that should have this resource.
	TotalReplicas int32 `protobuf:"varint,3,opt,name=total_replicas,json=totalReplicas,proto3" json:"total_replicas,omitempty"`
	// The uid of the resource. In the unexpected case that the instance has multiple uids for the same name, they should be reported under separate ResourceStatuses.
	Uid string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1ResourceStatus) Reset() {
	*x = GoogleCloudApigeeV1ResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ResourceStatus) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ResourceStatus.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ResourceStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{218}
}

func (x *GoogleCloudApigeeV1ResourceStatus) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *GoogleCloudApigeeV1ResourceStatus) GetRevisions() []*GoogleCloudApigeeV1RevisionStatus {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *GoogleCloudApigeeV1ResourceStatus) GetTotalReplicas() int32 {
	if x != nil {
		return x.TotalReplicas
	}
	return 0
}

func (x *GoogleCloudApigeeV1ResourceStatus) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Result is short for "action result", could be different types identified by "action_result" field. Supported types: 1. DebugInfo : generic debug info collected by runtime recorded as a list of properties. For example, the contents could be virtual host info, state change result, or execution metadata. Required fields : properties, timestamp 2. RequestMessage: information of a http request. Contains headers, request URI and http methods type.Required fields : headers, uri, verb 3. ResponseMessage: information of a http response. Contains headers, reason phrase and http status code. Required fields : headers, reasonPhrase, statusCode 4. ErrorMessage: information of a http error message. Contains detail error message, reason phrase and status code. Required fields : content, headers, reasonPhrase, statusCode 5. VariableAccess: a list of variable access actions, can be Get, Set and Remove. Required fields : accessList
type GoogleCloudApigeeV1Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the action result. Can be one of the five: DebugInfo, RequestMessage, ResponseMessage, ErrorMessage, VariableAccess
	ActionResult string `protobuf:"bytes,1,opt,name=action_result,json=ActionResult,proto3" json:"action_result,omitempty"`
	// A list of variable access actions agaist the api proxy. Supported values: Get, Set, Remove.
	AccessList []*GoogleCloudApigeeV1Access `protobuf:"bytes,2,rep,name=access_list,json=accessList,proto3" json:"access_list,omitempty"`
	// Error message content. for example, "content" : "{\"fault\":{\"faultstring\":\"API timed out\",\"detail\":{\"errorcode\":\"flow.APITimedOut\"}}}"
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// A list of HTTP headers. for example, '"headers" : [ { "name" : "Content-Length", "value" : "83" }, { "name" : "Content-Type", "value" : "application/json" } ]'
	Headers []*GoogleCloudApigeeV1Property `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	// Name value pairs used for DebugInfo ActionResult.
	Properties *GoogleCloudApigeeV1Properties `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	// HTTP response phrase
	ReasonPhrase string `protobuf:"bytes,6,opt,name=reason_phrase,json=reasonPhrase,proto3" json:"reason_phrase,omitempty"`
	// HTTP response code
	StatusCode string `protobuf:"bytes,7,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// Timestamp of when the result is recorded. Its format is dd-mm-yy hh:mm:ss:xxx. For example, `"timestamp" : "12-08-19 00:31:59:960"`
	Timestamp string `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The relative path of the api proxy. for example, `"uRI" : "/iloveapis"`
	URI string `protobuf:"bytes,9,opt,name=u_r_i,json=uRI,proto3" json:"u_r_i,omitempty"`
	// HTTP method verb
	Verb string `protobuf:"bytes,10,opt,name=verb,proto3" json:"verb,omitempty"`
}

func (x *GoogleCloudApigeeV1Result) Reset() {
	*x = GoogleCloudApigeeV1Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Result) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Result) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Result.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Result) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{219}
}

func (x *GoogleCloudApigeeV1Result) GetActionResult() string {
	if x != nil {
		return x.ActionResult
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetAccessList() []*GoogleCloudApigeeV1Access {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *GoogleCloudApigeeV1Result) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetHeaders() []*GoogleCloudApigeeV1Property {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *GoogleCloudApigeeV1Result) GetProperties() *GoogleCloudApigeeV1Properties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *GoogleCloudApigeeV1Result) GetReasonPhrase() string {
	if x != nil {
		return x.ReasonPhrase
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *GoogleCloudApigeeV1Result) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

// API call volume range and the percentage of revenue to share with the developer when the total number of API calls is within the range.
type GoogleCloudApigeeV1RevenueShareRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ending value of the range. Set to 0 or `null` for the last range of values.
	End int64 `protobuf:"varint,1,opt,name=end,proto3" json:"end,omitempty"`
	// Percentage of the revenue to be shared with the developer. For example, to share 21 percent of the total revenue with the developer, set this value to 21. Specify a decimal number with a maximum of two digits following the decimal point.
	SharePercentage float64 `protobuf:"fixed64,2,opt,name=share_percentage,json=sharePercentage,proto3" json:"share_percentage,omitempty"`
	// Starting value of the range. Set to 0 or `null` for the initial range of values.
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *GoogleCloudApigeeV1RevenueShareRange) Reset() {
	*x = GoogleCloudApigeeV1RevenueShareRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RevenueShareRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RevenueShareRange) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RevenueShareRange) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RevenueShareRange.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RevenueShareRange) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{220}
}

func (x *GoogleCloudApigeeV1RevenueShareRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *GoogleCloudApigeeV1RevenueShareRange) GetSharePercentage() float64 {
	if x != nil {
		return x.SharePercentage
	}
	return 0
}

func (x *GoogleCloudApigeeV1RevenueShareRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

// The status of a specific resource revision.
type GoogleCloudApigeeV1RevisionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Errors reported when attempting to load this revision.
	Errors []*GoogleCloudApigeeV1UpdateError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	// The json content of the resource revision. Large specs should be sent individually via the spec field to avoid hitting request size limits.
	JsonSpec string `protobuf:"bytes,2,opt,name=json_spec,json=jsonSpec,proto3" json:"json_spec,omitempty"`
	// The number of replicas that have successfully loaded this revision.
	Replicas int32 `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The revision of the resource.
	RevisionId string `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
}

func (x *GoogleCloudApigeeV1RevisionStatus) Reset() {
	*x = GoogleCloudApigeeV1RevisionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RevisionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RevisionStatus) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RevisionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RevisionStatus.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RevisionStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{221}
}

func (x *GoogleCloudApigeeV1RevisionStatus) GetErrors() []*GoogleCloudApigeeV1UpdateError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *GoogleCloudApigeeV1RevisionStatus) GetJsonSpec() string {
	if x != nil {
		return x.JsonSpec
	}
	return ""
}

func (x *GoogleCloudApigeeV1RevisionStatus) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *GoogleCloudApigeeV1RevisionStatus) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

type GoogleCloudApigeeV1RoutingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI path prefix used to route to the specified environment. May contain one or more wildcards. For example, path segments consisting of a single `*` character will match any string.
	Basepath string `protobuf:"bytes,1,opt,name=basepath,proto3" json:"basepath,omitempty"`
	// Name of a deployment group in an environment bound to the environment group in the following format: `organizations/{org}/environment/{env}/deploymentGroups/{group}` Only one of environment or deployment_group will be set.
	DeploymentGroup string `protobuf:"bytes,2,opt,name=deployment_group,json=deploymentGroup,proto3" json:"deployment_group,omitempty"`
	// The env group config revision_id when this rule was added or last updated. This value is set when the rule is created and will only update if the the environment_id changes. It is used to determine if the runtime is up to date with respect to this rule. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.
	EnvGroupRevision int64 `protobuf:"varint,3,opt,name=env_group_revision,json=envGroupRevision,proto3" json:"env_group_revision,omitempty"`
	// Name of an environment bound to the environment group in the following format: `organizations/{org}/environments/{env}`. Only one of environment or deployment_group will be set.
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	// Conflicting targets, which will be resource names specifying either deployment groups or environments.
	OtherTargets []string `protobuf:"bytes,5,rep,name=other_targets,json=otherTargets,proto3" json:"other_targets,omitempty"`
	// The resource name of the proxy revision that is receiving this basepath in the following format: `organizations/{org}/apis/{api}/revisions/{rev}`. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.
	Receiver string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The unix timestamp when this rule was updated. This is updated whenever env_group_revision is updated. This field is omitted from the IngressConfig unless the GetDeployedIngressConfig API is called with view=FULL.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1RoutingRule) Reset() {
	*x = GoogleCloudApigeeV1RoutingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RoutingRule) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RoutingRule.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RoutingRule) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{222}
}

func (x *GoogleCloudApigeeV1RoutingRule) GetBasepath() string {
	if x != nil {
		return x.Basepath
	}
	return ""
}

func (x *GoogleCloudApigeeV1RoutingRule) GetDeploymentGroup() string {
	if x != nil {
		return x.DeploymentGroup
	}
	return ""
}

func (x *GoogleCloudApigeeV1RoutingRule) GetEnvGroupRevision() int64 {
	if x != nil {
		return x.EnvGroupRevision
	}
	return 0
}

func (x *GoogleCloudApigeeV1RoutingRule) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *GoogleCloudApigeeV1RoutingRule) GetOtherTargets() []string {
	if x != nil {
		return x.OtherTargets
	}
	return nil
}

func (x *GoogleCloudApigeeV1RoutingRule) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *GoogleCloudApigeeV1RoutingRule) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// RuntimeAddonsConfig defines the runtime configurations for add-ons in an environment.
type GoogleCloudApigeeV1RuntimeAddonsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Runtime configuration for Analytics add-on.
	AnalyticsConfig *GoogleCloudApigeeV1RuntimeAnalyticsConfig `protobuf:"bytes,1,opt,name=analytics_config,json=analyticsConfig,proto3" json:"analytics_config,omitempty"`
	// Runtime configuration for API Security add-on.
	ApiSecurityConfig *GoogleCloudApigeeV1RuntimeApiSecurityConfig `protobuf:"bytes,2,opt,name=api_security_config,json=apiSecurityConfig,proto3" json:"api_security_config,omitempty"`
	// Name of the addons config in the format: `organizations/{org}/environments/{env}/addonsConfig`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Revision number used by the runtime to detect config changes.
	RevisionId string `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// UID is to detect if config is recreated after deletion. The add-on config will only be deleted when the environment itself gets deleted, thus it will always be the same as the UID of EnvironmentConfig.
	Uid string `protobuf:"bytes,5,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeAddonsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeAddonsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeAddonsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeAddonsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{223}
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) GetAnalyticsConfig() *GoogleCloudApigeeV1RuntimeAnalyticsConfig {
	if x != nil {
		return x.AnalyticsConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) GetApiSecurityConfig() *GoogleCloudApigeeV1RuntimeApiSecurityConfig {
	if x != nil {
		return x.ApiSecurityConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeAddonsConfig) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// Runtime configuration for the Analytics add-on.
type GoogleCloudApigeeV1RuntimeAnalyticsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If Runtime should send billing data to AX or not.
	BillingPipelineEnabled bool `protobuf:"varint,1,opt,name=billing_pipeline_enabled,json=billingPipelineEnabled,proto3" json:"billing_pipeline_enabled,omitempty"`
	// If the Analytics is enabled or not.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeAnalyticsConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeAnalyticsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeAnalyticsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeAnalyticsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeAnalyticsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeAnalyticsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeAnalyticsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{224}
}

func (x *GoogleCloudApigeeV1RuntimeAnalyticsConfig) GetBillingPipelineEnabled() bool {
	if x != nil {
		return x.BillingPipelineEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1RuntimeAnalyticsConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Runtime configuration for the API Security add-on.
type GoogleCloudApigeeV1RuntimeApiSecurityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the API Security is enabled or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeApiSecurityConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeApiSecurityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeApiSecurityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeApiSecurityConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeApiSecurityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeApiSecurityConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeApiSecurityConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{225}
}

func (x *GoogleCloudApigeeV1RuntimeApiSecurityConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Runtime configuration for the organization. Response for GetRuntimeConfig.
type GoogleCloudApigeeV1RuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Storage bucket used for uploading Analytics records.
	AnalyticsBucket string `protobuf:"bytes,1,opt,name=analytics_bucket,json=analyticsBucket,proto3" json:"analytics_bucket,omitempty"`
	// Name of the resource in the following format: `organizations/{org}/runtimeConfig`.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Tenant project ID associated with the Apigee organization. The tenant project is used to host Google-managed resources that are dedicated to this Apigee organization. Clients have limited access to resources within the tenant project used to support Apigee runtime instances. Access to the tenant project is managed using SetSyncAuthorization. It can be empty if the tenant project hasn't been created yet.
	TenantProjectId string `protobuf:"bytes,3,opt,name=tenant_project_id,json=tenantProjectId,proto3" json:"tenant_project_id,omitempty"`
	// Cloud Storage bucket used for uploading Trace records.
	TraceBucket string `protobuf:"bytes,4,opt,name=trace_bucket,json=traceBucket,proto3" json:"trace_bucket,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{226}
}

func (x *GoogleCloudApigeeV1RuntimeConfig) GetAnalyticsBucket() string {
	if x != nil {
		return x.AnalyticsBucket
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeConfig) GetTenantProjectId() string {
	if x != nil {
		return x.TenantProjectId
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeConfig) GetTraceBucket() string {
	if x != nil {
		return x.TraceBucket
	}
	return ""
}

// NEXT ID: 8 RuntimeTraceConfig defines the configurations for distributed trace in an environment.
type GoogleCloudApigeeV1RuntimeTraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endpoint of the exporter.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
	Exporter string `protobuf:"bytes,2,opt,name=exporter,proto3" json:"exporter,omitempty"`
	// Name of the trace config in the following format: `organizations/{org}/environment/{env}/traceConfig`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// List of trace configuration overrides for spicific API proxies.
	Overrides []*GoogleCloudApigeeV1RuntimeTraceConfigOverride `protobuf:"bytes,4,rep,name=overrides,proto3" json:"overrides,omitempty"`
	// The timestamp that the revision was created or updated.
	RevisionCreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Revision number which can be used by the runtime to detect if the trace config has changed between two versions.
	RevisionId string `protobuf:"bytes,6,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Trace configuration for all API proxies in an environment.
	SamplingConfig *GoogleCloudApigeeV1RuntimeTraceSamplingConfig `protobuf:"bytes,7,opt,name=sampling_config,json=samplingConfig,proto3" json:"sampling_config,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeTraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeTraceConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeTraceConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeTraceConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{227}
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetExporter() string {
	if x != nil {
		return x.Exporter
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetOverrides() []*GoogleCloudApigeeV1RuntimeTraceConfigOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetRevisionCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfig) GetSamplingConfig() *GoogleCloudApigeeV1RuntimeTraceSamplingConfig {
	if x != nil {
		return x.SamplingConfig
	}
	return nil
}

// NEXT ID: 7 Trace configuration override for a specific API proxy in an environment.
type GoogleCloudApigeeV1RuntimeTraceConfigOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the API proxy that will have its trace configuration overridden following format: `organizations/{org}/apis/{api}`
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// Name of the trace config override in the following format: `organizations/{org}/environment/{env}/traceConfig/overrides/{override}`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The timestamp that the revision was created or updated.
	RevisionCreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Revision number which can be used by the runtime to detect if the trace config override has changed between two versions.
	RevisionId string `protobuf:"bytes,4,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Trace configuration override for a specific API proxy in an environment.
	SamplingConfig *GoogleCloudApigeeV1RuntimeTraceSamplingConfig `protobuf:"bytes,5,opt,name=sampling_config,json=samplingConfig,proto3" json:"sampling_config,omitempty"`
	// Unique ID for the configuration override. The ID will only change if the override is deleted and recreated. Corresponds to name's "override" field.
	Uid string `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) Reset() {
	*x = GoogleCloudApigeeV1RuntimeTraceConfigOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeTraceConfigOverride) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeTraceConfigOverride.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeTraceConfigOverride) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{228}
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetApiProxy() string {
	if x != nil {
		return x.ApiProxy
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetRevisionCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetSamplingConfig() *GoogleCloudApigeeV1RuntimeTraceSamplingConfig {
	if x != nil {
		return x.SamplingConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1RuntimeTraceConfigOverride) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// NEXT ID: 3 RuntimeTraceSamplingConfig represents the detail settings of distributed tracing. Only the fields that are defined in the distributed trace configuration can be overridden using the distribute trace configuration override APIs.
type GoogleCloudApigeeV1RuntimeTraceSamplingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sampler of distributed tracing. OFF is the default value.
	Sampler string `protobuf:"bytes,1,opt,name=sampler,proto3" json:"sampler,omitempty"`
	// Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.
	SamplingRate float32 `protobuf:"fixed32,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
}

func (x *GoogleCloudApigeeV1RuntimeTraceSamplingConfig) Reset() {
	*x = GoogleCloudApigeeV1RuntimeTraceSamplingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1RuntimeTraceSamplingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1RuntimeTraceSamplingConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1RuntimeTraceSamplingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1RuntimeTraceSamplingConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1RuntimeTraceSamplingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{229}
}

func (x *GoogleCloudApigeeV1RuntimeTraceSamplingConfig) GetSampler() string {
	if x != nil {
		return x.Sampler
	}
	return ""
}

func (x *GoogleCloudApigeeV1RuntimeTraceSamplingConfig) GetSamplingRate() float32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

// Response for Schema call
type GoogleCloudApigeeV1Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of schema fields grouped as dimensions.
	Dimensions []*GoogleCloudApigeeV1SchemaSchemaElement `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Additional metadata associated with schema. This is a legacy field and usually consists of an empty array of strings.
	Meta []string `protobuf:"bytes,2,rep,name=meta,proto3" json:"meta,omitempty"`
	// List of schema fields grouped as dimensions that can be used with an aggregate function such as `sum`, `avg`, `min`, and `max`.
	Metrics []*GoogleCloudApigeeV1SchemaSchemaElement `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *GoogleCloudApigeeV1Schema) Reset() {
	*x = GoogleCloudApigeeV1Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Schema) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Schema) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Schema.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Schema) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{230}
}

func (x *GoogleCloudApigeeV1Schema) GetDimensions() []*GoogleCloudApigeeV1SchemaSchemaElement {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1Schema) GetMeta() []string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GoogleCloudApigeeV1Schema) GetMetrics() []*GoogleCloudApigeeV1SchemaSchemaElement {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Message type for the schema element
type GoogleCloudApigeeV1SchemaSchemaElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Properties for the schema field. For example: { "createTime": "2016-02-26T10:23:09.592Z", "custom": "false", "type": "string" }
	Properties *GoogleCloudApigeeV1SchemaSchemaProperty `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *GoogleCloudApigeeV1SchemaSchemaElement) Reset() {
	*x = GoogleCloudApigeeV1SchemaSchemaElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SchemaSchemaElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SchemaSchemaElement) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SchemaSchemaElement) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SchemaSchemaElement.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SchemaSchemaElement) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{231}
}

func (x *GoogleCloudApigeeV1SchemaSchemaElement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SchemaSchemaElement) GetProperties() *GoogleCloudApigeeV1SchemaSchemaProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Properties for the schema field.
type GoogleCloudApigeeV1SchemaSchemaProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time the field was created in RFC3339 string form. For example: `2016-02-26T10:23:09.592Z`.
	CreateTime string `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Flag that specifies whether the field is standard in the dataset or a custom field created by the customer. `true` indicates that it is a custom field.
	Custom string `protobuf:"bytes,2,opt,name=custom,proto3" json:"custom,omitempty"`
	// Data type of the field.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) Reset() {
	*x = GoogleCloudApigeeV1SchemaSchemaProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SchemaSchemaProperty) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SchemaSchemaProperty.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SchemaSchemaProperty) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{232}
}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

func (x *GoogleCloudApigeeV1SchemaSchemaProperty) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Represents Security Score.
type GoogleCloudApigeeV1Score struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component containing score, recommendations and actions.
	Component *GoogleCloudApigeeV1ScoreComponent `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// List of all the drilldown score components.
	Subcomponents []*GoogleCloudApigeeV1ScoreComponent `protobuf:"bytes,2,rep,name=subcomponents,proto3" json:"subcomponents,omitempty"`
	// Start and end time for the score.
	TimeRange *GoogleTypeInterval `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GoogleCloudApigeeV1Score) Reset() {
	*x = GoogleCloudApigeeV1Score{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Score) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Score) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Score) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Score.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Score) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{233}
}

func (x *GoogleCloudApigeeV1Score) GetComponent() *GoogleCloudApigeeV1ScoreComponent {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *GoogleCloudApigeeV1Score) GetSubcomponents() []*GoogleCloudApigeeV1ScoreComponent {
	if x != nil {
		return x.Subcomponents
	}
	return nil
}

func (x *GoogleCloudApigeeV1Score) GetTimeRange() *GoogleTypeInterval {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

// Component is an individual security element that is scored.
type GoogleCloudApigeeV1ScoreComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when score was calculated.
	CalculateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=calculate_time,json=calculateTime,proto3" json:"calculate_time,omitempty"`
	// Time in the requested time period when data was last captured to compute the score.
	DataCaptureTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=data_capture_time,json=dataCaptureTime,proto3" json:"data_capture_time,omitempty"`
	// List of paths for next components.
	DrilldownPaths []string `protobuf:"bytes,3,rep,name=drilldown_paths,json=drilldownPaths,proto3" json:"drilldown_paths,omitempty"`
	// List of recommendations to improve API security.
	Recommendations []*GoogleCloudApigeeV1ScoreComponentRecommendation `protobuf:"bytes,4,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	// Score for the component.
	Score int32 `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	// Path of the component. Example: /org@myorg/envgroup@myenvgroup/proxies/proxy@myproxy
	ScorePath string `protobuf:"bytes,6,opt,name=score_path,json=scorePath,proto3" json:"score_path,omitempty"`
}

func (x *GoogleCloudApigeeV1ScoreComponent) Reset() {
	*x = GoogleCloudApigeeV1ScoreComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ScoreComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ScoreComponent) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ScoreComponent) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ScoreComponent.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ScoreComponent) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{234}
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetCalculateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CalculateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetDataCaptureTime() *timestamp.Timestamp {
	if x != nil {
		return x.DataCaptureTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetDrilldownPaths() []string {
	if x != nil {
		return x.DrilldownPaths
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetRecommendations() []*GoogleCloudApigeeV1ScoreComponentRecommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GoogleCloudApigeeV1ScoreComponent) GetScorePath() string {
	if x != nil {
		return x.ScorePath
	}
	return ""
}

// Recommendation based on security concerns and score.
type GoogleCloudApigeeV1ScoreComponentRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actions for the recommendation to improve the security score.
	Actions []*GoogleCloudApigeeV1ScoreComponentRecommendationAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// Description of the recommendation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Potential impact of this recommendation on the overall score. This denotes how important this recommendation is to improve the score.
	Impact int32 `protobuf:"varint,3,opt,name=impact,proto3" json:"impact,omitempty"`
	// Title represents recommendation title.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) Reset() {
	*x = GoogleCloudApigeeV1ScoreComponentRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ScoreComponentRecommendation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ScoreComponentRecommendation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ScoreComponentRecommendation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{235}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) GetActions() []*GoogleCloudApigeeV1ScoreComponentRecommendationAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) GetImpact() int32 {
	if x != nil {
		return x.Impact
	}
	return 0
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Action to improve security score.
type GoogleCloudApigeeV1ScoreComponentRecommendationAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action context for the action.
	ActionContext *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext `protobuf:"bytes,1,opt,name=action_context,json=actionContext,proto3" json:"action_context,omitempty"`
	// Description of the action.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationAction) Reset() {
	*x = GoogleCloudApigeeV1ScoreComponentRecommendationAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ScoreComponentRecommendationAction) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationAction) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ScoreComponentRecommendationAction.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ScoreComponentRecommendationAction) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{236}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationAction) GetActionContext() *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext {
	if x != nil {
		return x.ActionContext
	}
	return nil
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Action context are all the relevant details for the action.
type GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Documentation link for the action.
	DocumentationLink string `protobuf:"bytes,1,opt,name=documentation_link,json=documentationLink,proto3" json:"documentation_link,omitempty"`
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) Reset() {
	*x = GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{237}
}

func (x *GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext) GetDocumentationLink() string {
	if x != nil {
		return x.DocumentationLink
	}
	return ""
}

// A SecurityAction is rule that can be enforced at an environment level. The result is one of: - A denied API call - An explicitly allowed API call - A flagged API call (HTTP headers added before the target receives it) At least one condition is required to create a SecurityAction.
type GoogleCloudApigeeV1SecurityAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allow a request through if it matches this SecurityAction.
	Allow *GoogleCloudApigeeV1SecurityActionAllow `protobuf:"bytes,1,opt,name=allow,proto3" json:"allow,omitempty"`
	// Optional. If unset, this would apply to all proxies in the environment. If set, this action is enforced only if at least one proxy in the repeated list is deployed at the time of enforcement. If set, several restrictions are enforced on SecurityActions. There can be at most 100 enabled actions with proxies set in an env. Several other restrictions apply on conditions and are detailed later.
	ApiProxies []string `protobuf:"bytes,2,rep,name=api_proxies,json=apiProxies,proto3" json:"api_proxies,omitempty"`
	// Required. A valid SecurityAction must contain at least one condition.
	ConditionConfig *GoogleCloudApigeeV1SecurityActionConditionConfig `protobuf:"bytes,3,opt,name=condition_config,json=conditionConfig,proto3" json:"condition_config,omitempty"`
	// Output only. The create time for this SecurityAction.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Deny a request through if it matches this SecurityAction.
	Deny *GoogleCloudApigeeV1SecurityActionDeny `protobuf:"bytes,5,opt,name=deny,proto3" json:"deny,omitempty"`
	// Optional. An optional user provided description of the SecurityAction.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// The expiration for this SecurityAction.
	ExpireTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Flag a request through if it matches this SecurityAction.
	Flag *GoogleCloudApigeeV1SecurityActionFlag `protobuf:"bytes,8,opt,name=flag,proto3" json:"flag,omitempty"`
	// Immutable. This field is ignored during creation as per AIP-133. Please set the `security_action_id` field in the CreateSecurityActionRequest when creating a new SecurityAction. Format: organizations/{org}/environments/{env}/securityActions/{security_action}
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Only an ENABLED SecurityAction is enforced. An ENABLED SecurityAction past its expiration time will not be enforced.
	State string `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	// Input only. The TTL for this SecurityAction.
	Ttl *duration.Duration `protobuf:"bytes,11,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Output only. The update time for this SecurityAction. This reflects when this SecurityAction changed states.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAction) Reset() {
	*x = GoogleCloudApigeeV1SecurityAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAction) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityAction) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAction.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAction) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{238}
}

func (x *GoogleCloudApigeeV1SecurityAction) GetAllow() *GoogleCloudApigeeV1SecurityActionAllow {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetApiProxies() []string {
	if x != nil {
		return x.ApiProxies
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetConditionConfig() *GoogleCloudApigeeV1SecurityActionConditionConfig {
	if x != nil {
		return x.ConditionConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetDeny() *GoogleCloudApigeeV1SecurityActionDeny {
	if x != nil {
		return x.Deny
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAction) GetExpireTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetFlag() *GoogleCloudApigeeV1SecurityActionFlag {
	if x != nil {
		return x.Flag
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAction) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAction) GetTtl() *duration.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAction) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Message that should be set in case of an Allow Action. This does not have any fields.
type GoogleCloudApigeeV1SecurityActionAllow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleCloudApigeeV1SecurityActionAllow) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionAllow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionAllow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionAllow) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionAllow) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionAllow.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionAllow) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{239}
}

// The following are a list of conditions. A valid SecurityAction must contain at least one condition. Within a condition, each element is ORed. Across conditions elements are ANDed. For example if a SecurityAction has the following: ip_address_ranges: ["ip1", "ip2"] and bot_reasons: ["Flooder", "Robot Abuser"] then this is interpreted as: enforce the action if the incoming request has ((ip_address_ranges = "ip1" OR ip_address_ranges = "ip2") AND (bot_reasons="Flooder" OR bot_reasons="Robot Abuser")). Conditions other than ip_address_ranges and bot_reasons cannot be ANDed.
type GoogleCloudApigeeV1SecurityActionConditionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A list of access_tokens. Limit 1000 per action.
	AccessTokens []string `protobuf:"bytes,1,rep,name=access_tokens,json=accessTokens,proto3" json:"access_tokens,omitempty"`
	// Optional. A list of API keys. Limit 1000 per action.
	ApiKeys []string `protobuf:"bytes,2,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	// Optional. A list of API Products. Limit 1000 per action.
	ApiProducts []string `protobuf:"bytes,3,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// Optional. A list of ASN numbers to act on, e.g. 23. https://en.wikipedia.org/wiki/Autonomous_system_(Internet) This uses int64 instead of uint32 because of https://linter.aip.dev/141/forbidden-types.
	Asns []int64 `protobuf:"varint,4,rep,packed,name=asns,proto3" json:"asns,omitempty"`
	// Optional. A list of Bot Reasons. Current options: Flooder, Brute Guessor, Static Content Scraper, OAuth Abuser, Robot Abuser, TorListRule, Advanced Anomaly Detection, Advanced API Scraper, Search Engine Crawlers, Public Clouds, Public Cloud AWS, Public Cloud Azure, and Public Cloud Google.
	BotReasons []string `protobuf:"bytes,5,rep,name=bot_reasons,json=botReasons,proto3" json:"bot_reasons,omitempty"`
	// Optional. A list of developer apps. Limit 1000 per action.
	DeveloperApps []string `protobuf:"bytes,6,rep,name=developer_apps,json=developerApps,proto3" json:"developer_apps,omitempty"`
	// Optional. A list of developers. Limit 1000 per action.
	Developers []string `protobuf:"bytes,7,rep,name=developers,proto3" json:"developers,omitempty"`
	// Optional. Act only on particular HTTP methods. E.g. A read-only API can block POST/PUT/DELETE methods. Accepted values are: GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE and PATCH.
	HttpMethods []string `protobuf:"bytes,8,rep,name=http_methods,json=httpMethods,proto3" json:"http_methods,omitempty"`
	// Optional. A list of IP addresses. This could be either IPv4 or IPv6. Limited to 100 per action.
	IpAddressRanges []string `protobuf:"bytes,9,rep,name=ip_address_ranges,json=ipAddressRanges,proto3" json:"ip_address_ranges,omitempty"`
	// Optional. A list of countries/region codes to act on, e.g. US. This follows https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
	RegionCodes []string `protobuf:"bytes,10,rep,name=region_codes,json=regionCodes,proto3" json:"region_codes,omitempty"`
	// Optional. A list of user agents to deny. We look for exact matches. Limit 50 per action.
	UserAgents []string `protobuf:"bytes,11,rep,name=user_agents,json=userAgents,proto3" json:"user_agents,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionConditionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionConditionConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionConditionConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionConditionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{240}
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetAccessTokens() []string {
	if x != nil {
		return x.AccessTokens
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetApiKeys() []string {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetApiProducts() []string {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetAsns() []int64 {
	if x != nil {
		return x.Asns
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetBotReasons() []string {
	if x != nil {
		return x.BotReasons
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetDeveloperApps() []string {
	if x != nil {
		return x.DeveloperApps
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetDevelopers() []string {
	if x != nil {
		return x.Developers
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetHttpMethods() []string {
	if x != nil {
		return x.HttpMethods
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetIpAddressRanges() []string {
	if x != nil {
		return x.IpAddressRanges
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetRegionCodes() []string {
	if x != nil {
		return x.RegionCodes
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityActionConditionConfig) GetUserAgents() []string {
	if x != nil {
		return x.UserAgents
	}
	return nil
}

// Message that should be set in case of a Deny Action.
type GoogleCloudApigeeV1SecurityActionDeny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The HTTP response code if the Action = DENY.
	ResponseCode int32 `protobuf:"varint,1,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityActionDeny) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionDeny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionDeny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionDeny) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionDeny) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionDeny.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionDeny) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{241}
}

func (x *GoogleCloudApigeeV1SecurityActionDeny) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

// The message that should be set in the case of a Flag action.
type GoogleCloudApigeeV1SecurityActionFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A list of HTTP headers to be sent to the target in case of a FLAG SecurityAction. Limit 5 headers per SecurityAction. At least one is mandatory.
	Headers []*GoogleCloudApigeeV1SecurityActionHttpHeader `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityActionFlag) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionFlag) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionFlag) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionFlag.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionFlag) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{242}
}

func (x *GoogleCloudApigeeV1SecurityActionFlag) GetHeaders() []*GoogleCloudApigeeV1SecurityActionHttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

// An HTTP header.
type GoogleCloudApigeeV1SecurityActionHttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The header name to be sent to the target.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The header value to be sent to the target.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityActionHttpHeader) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionHttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionHttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionHttpHeader) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionHttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionHttpHeader.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionHttpHeader) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{243}
}

func (x *GoogleCloudApigeeV1SecurityActionHttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityActionHttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// SecurityActionsConfig reflects the current state of the SecurityActions feature. This is a singleton resource: https://google.aip.dev/156
type GoogleCloudApigeeV1SecurityActionsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The flag that controls whether this feature is enabled. This is `unset` by default. When this flag is `false`, even if individual rules are enabled, no SecurityActions will be enforced.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// This is a singleton resource, the name will always be set by SecurityActions and any user input will be ignored. The name is always: `organizations/{org}/environments/{env}/security_actions_config`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The update time for configuration.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) Reset() {
	*x = GoogleCloudApigeeV1SecurityActionsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityActionsConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityActionsConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityActionsConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{244}
}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityActionsConfig) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The security assessment result for one resource.
type GoogleCloudApigeeV1SecurityAssessmentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time of the assessment of this resource. This could lag behind `assessment_time` due to caching within the backend.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The error status if scoring fails.
	Error *GoogleRpcStatus `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The assessed resource.
	Resource *GoogleCloudApigeeV1SecurityAssessmentResultResource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// The result of the assessment.
	ScoringResult *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult `protobuf:"bytes,4,opt,name=scoring_result,json=scoringResult,proto3" json:"scoring_result,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResult) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResult.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{245}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) GetError() *GoogleRpcStatus {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) GetResource() *GoogleCloudApigeeV1SecurityAssessmentResultResource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResult) GetScoringResult() *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult {
	if x != nil {
		return x.ScoringResult
	}
	return nil
}

// Resource for which we are computing security assessment.
type GoogleCloudApigeeV1SecurityAssessmentResultResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of this resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The revision id for the resource. In case of Apigee, this is proxy revision id.
	ResourceRevisionId string `protobuf:"bytes,2,opt,name=resource_revision_id,json=resourceRevisionId,proto3" json:"resource_revision_id,omitempty"`
	// Required. Type of this resource.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResultResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResultResource) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResultResource.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResultResource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{246}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) GetResourceRevisionId() string {
	if x != nil {
		return x.ResourceRevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The result of the assessment.
type GoogleCloudApigeeV1SecurityAssessmentResultScoringResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recommendations of the assessment. The key is the "name" of the assessment (not display_name), and the value are the recommendations.
	AssessmentRecommendations map[string]*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation `protobuf:"bytes,1,rep,name=assessment_recommendations,json=assessmentRecommendations,proto3" json:"assessment_recommendations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The time when resource data was last fetched for this resource. This time may be different than when the resource was actually updated due to lag in data collection.
	DataUpdateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=data_update_time,json=dataUpdateTime,proto3" json:"data_update_time,omitempty"`
	// The number of failed assessments grouped by its weight. Keys are one of the following: "MAJOR", "MODERATE", "MINOR".
	FailedAssessmentPerWeight map[string]int32 `protobuf:"bytes,3,rep,name=failed_assessment_per_weight,json=failedAssessmentPerWeight,proto3" json:"failed_assessment_per_weight,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The security score of the assessment.
	Score int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	// The severity of the assessment.
	Severity string `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResultScoringResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{247}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) GetAssessmentRecommendations() map[string]*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation {
	if x != nil {
		return x.AssessmentRecommendations
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) GetDataUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.DataUpdateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) GetFailedAssessmentPerWeight() map[string]int32 {
	if x != nil {
		return x.FailedAssessmentPerWeight
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResult) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

// The message format of a recommendation from the assessment.
type GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The display name of the assessment.
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The recommended steps of the assessment.
	Recommendations []*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation `protobuf:"bytes,2,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	// Score impact indicates the impact on the overall score if the assessment were to pass.
	ScoreImpact int32 `protobuf:"varint,3,opt,name=score_impact,json=scoreImpact,proto3" json:"score_impact,omitempty"`
	// Verdict indicates the assessment result.
	Verdict string `protobuf:"bytes,4,opt,name=verdict,proto3" json:"verdict,omitempty"`
	// The weight of the assessment which was set in the profile.
	Weight string `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) ProtoMessage() {
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{248}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) GetRecommendations() []*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) GetScoreImpact() int32 {
	if x != nil {
		return x.ScoreImpact
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) GetVerdict() string {
	if x != nil {
		return x.Verdict
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

// The format of the assessment recommendation.
type GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The description of the recommendation.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The link for the recommendation.
	Link *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) ProtoMessage() {
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{249}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation) GetLink() *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink {
	if x != nil {
		return x.Link
	}
	return nil
}

// The format for a link in the recommendation.
type GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text of the url. (ie: "Learn more")
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The link itself.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) Reset() {
	*x = GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) ProtoMessage() {
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{250}
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// Represents an SecurityIncident resource.
type GoogleCloudApigeeV1SecurityIncident struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Detection types which are part of the incident. Examples: Flooder, OAuth Abuser, Static Content Scraper, Anomaly Detection.
	DetectionTypes []string `protobuf:"bytes,1,rep,name=detection_types,json=detectionTypes,proto3" json:"detection_types,omitempty"`
	// Optional. Display name of the security incident.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The time when events associated with the incident were first detected.
	FirstDetectedTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=first_detected_time,json=firstDetectedTime,proto3" json:"first_detected_time,omitempty"`
	// Output only. The time when events associated with the incident were last detected.
	LastDetectedTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_detected_time,json=lastDetectedTime,proto3" json:"last_detected_time,omitempty"`
	// Output only. The time when the incident observability was last changed.
	LastObservabilityChangeTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_observability_change_time,json=lastObservabilityChangeTime,proto3" json:"last_observability_change_time,omitempty"`
	// Immutable. Name of the security incident resource. Format: organizations/{org}/environments/{environment}/securityIncidents/{incident} Example: organizations/apigee-org/environments/dev/securityIncidents/1234-5678-9101-1111
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Indicates if the user archived this incident.
	Observability string `protobuf:"bytes,7,opt,name=observability,proto3" json:"observability,omitempty"`
	// Output only. Risk level of the incident.
	RiskLevel string `protobuf:"bytes,8,opt,name=risk_level,json=riskLevel,proto3" json:"risk_level,omitempty"`
	// Total traffic detected as part of the incident.
	TrafficCount int64 `protobuf:"varint,9,opt,name=traffic_count,json=trafficCount,proto3" json:"traffic_count,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityIncident) Reset() {
	*x = GoogleCloudApigeeV1SecurityIncident{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityIncident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityIncident) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityIncident) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityIncident.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityIncident) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{251}
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetDetectionTypes() []string {
	if x != nil {
		return x.DetectionTypes
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetFirstDetectedTime() *timestamp.Timestamp {
	if x != nil {
		return x.FirstDetectedTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetLastDetectedTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastDetectedTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetLastObservabilityChangeTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastObservabilityChangeTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetObservability() string {
	if x != nil {
		return x.Observability
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetRiskLevel() string {
	if x != nil {
		return x.RiskLevel
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityIncident) GetTrafficCount() int64 {
	if x != nil {
		return x.TrafficCount
	}
	return 0
}

// Represents a SecurityProfile resource.
type GoogleCloudApigeeV1SecurityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the security profile.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// DEPRECATED: DO NOT USE Display name of the security profile.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// List of environments attached to security profile.
	Environments []*GoogleCloudApigeeV1SecurityProfileEnvironment `protobuf:"bytes,3,rep,name=environments,proto3" json:"environments,omitempty"`
	// Output only. Maximum security score that can be generated by this profile.
	MaxScore int32 `protobuf:"varint,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	// Output only. Minimum security score that can be generated by this profile.
	MinScore int32 `protobuf:"varint,5,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	// Immutable. Name of the security profile resource. Format: organizations/{org}/securityProfiles/{profile}
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Required. Customized profile configuration that computes the security score.
	ProfileConfig *GoogleCloudApigeeV1ProfileConfig `protobuf:"bytes,7,opt,name=profile_config,json=profileConfig,proto3" json:"profile_config,omitempty"`
	// Output only. The time when revision was created.
	RevisionCreateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=revision_create_time,json=revisionCreateTime,proto3" json:"revision_create_time,omitempty"`
	// Output only. Revision ID of the security profile.
	RevisionId int64 `protobuf:"varint,9,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Output only. DEPRECATED: DO NOT USE The time when revision was published. Once published, the security profile revision cannot be updated further and can be attached to environments.
	RevisionPublishTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=revision_publish_time,json=revisionPublishTime,proto3" json:"revision_publish_time,omitempty"`
	// Output only. The time when revision was updated.
	RevisionUpdateTime *timestamp.Timestamp `protobuf:"bytes,11,opt,name=revision_update_time,json=revisionUpdateTime,proto3" json:"revision_update_time,omitempty"`
	// List of profile scoring configs in this revision.
	ScoringConfigs []*GoogleCloudApigeeV1SecurityProfileScoringConfig `protobuf:"bytes,12,rep,name=scoring_configs,json=scoringConfigs,proto3" json:"scoring_configs,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfile) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfile) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfile.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfile) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{252}
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetEnvironments() []*GoogleCloudApigeeV1SecurityProfileEnvironment {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetMaxScore() int32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetMinScore() int32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetProfileConfig() *GoogleCloudApigeeV1ProfileConfig {
	if x != nil {
		return x.ProfileConfig
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetRevisionCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionCreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetRevisionId() int64 {
	if x != nil {
		return x.RevisionId
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetRevisionPublishTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionPublishTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetRevisionUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.RevisionUpdateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfile) GetScoringConfigs() []*GoogleCloudApigeeV1SecurityProfileScoringConfig {
	if x != nil {
		return x.ScoringConfigs
	}
	return nil
}

// Environment information of attached environments. Scoring an environment is enabled only if it is attached to a security profile.
type GoogleCloudApigeeV1SecurityProfileEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Time at which environment was attached to the security profile.
	AttachTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=attach_time,json=attachTime,proto3" json:"attach_time,omitempty"`
	// Output only. Name of the environment.
	Environment string `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironment) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfileEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfileEnvironment) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfileEnvironment.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfileEnvironment) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{253}
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironment) GetAttachTime() *timestamp.Timestamp {
	if x != nil {
		return x.AttachTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironment) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

// Represents a SecurityProfileEnvironmentAssociation resource.
type GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time when environment was attached to the security profile.
	AttachTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=attach_time,json=attachTime,proto3" json:"attach_time,omitempty"`
	// Immutable. Name of the environment that the profile is attached to.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DEPRECATED: DO NOT USE Revision ID of the security profile.
	SecurityProfileRevisionId int64 `protobuf:"varint,3,opt,name=security_profile_revision_id,json=securityProfileRevisionId,proto3" json:"security_profile_revision_id,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{254}
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) GetAttachTime() *timestamp.Timestamp {
	if x != nil {
		return x.AttachTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation) GetSecurityProfileRevisionId() int64 {
	if x != nil {
		return x.SecurityProfileRevisionId
	}
	return 0
}

// Security configurations to manage scoring.
type GoogleCloudApigeeV1SecurityProfileScoringConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the config.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Path of the component config used for scoring.
	ScorePath string `protobuf:"bytes,2,opt,name=score_path,json=scorePath,proto3" json:"score_path,omitempty"`
	// Title of the config.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfileScoringConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfileScoringConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfileScoringConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfileScoringConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{255}
}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) GetScorePath() string {
	if x != nil {
		return x.ScorePath
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfileScoringConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Security profile for risk assessment version 2.
type GoogleCloudApigeeV1SecurityProfileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time of the security profile creation.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. The description of the security profile.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Whether the security profile is google defined.
	GoogleDefined bool `protobuf:"varint,3,opt,name=google_defined,json=googleDefined,proto3" json:"google_defined,omitempty"`
	// Identifier. Name of the security profile v2 resource. Format: organizations/{org}/securityProfilesV2/{profile}
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The configuration for each assessment in this profile. Key is the name/id of the assessment.
	ProfileAssessmentConfigs map[string]*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig `protobuf:"bytes,5,rep,name=profile_assessment_configs,json=profileAssessmentConfigs,proto3" json:"profile_assessment_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The time of the security profile update.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfileV2) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfileV2) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfileV2.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfileV2) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{256}
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetGoogleDefined() bool {
	if x != nil {
		return x.GoogleDefined
	}
	return false
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetProfileAssessmentConfigs() map[string]*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig {
	if x != nil {
		return x.ProfileAssessmentConfigs
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityProfileV2) GetUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// The configuration definition for a specific assessment.
type GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The weight of the assessment.
	Weight string `protobuf:"bytes,1,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) Reset() {
	*x = GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{257}
}

func (x *GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

// SecurityReport saves all the information about the created security report.
type GoogleCloudApigeeV1SecurityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation time of the query.
	Created string `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Display Name specified by the user.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Hostname is available only when query is executed at host level.
	EnvgroupHostname string `protobuf:"bytes,3,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	// Error is set when query fails.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// ExecutionTime is available only after the query is completed.
	ExecutionTime string `protobuf:"bytes,5,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	// Contains information like metrics, dimenstions etc of the Security Report.
	QueryParams *GoogleCloudApigeeV1SecurityReportMetadata `protobuf:"bytes,6,opt,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	// Report Definition ID.
	ReportDefinitionId string `protobuf:"bytes,7,opt,name=report_definition_id,json=reportDefinitionId,proto3" json:"report_definition_id,omitempty"`
	// Result is available only after the query is completed.
	Result *GoogleCloudApigeeV1SecurityReportResultMetadata `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	// ResultFileSize is available only after the query is completed.
	ResultFileSize string `protobuf:"bytes,9,opt,name=result_file_size,json=resultFileSize,proto3" json:"result_file_size,omitempty"`
	// ResultRows is available only after the query is completed.
	ResultRows int64 `protobuf:"varint,10,opt,name=result_rows,json=resultRows,proto3" json:"result_rows,omitempty"`
	// Self link of the query. Example: `/organizations/myorg/environments/myenv/securityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd` or following format if query is running at host level: `/organizations/myorg/hostSecurityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd`
	Self string `protobuf:"bytes,11,opt,name=self,proto3" json:"self,omitempty"`
	// Query state could be "enqueued", "running", "completed", "expired" and "failed".
	State string `protobuf:"bytes,12,opt,name=state,proto3" json:"state,omitempty"`
	// Output only. Last updated timestamp for the query.
	Updated string `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReport) Reset() {
	*x = GoogleCloudApigeeV1SecurityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReport) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReport) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReport.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReport) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{258}
}

func (x *GoogleCloudApigeeV1SecurityReport) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetExecutionTime() string {
	if x != nil {
		return x.ExecutionTime
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetQueryParams() *GoogleCloudApigeeV1SecurityReportMetadata {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReport) GetReportDefinitionId() string {
	if x != nil {
		return x.ReportDefinitionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetResult() *GoogleCloudApigeeV1SecurityReportResultMetadata {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReport) GetResultFileSize() string {
	if x != nil {
		return x.ResultFileSize
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetResultRows() int64 {
	if x != nil {
		return x.ResultRows
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityReport) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReport) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

// Metadata for the security report.
type GoogleCloudApigeeV1SecurityReportMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensions of the SecurityReport.
	Dimensions []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// End timestamp of the query range.
	EndTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Metrics of the SecurityReport. Example: ["name:bot_count,func:sum,alias:sum_bot_count"]
	Metrics []string `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// MIME type / Output format.
	MimeType string `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Start timestamp of the query range.
	StartTimestamp *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Query GroupBy time unit. Example: "seconds", "minute", "hour"
	TimeUnit string `protobuf:"bytes,6,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) Reset() {
	*x = GoogleCloudApigeeV1SecurityReportMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReportMetadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReportMetadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReportMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{259}
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetEndTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetStartTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportMetadata) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

// Body structure when user makes a request to create a security report.
type GoogleCloudApigeeV1SecurityReportQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delimiter used in the CSV file, if `outputFormat` is set to `csv`. Defaults to the `,` (comma) character. Supported delimiter characters include comma (`,`), pipe (`|`), and tab (`\t`).
	CsvDelimiter string `protobuf:"bytes,1,opt,name=csv_delimiter,json=csvDelimiter,proto3" json:"csv_delimiter,omitempty"`
	// A list of dimensions. https://docs.apigee.com/api-platform/analytics/analytics-reference#dimensions
	Dimensions []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Security Report display name which users can specify.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Hostname needs to be specified if query intends to run at host level. This field is only allowed when query is submitted by CreateHostSecurityReport where analytics data will be grouped by organization and hostname.
	EnvgroupHostname string `protobuf:"bytes,4,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	// Boolean expression that can be used to filter data. Filter expressions can be combined using AND/OR terms and should be fully parenthesized to avoid ambiguity. See Analytics metrics, dimensions, and filters reference https://docs.apigee.com/api-platform/analytics/analytics-reference for more information on the fields available to filter on. For more information on the tokens that you use to build filter expressions, see Filter expression syntax. https://docs.apigee.com/api-platform/analytics/asynch-reports-api#filter-expression-syntax
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// Time unit used to group the result set. Valid values include: second, minute, hour, day, week, or month. If a query includes groupByTimeUnit, then the result is an aggregation based on the specified time unit and the resultant timestamp does not include milliseconds precision. If a query omits groupByTimeUnit, then the resultant timestamp includes milliseconds precision.
	GroupByTimeUnit string `protobuf:"bytes,6,opt,name=group_by_time_unit,json=groupByTimeUnit,proto3" json:"group_by_time_unit,omitempty"`
	// Maximum number of rows that can be returned in the result.
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// A list of Metrics.
	Metrics []*GoogleCloudApigeeV1SecurityReportQueryMetric `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Valid values include: `csv` or `json`. Defaults to `json`. Note: Configure the delimiter for CSV output using the csvDelimiter property.
	MimeType string `protobuf:"bytes,9,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Report Definition ID.
	ReportDefinitionId string `protobuf:"bytes,10,opt,name=report_definition_id,json=reportDefinitionId,proto3" json:"report_definition_id,omitempty"`
	// Required. Time range for the query. Can use the following predefined strings to specify the time range: `last60minutes` `last24hours` `last7days` Or, specify the timeRange as a structure describing start and end timestamps in the ISO format: yyyy-mm-ddThh:mm:ssZ. Example: "timeRange": { "start": "2018-07-29T00:13:00Z", "end": "2018-08-01T00:18:00Z" }
	TimeRange *any1.Any `protobuf:"bytes,11,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) Reset() {
	*x = GoogleCloudApigeeV1SecurityReportQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReportQuery) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReportQuery) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReportQuery.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReportQuery) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{260}
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetCsvDelimiter() string {
	if x != nil {
		return x.CsvDelimiter
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetGroupByTimeUnit() string {
	if x != nil {
		return x.GroupByTimeUnit
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetMetrics() []*GoogleCloudApigeeV1SecurityReportQueryMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetReportDefinitionId() string {
	if x != nil {
		return x.ReportDefinitionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQuery) GetTimeRange() *any1.Any {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

// Metric of the Query
type GoogleCloudApigeeV1SecurityReportQueryMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregation function: avg, min, max, or sum.
	AggregationFunction string `protobuf:"bytes,1,opt,name=aggregation_function,json=aggregationFunction,proto3" json:"aggregation_function,omitempty"`
	// Alias for the metric. Alias will be used to replace metric name in query results.
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// Required. Metric name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// One of `+`, `-`, `/`, `%`, `*`.
	Operator string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	// Operand value should be provided when operator is set.
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) Reset() {
	*x = GoogleCloudApigeeV1SecurityReportQueryMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReportQueryMetric) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReportQueryMetric.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReportQueryMetric) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{261}
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) GetAggregationFunction() string {
	if x != nil {
		return x.AggregationFunction
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportQueryMetric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Contains informations about the security report results.
type GoogleCloudApigeeV1SecurityReportResultMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Expire_time is set to 7 days after report creation. Query result will be unaccessable after this time. Example: "2021-05-04T13:38:52-07:00"
	Expires string `protobuf:"bytes,1,opt,name=expires,proto3" json:"expires,omitempty"`
	// Self link of the query results. Example: `/organizations/myorg/environments/myenv/securityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result` or following format if query is running at host level: `/organizations/myorg/hostSecurityReports/9cfc0d85-0f30-46d6-ae6f-318d0cb961bd/result`
	Self string `protobuf:"bytes,2,opt,name=self,proto3" json:"self,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReportResultMetadata) Reset() {
	*x = GoogleCloudApigeeV1SecurityReportResultMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReportResultMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReportResultMetadata) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReportResultMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReportResultMetadata.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReportResultMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{262}
}

func (x *GoogleCloudApigeeV1SecurityReportResultMetadata) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportResultMetadata) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

// The response for security report result view APIs.
type GoogleCloudApigeeV1SecurityReportResultView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code when there is a failure.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error message when there is a failure.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Metadata contains information like metrics, dimenstions etc of the security report.
	Metadata *GoogleCloudApigeeV1SecurityReportMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Rows of security report result. Each row is a JSON object. Example: {sum(message_count): 1, developer_app: "(not set)",…}
	Rows []*any1.Any `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	// State of retrieving ResultView.
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) Reset() {
	*x = GoogleCloudApigeeV1SecurityReportResultView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecurityReportResultView) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecurityReportResultView) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecurityReportResultView.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecurityReportResultView) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{263}
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) GetMetadata() *GoogleCloudApigeeV1SecurityReportMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) GetRows() []*any1.Any {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *GoogleCloudApigeeV1SecurityReportResultView) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// SecuritySettings reflects the current state of the SecuritySettings feature.
type GoogleCloudApigeeV1SecuritySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If true the user consents to the use of ML models for Abuse detection.
	MlRetrainingFeedbackEnabled bool `protobuf:"varint,1,opt,name=ml_retraining_feedback_enabled,json=mlRetrainingFeedbackEnabled,proto3" json:"ml_retraining_feedback_enabled,omitempty"`
	// Identifier. Full resource name is always `organizations/{org}/securitySettings`.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1SecuritySettings) Reset() {
	*x = GoogleCloudApigeeV1SecuritySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SecuritySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SecuritySettings) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SecuritySettings) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SecuritySettings.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SecuritySettings) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{264}
}

func (x *GoogleCloudApigeeV1SecuritySettings) GetMlRetrainingFeedbackEnabled() bool {
	if x != nil {
		return x.MlRetrainingFeedbackEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1SecuritySettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GoogleCloudApigeeV1ServiceIssuersMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of trusted issuer email ids.
	EmailIds []string `protobuf:"bytes,1,rep,name=email_ids,json=emailIds,proto3" json:"email_ids,omitempty"`
	// String indicating the Apigee service name.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GoogleCloudApigeeV1ServiceIssuersMapping) Reset() {
	*x = GoogleCloudApigeeV1ServiceIssuersMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1ServiceIssuersMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1ServiceIssuersMapping) ProtoMessage() {}

func (x *GoogleCloudApigeeV1ServiceIssuersMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1ServiceIssuersMapping.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1ServiceIssuersMapping) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{265}
}

func (x *GoogleCloudApigeeV1ServiceIssuersMapping) GetEmailIds() []string {
	if x != nil {
		return x.EmailIds
	}
	return nil
}

func (x *GoogleCloudApigeeV1ServiceIssuersMapping) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// Session carries the debug session id and its creation time.
type GoogleCloudApigeeV1Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The debug session ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The first transaction creation timestamp in millisecond, recorded by UAP.
	TimestampMs int64 `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (x *GoogleCloudApigeeV1Session) Reset() {
	*x = GoogleCloudApigeeV1Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Session) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Session) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Session.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Session) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{266}
}

func (x *GoogleCloudApigeeV1Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GoogleCloudApigeeV1Session) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

// Request for SetAddonEnablement.
type GoogleCloudApigeeV1SetAddonEnablementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the Analytics should be enabled in the environment.
	AnalyticsEnabled bool `protobuf:"varint,1,opt,name=analytics_enabled,json=analyticsEnabled,proto3" json:"analytics_enabled,omitempty"`
	// If the API Security should be enabled in the environment.
	ApiSecurityEnabled bool `protobuf:"varint,2,opt,name=api_security_enabled,json=apiSecurityEnabled,proto3" json:"api_security_enabled,omitempty"`
}

func (x *GoogleCloudApigeeV1SetAddonEnablementRequest) Reset() {
	*x = GoogleCloudApigeeV1SetAddonEnablementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SetAddonEnablementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SetAddonEnablementRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SetAddonEnablementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SetAddonEnablementRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SetAddonEnablementRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{267}
}

func (x *GoogleCloudApigeeV1SetAddonEnablementRequest) GetAnalyticsEnabled() bool {
	if x != nil {
		return x.AnalyticsEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1SetAddonEnablementRequest) GetApiSecurityEnabled() bool {
	if x != nil {
		return x.ApiSecurityEnabled
	}
	return false
}

// Request for SetAddons.
type GoogleCloudApigeeV1SetAddonsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Add-on configurations.
	AddonsConfig *GoogleCloudApigeeV1AddonsConfig `protobuf:"bytes,1,opt,name=addons_config,json=addonsConfig,proto3" json:"addons_config,omitempty"`
}

func (x *GoogleCloudApigeeV1SetAddonsRequest) Reset() {
	*x = GoogleCloudApigeeV1SetAddonsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SetAddonsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SetAddonsRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SetAddonsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SetAddonsRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SetAddonsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{268}
}

func (x *GoogleCloudApigeeV1SetAddonsRequest) GetAddonsConfig() *GoogleCloudApigeeV1AddonsConfig {
	if x != nil {
		return x.AddonsConfig
	}
	return nil
}

// The metadata describing a shared flow
type GoogleCloudApigeeV1SharedFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the most recently created revision for this shared flow.
	LatestRevisionId string `protobuf:"bytes,1,opt,name=latest_revision_id,json=latestRevisionId,proto3" json:"latest_revision_id,omitempty"`
	// Metadata describing the shared flow.
	MetaData *GoogleCloudApigeeV1EntityMetadata `protobuf:"bytes,2,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	// The ID of the shared flow.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A list of revisions of this shared flow.
	Revision []string `protobuf:"bytes,4,rep,name=revision,proto3" json:"revision,omitempty"`
}

func (x *GoogleCloudApigeeV1SharedFlow) Reset() {
	*x = GoogleCloudApigeeV1SharedFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SharedFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SharedFlow) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SharedFlow) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SharedFlow.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SharedFlow) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{269}
}

func (x *GoogleCloudApigeeV1SharedFlow) GetLatestRevisionId() string {
	if x != nil {
		return x.LatestRevisionId
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlow) GetMetaData() *GoogleCloudApigeeV1EntityMetadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlow) GetRevision() []string {
	if x != nil {
		return x.Revision
	}
	return nil
}

// The metadata describing a shared flow revision.
type GoogleCloudApigeeV1SharedFlowRevision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the configuration schema to which this shared flow conforms. The only supported value currently is majorVersion 4 and minorVersion 0. This setting may be used in the future to enable evolution of the shared flow format.
	ConfigurationVersion *GoogleCloudApigeeV1ConfigVersion `protobuf:"bytes,1,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty"`
	// A textual description of the shared flow revision.
	ContextInfo string `protobuf:"bytes,2,opt,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty"`
	// Time at which this shared flow revision was created, in milliseconds since epoch.
	CreatedAt int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Description of the shared flow revision.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The human readable name of this shared flow.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A Key-Value map of metadata about this shared flow revision.
	EntityMetaDataAsProperties map[string]string `protobuf:"bytes,6,rep,name=entity_meta_data_as_properties,json=entityMetaDataAsProperties,proto3" json:"entity_meta_data_as_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Time at which this shared flow revision was most recently modified, in milliseconds since epoch.
	LastModifiedAt int64 `protobuf:"varint,7,opt,name=last_modified_at,json=lastModifiedAt,proto3" json:"last_modified_at,omitempty"`
	// The resource ID of the parent shared flow.
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// A list of policy names included in this shared flow revision.
	Policies []string `protobuf:"bytes,9,rep,name=policies,proto3" json:"policies,omitempty"`
	// The resource files included in this shared flow revision.
	ResourceFiles *GoogleCloudApigeeV1ResourceFiles `protobuf:"bytes,10,opt,name=resource_files,json=resourceFiles,proto3" json:"resource_files,omitempty"`
	// A list of the resources included in this shared flow revision formatted as "{type}://{name}".
	Resources []string `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty"`
	// The resource ID of this revision.
	Revision string `protobuf:"bytes,12,opt,name=revision,proto3" json:"revision,omitempty"`
	// A list of the shared flow names included in this shared flow revision.
	SharedFlows []string `protobuf:"bytes,13,rep,name=shared_flows,json=sharedFlows,proto3" json:"shared_flows,omitempty"`
	// The string "Application"
	Type string `protobuf:"bytes,14,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) Reset() {
	*x = GoogleCloudApigeeV1SharedFlowRevision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SharedFlowRevision) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SharedFlowRevision) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SharedFlowRevision.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SharedFlowRevision) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{270}
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetConfigurationVersion() *GoogleCloudApigeeV1ConfigVersion {
	if x != nil {
		return x.ConfigurationVersion
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetContextInfo() string {
	if x != nil {
		return x.ContextInfo
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetEntityMetaDataAsProperties() map[string]string {
	if x != nil {
		return x.EntityMetaDataAsProperties
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetLastModifiedAt() int64 {
	if x != nil {
		return x.LastModifiedAt
	}
	return 0
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetResourceFiles() *GoogleCloudApigeeV1ResourceFiles {
	if x != nil {
		return x.ResourceFiles
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetSharedFlows() []string {
	if x != nil {
		return x.SharedFlows
	}
	return nil
}

func (x *GoogleCloudApigeeV1SharedFlowRevision) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Encapsulates a `stats` response.
type GoogleCloudApigeeV1Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of query results on the environment level.
	Environments []*GoogleCloudApigeeV1StatsEnvironmentStats `protobuf:"bytes,1,rep,name=environments,proto3" json:"environments,omitempty"`
	// List of query results grouped by host.
	Hosts []*GoogleCloudApigeeV1StatsHostStats `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Metadata information.
	MetaData *GoogleCloudApigeeV1Metadata `protobuf:"bytes,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *GoogleCloudApigeeV1Stats) Reset() {
	*x = GoogleCloudApigeeV1Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Stats) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Stats) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Stats.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Stats) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{271}
}

func (x *GoogleCloudApigeeV1Stats) GetEnvironments() []*GoogleCloudApigeeV1StatsEnvironmentStats {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *GoogleCloudApigeeV1Stats) GetHosts() []*GoogleCloudApigeeV1StatsHostStats {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *GoogleCloudApigeeV1Stats) GetMetaData() *GoogleCloudApigeeV1Metadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

// Encapsulates the environment wrapper: ``` "environments": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.52056245E8" ] } ], "name": "prod" } ]```
type GoogleCloudApigeeV1StatsEnvironmentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of metrics grouped under dimensions.
	Dimensions []*GoogleCloudApigeeV1DimensionMetric `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// In the final response, only one of the following fields will be present based on the dimensions provided. If no dimensions are provided, then only top-level metrics is provided. If dimensions are included, then there will be a top-level dimensions field under environments which will contain metrics values and the dimension name. Example: ``` "environments": [ { "dimensions": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.14049521E8" ] } ], "name": "nit_proxy" } ], "name": "prod" } ]``` or ```"environments": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.19026331E8" ] } ], "name": "prod" } ]``` List of metric values.
	Metrics []*GoogleCloudApigeeV1Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Name of the environment.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) Reset() {
	*x = GoogleCloudApigeeV1StatsEnvironmentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1StatsEnvironmentStats) ProtoMessage() {}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1StatsEnvironmentStats.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1StatsEnvironmentStats) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{272}
}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) GetDimensions() []*GoogleCloudApigeeV1DimensionMetric {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) GetMetrics() []*GoogleCloudApigeeV1Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1StatsEnvironmentStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Encapsulates the hostname wrapper: ``` "hosts": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.52056245E8" ] } ], "name": "example.com" } ]```
type GoogleCloudApigeeV1StatsHostStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of metrics grouped under dimensions.
	Dimensions []*GoogleCloudApigeeV1DimensionMetric `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// In the final response, only one of the following fields will be present based on the dimensions provided. If no dimensions are provided, then only the top-level metrics are provided. If dimensions are included, then there will be a top-level dimensions field under hostnames which will contain metrics values and the dimension name. Example: ``` "hosts": [ { "dimensions": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.14049521E8" ] } ], "name": "nit_proxy" } ], "name": "example.com" } ]``` OR ```"hosts": [ { "metrics": [ { "name": "sum(message_count)", "values": [ "2.19026331E8" ] } ], "name": "example.com" } ]``` List of metric values.
	Metrics []*GoogleCloudApigeeV1Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Hostname used in query.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1StatsHostStats) Reset() {
	*x = GoogleCloudApigeeV1StatsHostStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1StatsHostStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1StatsHostStats) ProtoMessage() {}

func (x *GoogleCloudApigeeV1StatsHostStats) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1StatsHostStats.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1StatsHostStats) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{273}
}

func (x *GoogleCloudApigeeV1StatsHostStats) GetDimensions() []*GoogleCloudApigeeV1DimensionMetric {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *GoogleCloudApigeeV1StatsHostStats) GetMetrics() []*GoogleCloudApigeeV1Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GoogleCloudApigeeV1StatsHostStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Pub/Sub subscription of an environment.
type GoogleCloudApigeeV1Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full name of the Pub/Sub subcription. Use the following structure in your request: `subscription "projects/foo/subscription/bar"`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GoogleCloudApigeeV1Subscription) Reset() {
	*x = GoogleCloudApigeeV1Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1Subscription) ProtoMessage() {}

func (x *GoogleCloudApigeeV1Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1Subscription.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1Subscription) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{274}
}

func (x *GoogleCloudApigeeV1Subscription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GoogleCloudApigeeV1SyncAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity tag (ETag) used for optimistic concurrency control as a way to help prevent simultaneous updates from overwriting each other. For example, when you call [getSyncAuthorization](organizations/getSyncAuthorization) an ETag is returned in the response. Pass that ETag when calling the [setSyncAuthorization](organizations/setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. **Note**: We strongly recommend that you use the ETag in the read-modify-write cycle to avoid race conditions.
	Etag []byte `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// Required. Array of service accounts to grant access to control plane resources, each specified using the following format: `serviceAccount:` service-account-name. The service-account-name is formatted like an email address. For example: `my-synchronizer-manager-service_account@my_project_id.iam.gserviceaccount.com` You might specify multiple service accounts, for example, if you have multiple environments and wish to assign a unique service account to each one. The service accounts must have **Apigee Synchronizer Manager** role. See also [Create service accounts](https://cloud.google.com/apigee/docs/hybrid/latest/sa-about#create-the-service-accounts).
	Identities []string `protobuf:"bytes,2,rep,name=identities,proto3" json:"identities,omitempty"`
}

func (x *GoogleCloudApigeeV1SyncAuthorization) Reset() {
	*x = GoogleCloudApigeeV1SyncAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1SyncAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1SyncAuthorization) ProtoMessage() {}

func (x *GoogleCloudApigeeV1SyncAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1SyncAuthorization.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1SyncAuthorization) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{275}
}

func (x *GoogleCloudApigeeV1SyncAuthorization) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *GoogleCloudApigeeV1SyncAuthorization) GetIdentities() []string {
	if x != nil {
		return x.Identities
	}
	return nil
}

// TargetServer configuration. TargetServers are used to decouple a proxy TargetEndpoint HTTPTargetConnections from concrete URLs for backend services.
type GoogleCloudApigeeV1TargetServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A human-readable description of this TargetServer.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Required. The host name this target connects to. Value must be a valid hostname as described by RFC-1123.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Optional. Enabling/disabling a TargetServer is useful when TargetServers are used in load balancing configurations, and one or more TargetServers need to taken out of rotation periodically. Defaults to true.
	IsEnabled bool `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Required. The resource id of this target server. Values must match the regular expression
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The port number this target connects to on the given host. Value must be between 1 and 65535, inclusive.
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Immutable. The protocol used by this TargetServer.
	Protocol string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Optional. Specifies TLS configuration info for this TargetServer. The JSON name is `sSLInfo` for legacy/backwards compatibility reasons -- Edge originally supported SSL, and the name is still used for TLS configuration.
	SSLInfo *GoogleCloudApigeeV1TlsInfo `protobuf:"bytes,7,opt,name=s_s_l_info,json=sSLInfo,proto3" json:"s_s_l_info,omitempty"`
}

func (x *GoogleCloudApigeeV1TargetServer) Reset() {
	*x = GoogleCloudApigeeV1TargetServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TargetServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TargetServer) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TargetServer) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TargetServer.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TargetServer) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{276}
}

func (x *GoogleCloudApigeeV1TargetServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServer) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServer) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TargetServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GoogleCloudApigeeV1TargetServer) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServer) GetSSLInfo() *GoogleCloudApigeeV1TlsInfo {
	if x != nil {
		return x.SSLInfo
	}
	return nil
}

type GoogleCloudApigeeV1TargetServerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the target server is enabled. An empty/omitted value for this field should be interpreted as true.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Host name of the target server.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Target server revision name in the following format: `organizations/{org}/environments/{env}/targetservers/{targetserver}/revisions/{rev}`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Port number for the target server.
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// The protocol used by this target server.
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// TLS settings for the target server.
	TlsInfo *GoogleCloudApigeeV1TlsInfoConfig `protobuf:"bytes,6,opt,name=tls_info,json=tlsInfo,proto3" json:"tls_info,omitempty"`
}

func (x *GoogleCloudApigeeV1TargetServerConfig) Reset() {
	*x = GoogleCloudApigeeV1TargetServerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TargetServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TargetServerConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TargetServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TargetServerConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TargetServerConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{277}
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *GoogleCloudApigeeV1TargetServerConfig) GetTlsInfo() *GoogleCloudApigeeV1TlsInfoConfig {
	if x != nil {
		return x.TlsInfo
	}
	return nil
}

// The response for TestDatastore
type GoogleCloudApigeeV1TestDatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Error message of test connection failure
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Output only. It could be `completed` or `failed`
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GoogleCloudApigeeV1TestDatastoreResponse) Reset() {
	*x = GoogleCloudApigeeV1TestDatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TestDatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TestDatastoreResponse) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TestDatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TestDatastoreResponse.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TestDatastoreResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{278}
}

func (x *GoogleCloudApigeeV1TestDatastoreResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GoogleCloudApigeeV1TestDatastoreResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// TLS configuration information for virtual hosts and TargetServers.
type GoogleCloudApigeeV1TlsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SSL/TLS cipher suites to be used. For programmable proxies, it must be one of the cipher suite names listed in: http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites. For configurable proxies, it must follow the configuration specified in: https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Cipher-suite-configuration. This setting has no effect for configurable proxies when negotiating TLS 1.3.
	Ciphers []string `protobuf:"bytes,1,rep,name=ciphers,proto3" json:"ciphers,omitempty"`
	// Optional. Enables two-way TLS.
	ClientAuthEnabled bool `protobuf:"varint,2,opt,name=client_auth_enabled,json=clientAuthEnabled,proto3" json:"client_auth_enabled,omitempty"`
	// The TLS Common Name of the certificate.
	CommonName *GoogleCloudApigeeV1TlsInfoCommonName `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Required. Enables TLS. If false, neither one-way nor two-way TLS will be enabled.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// TLS is strictly enforced.
	Enforce bool `protobuf:"varint,5,opt,name=enforce,proto3" json:"enforce,omitempty"`
	// If true, Edge ignores TLS certificate errors. Valid when configuring TLS for target servers and target endpoints, and when configuring virtual hosts that use 2-way TLS. When used with a target endpoint/target server, if the backend system uses SNI and returns a cert with a subject Distinguished Name (DN) that does not match the hostname, there is no way to ignore the error and the connection fails.
	IgnoreValidationErrors bool `protobuf:"varint,6,opt,name=ignore_validation_errors,json=ignoreValidationErrors,proto3" json:"ignore_validation_errors,omitempty"`
	// Required if `client_auth_enabled` is true. The resource ID for the alias containing the private key and cert.
	KeyAlias string `protobuf:"bytes,7,opt,name=key_alias,json=keyAlias,proto3" json:"key_alias,omitempty"`
	// Required if `client_auth_enabled` is true. The resource ID of the keystore.
	KeyStore string `protobuf:"bytes,8,opt,name=key_store,json=keyStore,proto3" json:"key_store,omitempty"`
	// The TLS versioins to be used.
	Protocols []string `protobuf:"bytes,9,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// The resource ID of the truststore.
	TrustStore string `protobuf:"bytes,10,opt,name=trust_store,json=trustStore,proto3" json:"trust_store,omitempty"`
}

func (x *GoogleCloudApigeeV1TlsInfo) Reset() {
	*x = GoogleCloudApigeeV1TlsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TlsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TlsInfo) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TlsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TlsInfo.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TlsInfo) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{279}
}

func (x *GoogleCloudApigeeV1TlsInfo) GetCiphers() []string {
	if x != nil {
		return x.Ciphers
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfo) GetClientAuthEnabled() bool {
	if x != nil {
		return x.ClientAuthEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfo) GetCommonName() *GoogleCloudApigeeV1TlsInfoCommonName {
	if x != nil {
		return x.CommonName
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfo) GetEnforce() bool {
	if x != nil {
		return x.Enforce
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfo) GetIgnoreValidationErrors() bool {
	if x != nil {
		return x.IgnoreValidationErrors
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfo) GetKeyAlias() string {
	if x != nil {
		return x.KeyAlias
	}
	return ""
}

func (x *GoogleCloudApigeeV1TlsInfo) GetKeyStore() string {
	if x != nil {
		return x.KeyStore
	}
	return ""
}

func (x *GoogleCloudApigeeV1TlsInfo) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfo) GetTrustStore() string {
	if x != nil {
		return x.TrustStore
	}
	return ""
}

type GoogleCloudApigeeV1TlsInfoCommonName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TLS Common Name string of the certificate.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Indicates whether the cert should be matched against as a wildcard cert.
	WildcardMatch bool `protobuf:"varint,2,opt,name=wildcard_match,json=wildcardMatch,proto3" json:"wildcard_match,omitempty"`
}

func (x *GoogleCloudApigeeV1TlsInfoCommonName) Reset() {
	*x = GoogleCloudApigeeV1TlsInfoCommonName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TlsInfoCommonName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TlsInfoCommonName) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TlsInfoCommonName) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TlsInfoCommonName.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TlsInfoCommonName) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{280}
}

func (x *GoogleCloudApigeeV1TlsInfoCommonName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GoogleCloudApigeeV1TlsInfoCommonName) GetWildcardMatch() bool {
	if x != nil {
		return x.WildcardMatch
	}
	return false
}

type GoogleCloudApigeeV1TlsInfoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ciphers that are granted access.
	Ciphers []string `protobuf:"bytes,1,rep,name=ciphers,proto3" json:"ciphers,omitempty"`
	// Flag that specifies whether client-side authentication is enabled for the target server. Enables two-way TLS.
	ClientAuthEnabled bool `protobuf:"varint,2,opt,name=client_auth_enabled,json=clientAuthEnabled,proto3" json:"client_auth_enabled,omitempty"`
	// Common name to validate the target server against.
	CommonName *GoogleCloudApigeeV1CommonNameConfig `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Flag that specifies whether one-way TLS is enabled. Set to `true` to enable one-way TLS.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Flag that enforces TLS settings
	Enforce bool `protobuf:"varint,5,opt,name=enforce,proto3" json:"enforce,omitempty"`
	// Flag that specifies whether to ignore TLS certificate validation errors. Set to `true` to ignore errors.
	IgnoreValidationErrors bool `protobuf:"varint,6,opt,name=ignore_validation_errors,json=ignoreValidationErrors,proto3" json:"ignore_validation_errors,omitempty"`
	// Name of the alias used for client-side authentication in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}/aliases/{alias}`
	KeyAlias string `protobuf:"bytes,7,opt,name=key_alias,json=keyAlias,proto3" json:"key_alias,omitempty"`
	// Reference name and alias pair to use for client-side authentication.
	KeyAliasReference *GoogleCloudApigeeV1KeyAliasReference `protobuf:"bytes,8,opt,name=key_alias_reference,json=keyAliasReference,proto3" json:"key_alias_reference,omitempty"`
	// List of TLS protocols that are granted access.
	Protocols []string `protobuf:"bytes,9,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// Name of the keystore or keystore reference containing trusted certificates for the server in the following format: `organizations/{org}/environments/{env}/keystores/{keystore}` or `organizations/{org}/environments/{env}/references/{reference}`
	TrustStore string `protobuf:"bytes,10,opt,name=trust_store,json=trustStore,proto3" json:"trust_store,omitempty"`
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) Reset() {
	*x = GoogleCloudApigeeV1TlsInfoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TlsInfoConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TlsInfoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TlsInfoConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TlsInfoConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{281}
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetCiphers() []string {
	if x != nil {
		return x.Ciphers
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetClientAuthEnabled() bool {
	if x != nil {
		return x.ClientAuthEnabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetCommonName() *GoogleCloudApigeeV1CommonNameConfig {
	if x != nil {
		return x.CommonName
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetEnforce() bool {
	if x != nil {
		return x.Enforce
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetIgnoreValidationErrors() bool {
	if x != nil {
		return x.IgnoreValidationErrors
	}
	return false
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetKeyAlias() string {
	if x != nil {
		return x.KeyAlias
	}
	return ""
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetKeyAliasReference() *GoogleCloudApigeeV1KeyAliasReference {
	if x != nil {
		return x.KeyAliasReference
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *GoogleCloudApigeeV1TlsInfoConfig) GetTrustStore() string {
	if x != nil {
		return x.TrustStore
	}
	return ""
}

// TraceConfig defines the configurations in an environment of distributed trace.
type GoogleCloudApigeeV1TraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Endpoint of the exporter.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Required. Exporter that is used to view the distributed trace captured using OpenCensus. An exporter sends traces to any backend that is capable of consuming them. Recorded spans can be exported by registered exporters.
	Exporter string `protobuf:"bytes,2,opt,name=exporter,proto3" json:"exporter,omitempty"`
	// Distributed trace configuration for all API proxies in an environment. You can also override the configuration for a specific API proxy using the distributed trace configuration overrides API.
	SamplingConfig *GoogleCloudApigeeV1TraceSamplingConfig `protobuf:"bytes,3,opt,name=sampling_config,json=samplingConfig,proto3" json:"sampling_config,omitempty"`
}

func (x *GoogleCloudApigeeV1TraceConfig) Reset() {
	*x = GoogleCloudApigeeV1TraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TraceConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TraceConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TraceConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{282}
}

func (x *GoogleCloudApigeeV1TraceConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GoogleCloudApigeeV1TraceConfig) GetExporter() string {
	if x != nil {
		return x.Exporter
	}
	return ""
}

func (x *GoogleCloudApigeeV1TraceConfig) GetSamplingConfig() *GoogleCloudApigeeV1TraceSamplingConfig {
	if x != nil {
		return x.SamplingConfig
	}
	return nil
}

// A representation of a configuration override.
type GoogleCloudApigeeV1TraceConfigOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the API proxy that will have its trace configuration overridden.
	ApiProxy string `protobuf:"bytes,1,opt,name=api_proxy,json=apiProxy,proto3" json:"api_proxy,omitempty"`
	// ID of the trace configuration override specified as a system-generated UUID.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Trace configuration to override.
	SamplingConfig *GoogleCloudApigeeV1TraceSamplingConfig `protobuf:"bytes,3,opt,name=sampling_config,json=samplingConfig,proto3" json:"sampling_config,omitempty"`
}

func (x *GoogleCloudApigeeV1TraceConfigOverride) Reset() {
	*x = GoogleCloudApigeeV1TraceConfigOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TraceConfigOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TraceConfigOverride) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TraceConfigOverride) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TraceConfigOverride.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TraceConfigOverride) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{283}
}

func (x *GoogleCloudApigeeV1TraceConfigOverride) GetApiProxy() string {
	if x != nil {
		return x.ApiProxy
	}
	return ""
}

func (x *GoogleCloudApigeeV1TraceConfigOverride) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoogleCloudApigeeV1TraceConfigOverride) GetSamplingConfig() *GoogleCloudApigeeV1TraceSamplingConfig {
	if x != nil {
		return x.SamplingConfig
	}
	return nil
}

// TraceSamplingConfig represents the detail settings of distributed tracing. Only the fields that are defined in the distributed trace configuration can be overridden using the distribute trace configuration override APIs.
type GoogleCloudApigeeV1TraceSamplingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sampler of distributed tracing. OFF is the default value.
	Sampler string `protobuf:"bytes,1,opt,name=sampler,proto3" json:"sampler,omitempty"`
	// Field sampling rate. This value is only applicable when using the PROBABILITY sampler. The supported values are > 0 and <= 0.5.
	SamplingRate float32 `protobuf:"fixed32,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
}

func (x *GoogleCloudApigeeV1TraceSamplingConfig) Reset() {
	*x = GoogleCloudApigeeV1TraceSamplingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1TraceSamplingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1TraceSamplingConfig) ProtoMessage() {}

func (x *GoogleCloudApigeeV1TraceSamplingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1TraceSamplingConfig.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1TraceSamplingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{284}
}

func (x *GoogleCloudApigeeV1TraceSamplingConfig) GetSampler() string {
	if x != nil {
		return x.Sampler
	}
	return ""
}

func (x *GoogleCloudApigeeV1TraceSamplingConfig) GetSamplingRate() float32 {
	if x != nil {
		return x.SamplingRate
	}
	return 0
}

// Request for UpdateAppGroupAppKey
type GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Approve or revoke the consumer key by setting this value to `approve` or `revoke` respectively. The `Content-Type` header, if set, must be set to `application/octet-stream`, with empty body.
	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	// The list of API products that will be associated with the credential. This list will be appended to the existing list of associated API Products for this App Key. Duplicates will be ignored.
	ApiProducts []string `protobuf:"bytes,2,rep,name=api_products,json=apiProducts,proto3" json:"api_products,omitempty"`
	// The new AppGroupKey to be amended. Note that the status can be updated only via action.
	AppGroupAppKey *GoogleCloudApigeeV1AppGroupAppKey `protobuf:"bytes,3,opt,name=app_group_app_key,json=appGroupAppKey,proto3" json:"app_group_app_key,omitempty"`
}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) Reset() {
	*x = GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{285}
}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) GetApiProducts() []string {
	if x != nil {
		return x.ApiProducts
	}
	return nil
}

func (x *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest) GetAppGroupAppKey() *GoogleCloudApigeeV1AppGroupAppKey {
	if x != nil {
		return x.AppGroupAppKey
	}
	return nil
}

// Details on why a resource update failed in the runtime.
type GoogleCloudApigeeV1UpdateError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// User-friendly error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The sub resource specific to this error (e.g. a proxy deployed within the EnvironmentConfig). If empty the error refers to the top level resource.
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// A string that uniquely identifies the type of error. This provides a more reliable means to deduplicate errors across revisions and instances.
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleCloudApigeeV1UpdateError) Reset() {
	*x = GoogleCloudApigeeV1UpdateError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1UpdateError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1UpdateError) ProtoMessage() {}

func (x *GoogleCloudApigeeV1UpdateError) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1UpdateError.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1UpdateError) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{286}
}

func (x *GoogleCloudApigeeV1UpdateError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GoogleCloudApigeeV1UpdateError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoogleCloudApigeeV1UpdateError) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *GoogleCloudApigeeV1UpdateError) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Request for UpdateSecurityIncident.
type GoogleCloudApigeeV1UpdateSecurityIncidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The security incident to update. Must contain all existing populated fields of the current incident.
	SecurityIncident *GoogleCloudApigeeV1SecurityIncident `protobuf:"bytes,1,opt,name=security_incident,json=securityIncident,proto3" json:"security_incident,omitempty"`
	// Required. The list of fields to update. Allowed fields are: LINT.IfChange(allowed_update_fields_comment) - observability LINT.ThenChange()
	UpdateMask string `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *GoogleCloudApigeeV1UpdateSecurityIncidentRequest) Reset() {
	*x = GoogleCloudApigeeV1UpdateSecurityIncidentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleCloudApigeeV1UpdateSecurityIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCloudApigeeV1UpdateSecurityIncidentRequest) ProtoMessage() {}

func (x *GoogleCloudApigeeV1UpdateSecurityIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCloudApigeeV1UpdateSecurityIncidentRequest.ProtoReflect.Descriptor instead.
func (*GoogleCloudApigeeV1UpdateSecurityIncidentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{287}
}

func (x *GoogleCloudApigeeV1UpdateSecurityIncidentRequest) GetSecurityIncident() *GoogleCloudApigeeV1SecurityIncident {
	if x != nil {
		return x.SecurityIncident
	}
	return nil
}

func (x *GoogleCloudApigeeV1UpdateSecurityIncidentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration for logging of each type of permission.
	AuditLogConfigs []*GoogleIamV1AuditLogConfig `protobuf:"bytes,1,rep,name=audit_log_configs,json=auditLogConfigs,proto3" json:"audit_log_configs,omitempty"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GoogleIamV1AuditConfig) Reset() {
	*x = GoogleIamV1AuditConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{288}
}

func (x *GoogleIamV1AuditConfig) GetAuditLogConfigs() []*GoogleIamV1AuditLogConfig {
	if x != nil {
		return x.AuditLogConfigs
	}
	return nil
}

func (x *GoogleIamV1AuditConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `protobuf:"bytes,1,rep,name=exempted_members,json=exemptedMembers,proto3" json:"exempted_members,omitempty"`
	// The log type that this config enables.
	LogType string `protobuf:"bytes,2,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
}

func (x *GoogleIamV1AuditLogConfig) Reset() {
	*x = GoogleIamV1AuditLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1AuditLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1AuditLogConfig) ProtoMessage() {}

func (x *GoogleIamV1AuditLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1AuditLogConfig.ProtoReflect.Descriptor instead.
func (*GoogleIamV1AuditLogConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{289}
}

func (x *GoogleIamV1AuditLogConfig) GetExemptedMembers() []string {
	if x != nil {
		return x.ExemptedMembers
	}
	return nil
}

func (x *GoogleIamV1AuditLogConfig) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *GoogleTypeExpr `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GoogleIamV1Binding) Reset() {
	*x = GoogleIamV1Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Binding) ProtoMessage() {}

func (x *GoogleIamV1Binding) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Binding.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Binding) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{290}
}

func (x *GoogleIamV1Binding) GetCondition() *GoogleTypeExpr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *GoogleIamV1Binding) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GoogleIamV1Binding) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type GoogleIamV1Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []*GoogleIamV1AuditConfig `protobuf:"bytes,1,rep,name=audit_configs,json=auditConfigs,proto3" json:"audit_configs,omitempty"`
	// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
	Bindings []*GoogleIamV1Binding `protobuf:"bytes,2,rep,name=bindings,proto3" json:"bindings,omitempty"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag []byte `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GoogleIamV1Policy) Reset() {
	*x = GoogleIamV1Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1Policy) ProtoMessage() {}

func (x *GoogleIamV1Policy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1Policy.ProtoReflect.Descriptor instead.
func (*GoogleIamV1Policy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{291}
}

func (x *GoogleIamV1Policy) GetAuditConfigs() []*GoogleIamV1AuditConfig {
	if x != nil {
		return x.AuditConfigs
	}
	return nil
}

func (x *GoogleIamV1Policy) GetBindings() []*GoogleIamV1Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *GoogleIamV1Policy) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *GoogleIamV1Policy) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Request message for `SetIamPolicy` method.
type GoogleIamV1SetIamPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.
	Policy *GoogleIamV1Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
	UpdateMask string `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *GoogleIamV1SetIamPolicyRequest) Reset() {
	*x = GoogleIamV1SetIamPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1SetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1SetIamPolicyRequest) ProtoMessage() {}

func (x *GoogleIamV1SetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1SetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1SetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{292}
}

func (x *GoogleIamV1SetIamPolicyRequest) GetPolicy() *GoogleIamV1Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *GoogleIamV1SetIamPolicyRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

// Request message for `TestIamPermissions` method.
type GoogleIamV1TestIamPermissionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsRequest) Reset() {
	*x = GoogleIamV1TestIamPermissionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsRequest) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsRequest.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{293}
}

func (x *GoogleIamV1TestIamPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// Response message for `TestIamPermissions` method.
type GoogleIamV1TestIamPermissionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
	Permissions []string `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GoogleIamV1TestIamPermissionsResponse) Reset() {
	*x = GoogleIamV1TestIamPermissionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleIamV1TestIamPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleIamV1TestIamPermissionsResponse) ProtoMessage() {}

func (x *GoogleIamV1TestIamPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleIamV1TestIamPermissionsResponse.ProtoReflect.Descriptor instead.
func (*GoogleIamV1TestIamPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{294}
}

func (x *GoogleIamV1TestIamPermissionsResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// The response message for Operations.ListOperations.
type GoogleLongrunningListOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The standard List next-page token.
	NextPageToken string `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// A list of operations that matches the specified filter in the request.
	Operations []*longrunningpb.Operation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *GoogleLongrunningListOperationsResponse) Reset() {
	*x = GoogleLongrunningListOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleLongrunningListOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleLongrunningListOperationsResponse) ProtoMessage() {}

func (x *GoogleLongrunningListOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleLongrunningListOperationsResponse.ProtoReflect.Descriptor instead.
func (*GoogleLongrunningListOperationsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{295}
}

func (x *GoogleLongrunningListOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GoogleLongrunningListOperationsResponse) GetOperations() []*longrunningpb.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
type GoogleProtobufEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoogleProtobufEmpty) Reset() {
	*x = GoogleProtobufEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleProtobufEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleProtobufEmpty) ProtoMessage() {}

func (x *GoogleProtobufEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleProtobufEmpty.ProtoReflect.Descriptor instead.
func (*GoogleProtobufEmpty) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{296}
}

// Describes what preconditions have failed. For example, if an RPC failed because it required the Terms of Service to be acknowledged, it could list the terms of service violation in the PreconditionFailure message.
type GoogleRpcPreconditionFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes all precondition violations.
	Violations []*GoogleRpcPreconditionFailureViolation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (x *GoogleRpcPreconditionFailure) Reset() {
	*x = GoogleRpcPreconditionFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleRpcPreconditionFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleRpcPreconditionFailure) ProtoMessage() {}

func (x *GoogleRpcPreconditionFailure) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleRpcPreconditionFailure.ProtoReflect.Descriptor instead.
func (*GoogleRpcPreconditionFailure) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{297}
}

func (x *GoogleRpcPreconditionFailure) GetViolations() []*GoogleRpcPreconditionFailureViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// A message type used to describe a single precondition failure.
type GoogleRpcPreconditionFailureViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A description of how the precondition failed. Developers can use this description to understand how to fix the failure. For example: "Terms of service not accepted".
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The subject, relative to the type, that failed. For example, "google.com/cloud" relative to the "TOS" type would indicate which terms of service is being referenced.
	Subject string `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	// The type of PreconditionFailure. We recommend using a service-specific enum type to define the supported precondition violation subjects. For example, "TOS" for "Terms of Service violation".
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GoogleRpcPreconditionFailureViolation) Reset() {
	*x = GoogleRpcPreconditionFailureViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleRpcPreconditionFailureViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleRpcPreconditionFailureViolation) ProtoMessage() {}

func (x *GoogleRpcPreconditionFailureViolation) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleRpcPreconditionFailureViolation.ProtoReflect.Descriptor instead.
func (*GoogleRpcPreconditionFailureViolation) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{298}
}

func (x *GoogleRpcPreconditionFailureViolation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleRpcPreconditionFailureViolation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GoogleRpcPreconditionFailureViolation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type GoogleRpcStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status code, which should be an enum value of google.rpc.Code.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []*any1.Any `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GoogleRpcStatus) Reset() {
	*x = GoogleRpcStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleRpcStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleRpcStatus) ProtoMessage() {}

func (x *GoogleRpcStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleRpcStatus.ProtoReflect.Descriptor instead.
func (*GoogleRpcStatus) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{299}
}

func (x *GoogleRpcStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GoogleRpcStatus) GetDetails() []*any1.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GoogleRpcStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type GoogleTypeExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GoogleTypeExpr) Reset() {
	*x = GoogleTypeExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleTypeExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleTypeExpr) ProtoMessage() {}

func (x *GoogleTypeExpr) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleTypeExpr.ProtoReflect.Descriptor instead.
func (*GoogleTypeExpr) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{300}
}

func (x *GoogleTypeExpr) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GoogleTypeExpr) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *GoogleTypeExpr) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GoogleTypeExpr) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
type GoogleTypeInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
	EndTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *GoogleTypeInterval) Reset() {
	*x = GoogleTypeInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleTypeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleTypeInterval) ProtoMessage() {}

func (x *GoogleTypeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleTypeInterval.ProtoReflect.Descriptor instead.
func (*GoogleTypeInterval) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{301}
}

func (x *GoogleTypeInterval) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GoogleTypeInterval) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Represents an amount of money with its currency type.
type GoogleTypeMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The three-letter currency code defined in ISO 4217.
	CurrencyCode string `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units int64 `protobuf:"varint,3,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *GoogleTypeMoney) Reset() {
	*x = GoogleTypeMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoogleTypeMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleTypeMoney) ProtoMessage() {}

func (x *GoogleTypeMoney) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleTypeMoney.ProtoReflect.Descriptor instead.
func (*GoogleTypeMoney) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{302}
}

func (x *GoogleTypeMoney) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GoogleTypeMoney) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

func (x *GoogleTypeMoney) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

type ListHybridIssuersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListHybridIssuersRequest) Reset() {
	*x = ListHybridIssuersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHybridIssuersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHybridIssuersRequest) ProtoMessage() {}

func (x *ListHybridIssuersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHybridIssuersRequest.ProtoReflect.Descriptor instead.
func (*ListHybridIssuersRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{303}
}

func (x *ListHybridIssuersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent       string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Organization *GoogleCloudApigeeV1Organization `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *CreateOrganizationRequest) Reset() {
	*x = CreateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationRequest) ProtoMessage() {}

func (x *CreateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{304}
}

func (x *CreateOrganizationRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type DeleteOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Retention string `protobuf:"bytes,2,opt,name=retention,proto3" json:"retention,omitempty"`
}

func (x *DeleteOrganizationRequest) Reset() {
	*x = DeleteOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationRequest) ProtoMessage() {}

func (x *DeleteOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{305}
}

func (x *DeleteOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOrganizationRequest) GetRetention() string {
	if x != nil {
		return x.Retention
	}
	return ""
}

type GetOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{306}
}

func (x *GetOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetControlPlaneAccessOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetControlPlaneAccessOrganizationRequest) Reset() {
	*x = GetControlPlaneAccessOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlPlaneAccessOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlPlaneAccessOrganizationRequest) ProtoMessage() {}

func (x *GetControlPlaneAccessOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlPlaneAccessOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetControlPlaneAccessOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{307}
}

func (x *GetControlPlaneAccessOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDeployedIngressConfigOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	View string `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *GetDeployedIngressConfigOrganizationRequest) Reset() {
	*x = GetDeployedIngressConfigOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeployedIngressConfigOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeployedIngressConfigOrganizationRequest) ProtoMessage() {}

func (x *GetDeployedIngressConfigOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeployedIngressConfigOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetDeployedIngressConfigOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{308}
}

func (x *GetDeployedIngressConfigOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDeployedIngressConfigOrganizationRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type GetProjectMappingOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectMappingOrganizationRequest) Reset() {
	*x = GetProjectMappingOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectMappingOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectMappingOrganizationRequest) ProtoMessage() {}

func (x *GetProjectMappingOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectMappingOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetProjectMappingOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{309}
}

func (x *GetProjectMappingOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRuntimeConfigOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRuntimeConfigOrganizationRequest) Reset() {
	*x = GetRuntimeConfigOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuntimeConfigOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuntimeConfigOrganizationRequest) ProtoMessage() {}

func (x *GetRuntimeConfigOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuntimeConfigOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetRuntimeConfigOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{310}
}

func (x *GetRuntimeConfigOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSecuritySettingsOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSecuritySettingsOrganizationRequest) Reset() {
	*x = GetSecuritySettingsOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecuritySettingsOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecuritySettingsOrganizationRequest) ProtoMessage() {}

func (x *GetSecuritySettingsOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecuritySettingsOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetSecuritySettingsOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{311}
}

func (x *GetSecuritySettingsOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSyncAuthorizationOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organization *GoogleCloudApigeeV1GetSyncAuthorizationRequest `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *GetSyncAuthorizationOrganizationRequest) Reset() {
	*x = GetSyncAuthorizationOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSyncAuthorizationOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncAuthorizationOrganizationRequest) ProtoMessage() {}

func (x *GetSyncAuthorizationOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncAuthorizationOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetSyncAuthorizationOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{312}
}

func (x *GetSyncAuthorizationOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSyncAuthorizationOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1GetSyncAuthorizationRequest {
	if x != nil {
		return x.Organization
	}
	return nil
}

type ListOrganizationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsRequest) Reset() {
	*x = ListOrganizationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsRequest) ProtoMessage() {}

func (x *ListOrganizationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{313}
}

func (x *ListOrganizationsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type SetAddonsOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org          string                               `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	Organization *GoogleCloudApigeeV1SetAddonsRequest `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *SetAddonsOrganizationRequest) Reset() {
	*x = SetAddonsOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAddonsOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAddonsOrganizationRequest) ProtoMessage() {}

func (x *SetAddonsOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAddonsOrganizationRequest.ProtoReflect.Descriptor instead.
func (*SetAddonsOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{314}
}

func (x *SetAddonsOrganizationRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *SetAddonsOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1SetAddonsRequest {
	if x != nil {
		return x.Organization
	}
	return nil
}

type SetSyncAuthorizationOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organization *GoogleCloudApigeeV1SyncAuthorization `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *SetSyncAuthorizationOrganizationRequest) Reset() {
	*x = SetSyncAuthorizationOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSyncAuthorizationOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSyncAuthorizationOrganizationRequest) ProtoMessage() {}

func (x *SetSyncAuthorizationOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSyncAuthorizationOrganizationRequest.ProtoReflect.Descriptor instead.
func (*SetSyncAuthorizationOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{315}
}

func (x *SetSyncAuthorizationOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetSyncAuthorizationOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1SyncAuthorization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Organization *GoogleCloudApigeeV1Organization `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UpdateOrganizationRequest) Reset() {
	*x = UpdateOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationRequest) ProtoMessage() {}

func (x *UpdateOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{316}
}

func (x *UpdateOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateControlPlaneAccessOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask   string                                 `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Organization *GoogleCloudApigeeV1ControlPlaneAccess `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UpdateControlPlaneAccessOrganizationRequest) Reset() {
	*x = UpdateControlPlaneAccessOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateControlPlaneAccessOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateControlPlaneAccessOrganizationRequest) ProtoMessage() {}

func (x *UpdateControlPlaneAccessOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateControlPlaneAccessOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateControlPlaneAccessOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{317}
}

func (x *UpdateControlPlaneAccessOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateControlPlaneAccessOrganizationRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *UpdateControlPlaneAccessOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1ControlPlaneAccess {
	if x != nil {
		return x.Organization
	}
	return nil
}

type UpdateSecuritySettingsOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask   string                               `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Organization *GoogleCloudApigeeV1SecuritySettings `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UpdateSecuritySettingsOrganizationRequest) Reset() {
	*x = UpdateSecuritySettingsOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecuritySettingsOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecuritySettingsOrganizationRequest) ProtoMessage() {}

func (x *UpdateSecuritySettingsOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecuritySettingsOrganizationRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecuritySettingsOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{318}
}

func (x *UpdateSecuritySettingsOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSecuritySettingsOrganizationRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *UpdateSecuritySettingsOrganizationRequest) GetOrganization() *GoogleCloudApigeeV1SecuritySettings {
	if x != nil {
		return x.Organization
	}
	return nil
}

type CreateOrganizationsAnalyticsDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                          string                        `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsAnalyticsDatastore *GoogleCloudApigeeV1Datastore `protobuf:"bytes,2,opt,name=organizations_analytics_datastore,json=organizationsAnalyticsDatastore,proto3" json:"organizations_analytics_datastore,omitempty"`
}

func (x *CreateOrganizationsAnalyticsDatastoreRequest) Reset() {
	*x = CreateOrganizationsAnalyticsDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsAnalyticsDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsAnalyticsDatastoreRequest) ProtoMessage() {}

func (x *CreateOrganizationsAnalyticsDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsAnalyticsDatastoreRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsAnalyticsDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{319}
}

func (x *CreateOrganizationsAnalyticsDatastoreRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsAnalyticsDatastoreRequest) GetOrganizationsAnalyticsDatastore() *GoogleCloudApigeeV1Datastore {
	if x != nil {
		return x.OrganizationsAnalyticsDatastore
	}
	return nil
}

type DeleteOrganizationsAnalyticsDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsAnalyticsDatastoreRequest) Reset() {
	*x = DeleteOrganizationsAnalyticsDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsAnalyticsDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsAnalyticsDatastoreRequest) ProtoMessage() {}

func (x *DeleteOrganizationsAnalyticsDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsAnalyticsDatastoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsAnalyticsDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{320}
}

func (x *DeleteOrganizationsAnalyticsDatastoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsAnalyticsDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsAnalyticsDatastoreRequest) Reset() {
	*x = GetOrganizationsAnalyticsDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsAnalyticsDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsAnalyticsDatastoreRequest) ProtoMessage() {}

func (x *GetOrganizationsAnalyticsDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsAnalyticsDatastoreRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsAnalyticsDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{321}
}

func (x *GetOrganizationsAnalyticsDatastoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsAnalyticsDatastoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	TargetType string `protobuf:"bytes,2,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
}

func (x *ListOrganizationsAnalyticsDatastoresRequest) Reset() {
	*x = ListOrganizationsAnalyticsDatastoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsAnalyticsDatastoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsAnalyticsDatastoresRequest) ProtoMessage() {}

func (x *ListOrganizationsAnalyticsDatastoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsAnalyticsDatastoresRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsAnalyticsDatastoresRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{322}
}

func (x *ListOrganizationsAnalyticsDatastoresRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsAnalyticsDatastoresRequest) GetTargetType() string {
	if x != nil {
		return x.TargetType
	}
	return ""
}

type TestOrganizationsAnalyticsDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                          string                        `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsAnalyticsDatastore *GoogleCloudApigeeV1Datastore `protobuf:"bytes,2,opt,name=organizations_analytics_datastore,json=organizationsAnalyticsDatastore,proto3" json:"organizations_analytics_datastore,omitempty"`
}

func (x *TestOrganizationsAnalyticsDatastoreRequest) Reset() {
	*x = TestOrganizationsAnalyticsDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestOrganizationsAnalyticsDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOrganizationsAnalyticsDatastoreRequest) ProtoMessage() {}

func (x *TestOrganizationsAnalyticsDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOrganizationsAnalyticsDatastoreRequest.ProtoReflect.Descriptor instead.
func (*TestOrganizationsAnalyticsDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{323}
}

func (x *TestOrganizationsAnalyticsDatastoreRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *TestOrganizationsAnalyticsDatastoreRequest) GetOrganizationsAnalyticsDatastore() *GoogleCloudApigeeV1Datastore {
	if x != nil {
		return x.OrganizationsAnalyticsDatastore
	}
	return nil
}

type UpdateOrganizationsAnalyticsDatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                            string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsAnalyticsDatastore *GoogleCloudApigeeV1Datastore `protobuf:"bytes,2,opt,name=organizations_analytics_datastore,json=organizationsAnalyticsDatastore,proto3" json:"organizations_analytics_datastore,omitempty"`
}

func (x *UpdateOrganizationsAnalyticsDatastoreRequest) Reset() {
	*x = UpdateOrganizationsAnalyticsDatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsAnalyticsDatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsAnalyticsDatastoreRequest) ProtoMessage() {}

func (x *UpdateOrganizationsAnalyticsDatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsAnalyticsDatastoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsAnalyticsDatastoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{324}
}

func (x *UpdateOrganizationsAnalyticsDatastoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsAnalyticsDatastoreRequest) GetOrganizationsAnalyticsDatastore() *GoogleCloudApigeeV1Datastore {
	if x != nil {
		return x.OrganizationsAnalyticsDatastore
	}
	return nil
}

type AttributesOrganizationsApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsApiproduct *GoogleCloudApigeeV1Attributes `protobuf:"bytes,2,opt,name=organizations_apiproduct,json=organizationsApiproduct,proto3" json:"organizations_apiproduct,omitempty"`
}

func (x *AttributesOrganizationsApiproductRequest) Reset() {
	*x = AttributesOrganizationsApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributesOrganizationsApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributesOrganizationsApiproductRequest) ProtoMessage() {}

func (x *AttributesOrganizationsApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributesOrganizationsApiproductRequest.ProtoReflect.Descriptor instead.
func (*AttributesOrganizationsApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{325}
}

func (x *AttributesOrganizationsApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributesOrganizationsApiproductRequest) GetOrganizationsApiproduct() *GoogleCloudApigeeV1Attributes {
	if x != nil {
		return x.OrganizationsApiproduct
	}
	return nil
}

type CreateOrganizationsApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                  string                         `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsApiproduct *GoogleCloudApigeeV1ApiProduct `protobuf:"bytes,2,opt,name=organizations_apiproduct,json=organizationsApiproduct,proto3" json:"organizations_apiproduct,omitempty"`
}

func (x *CreateOrganizationsApiproductRequest) Reset() {
	*x = CreateOrganizationsApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsApiproductRequest) ProtoMessage() {}

func (x *CreateOrganizationsApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsApiproductRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{326}
}

func (x *CreateOrganizationsApiproductRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsApiproductRequest) GetOrganizationsApiproduct() *GoogleCloudApigeeV1ApiProduct {
	if x != nil {
		return x.OrganizationsApiproduct
	}
	return nil
}

type DeleteOrganizationsApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApiproductRequest) Reset() {
	*x = DeleteOrganizationsApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApiproductRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApiproductRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{327}
}

func (x *DeleteOrganizationsApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApiproductRequest) Reset() {
	*x = GetOrganizationsApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApiproductRequest) ProtoMessage() {}

func (x *GetOrganizationsApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApiproductRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{328}
}

func (x *GetOrganizationsApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsApiproductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributename  string `protobuf:"bytes,1,opt,name=attributename,proto3" json:"attributename,omitempty"`
	Attributevalue string `protobuf:"bytes,2,opt,name=attributevalue,proto3" json:"attributevalue,omitempty"`
	Count          string `protobuf:"bytes,3,opt,name=count,proto3" json:"count,omitempty"`
	Expand         bool   `protobuf:"varint,4,opt,name=expand,proto3" json:"expand,omitempty"`
	Parent         string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	StartKey       string `protobuf:"bytes,6,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
}

func (x *ListOrganizationsApiproductsRequest) Reset() {
	*x = ListOrganizationsApiproductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApiproductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApiproductsRequest) ProtoMessage() {}

func (x *ListOrganizationsApiproductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApiproductsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApiproductsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{329}
}

func (x *ListOrganizationsApiproductsRequest) GetAttributename() string {
	if x != nil {
		return x.Attributename
	}
	return ""
}

func (x *ListOrganizationsApiproductsRequest) GetAttributevalue() string {
	if x != nil {
		return x.Attributevalue
	}
	return ""
}

func (x *ListOrganizationsApiproductsRequest) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *ListOrganizationsApiproductsRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsApiproductsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsApiproductsRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

type UpdateOrganizationsApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsApiproduct *GoogleCloudApigeeV1ApiProduct `protobuf:"bytes,2,opt,name=organizations_apiproduct,json=organizationsApiproduct,proto3" json:"organizations_apiproduct,omitempty"`
}

func (x *UpdateOrganizationsApiproductRequest) Reset() {
	*x = UpdateOrganizationsApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsApiproductRequest) ProtoMessage() {}

func (x *UpdateOrganizationsApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsApiproductRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{330}
}

func (x *UpdateOrganizationsApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsApiproductRequest) GetOrganizationsApiproduct() *GoogleCloudApigeeV1ApiProduct {
	if x != nil {
		return x.OrganizationsApiproduct
	}
	return nil
}

type DeleteOrganizationsApiproductsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApiproductsAttributeRequest) Reset() {
	*x = DeleteOrganizationsApiproductsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApiproductsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApiproductsAttributeRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApiproductsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApiproductsAttributeRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApiproductsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{331}
}

func (x *DeleteOrganizationsApiproductsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApiproductsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApiproductsAttributeRequest) Reset() {
	*x = GetOrganizationsApiproductsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApiproductsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApiproductsAttributeRequest) ProtoMessage() {}

func (x *GetOrganizationsApiproductsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApiproductsAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApiproductsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{332}
}

func (x *GetOrganizationsApiproductsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsApiproductsAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsApiproductsAttributesRequest) Reset() {
	*x = ListOrganizationsApiproductsAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApiproductsAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApiproductsAttributesRequest) ProtoMessage() {}

func (x *ListOrganizationsApiproductsAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApiproductsAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApiproductsAttributesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{333}
}

func (x *ListOrganizationsApiproductsAttributesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsApiproductsAttribute *GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,opt,name=organizations_apiproducts_attribute,json=organizationsApiproductsAttribute,proto3" json:"organizations_apiproducts_attribute,omitempty"`
}

func (x *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) Reset() {
	*x = UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) ProtoMessage() {}

func (x *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest.ProtoReflect.Descriptor instead.
func (*UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{334}
}

func (x *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) GetOrganizationsApiproductsAttribute() *GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.OrganizationsApiproductsAttribute
	}
	return nil
}

type CreateOrganizationsApiproductsRateplanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                           string                       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsApiproductsRateplan *GoogleCloudApigeeV1RatePlan `protobuf:"bytes,2,opt,name=organizations_apiproducts_rateplan,json=organizationsApiproductsRateplan,proto3" json:"organizations_apiproducts_rateplan,omitempty"`
}

func (x *CreateOrganizationsApiproductsRateplanRequest) Reset() {
	*x = CreateOrganizationsApiproductsRateplanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsApiproductsRateplanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsApiproductsRateplanRequest) ProtoMessage() {}

func (x *CreateOrganizationsApiproductsRateplanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsApiproductsRateplanRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsApiproductsRateplanRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{335}
}

func (x *CreateOrganizationsApiproductsRateplanRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsApiproductsRateplanRequest) GetOrganizationsApiproductsRateplan() *GoogleCloudApigeeV1RatePlan {
	if x != nil {
		return x.OrganizationsApiproductsRateplan
	}
	return nil
}

type DeleteOrganizationsApiproductsRateplanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApiproductsRateplanRequest) Reset() {
	*x = DeleteOrganizationsApiproductsRateplanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApiproductsRateplanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApiproductsRateplanRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApiproductsRateplanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApiproductsRateplanRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApiproductsRateplanRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{336}
}

func (x *DeleteOrganizationsApiproductsRateplanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApiproductsRateplanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApiproductsRateplanRequest) Reset() {
	*x = GetOrganizationsApiproductsRateplanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApiproductsRateplanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApiproductsRateplanRequest) ProtoMessage() {}

func (x *GetOrganizationsApiproductsRateplanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApiproductsRateplanRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApiproductsRateplanRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{337}
}

func (x *GetOrganizationsApiproductsRateplanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsApiproductsRateplansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Expand   bool   `protobuf:"varint,2,opt,name=expand,proto3" json:"expand,omitempty"`
	OrderBy  string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Parent   string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	StartKey string `protobuf:"bytes,5,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	State    string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ListOrganizationsApiproductsRateplansRequest) Reset() {
	*x = ListOrganizationsApiproductsRateplansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApiproductsRateplansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApiproductsRateplansRequest) ProtoMessage() {}

func (x *ListOrganizationsApiproductsRateplansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApiproductsRateplansRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApiproductsRateplansRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{338}
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *ListOrganizationsApiproductsRateplansRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type UpdateOrganizationsApiproductsRateplanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                             string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsApiproductsRateplan *GoogleCloudApigeeV1RatePlan `protobuf:"bytes,2,opt,name=organizations_apiproducts_rateplan,json=organizationsApiproductsRateplan,proto3" json:"organizations_apiproducts_rateplan,omitempty"`
}

func (x *UpdateOrganizationsApiproductsRateplanRequest) Reset() {
	*x = UpdateOrganizationsApiproductsRateplanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsApiproductsRateplanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsApiproductsRateplanRequest) ProtoMessage() {}

func (x *UpdateOrganizationsApiproductsRateplanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsApiproductsRateplanRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsApiproductsRateplanRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{339}
}

func (x *UpdateOrganizationsApiproductsRateplanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsApiproductsRateplanRequest) GetOrganizationsApiproductsRateplan() *GoogleCloudApigeeV1RatePlan {
	if x != nil {
		return x.OrganizationsApiproductsRateplan
	}
	return nil
}

type CreateOrganizationsApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action           string             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name             string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent           string             `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Validate         bool               `protobuf:"varint,4,opt,name=validate,proto3" json:"validate,omitempty"`
	OrganizationsApi *GoogleApiHttpBody `protobuf:"bytes,5,opt,name=organizations_api,json=organizationsApi,proto3" json:"organizations_api,omitempty"`
}

func (x *CreateOrganizationsApiRequest) Reset() {
	*x = CreateOrganizationsApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsApiRequest) ProtoMessage() {}

func (x *CreateOrganizationsApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsApiRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsApiRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{340}
}

func (x *CreateOrganizationsApiRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateOrganizationsApiRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsApiRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsApiRequest) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *CreateOrganizationsApiRequest) GetOrganizationsApi() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsApi
	}
	return nil
}

type DeleteOrganizationsApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApiRequest) Reset() {
	*x = DeleteOrganizationsApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApiRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApiRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApiRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{341}
}

func (x *DeleteOrganizationsApiRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApiRequest) Reset() {
	*x = GetOrganizationsApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApiRequest) ProtoMessage() {}

func (x *GetOrganizationsApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApiRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApiRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{342}
}

func (x *GetOrganizationsApiRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsApisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMetaData  bool   `protobuf:"varint,1,opt,name=include_meta_data,json=includeMetaData,proto3" json:"include_meta_data,omitempty"`
	IncludeRevisions bool   `protobuf:"varint,2,opt,name=include_revisions,json=includeRevisions,proto3" json:"include_revisions,omitempty"`
	Parent           string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsApisRequest) Reset() {
	*x = ListOrganizationsApisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApisRequest) ProtoMessage() {}

func (x *ListOrganizationsApisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApisRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApisRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{343}
}

func (x *ListOrganizationsApisRequest) GetIncludeMetaData() bool {
	if x != nil {
		return x.IncludeMetaData
	}
	return false
}

func (x *ListOrganizationsApisRequest) GetIncludeRevisions() bool {
	if x != nil {
		return x.IncludeRevisions
	}
	return false
}

func (x *ListOrganizationsApisRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask       string                       `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsApi *GoogleCloudApigeeV1ApiProxy `protobuf:"bytes,3,opt,name=organizations_api,json=organizationsApi,proto3" json:"organizations_api,omitempty"`
}

func (x *PatchOrganizationsApiRequest) Reset() {
	*x = PatchOrganizationsApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsApiRequest) ProtoMessage() {}

func (x *PatchOrganizationsApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsApiRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsApiRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{344}
}

func (x *PatchOrganizationsApiRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsApiRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsApiRequest) GetOrganizationsApi() *GoogleCloudApigeeV1ApiProxy {
	if x != nil {
		return x.OrganizationsApi
	}
	return nil
}

type ListOrganizationsApisDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsApisDeploymentsRequest) Reset() {
	*x = ListOrganizationsApisDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApisDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApisDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsApisDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApisDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApisDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{345}
}

func (x *ListOrganizationsApisDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsApisKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                       string                          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsApisKeyvaluemap *GoogleCloudApigeeV1KeyValueMap `protobuf:"bytes,2,opt,name=organizations_apis_keyvaluemap,json=organizationsApisKeyvaluemap,proto3" json:"organizations_apis_keyvaluemap,omitempty"`
}

func (x *CreateOrganizationsApisKeyvaluemapRequest) Reset() {
	*x = CreateOrganizationsApisKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsApisKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsApisKeyvaluemapRequest) ProtoMessage() {}

func (x *CreateOrganizationsApisKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsApisKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsApisKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{346}
}

func (x *CreateOrganizationsApisKeyvaluemapRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsApisKeyvaluemapRequest) GetOrganizationsApisKeyvaluemap() *GoogleCloudApigeeV1KeyValueMap {
	if x != nil {
		return x.OrganizationsApisKeyvaluemap
	}
	return nil
}

type DeleteOrganizationsApisKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApisKeyvaluemapRequest) Reset() {
	*x = DeleteOrganizationsApisKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApisKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApisKeyvaluemapRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApisKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApisKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApisKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{347}
}

func (x *DeleteOrganizationsApisKeyvaluemapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsApisKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                             string                            `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsApisKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_apis_keyvaluemaps_entry,json=organizationsApisKeyvaluemapsEntry,proto3" json:"organizations_apis_keyvaluemaps_entry,omitempty"`
}

func (x *CreateOrganizationsApisKeyvaluemapsEntryRequest) Reset() {
	*x = CreateOrganizationsApisKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsApisKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsApisKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *CreateOrganizationsApisKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsApisKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsApisKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{348}
}

func (x *CreateOrganizationsApisKeyvaluemapsEntryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsApisKeyvaluemapsEntryRequest) GetOrganizationsApisKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsApisKeyvaluemapsEntry
	}
	return nil
}

type DeleteOrganizationsApisKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApisKeyvaluemapsEntryRequest) Reset() {
	*x = DeleteOrganizationsApisKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApisKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApisKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApisKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApisKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApisKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{349}
}

func (x *DeleteOrganizationsApisKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApisKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApisKeyvaluemapsEntryRequest) Reset() {
	*x = GetOrganizationsApisKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApisKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApisKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *GetOrganizationsApisKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApisKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApisKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{350}
}

func (x *GetOrganizationsApisKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsApisKeyvaluemapsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) Reset() {
	*x = ListOrganizationsApisKeyvaluemapsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApisKeyvaluemapsEntriesRequest) ProtoMessage() {}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApisKeyvaluemapsEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApisKeyvaluemapsEntriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{351}
}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsApisKeyvaluemapsEntriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsApisKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                               string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsApisKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_apis_keyvaluemaps_entry,json=organizationsApisKeyvaluemapsEntry,proto3" json:"organizations_apis_keyvaluemaps_entry,omitempty"`
}

func (x *UpdateOrganizationsApisKeyvaluemapsEntryRequest) Reset() {
	*x = UpdateOrganizationsApisKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsApisKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsApisKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *UpdateOrganizationsApisKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsApisKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsApisKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{352}
}

func (x *UpdateOrganizationsApisKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsApisKeyvaluemapsEntryRequest) GetOrganizationsApisKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsApisKeyvaluemapsEntry
	}
	return nil
}

type DeleteOrganizationsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsApisRevisionRequest) Reset() {
	*x = DeleteOrganizationsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsApisRevisionRequest) ProtoMessage() {}

func (x *DeleteOrganizationsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{353}
}

func (x *DeleteOrganizationsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsApisRevisionRequest) Reset() {
	*x = GetOrganizationsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsApisRevisionRequest) ProtoMessage() {}

func (x *GetOrganizationsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{354}
}

func (x *GetOrganizationsApisRevisionRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetOrganizationsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateApiProxyRevisionOrganizationsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Validate                  bool               `protobuf:"varint,2,opt,name=validate,proto3" json:"validate,omitempty"`
	OrganizationsApisRevision *GoogleApiHttpBody `protobuf:"bytes,3,opt,name=organizations_apis_revision,json=organizationsApisRevision,proto3" json:"organizations_apis_revision,omitempty"`
}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) Reset() {
	*x = UpdateApiProxyRevisionOrganizationsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApiProxyRevisionOrganizationsApisRevisionRequest) ProtoMessage() {}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApiProxyRevisionOrganizationsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*UpdateApiProxyRevisionOrganizationsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{355}
}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) GetOrganizationsApisRevision() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsApisRevision
	}
	return nil
}

type ListOrganizationsApisRevisionsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsApisRevisionsDeploymentsRequest) Reset() {
	*x = ListOrganizationsApisRevisionsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsApisRevisionsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsApisRevisionsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsApisRevisionsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsApisRevisionsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsApisRevisionsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{356}
}

func (x *ListOrganizationsApisRevisionsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsAppgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                string                       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsAppgroup *GoogleCloudApigeeV1AppGroup `protobuf:"bytes,2,opt,name=organizations_appgroup,json=organizationsAppgroup,proto3" json:"organizations_appgroup,omitempty"`
}

func (x *CreateOrganizationsAppgroupRequest) Reset() {
	*x = CreateOrganizationsAppgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsAppgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsAppgroupRequest) ProtoMessage() {}

func (x *CreateOrganizationsAppgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsAppgroupRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsAppgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{357}
}

func (x *CreateOrganizationsAppgroupRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsAppgroupRequest) GetOrganizationsAppgroup() *GoogleCloudApigeeV1AppGroup {
	if x != nil {
		return x.OrganizationsAppgroup
	}
	return nil
}

type DeleteOrganizationsAppgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsAppgroupRequest) Reset() {
	*x = DeleteOrganizationsAppgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsAppgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsAppgroupRequest) ProtoMessage() {}

func (x *DeleteOrganizationsAppgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsAppgroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsAppgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{358}
}

func (x *DeleteOrganizationsAppgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsAppgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsAppgroupRequest) Reset() {
	*x = GetOrganizationsAppgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsAppgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsAppgroupRequest) ProtoMessage() {}

func (x *GetOrganizationsAppgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsAppgroupRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsAppgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{359}
}

func (x *GetOrganizationsAppgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsAppgroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsAppgroupsRequest) Reset() {
	*x = ListOrganizationsAppgroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsAppgroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsAppgroupsRequest) ProtoMessage() {}

func (x *ListOrganizationsAppgroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsAppgroupsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsAppgroupsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{360}
}

func (x *ListOrganizationsAppgroupsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOrganizationsAppgroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsAppgroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsAppgroupsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsAppgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                string                       `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name                  string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsAppgroup *GoogleCloudApigeeV1AppGroup `protobuf:"bytes,3,opt,name=organizations_appgroup,json=organizationsAppgroup,proto3" json:"organizations_appgroup,omitempty"`
}

func (x *UpdateOrganizationsAppgroupRequest) Reset() {
	*x = UpdateOrganizationsAppgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsAppgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsAppgroupRequest) ProtoMessage() {}

func (x *UpdateOrganizationsAppgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsAppgroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsAppgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{361}
}

func (x *UpdateOrganizationsAppgroupRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateOrganizationsAppgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsAppgroupRequest) GetOrganizationsAppgroup() *GoogleCloudApigeeV1AppGroup {
	if x != nil {
		return x.OrganizationsAppgroup
	}
	return nil
}

type CreateOrganizationsAppgroupsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                    string                          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsAppgroupsApp *GoogleCloudApigeeV1AppGroupApp `protobuf:"bytes,2,opt,name=organizations_appgroups_app,json=organizationsAppgroupsApp,proto3" json:"organizations_appgroups_app,omitempty"`
}

func (x *CreateOrganizationsAppgroupsAppRequest) Reset() {
	*x = CreateOrganizationsAppgroupsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsAppgroupsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsAppgroupsAppRequest) ProtoMessage() {}

func (x *CreateOrganizationsAppgroupsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsAppgroupsAppRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsAppgroupsAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{362}
}

func (x *CreateOrganizationsAppgroupsAppRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsAppgroupsAppRequest) GetOrganizationsAppgroupsApp() *GoogleCloudApigeeV1AppGroupApp {
	if x != nil {
		return x.OrganizationsAppgroupsApp
	}
	return nil
}

type DeleteOrganizationsAppgroupsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsAppgroupsAppRequest) Reset() {
	*x = DeleteOrganizationsAppgroupsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsAppgroupsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsAppgroupsAppRequest) ProtoMessage() {}

func (x *DeleteOrganizationsAppgroupsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsAppgroupsAppRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsAppgroupsAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{363}
}

func (x *DeleteOrganizationsAppgroupsAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsAppgroupsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsAppgroupsAppRequest) Reset() {
	*x = GetOrganizationsAppgroupsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsAppgroupsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsAppgroupsAppRequest) ProtoMessage() {}

func (x *GetOrganizationsAppgroupsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsAppgroupsAppRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsAppgroupsAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{364}
}

func (x *GetOrganizationsAppgroupsAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsAppgroupsAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsAppgroupsAppsRequest) Reset() {
	*x = ListOrganizationsAppgroupsAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsAppgroupsAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsAppgroupsAppsRequest) ProtoMessage() {}

func (x *ListOrganizationsAppgroupsAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsAppgroupsAppsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsAppgroupsAppsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{365}
}

func (x *ListOrganizationsAppgroupsAppsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsAppgroupsAppsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsAppgroupsAppsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsAppgroupsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                    string                          `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name                      string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsAppgroupsApp *GoogleCloudApigeeV1AppGroupApp `protobuf:"bytes,3,opt,name=organizations_appgroups_app,json=organizationsAppgroupsApp,proto3" json:"organizations_appgroups_app,omitempty"`
}

func (x *UpdateOrganizationsAppgroupsAppRequest) Reset() {
	*x = UpdateOrganizationsAppgroupsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsAppgroupsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsAppgroupsAppRequest) ProtoMessage() {}

func (x *UpdateOrganizationsAppgroupsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsAppgroupsAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsAppgroupsAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{366}
}

func (x *UpdateOrganizationsAppgroupsAppRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateOrganizationsAppgroupsAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsAppgroupsAppRequest) GetOrganizationsAppgroupsApp() *GoogleCloudApigeeV1AppGroupApp {
	if x != nil {
		return x.OrganizationsAppgroupsApp
	}
	return nil
}

type CreateOrganizationsAppgroupsAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                        string                             `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsAppgroupsAppsKey *GoogleCloudApigeeV1AppGroupAppKey `protobuf:"bytes,2,opt,name=organizations_appgroups_apps_key,json=organizationsAppgroupsAppsKey,proto3" json:"organizations_appgroups_apps_key,omitempty"`
}

func (x *CreateOrganizationsAppgroupsAppsKeyRequest) Reset() {
	*x = CreateOrganizationsAppgroupsAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsAppgroupsAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsAppgroupsAppsKeyRequest) ProtoMessage() {}

func (x *CreateOrganizationsAppgroupsAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsAppgroupsAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsAppgroupsAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{367}
}

func (x *CreateOrganizationsAppgroupsAppsKeyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsAppgroupsAppsKeyRequest) GetOrganizationsAppgroupsAppsKey() *GoogleCloudApigeeV1AppGroupAppKey {
	if x != nil {
		return x.OrganizationsAppgroupsAppsKey
	}
	return nil
}

type DeleteOrganizationsAppgroupsAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsAppgroupsAppsKeyRequest) Reset() {
	*x = DeleteOrganizationsAppgroupsAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsAppgroupsAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsAppgroupsAppsKeyRequest) ProtoMessage() {}

func (x *DeleteOrganizationsAppgroupsAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsAppgroupsAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsAppgroupsAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{368}
}

func (x *DeleteOrganizationsAppgroupsAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsAppgroupsAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsAppgroupsAppsKeyRequest) Reset() {
	*x = GetOrganizationsAppgroupsAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsAppgroupsAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsAppgroupsAppsKeyRequest) ProtoMessage() {}

func (x *GetOrganizationsAppgroupsAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsAppgroupsAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsAppgroupsAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{369}
}

func (x *GetOrganizationsAppgroupsAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsAppgroupsAppsKey *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest `protobuf:"bytes,2,opt,name=organizations_appgroups_apps_key,json=organizationsAppgroupsAppsKey,proto3" json:"organizations_appgroups_apps_key,omitempty"`
}

func (x *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) Reset() {
	*x = UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) ProtoMessage() {}

func (x *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{370}
}

func (x *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) GetOrganizationsAppgroupsAppsKey() *GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest {
	if x != nil {
		return x.OrganizationsAppgroupsAppsKey
	}
	return nil
}

type DeleteOrganizationsAppgroupsAppsKeysApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) Reset() {
	*x = DeleteOrganizationsAppgroupsAppsKeysApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) ProtoMessage() {}

func (x *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsAppgroupsAppsKeysApiproductRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{371}
}

func (x *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) Reset() {
	*x = UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) ProtoMessage() {
}

func (x *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{372}
}

func (x *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsAppRequest) Reset() {
	*x = GetOrganizationsAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsAppRequest) ProtoMessage() {}

func (x *GetOrganizationsAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsAppRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{373}
}

func (x *GetOrganizationsAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiProduct  string `protobuf:"bytes,1,opt,name=api_product,json=apiProduct,proto3" json:"api_product,omitempty"`
	Apptype     string `protobuf:"bytes,2,opt,name=apptype,proto3" json:"apptype,omitempty"`
	Expand      bool   `protobuf:"varint,3,opt,name=expand,proto3" json:"expand,omitempty"`
	Filter      string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Ids         string `protobuf:"bytes,5,opt,name=ids,proto3" json:"ids,omitempty"`
	IncludeCred bool   `protobuf:"varint,6,opt,name=include_cred,json=includeCred,proto3" json:"include_cred,omitempty"`
	KeyStatus   string `protobuf:"bytes,7,opt,name=key_status,json=keyStatus,proto3" json:"key_status,omitempty"`
	PageSize    int32  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken   string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent      string `protobuf:"bytes,10,opt,name=parent,proto3" json:"parent,omitempty"`
	Rows        string `protobuf:"bytes,11,opt,name=rows,proto3" json:"rows,omitempty"`
	StartKey    string `protobuf:"bytes,12,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	Status      string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListOrganizationsAppsRequest) Reset() {
	*x = ListOrganizationsAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsAppsRequest) ProtoMessage() {}

func (x *ListOrganizationsAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsAppsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsAppsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{374}
}

func (x *ListOrganizationsAppsRequest) GetApiProduct() string {
	if x != nil {
		return x.ApiProduct
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetApptype() string {
	if x != nil {
		return x.Apptype
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsAppsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetIncludeCred() bool {
	if x != nil {
		return x.IncludeCred
	}
	return false
}

func (x *ListOrganizationsAppsRequest) GetKeyStatus() string {
	if x != nil {
		return x.KeyStatus
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsAppsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetRows() string {
	if x != nil {
		return x.Rows
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *ListOrganizationsAppsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateOrganizationsDatacollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCollectorId            string                            `protobuf:"bytes,1,opt,name=data_collector_id,json=dataCollectorId,proto3" json:"data_collector_id,omitempty"`
	Parent                     string                            `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDatacollector *GoogleCloudApigeeV1DataCollector `protobuf:"bytes,3,opt,name=organizations_datacollector,json=organizationsDatacollector,proto3" json:"organizations_datacollector,omitempty"`
}

func (x *CreateOrganizationsDatacollectorRequest) Reset() {
	*x = CreateOrganizationsDatacollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDatacollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDatacollectorRequest) ProtoMessage() {}

func (x *CreateOrganizationsDatacollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDatacollectorRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDatacollectorRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{375}
}

func (x *CreateOrganizationsDatacollectorRequest) GetDataCollectorId() string {
	if x != nil {
		return x.DataCollectorId
	}
	return ""
}

func (x *CreateOrganizationsDatacollectorRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDatacollectorRequest) GetOrganizationsDatacollector() *GoogleCloudApigeeV1DataCollector {
	if x != nil {
		return x.OrganizationsDatacollector
	}
	return nil
}

type DeleteOrganizationsDatacollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDatacollectorRequest) Reset() {
	*x = DeleteOrganizationsDatacollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDatacollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDatacollectorRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDatacollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDatacollectorRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDatacollectorRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{376}
}

func (x *DeleteOrganizationsDatacollectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsDatacollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDatacollectorRequest) Reset() {
	*x = GetOrganizationsDatacollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDatacollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDatacollectorRequest) ProtoMessage() {}

func (x *GetOrganizationsDatacollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDatacollectorRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDatacollectorRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{377}
}

func (x *GetOrganizationsDatacollectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsDatacollectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsDatacollectorsRequest) Reset() {
	*x = ListOrganizationsDatacollectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDatacollectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDatacollectorsRequest) ProtoMessage() {}

func (x *ListOrganizationsDatacollectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDatacollectorsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDatacollectorsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{378}
}

func (x *ListOrganizationsDatacollectorsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsDatacollectorsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsDatacollectorsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsDatacollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                 string                            `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsDatacollector *GoogleCloudApigeeV1DataCollector `protobuf:"bytes,3,opt,name=organizations_datacollector,json=organizationsDatacollector,proto3" json:"organizations_datacollector,omitempty"`
}

func (x *PatchOrganizationsDatacollectorRequest) Reset() {
	*x = PatchOrganizationsDatacollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsDatacollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsDatacollectorRequest) ProtoMessage() {}

func (x *PatchOrganizationsDatacollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsDatacollectorRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsDatacollectorRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{379}
}

func (x *PatchOrganizationsDatacollectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsDatacollectorRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsDatacollectorRequest) GetOrganizationsDatacollector() *GoogleCloudApigeeV1DataCollector {
	if x != nil {
		return x.OrganizationsDatacollector
	}
	return nil
}

type ListOrganizationsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent      string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	SharedFlows bool   `protobuf:"varint,2,opt,name=shared_flows,json=sharedFlows,proto3" json:"shared_flows,omitempty"`
}

func (x *ListOrganizationsDeploymentsRequest) Reset() {
	*x = ListOrganizationsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{380}
}

func (x *ListOrganizationsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsDeploymentsRequest) GetSharedFlows() bool {
	if x != nil {
		return x.SharedFlows
	}
	return false
}

type AttributesOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                 string                         `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDeveloper *GoogleCloudApigeeV1Attributes `protobuf:"bytes,2,opt,name=organizations_developer,json=organizationsDeveloper,proto3" json:"organizations_developer,omitempty"`
}

func (x *AttributesOrganizationsDeveloperRequest) Reset() {
	*x = AttributesOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributesOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributesOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *AttributesOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributesOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*AttributesOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{381}
}

func (x *AttributesOrganizationsDeveloperRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AttributesOrganizationsDeveloperRequest) GetOrganizationsDeveloper() *GoogleCloudApigeeV1Attributes {
	if x != nil {
		return x.OrganizationsDeveloper
	}
	return nil
}

type CreateOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                 string                        `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDeveloper *GoogleCloudApigeeV1Developer `protobuf:"bytes,2,opt,name=organizations_developer,json=organizationsDeveloper,proto3" json:"organizations_developer,omitempty"`
}

func (x *CreateOrganizationsDeveloperRequest) Reset() {
	*x = CreateOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *CreateOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{382}
}

func (x *CreateOrganizationsDeveloperRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDeveloperRequest) GetOrganizationsDeveloper() *GoogleCloudApigeeV1Developer {
	if x != nil {
		return x.OrganizationsDeveloper
	}
	return nil
}

type DeleteOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDeveloperRequest) Reset() {
	*x = DeleteOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{383}
}

func (x *DeleteOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDeveloperRequest) Reset() {
	*x = GetOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *GetOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{384}
}

func (x *GetOrganizationsDeveloperRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GetOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetBalanceOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBalanceOrganizationsDeveloperRequest) Reset() {
	*x = GetBalanceOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *GetBalanceOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{385}
}

func (x *GetBalanceOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMonetizationConfigOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMonetizationConfigOrganizationsDeveloperRequest) Reset() {
	*x = GetMonetizationConfigOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMonetizationConfigOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMonetizationConfigOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *GetMonetizationConfigOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMonetizationConfigOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*GetMonetizationConfigOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{386}
}

func (x *GetMonetizationConfigOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsDevelopersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App            string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Count          string `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	Expand         bool   `protobuf:"varint,3,opt,name=expand,proto3" json:"expand,omitempty"`
	Ids            string `protobuf:"bytes,4,opt,name=ids,proto3" json:"ids,omitempty"`
	IncludeCompany bool   `protobuf:"varint,5,opt,name=include_company,json=includeCompany,proto3" json:"include_company,omitempty"`
	Parent         string `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	StartKey       string `protobuf:"bytes,7,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
}

func (x *ListOrganizationsDevelopersRequest) Reset() {
	*x = ListOrganizationsDevelopersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDevelopersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDevelopersRequest) ProtoMessage() {}

func (x *ListOrganizationsDevelopersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDevelopersRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDevelopersRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{387}
}

func (x *ListOrganizationsDevelopersRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *ListOrganizationsDevelopersRequest) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *ListOrganizationsDevelopersRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsDevelopersRequest) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *ListOrganizationsDevelopersRequest) GetIncludeCompany() bool {
	if x != nil {
		return x.IncludeCompany
	}
	return false
}

func (x *ListOrganizationsDevelopersRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsDevelopersRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

type SetDeveloperStatusOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SetDeveloperStatusOrganizationsDeveloperRequest) Reset() {
	*x = SetDeveloperStatusOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeveloperStatusOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeveloperStatusOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *SetDeveloperStatusOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeveloperStatusOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*SetDeveloperStatusOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{388}
}

func (x *SetDeveloperStatusOrganizationsDeveloperRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SetDeveloperStatusOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDeveloper *GoogleCloudApigeeV1Developer `protobuf:"bytes,2,opt,name=organizations_developer,json=organizationsDeveloper,proto3" json:"organizations_developer,omitempty"`
}

func (x *UpdateOrganizationsDeveloperRequest) Reset() {
	*x = UpdateOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *UpdateOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{389}
}

func (x *UpdateOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsDeveloperRequest) GetOrganizationsDeveloper() *GoogleCloudApigeeV1Developer {
	if x != nil {
		return x.OrganizationsDeveloper
	}
	return nil
}

type UpdateMonetizationConfigOrganizationsDeveloperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDeveloper *GoogleCloudApigeeV1DeveloperMonetizationConfig `protobuf:"bytes,2,opt,name=organizations_developer,json=organizationsDeveloper,proto3" json:"organizations_developer,omitempty"`
}

func (x *UpdateMonetizationConfigOrganizationsDeveloperRequest) Reset() {
	*x = UpdateMonetizationConfigOrganizationsDeveloperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMonetizationConfigOrganizationsDeveloperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMonetizationConfigOrganizationsDeveloperRequest) ProtoMessage() {}

func (x *UpdateMonetizationConfigOrganizationsDeveloperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMonetizationConfigOrganizationsDeveloperRequest.ProtoReflect.Descriptor instead.
func (*UpdateMonetizationConfigOrganizationsDeveloperRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{390}
}

func (x *UpdateMonetizationConfigOrganizationsDeveloperRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMonetizationConfigOrganizationsDeveloperRequest) GetOrganizationsDeveloper() *GoogleCloudApigeeV1DeveloperMonetizationConfig {
	if x != nil {
		return x.OrganizationsDeveloper
	}
	return nil
}

type AttributesOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersApp *GoogleCloudApigeeV1Attributes `protobuf:"bytes,2,opt,name=organizations_developers_app,json=organizationsDevelopersApp,proto3" json:"organizations_developers_app,omitempty"`
}

func (x *AttributesOrganizationsDevelopersAppRequest) Reset() {
	*x = AttributesOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributesOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributesOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *AttributesOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributesOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*AttributesOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{391}
}

func (x *AttributesOrganizationsDevelopersAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttributesOrganizationsDevelopersAppRequest) GetOrganizationsDevelopersApp() *GoogleCloudApigeeV1Attributes {
	if x != nil {
		return x.OrganizationsDevelopersApp
	}
	return nil
}

type CreateOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                     string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDevelopersApp *GoogleCloudApigeeV1DeveloperApp `protobuf:"bytes,2,opt,name=organizations_developers_app,json=organizationsDevelopersApp,proto3" json:"organizations_developers_app,omitempty"`
}

func (x *CreateOrganizationsDevelopersAppRequest) Reset() {
	*x = CreateOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *CreateOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{392}
}

func (x *CreateOrganizationsDevelopersAppRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDevelopersAppRequest) GetOrganizationsDevelopersApp() *GoogleCloudApigeeV1DeveloperApp {
	if x != nil {
		return x.OrganizationsDevelopersApp
	}
	return nil
}

type DeleteOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDevelopersAppRequest) Reset() {
	*x = DeleteOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{393}
}

func (x *DeleteOrganizationsDevelopersAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                     string                           `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name                       string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersApp *GoogleCloudApigeeV1DeveloperApp `protobuf:"bytes,3,opt,name=organizations_developers_app,json=organizationsDevelopersApp,proto3" json:"organizations_developers_app,omitempty"`
}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) Reset() {
	*x = GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{394}
}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) GetOrganizationsDevelopersApp() *GoogleCloudApigeeV1DeveloperApp {
	if x != nil {
		return x.OrganizationsDevelopersApp
	}
	return nil
}

type GetOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity string `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Query  string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetOrganizationsDevelopersAppRequest) Reset() {
	*x = GetOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *GetOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{395}
}

func (x *GetOrganizationsDevelopersAppRequest) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *GetOrganizationsDevelopersAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsDevelopersAppRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListOrganizationsDevelopersAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         string `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	Expand        bool   `protobuf:"varint,2,opt,name=expand,proto3" json:"expand,omitempty"`
	Parent        string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	ShallowExpand bool   `protobuf:"varint,4,opt,name=shallow_expand,json=shallowExpand,proto3" json:"shallow_expand,omitempty"`
	StartKey      string `protobuf:"bytes,5,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
}

func (x *ListOrganizationsDevelopersAppsRequest) Reset() {
	*x = ListOrganizationsDevelopersAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDevelopersAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDevelopersAppsRequest) ProtoMessage() {}

func (x *ListOrganizationsDevelopersAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDevelopersAppsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDevelopersAppsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{396}
}

func (x *ListOrganizationsDevelopersAppsRequest) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *ListOrganizationsDevelopersAppsRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsDevelopersAppsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsDevelopersAppsRequest) GetShallowExpand() bool {
	if x != nil {
		return x.ShallowExpand
	}
	return false
}

func (x *ListOrganizationsDevelopersAppsRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

type UpdateOrganizationsDevelopersAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersApp *GoogleCloudApigeeV1DeveloperApp `protobuf:"bytes,2,opt,name=organizations_developers_app,json=organizationsDevelopersApp,proto3" json:"organizations_developers_app,omitempty"`
}

func (x *UpdateOrganizationsDevelopersAppRequest) Reset() {
	*x = UpdateOrganizationsDevelopersAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsDevelopersAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsDevelopersAppRequest) ProtoMessage() {}

func (x *UpdateOrganizationsDevelopersAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsDevelopersAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsDevelopersAppRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{397}
}

func (x *UpdateOrganizationsDevelopersAppRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsDevelopersAppRequest) GetOrganizationsDevelopersApp() *GoogleCloudApigeeV1DeveloperApp {
	if x != nil {
		return x.OrganizationsDevelopersApp
	}
	return nil
}

type DeleteOrganizationsDevelopersAppsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDevelopersAppsAttributeRequest) Reset() {
	*x = DeleteOrganizationsDevelopersAppsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDevelopersAppsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDevelopersAppsAttributeRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDevelopersAppsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDevelopersAppsAttributeRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDevelopersAppsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{398}
}

func (x *DeleteOrganizationsDevelopersAppsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsDevelopersAppsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDevelopersAppsAttributeRequest) Reset() {
	*x = GetOrganizationsDevelopersAppsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDevelopersAppsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDevelopersAppsAttributeRequest) ProtoMessage() {}

func (x *GetOrganizationsDevelopersAppsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDevelopersAppsAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDevelopersAppsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{399}
}

func (x *GetOrganizationsDevelopersAppsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsDevelopersAppsAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsDevelopersAppsAttributesRequest) Reset() {
	*x = ListOrganizationsDevelopersAppsAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDevelopersAppsAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDevelopersAppsAttributesRequest) ProtoMessage() {}

func (x *ListOrganizationsDevelopersAppsAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDevelopersAppsAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDevelopersAppsAttributesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{400}
}

func (x *ListOrganizationsDevelopersAppsAttributesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersAppsAttribute *GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,opt,name=organizations_developers_apps_attribute,json=organizationsDevelopersAppsAttribute,proto3" json:"organizations_developers_apps_attribute,omitempty"`
}

func (x *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) Reset() {
	*x = UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) ProtoMessage() {}

func (x *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{401}
}

func (x *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) GetOrganizationsDevelopersAppsAttribute() *GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.OrganizationsDevelopersAppsAttribute
	}
	return nil
}

type CreateOrganizationsDevelopersAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                         string                              `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDevelopersAppsKey *GoogleCloudApigeeV1DeveloperAppKey `protobuf:"bytes,2,opt,name=organizations_developers_apps_key,json=organizationsDevelopersAppsKey,proto3" json:"organizations_developers_apps_key,omitempty"`
}

func (x *CreateOrganizationsDevelopersAppsKeyRequest) Reset() {
	*x = CreateOrganizationsDevelopersAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDevelopersAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDevelopersAppsKeyRequest) ProtoMessage() {}

func (x *CreateOrganizationsDevelopersAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDevelopersAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDevelopersAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{402}
}

func (x *CreateOrganizationsDevelopersAppsKeyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDevelopersAppsKeyRequest) GetOrganizationsDevelopersAppsKey() *GoogleCloudApigeeV1DeveloperAppKey {
	if x != nil {
		return x.OrganizationsDevelopersAppsKey
	}
	return nil
}

type DeleteOrganizationsDevelopersAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDevelopersAppsKeyRequest) Reset() {
	*x = DeleteOrganizationsDevelopersAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDevelopersAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDevelopersAppsKeyRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDevelopersAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDevelopersAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDevelopersAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{403}
}

func (x *DeleteOrganizationsDevelopersAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsDevelopersAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDevelopersAppsKeyRequest) Reset() {
	*x = GetOrganizationsDevelopersAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDevelopersAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDevelopersAppsKeyRequest) ProtoMessage() {}

func (x *GetOrganizationsDevelopersAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDevelopersAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDevelopersAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{404}
}

func (x *GetOrganizationsDevelopersAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersAppsKey *GoogleCloudApigeeV1DeveloperAppKey `protobuf:"bytes,2,opt,name=organizations_developers_apps_key,json=organizationsDevelopersAppsKey,proto3" json:"organizations_developers_apps_key,omitempty"`
}

func (x *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) Reset() {
	*x = ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) ProtoMessage() {}

func (x *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{405}
}

func (x *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) GetOrganizationsDevelopersAppsKey() *GoogleCloudApigeeV1DeveloperAppKey {
	if x != nil {
		return x.OrganizationsDevelopersAppsKey
	}
	return nil
}

type UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                         string                              `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name                           string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersAppsKey *GoogleCloudApigeeV1DeveloperAppKey `protobuf:"bytes,3,opt,name=organizations_developers_apps_key,json=organizationsDevelopersAppsKey,proto3" json:"organizations_developers_apps_key,omitempty"`
}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) Reset() {
	*x = UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) ProtoMessage() {}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{406}
}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) GetOrganizationsDevelopersAppsKey() *GoogleCloudApigeeV1DeveloperAppKey {
	if x != nil {
		return x.OrganizationsDevelopersAppsKey
	}
	return nil
}

type DeleteOrganizationsDevelopersAppsKeysApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) Reset() {
	*x = DeleteOrganizationsDevelopersAppsKeysApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDevelopersAppsKeysApiproductRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDevelopersAppsKeysApiproductRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDevelopersAppsKeysApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{407}
}

func (x *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) Reset() {
	*x = UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) ProtoMessage() {
}

func (x *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{408}
}

func (x *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsDevelopersAppsKeysCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                string                              `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDevelopersAppsKeysCreate *GoogleCloudApigeeV1DeveloperAppKey `protobuf:"bytes,2,opt,name=organizations_developers_apps_keys_create,json=organizationsDevelopersAppsKeysCreate,proto3" json:"organizations_developers_apps_keys_create,omitempty"`
}

func (x *CreateOrganizationsDevelopersAppsKeysCreateRequest) Reset() {
	*x = CreateOrganizationsDevelopersAppsKeysCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDevelopersAppsKeysCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDevelopersAppsKeysCreateRequest) ProtoMessage() {}

func (x *CreateOrganizationsDevelopersAppsKeysCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDevelopersAppsKeysCreateRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDevelopersAppsKeysCreateRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{409}
}

func (x *CreateOrganizationsDevelopersAppsKeysCreateRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDevelopersAppsKeysCreateRequest) GetOrganizationsDevelopersAppsKeysCreate() *GoogleCloudApigeeV1DeveloperAppKey {
	if x != nil {
		return x.OrganizationsDevelopersAppsKeysCreate
	}
	return nil
}

type DeleteOrganizationsDevelopersAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsDevelopersAttributeRequest) Reset() {
	*x = DeleteOrganizationsDevelopersAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsDevelopersAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsDevelopersAttributeRequest) ProtoMessage() {}

func (x *DeleteOrganizationsDevelopersAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsDevelopersAttributeRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsDevelopersAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{410}
}

func (x *DeleteOrganizationsDevelopersAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsDevelopersAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDevelopersAttributeRequest) Reset() {
	*x = GetOrganizationsDevelopersAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDevelopersAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDevelopersAttributeRequest) ProtoMessage() {}

func (x *GetOrganizationsDevelopersAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDevelopersAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDevelopersAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{411}
}

func (x *GetOrganizationsDevelopersAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsDevelopersAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsDevelopersAttributesRequest) Reset() {
	*x = ListOrganizationsDevelopersAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDevelopersAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDevelopersAttributesRequest) ProtoMessage() {}

func (x *ListOrganizationsDevelopersAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDevelopersAttributesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDevelopersAttributesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{412}
}

func (x *ListOrganizationsDevelopersAttributesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                             string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersAttribute *GoogleCloudApigeeV1Attribute `protobuf:"bytes,2,opt,name=organizations_developers_attribute,json=organizationsDevelopersAttribute,proto3" json:"organizations_developers_attribute,omitempty"`
}

func (x *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) Reset() {
	*x = UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) ProtoMessage() {}

func (x *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{413}
}

func (x *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) GetOrganizationsDevelopersAttribute() *GoogleCloudApigeeV1Attribute {
	if x != nil {
		return x.OrganizationsDevelopersAttribute
	}
	return nil
}

type AdjustOrganizationsDevelopersBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersBalance *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest `protobuf:"bytes,2,opt,name=organizations_developers_balance,json=organizationsDevelopersBalance,proto3" json:"organizations_developers_balance,omitempty"`
}

func (x *AdjustOrganizationsDevelopersBalanceRequest) Reset() {
	*x = AdjustOrganizationsDevelopersBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustOrganizationsDevelopersBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustOrganizationsDevelopersBalanceRequest) ProtoMessage() {}

func (x *AdjustOrganizationsDevelopersBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustOrganizationsDevelopersBalanceRequest.ProtoReflect.Descriptor instead.
func (*AdjustOrganizationsDevelopersBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{414}
}

func (x *AdjustOrganizationsDevelopersBalanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdjustOrganizationsDevelopersBalanceRequest) GetOrganizationsDevelopersBalance() *GoogleCloudApigeeV1AdjustDeveloperBalanceRequest {
	if x != nil {
		return x.OrganizationsDevelopersBalance
	}
	return nil
}

type CreditOrganizationsDevelopersBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersBalance *GoogleCloudApigeeV1CreditDeveloperBalanceRequest `protobuf:"bytes,2,opt,name=organizations_developers_balance,json=organizationsDevelopersBalance,proto3" json:"organizations_developers_balance,omitempty"`
}

func (x *CreditOrganizationsDevelopersBalanceRequest) Reset() {
	*x = CreditOrganizationsDevelopersBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditOrganizationsDevelopersBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditOrganizationsDevelopersBalanceRequest) ProtoMessage() {}

func (x *CreditOrganizationsDevelopersBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditOrganizationsDevelopersBalanceRequest.ProtoReflect.Descriptor instead.
func (*CreditOrganizationsDevelopersBalanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{415}
}

func (x *CreditOrganizationsDevelopersBalanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreditOrganizationsDevelopersBalanceRequest) GetOrganizationsDevelopersBalance() *GoogleCloudApigeeV1CreditDeveloperBalanceRequest {
	if x != nil {
		return x.OrganizationsDevelopersBalance
	}
	return nil
}

type CreateOrganizationsDevelopersSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                              string                                    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsDevelopersSubscription *GoogleCloudApigeeV1DeveloperSubscription `protobuf:"bytes,2,opt,name=organizations_developers_subscription,json=organizationsDevelopersSubscription,proto3" json:"organizations_developers_subscription,omitempty"`
}

func (x *CreateOrganizationsDevelopersSubscriptionRequest) Reset() {
	*x = CreateOrganizationsDevelopersSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsDevelopersSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsDevelopersSubscriptionRequest) ProtoMessage() {}

func (x *CreateOrganizationsDevelopersSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsDevelopersSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsDevelopersSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{416}
}

func (x *CreateOrganizationsDevelopersSubscriptionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsDevelopersSubscriptionRequest) GetOrganizationsDevelopersSubscription() *GoogleCloudApigeeV1DeveloperSubscription {
	if x != nil {
		return x.OrganizationsDevelopersSubscription
	}
	return nil
}

type ExpireOrganizationsDevelopersSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                string                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsDevelopersSubscription *GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest `protobuf:"bytes,2,opt,name=organizations_developers_subscription,json=organizationsDevelopersSubscription,proto3" json:"organizations_developers_subscription,omitempty"`
}

func (x *ExpireOrganizationsDevelopersSubscriptionRequest) Reset() {
	*x = ExpireOrganizationsDevelopersSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireOrganizationsDevelopersSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireOrganizationsDevelopersSubscriptionRequest) ProtoMessage() {}

func (x *ExpireOrganizationsDevelopersSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireOrganizationsDevelopersSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*ExpireOrganizationsDevelopersSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{417}
}

func (x *ExpireOrganizationsDevelopersSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExpireOrganizationsDevelopersSubscriptionRequest) GetOrganizationsDevelopersSubscription() *GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest {
	if x != nil {
		return x.OrganizationsDevelopersSubscription
	}
	return nil
}

type GetOrganizationsDevelopersSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsDevelopersSubscriptionRequest) Reset() {
	*x = GetOrganizationsDevelopersSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsDevelopersSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsDevelopersSubscriptionRequest) ProtoMessage() {}

func (x *GetOrganizationsDevelopersSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsDevelopersSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsDevelopersSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{418}
}

func (x *GetOrganizationsDevelopersSubscriptionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsDevelopersSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Parent   string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	StartKey string `protobuf:"bytes,3,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) Reset() {
	*x = ListOrganizationsDevelopersSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsDevelopersSubscriptionsRequest) ProtoMessage() {}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsDevelopersSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsDevelopersSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{419}
}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsDevelopersSubscriptionsRequest) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

type CreateOrganizationsEndpointAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointAttachmentId            string                                 `protobuf:"bytes,1,opt,name=endpoint_attachment_id,json=endpointAttachmentId,proto3" json:"endpoint_attachment_id,omitempty"`
	Parent                          string                                 `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEndpointAttachment *GoogleCloudApigeeV1EndpointAttachment `protobuf:"bytes,3,opt,name=organizations_endpoint_attachment,json=organizationsEndpointAttachment,proto3" json:"organizations_endpoint_attachment,omitempty"`
}

func (x *CreateOrganizationsEndpointAttachmentRequest) Reset() {
	*x = CreateOrganizationsEndpointAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEndpointAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEndpointAttachmentRequest) ProtoMessage() {}

func (x *CreateOrganizationsEndpointAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEndpointAttachmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEndpointAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{420}
}

func (x *CreateOrganizationsEndpointAttachmentRequest) GetEndpointAttachmentId() string {
	if x != nil {
		return x.EndpointAttachmentId
	}
	return ""
}

func (x *CreateOrganizationsEndpointAttachmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEndpointAttachmentRequest) GetOrganizationsEndpointAttachment() *GoogleCloudApigeeV1EndpointAttachment {
	if x != nil {
		return x.OrganizationsEndpointAttachment
	}
	return nil
}

type DeleteOrganizationsEndpointAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEndpointAttachmentRequest) Reset() {
	*x = DeleteOrganizationsEndpointAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEndpointAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEndpointAttachmentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEndpointAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEndpointAttachmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEndpointAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{421}
}

func (x *DeleteOrganizationsEndpointAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEndpointAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEndpointAttachmentRequest) Reset() {
	*x = GetOrganizationsEndpointAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEndpointAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEndpointAttachmentRequest) ProtoMessage() {}

func (x *GetOrganizationsEndpointAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEndpointAttachmentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEndpointAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{422}
}

func (x *GetOrganizationsEndpointAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEndpointAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEndpointAttachmentsRequest) Reset() {
	*x = ListOrganizationsEndpointAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEndpointAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEndpointAttachmentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEndpointAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEndpointAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEndpointAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{423}
}

func (x *ListOrganizationsEndpointAttachmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEndpointAttachmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEndpointAttachmentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsEnvgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                string                               `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvgroup *GoogleCloudApigeeV1EnvironmentGroup `protobuf:"bytes,3,opt,name=organizations_envgroup,json=organizationsEnvgroup,proto3" json:"organizations_envgroup,omitempty"`
}

func (x *CreateOrganizationsEnvgroupRequest) Reset() {
	*x = CreateOrganizationsEnvgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvgroupRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvgroupRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{424}
}

func (x *CreateOrganizationsEnvgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsEnvgroupRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvgroupRequest) GetOrganizationsEnvgroup() *GoogleCloudApigeeV1EnvironmentGroup {
	if x != nil {
		return x.OrganizationsEnvgroup
	}
	return nil
}

type DeleteOrganizationsEnvgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvgroupRequest) Reset() {
	*x = DeleteOrganizationsEnvgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvgroupRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvgroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{425}
}

func (x *DeleteOrganizationsEnvgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvgroupRequest) Reset() {
	*x = GetOrganizationsEnvgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvgroupRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvgroupRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{426}
}

func (x *GetOrganizationsEnvgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDeployedIngressConfigOrganizationsEnvgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	View string `protobuf:"bytes,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *GetDeployedIngressConfigOrganizationsEnvgroupRequest) Reset() {
	*x = GetDeployedIngressConfigOrganizationsEnvgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeployedIngressConfigOrganizationsEnvgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeployedIngressConfigOrganizationsEnvgroupRequest) ProtoMessage() {}

func (x *GetDeployedIngressConfigOrganizationsEnvgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeployedIngressConfigOrganizationsEnvgroupRequest.ProtoReflect.Descriptor instead.
func (*GetDeployedIngressConfigOrganizationsEnvgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{427}
}

func (x *GetDeployedIngressConfigOrganizationsEnvgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDeployedIngressConfigOrganizationsEnvgroupRequest) GetView() string {
	if x != nil {
		return x.View
	}
	return ""
}

type ListOrganizationsEnvgroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvgroupsRequest) Reset() {
	*x = ListOrganizationsEnvgroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvgroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvgroupsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvgroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvgroupsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvgroupsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{428}
}

func (x *ListOrganizationsEnvgroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvgroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvgroupsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsEnvgroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask            string                               `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvgroup *GoogleCloudApigeeV1EnvironmentGroup `protobuf:"bytes,3,opt,name=organizations_envgroup,json=organizationsEnvgroup,proto3" json:"organizations_envgroup,omitempty"`
}

func (x *PatchOrganizationsEnvgroupRequest) Reset() {
	*x = PatchOrganizationsEnvgroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsEnvgroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsEnvgroupRequest) ProtoMessage() {}

func (x *PatchOrganizationsEnvgroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsEnvgroupRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsEnvgroupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{429}
}

func (x *PatchOrganizationsEnvgroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsEnvgroupRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsEnvgroupRequest) GetOrganizationsEnvgroup() *GoogleCloudApigeeV1EnvironmentGroup {
	if x != nil {
		return x.OrganizationsEnvgroup
	}
	return nil
}

type CreateOrganizationsEnvgroupsAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                           string                                         `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvgroupsAttachment *GoogleCloudApigeeV1EnvironmentGroupAttachment `protobuf:"bytes,2,opt,name=organizations_envgroups_attachment,json=organizationsEnvgroupsAttachment,proto3" json:"organizations_envgroups_attachment,omitempty"`
}

func (x *CreateOrganizationsEnvgroupsAttachmentRequest) Reset() {
	*x = CreateOrganizationsEnvgroupsAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvgroupsAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvgroupsAttachmentRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvgroupsAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvgroupsAttachmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvgroupsAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{430}
}

func (x *CreateOrganizationsEnvgroupsAttachmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvgroupsAttachmentRequest) GetOrganizationsEnvgroupsAttachment() *GoogleCloudApigeeV1EnvironmentGroupAttachment {
	if x != nil {
		return x.OrganizationsEnvgroupsAttachment
	}
	return nil
}

type DeleteOrganizationsEnvgroupsAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvgroupsAttachmentRequest) Reset() {
	*x = DeleteOrganizationsEnvgroupsAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvgroupsAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvgroupsAttachmentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvgroupsAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvgroupsAttachmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvgroupsAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{431}
}

func (x *DeleteOrganizationsEnvgroupsAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvgroupsAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvgroupsAttachmentRequest) Reset() {
	*x = GetOrganizationsEnvgroupsAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvgroupsAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvgroupsAttachmentRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvgroupsAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvgroupsAttachmentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvgroupsAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{432}
}

func (x *GetOrganizationsEnvgroupsAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvgroupsAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) Reset() {
	*x = ListOrganizationsEnvgroupsAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvgroupsAttachmentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvgroupsAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvgroupsAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{433}
}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvgroupsAttachmentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                   string                          `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1Environment `protobuf:"bytes,3,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *CreateOrganizationsEnvironmentRequest) Reset() {
	*x = CreateOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{434}
}

func (x *CreateOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1Environment {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type DeleteOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{435}
}

func (x *DeleteOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentRequest) Reset() {
	*x = GetOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{436}
}

func (x *GetOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetAddonsConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAddonsConfigOrganizationsEnvironmentRequest) Reset() {
	*x = GetAddonsConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddonsConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddonsConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetAddonsConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddonsConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetAddonsConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{437}
}

func (x *GetAddonsConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) Reset() {
	*x = GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{438}
}

func (x *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDebugmaskOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDebugmaskOrganizationsEnvironmentRequest) Reset() {
	*x = GetDebugmaskOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugmaskOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugmaskOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetDebugmaskOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugmaskOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetDebugmaskOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{439}
}

func (x *GetDebugmaskOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDeployedConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeployedConfigOrganizationsEnvironmentRequest) Reset() {
	*x = GetDeployedConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeployedConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeployedConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetDeployedConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeployedConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetDeployedConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{440}
}

func (x *GetDeployedConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSecurityActionsConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSecurityActionsConfigOrganizationsEnvironmentRequest) Reset() {
	*x = GetSecurityActionsConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecurityActionsConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecurityActionsConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetSecurityActionsConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecurityActionsConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetSecurityActionsConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{441}
}

func (x *GetSecurityActionsConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTraceConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTraceConfigOrganizationsEnvironmentRequest) Reset() {
	*x = GetTraceConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraceConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraceConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *GetTraceConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraceConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*GetTraceConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{442}
}

func (x *GetTraceConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ModifyEnvironmentOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask               string                          `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1Environment `protobuf:"bytes,3,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) Reset() {
	*x = ModifyEnvironmentOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyEnvironmentOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyEnvironmentOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*ModifyEnvironmentOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{443}
}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *ModifyEnvironmentOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1Environment {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type SubscribeOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *SubscribeOrganizationsEnvironmentRequest) Reset() {
	*x = SubscribeOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *SubscribeOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{444}
}

func (x *SubscribeOrganizationsEnvironmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UnsubscribeOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                   string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1Subscription `protobuf:"bytes,2,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UnsubscribeOrganizationsEnvironmentRequest) Reset() {
	*x = UnsubscribeOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UnsubscribeOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{445}
}

func (x *UnsubscribeOrganizationsEnvironmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UnsubscribeOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1Subscription {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type UpdateOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1Environment `protobuf:"bytes,2,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{446}
}

func (x *UpdateOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1Environment {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type UpdateDebugmaskOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReplaceRepeatedFields    bool                          `protobuf:"varint,2,opt,name=replace_repeated_fields,json=replaceRepeatedFields,proto3" json:"replace_repeated_fields,omitempty"`
	UpdateMask               string                        `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1DebugMask `protobuf:"bytes,4,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) Reset() {
	*x = UpdateDebugmaskOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDebugmaskOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDebugmaskOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateDebugmaskOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{447}
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) GetReplaceRepeatedFields() bool {
	if x != nil {
		return x.ReplaceRepeatedFields
	}
	return false
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *UpdateDebugmaskOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1DebugMask {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type UpdateEnvironmentOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1Environment `protobuf:"bytes,2,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UpdateEnvironmentOrganizationsEnvironmentRequest) Reset() {
	*x = UpdateEnvironmentOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEnvironmentOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEnvironmentOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UpdateEnvironmentOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEnvironmentOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateEnvironmentOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{448}
}

func (x *UpdateEnvironmentOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEnvironmentOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1Environment {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type UpdateSecurityActionsConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask               string                                    `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1SecurityActionsConfig `protobuf:"bytes,3,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) Reset() {
	*x = UpdateSecurityActionsConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSecurityActionsConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{449}
}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1SecurityActionsConfig {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type UpdateTraceConfigOrganizationsEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask               string                          `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironment *GoogleCloudApigeeV1TraceConfig `protobuf:"bytes,3,opt,name=organizations_environment,json=organizationsEnvironment,proto3" json:"organizations_environment,omitempty"`
}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) Reset() {
	*x = UpdateTraceConfigOrganizationsEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTraceConfigOrganizationsEnvironmentRequest) ProtoMessage() {}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTraceConfigOrganizationsEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*UpdateTraceConfigOrganizationsEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{450}
}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *UpdateTraceConfigOrganizationsEnvironmentRequest) GetOrganizationsEnvironment() *GoogleCloudApigeeV1TraceConfig {
	if x != nil {
		return x.OrganizationsEnvironment
	}
	return nil
}

type SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsAddonsConfig *GoogleCloudApigeeV1SetAddonEnablementRequest `protobuf:"bytes,2,opt,name=organizations_environments_addons_config,json=organizationsEnvironmentsAddonsConfig,proto3" json:"organizations_environments_addons_config,omitempty"`
}

func (x *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) Reset() {
	*x = SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) ProtoMessage() {}

func (x *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest.ProtoReflect.Descriptor instead.
func (*SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{451}
}

func (x *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) GetOrganizationsEnvironmentsAddonsConfig() *GoogleCloudApigeeV1SetAddonEnablementRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsAddonsConfig
	}
	return nil
}

type GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableCache bool   `protobuf:"varint,1,opt,name=disable_cache,json=disableCache,proto3" json:"disable_cache,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type         string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) Reset() {
	*x = GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) ProtoMessage() {}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest.ProtoReflect.Descriptor instead.
func (*GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{452}
}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) GetDisableCache() bool {
	if x != nil {
		return x.DisableCache
	}
	return false
}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateOrganizationsEnvironmentsAnalyticsExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                   string                            `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsAnalyticsExport *GoogleCloudApigeeV1ExportRequest `protobuf:"bytes,2,opt,name=organizations_environments_analytics_export,json=organizationsEnvironmentsAnalyticsExport,proto3" json:"organizations_environments_analytics_export,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsAnalyticsExportRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsAnalyticsExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsAnalyticsExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsAnalyticsExportRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsAnalyticsExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsAnalyticsExportRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsAnalyticsExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{453}
}

func (x *CreateOrganizationsEnvironmentsAnalyticsExportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsAnalyticsExportRequest) GetOrganizationsEnvironmentsAnalyticsExport() *GoogleCloudApigeeV1ExportRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsAnalyticsExport
	}
	return nil
}

type GetOrganizationsEnvironmentsAnalyticsExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsAnalyticsExportRequest) Reset() {
	*x = GetOrganizationsEnvironmentsAnalyticsExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsAnalyticsExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsAnalyticsExportRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsAnalyticsExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsAnalyticsExportRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsAnalyticsExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{454}
}

func (x *GetOrganizationsEnvironmentsAnalyticsExportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsAnalyticsExportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsAnalyticsExportsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsAnalyticsExportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsAnalyticsExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsAnalyticsExportsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsAnalyticsExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsAnalyticsExportsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsAnalyticsExportsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{455}
}

func (x *ListOrganizationsEnvironmentsAnalyticsExportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListOrganizationsEnvironmentsApisDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsApisDeploymentsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsApisDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsApisDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsApisDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsApisDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsApisDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsApisDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{456}
}

func (x *ListOrganizationsEnvironmentsApisDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type DeployOrganizationsEnvironmentsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Override         bool   `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
	SequencedRollout bool   `protobuf:"varint,3,opt,name=sequenced_rollout,json=sequencedRollout,proto3" json:"sequenced_rollout,omitempty"`
	ServiceAccount   string `protobuf:"bytes,4,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) Reset() {
	*x = DeployOrganizationsEnvironmentsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployOrganizationsEnvironmentsApisRevisionRequest) ProtoMessage() {}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployOrganizationsEnvironmentsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*DeployOrganizationsEnvironmentsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{457}
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) GetSequencedRollout() bool {
	if x != nil {
		return x.SequencedRollout
	}
	return false
}

func (x *DeployOrganizationsEnvironmentsApisRevisionRequest) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) Reset() {
	*x = GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) ProtoMessage() {}

func (x *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{458}
}

func (x *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UndeployOrganizationsEnvironmentsApisRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SequencedRollout bool   `protobuf:"varint,2,opt,name=sequenced_rollout,json=sequencedRollout,proto3" json:"sequenced_rollout,omitempty"`
}

func (x *UndeployOrganizationsEnvironmentsApisRevisionRequest) Reset() {
	*x = UndeployOrganizationsEnvironmentsApisRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeployOrganizationsEnvironmentsApisRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeployOrganizationsEnvironmentsApisRevisionRequest) ProtoMessage() {}

func (x *UndeployOrganizationsEnvironmentsApisRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeployOrganizationsEnvironmentsApisRevisionRequest.ProtoReflect.Descriptor instead.
func (*UndeployOrganizationsEnvironmentsApisRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{459}
}

func (x *UndeployOrganizationsEnvironmentsApisRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UndeployOrganizationsEnvironmentsApisRevisionRequest) GetSequencedRollout() bool {
	if x != nil {
		return x.SequencedRollout
	}
	return false
}

type CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                             string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Timeout                                            string                           `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	OrganizationsEnvironmentsApisRevisionsDebugsession *GoogleCloudApigeeV1DebugSession `protobuf:"bytes,3,opt,name=organizations_environments_apis_revisions_debugsession,json=organizationsEnvironmentsApisRevisionsDebugsession,proto3" json:"organizations_environments_apis_revisions_debugsession,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{460}
}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) GetOrganizationsEnvironmentsApisRevisionsDebugsession() *GoogleCloudApigeeV1DebugSession {
	if x != nil {
		return x.OrganizationsEnvironmentsApisRevisionsDebugsession
	}
	return nil
}

type DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Reset() {
	*x = DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoMessage() {}

func (x *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{461}
}

func (x *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Reset() {
	*x = GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{462}
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{463}
}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) Reset() {
	*x = GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{464}
}

func (x *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Override bool   `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) Reset() {
	*x = GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) ProtoMessage() {
}

func (x *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{465}
}

func (x *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

type GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) Reset() {
	*x = GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) ProtoMessage() {
}

func (x *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{466}
}

func (x *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                     string                                `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsArchiveDeployment *GoogleCloudApigeeV1ArchiveDeployment `protobuf:"bytes,2,opt,name=organizations_environments_archive_deployment,json=organizationsEnvironmentsArchiveDeployment,proto3" json:"organizations_environments_archive_deployment,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{467}
}

func (x *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) GetOrganizationsEnvironmentsArchiveDeployment() *GoogleCloudApigeeV1ArchiveDeployment {
	if x != nil {
		return x.OrganizationsEnvironmentsArchiveDeployment
	}
	return nil
}

type DeleteOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{468}
}

func (x *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                       string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsArchiveDeployment *GoogleCloudApigeeV1GenerateDownloadUrlRequest `protobuf:"bytes,2,opt,name=organizations_environments_archive_deployment,json=organizationsEnvironmentsArchiveDeployment,proto3" json:"organizations_environments_archive_deployment,omitempty"`
}

func (x *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{469}
}

func (x *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) GetOrganizationsEnvironmentsArchiveDeployment() *GoogleCloudApigeeV1GenerateDownloadUrlRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsArchiveDeployment
	}
	return nil
}

type GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                     string                                       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsArchiveDeployment *GoogleCloudApigeeV1GenerateUploadUrlRequest `protobuf:"bytes,2,opt,name=organizations_environments_archive_deployment,json=organizationsEnvironmentsArchiveDeployment,proto3" json:"organizations_environments_archive_deployment,omitempty"`
}

func (x *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{470}
}

func (x *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) GetOrganizationsEnvironmentsArchiveDeployment() *GoogleCloudApigeeV1GenerateUploadUrlRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsArchiveDeployment
	}
	return nil
}

type GetOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = GetOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{471}
}

func (x *GetOrganizationsEnvironmentsArchiveDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsArchiveDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsArchiveDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsArchiveDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsArchiveDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsArchiveDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{472}
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsEnvironmentsArchiveDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                       string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                                 string                                `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironmentsArchiveDeployment *GoogleCloudApigeeV1ArchiveDeployment `protobuf:"bytes,3,opt,name=organizations_environments_archive_deployment,json=organizationsEnvironmentsArchiveDeployment,proto3" json:"organizations_environments_archive_deployment,omitempty"`
}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) Reset() {
	*x = PatchOrganizationsEnvironmentsArchiveDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoMessage() {}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsEnvironmentsArchiveDeploymentRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsEnvironmentsArchiveDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{473}
}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) GetOrganizationsEnvironmentsArchiveDeployment() *GoogleCloudApigeeV1ArchiveDeployment {
	if x != nil {
		return x.OrganizationsEnvironmentsArchiveDeployment
	}
	return nil
}

type DeleteOrganizationsEnvironmentsCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsCacheRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsCacheRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsCacheRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsCacheRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{474}
}

func (x *DeleteOrganizationsEnvironmentsCacheRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsDeploymentRequest) Reset() {
	*x = GetOrganizationsEnvironmentsDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsDeploymentRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{475}
}

func (x *GetOrganizationsEnvironmentsDeploymentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent      string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	SharedFlows bool   `protobuf:"varint,2,opt,name=shared_flows,json=sharedFlows,proto3" json:"shared_flows,omitempty"`
}

func (x *ListOrganizationsEnvironmentsDeploymentsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{476}
}

func (x *ListOrganizationsEnvironmentsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsDeploymentsRequest) GetSharedFlows() bool {
	if x != nil {
		return x.SharedFlows
	}
	return false
}

type AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsFlowhook *GoogleCloudApigeeV1FlowHook `protobuf:"bytes,2,opt,name=organizations_environments_flowhook,json=organizationsEnvironmentsFlowhook,proto3" json:"organizations_environments_flowhook,omitempty"`
}

func (x *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) Reset() {
	*x = AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) ProtoMessage() {}

func (x *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest.ProtoReflect.Descriptor instead.
func (*AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{477}
}

func (x *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) GetOrganizationsEnvironmentsFlowhook() *GoogleCloudApigeeV1FlowHook {
	if x != nil {
		return x.OrganizationsEnvironmentsFlowhook
	}
	return nil
}

type DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) Reset() {
	*x = DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) ProtoMessage() {}

func (x *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest.ProtoReflect.Descriptor instead.
func (*DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{478}
}

func (x *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsFlowhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsFlowhookRequest) Reset() {
	*x = GetOrganizationsEnvironmentsFlowhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsFlowhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsFlowhookRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsFlowhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsFlowhookRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsFlowhookRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{479}
}

func (x *GetOrganizationsEnvironmentsFlowhookRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsEnvironmentsKeystoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                            string                       `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsKeystore *GoogleCloudApigeeV1Keystore `protobuf:"bytes,3,opt,name=organizations_environments_keystore,json=organizationsEnvironmentsKeystore,proto3" json:"organizations_environments_keystore,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsKeystoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsKeystoreRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsKeystoreRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{480}
}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoreRequest) GetOrganizationsEnvironmentsKeystore() *GoogleCloudApigeeV1Keystore {
	if x != nil {
		return x.OrganizationsEnvironmentsKeystore
	}
	return nil
}

type DeleteOrganizationsEnvironmentsKeystoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsKeystoreRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsKeystoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsKeystoreRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsKeystoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{481}
}

func (x *DeleteOrganizationsEnvironmentsKeystoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsKeystoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsKeystoreRequest) Reset() {
	*x = GetOrganizationsEnvironmentsKeystoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsKeystoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsKeystoreRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsKeystoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsKeystoreRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsKeystoreRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{482}
}

func (x *GetOrganizationsEnvironmentsKeystoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPassword                                string             `protobuf:"bytes,1,opt,name=_password,json=Password,proto3" json:"_password,omitempty"`
	Alias                                    string             `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Format                                   string             `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	IgnoreExpiryValidation                   bool               `protobuf:"varint,4,opt,name=ignore_expiry_validation,json=ignoreExpiryValidation,proto3" json:"ignore_expiry_validation,omitempty"`
	IgnoreNewlineValidation                  bool               `protobuf:"varint,5,opt,name=ignore_newline_validation,json=ignoreNewlineValidation,proto3" json:"ignore_newline_validation,omitempty"`
	Parent                                   string             `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsKeystoresAliase *GoogleApiHttpBody `protobuf:"bytes,7,opt,name=organizations_environments_keystores_aliase,json=organizationsEnvironmentsKeystoresAliase,proto3" json:"organizations_environments_keystores_aliase,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{483}
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetXPassword() string {
	if x != nil {
		return x.XPassword
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetIgnoreExpiryValidation() bool {
	if x != nil {
		return x.IgnoreExpiryValidation
	}
	return false
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetIgnoreNewlineValidation() bool {
	if x != nil {
		return x.IgnoreNewlineValidation
	}
	return false
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) GetOrganizationsEnvironmentsKeystoresAliase() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsEnvironmentsKeystoresAliase
	}
	return nil
}

type CsrOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = CsrOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsrOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsrOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*CsrOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{484}
}

func (x *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{485}
}

func (x *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = GetOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{486}
}

func (x *GetOrganizationsEnvironmentsKeystoresAliaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{487}
}

func (x *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateOrganizationsEnvironmentsKeystoresAliaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgnoreExpiryValidation                   bool               `protobuf:"varint,1,opt,name=ignore_expiry_validation,json=ignoreExpiryValidation,proto3" json:"ignore_expiry_validation,omitempty"`
	IgnoreNewlineValidation                  bool               `protobuf:"varint,2,opt,name=ignore_newline_validation,json=ignoreNewlineValidation,proto3" json:"ignore_newline_validation,omitempty"`
	Name                                     string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsKeystoresAliase *GoogleApiHttpBody `protobuf:"bytes,4,opt,name=organizations_environments_keystores_aliase,json=organizationsEnvironmentsKeystoresAliase,proto3" json:"organizations_environments_keystores_aliase,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentsKeystoresAliaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentsKeystoresAliaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{488}
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) GetIgnoreExpiryValidation() bool {
	if x != nil {
		return x.IgnoreExpiryValidation
	}
	return false
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) GetIgnoreNewlineValidation() bool {
	if x != nil {
		return x.IgnoreNewlineValidation
	}
	return false
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) GetOrganizationsEnvironmentsKeystoresAliase() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsEnvironmentsKeystoresAliase
	}
	return nil
}

type CreateOrganizationsEnvironmentsKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                               string                          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsKeyvaluemap *GoogleCloudApigeeV1KeyValueMap `protobuf:"bytes,2,opt,name=organizations_environments_keyvaluemap,json=organizationsEnvironmentsKeyvaluemap,proto3" json:"organizations_environments_keyvaluemap,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsKeyvaluemapRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{489}
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapRequest) GetOrganizationsEnvironmentsKeyvaluemap() *GoogleCloudApigeeV1KeyValueMap {
	if x != nil {
		return x.OrganizationsEnvironmentsKeyvaluemap
	}
	return nil
}

type DeleteOrganizationsEnvironmentsKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsKeyvaluemapRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{490}
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                     string                            `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_environments_keyvaluemaps_entry,json=organizationsEnvironmentsKeyvaluemapsEntry,proto3" json:"organizations_environments_keyvaluemaps_entry,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{491}
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetOrganizationsEnvironmentsKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsEnvironmentsKeyvaluemapsEntry
	}
	return nil
}

type DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{492}
}

func (x *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Reset() {
	*x = GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{493}
}

func (x *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) Reset() {
	*x = ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{494}
}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                       string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_environments_keyvaluemaps_entry,json=organizationsEnvironmentsKeyvaluemapsEntry,proto3" json:"organizations_environments_keyvaluemaps_entry,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{495}
}

func (x *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) GetOrganizationsEnvironmentsKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsEnvironmentsKeyvaluemapsEntry
	}
	return nil
}

type GetOrganizationsEnvironmentsOptimizedStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy    string `protobuf:"bytes,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	AggTable    string `protobuf:"bytes,2,opt,name=agg_table,json=aggTable,proto3" json:"agg_table,omitempty"`
	Filter      string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit       string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Offset      string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Realtime    bool   `protobuf:"varint,7,opt,name=realtime,proto3" json:"realtime,omitempty"`
	Select      string `protobuf:"bytes,8,opt,name=select,proto3" json:"select,omitempty"`
	Sonar       bool   `protobuf:"varint,9,opt,name=sonar,proto3" json:"sonar,omitempty"`
	Sort        string `protobuf:"bytes,10,opt,name=sort,proto3" json:"sort,omitempty"`
	Sortby      string `protobuf:"bytes,11,opt,name=sortby,proto3" json:"sortby,omitempty"`
	TimeRange   string `protobuf:"bytes,12,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	TimeUnit    string `protobuf:"bytes,13,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Topk        string `protobuf:"bytes,14,opt,name=topk,proto3" json:"topk,omitempty"`
	TsAscending bool   `protobuf:"varint,15,opt,name=ts_ascending,json=tsAscending,proto3" json:"ts_ascending,omitempty"`
	Tzo         string `protobuf:"bytes,16,opt,name=tzo,proto3" json:"tzo,omitempty"`
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) Reset() {
	*x = GetOrganizationsEnvironmentsOptimizedStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsOptimizedStatRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsOptimizedStatRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsOptimizedStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{496}
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetAccuracy() string {
	if x != nil {
		return x.Accuracy
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetAggTable() string {
	if x != nil {
		return x.AggTable
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetRealtime() bool {
	if x != nil {
		return x.Realtime
	}
	return false
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetSonar() bool {
	if x != nil {
		return x.Sonar
	}
	return false
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetTopk() string {
	if x != nil {
		return x.Topk
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetTsAscending() bool {
	if x != nil {
		return x.TsAscending
	}
	return false
}

func (x *GetOrganizationsEnvironmentsOptimizedStatRequest) GetTzo() string {
	if x != nil {
		return x.Tzo
	}
	return ""
}

type CreateOrganizationsEnvironmentsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                         string                    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsQuery *GoogleCloudApigeeV1Query `protobuf:"bytes,2,opt,name=organizations_environments_query,json=organizationsEnvironmentsQuery,proto3" json:"organizations_environments_query,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsQueryRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsQueryRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{497}
}

func (x *CreateOrganizationsEnvironmentsQueryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsQueryRequest) GetOrganizationsEnvironmentsQuery() *GoogleCloudApigeeV1Query {
	if x != nil {
		return x.OrganizationsEnvironmentsQuery
	}
	return nil
}

type GetOrganizationsEnvironmentsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsQueryRequest) Reset() {
	*x = GetOrganizationsEnvironmentsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsQueryRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{498}
}

func (x *GetOrganizationsEnvironmentsQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultOrganizationsEnvironmentsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultOrganizationsEnvironmentsQueryRequest) Reset() {
	*x = GetResultOrganizationsEnvironmentsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultOrganizationsEnvironmentsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOrganizationsEnvironmentsQueryRequest) ProtoMessage() {}

func (x *GetResultOrganizationsEnvironmentsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOrganizationsEnvironmentsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetResultOrganizationsEnvironmentsQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{499}
}

func (x *GetResultOrganizationsEnvironmentsQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResulturlOrganizationsEnvironmentsQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResulturlOrganizationsEnvironmentsQueryRequest) Reset() {
	*x = GetResulturlOrganizationsEnvironmentsQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResulturlOrganizationsEnvironmentsQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResulturlOrganizationsEnvironmentsQueryRequest) ProtoMessage() {}

func (x *GetResulturlOrganizationsEnvironmentsQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResulturlOrganizationsEnvironmentsQueryRequest.ProtoReflect.Descriptor instead.
func (*GetResulturlOrganizationsEnvironmentsQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{500}
}

func (x *GetResulturlOrganizationsEnvironmentsQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset                  string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	From                     string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	InclQueriesWithoutReport string `protobuf:"bytes,3,opt,name=incl_queries_without_report,json=inclQueriesWithoutReport,proto3" json:"incl_queries_without_report,omitempty"`
	Parent                   string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Status                   string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	SubmittedBy              string `protobuf:"bytes,6,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	To                       string `protobuf:"bytes,7,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) Reset() {
	*x = ListOrganizationsEnvironmentsQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsQueriesRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsQueriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{501}
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetInclQueriesWithoutReport() string {
	if x != nil {
		return x.InclQueriesWithoutReport
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsQueriesRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type CreateOrganizationsEnvironmentsReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                             string                        `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsReference *GoogleCloudApigeeV1Reference `protobuf:"bytes,2,opt,name=organizations_environments_reference,json=organizationsEnvironmentsReference,proto3" json:"organizations_environments_reference,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsReferenceRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsReferenceRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsReferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsReferenceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{502}
}

func (x *CreateOrganizationsEnvironmentsReferenceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsReferenceRequest) GetOrganizationsEnvironmentsReference() *GoogleCloudApigeeV1Reference {
	if x != nil {
		return x.OrganizationsEnvironmentsReference
	}
	return nil
}

type DeleteOrganizationsEnvironmentsReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsReferenceRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsReferenceRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsReferenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsReferenceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{503}
}

func (x *DeleteOrganizationsEnvironmentsReferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsReferenceRequest) Reset() {
	*x = GetOrganizationsEnvironmentsReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsReferenceRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsReferenceRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsReferenceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{504}
}

func (x *GetOrganizationsEnvironmentsReferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateOrganizationsEnvironmentsReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                               string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsReference *GoogleCloudApigeeV1Reference `protobuf:"bytes,2,opt,name=organizations_environments_reference,json=organizationsEnvironmentsReference,proto3" json:"organizations_environments_reference,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentsReferenceRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentsReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentsReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentsReferenceRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentsReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentsReferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentsReferenceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{505}
}

func (x *UpdateOrganizationsEnvironmentsReferenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsReferenceRequest) GetOrganizationsEnvironmentsReference() *GoogleCloudApigeeV1Reference {
	if x != nil {
		return x.OrganizationsEnvironmentsReference
	}
	return nil
}

type CreateOrganizationsEnvironmentsResourcefileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                                string             `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Type                                  string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrganizationsEnvironmentsResourcefile *GoogleApiHttpBody `protobuf:"bytes,4,opt,name=organizations_environments_resourcefile,json=organizationsEnvironmentsResourcefile,proto3" json:"organizations_environments_resourcefile,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsResourcefileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsResourcefileRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsResourcefileRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsResourcefileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{506}
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsResourcefileRequest) GetOrganizationsEnvironmentsResourcefile() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsEnvironmentsResourcefile
	}
	return nil
}

type DeleteOrganizationsEnvironmentsResourcefileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsResourcefileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsResourcefileRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsResourcefileRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsResourcefileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{507}
}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *DeleteOrganizationsEnvironmentsResourcefileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetOrganizationsEnvironmentsResourcefileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) Reset() {
	*x = GetOrganizationsEnvironmentsResourcefileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsResourcefileRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsResourcefileRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsResourcefileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{508}
}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsResourcefileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListOrganizationsEnvironmentsResourcefilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListOrganizationsEnvironmentsResourcefilesRequest) Reset() {
	*x = ListOrganizationsEnvironmentsResourcefilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsResourcefilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsResourcefilesRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsResourcefilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsResourcefilesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsResourcefilesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{509}
}

func (x *ListOrganizationsEnvironmentsResourcefilesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsResourcefilesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) Reset() {
	*x = ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) ProtoMessage() {}

func (x *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest.ProtoReflect.Descriptor instead.
func (*ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{510}
}

func (x *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UpdateOrganizationsEnvironmentsResourcefileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                                string             `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Type                                  string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OrganizationsEnvironmentsResourcefile *GoogleApiHttpBody `protobuf:"bytes,4,opt,name=organizations_environments_resourcefile,json=organizationsEnvironmentsResourcefile,proto3" json:"organizations_environments_resourcefile,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentsResourcefileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentsResourcefileRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentsResourcefileRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentsResourcefileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{511}
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsResourcefileRequest) GetOrganizationsEnvironmentsResourcefile() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsEnvironmentsResourcefile
	}
	return nil
}

type CreateOrganizationsEnvironmentsSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                  string                             `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	SecurityActionId                        string                             `protobuf:"bytes,2,opt,name=security_action_id,json=securityActionId,proto3" json:"security_action_id,omitempty"`
	OrganizationsEnvironmentsSecurityAction *GoogleCloudApigeeV1SecurityAction `protobuf:"bytes,3,opt,name=organizations_environments_security_action,json=organizationsEnvironmentsSecurityAction,proto3" json:"organizations_environments_security_action,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsSecurityActionRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{512}
}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) GetSecurityActionId() string {
	if x != nil {
		return x.SecurityActionId
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsSecurityActionRequest) GetOrganizationsEnvironmentsSecurityAction() *GoogleCloudApigeeV1SecurityAction {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityAction
	}
	return nil
}

type DisableOrganizationsEnvironmentsSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                    string                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsSecurityAction *GoogleCloudApigeeV1DisableSecurityActionRequest `protobuf:"bytes,2,opt,name=organizations_environments_security_action,json=organizationsEnvironmentsSecurityAction,proto3" json:"organizations_environments_security_action,omitempty"`
}

func (x *DisableOrganizationsEnvironmentsSecurityActionRequest) Reset() {
	*x = DisableOrganizationsEnvironmentsSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableOrganizationsEnvironmentsSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableOrganizationsEnvironmentsSecurityActionRequest) ProtoMessage() {}

func (x *DisableOrganizationsEnvironmentsSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableOrganizationsEnvironmentsSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*DisableOrganizationsEnvironmentsSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{513}
}

func (x *DisableOrganizationsEnvironmentsSecurityActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DisableOrganizationsEnvironmentsSecurityActionRequest) GetOrganizationsEnvironmentsSecurityAction() *GoogleCloudApigeeV1DisableSecurityActionRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityAction
	}
	return nil
}

type EnableOrganizationsEnvironmentsSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                    string                                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsSecurityAction *GoogleCloudApigeeV1EnableSecurityActionRequest `protobuf:"bytes,2,opt,name=organizations_environments_security_action,json=organizationsEnvironmentsSecurityAction,proto3" json:"organizations_environments_security_action,omitempty"`
}

func (x *EnableOrganizationsEnvironmentsSecurityActionRequest) Reset() {
	*x = EnableOrganizationsEnvironmentsSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableOrganizationsEnvironmentsSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableOrganizationsEnvironmentsSecurityActionRequest) ProtoMessage() {}

func (x *EnableOrganizationsEnvironmentsSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableOrganizationsEnvironmentsSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*EnableOrganizationsEnvironmentsSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{514}
}

func (x *EnableOrganizationsEnvironmentsSecurityActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnableOrganizationsEnvironmentsSecurityActionRequest) GetOrganizationsEnvironmentsSecurityAction() *GoogleCloudApigeeV1EnableSecurityActionRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityAction
	}
	return nil
}

type GetOrganizationsEnvironmentsSecurityActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsSecurityActionRequest) Reset() {
	*x = GetOrganizationsEnvironmentsSecurityActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsSecurityActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsSecurityActionRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsSecurityActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsSecurityActionRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsSecurityActionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{515}
}

func (x *GetOrganizationsEnvironmentsSecurityActionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsSecurityActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsSecurityActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsSecurityActionsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsSecurityActionsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsSecurityActionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{516}
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityActionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                    string                                                  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsSecurityIncident *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest `protobuf:"bytes,2,opt,name=organizations_environments_security_incident,json=organizationsEnvironmentsSecurityIncident,proto3" json:"organizations_environments_security_incident,omitempty"`
}

func (x *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) Reset() {
	*x = BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) ProtoMessage() {}

func (x *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{517}
}

func (x *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) GetOrganizationsEnvironmentsSecurityIncident() *GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityIncident
	}
	return nil
}

type GetOrganizationsEnvironmentsSecurityIncidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsSecurityIncidentRequest) Reset() {
	*x = GetOrganizationsEnvironmentsSecurityIncidentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsSecurityIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsSecurityIncidentRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsSecurityIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsSecurityIncidentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsSecurityIncidentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{518}
}

func (x *GetOrganizationsEnvironmentsSecurityIncidentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsSecurityIncidentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsSecurityIncidentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsSecurityIncidentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsSecurityIncidentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsSecurityIncidentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{519}
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityIncidentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsEnvironmentsSecurityIncidentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                      string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                                string                               `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironmentsSecurityIncident *GoogleCloudApigeeV1SecurityIncident `protobuf:"bytes,3,opt,name=organizations_environments_security_incident,json=organizationsEnvironmentsSecurityIncident,proto3" json:"organizations_environments_security_incident,omitempty"`
}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) Reset() {
	*x = PatchOrganizationsEnvironmentsSecurityIncidentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsEnvironmentsSecurityIncidentRequest) ProtoMessage() {}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsEnvironmentsSecurityIncidentRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsEnvironmentsSecurityIncidentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{520}
}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsSecurityIncidentRequest) GetOrganizationsEnvironmentsSecurityIncident() *GoogleCloudApigeeV1SecurityIncident {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityIncident
	}
	return nil
}

type CreateOrganizationsEnvironmentsSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                  string                                  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsSecurityReport *GoogleCloudApigeeV1SecurityReportQuery `protobuf:"bytes,2,opt,name=organizations_environments_security_report,json=organizationsEnvironmentsSecurityReport,proto3" json:"organizations_environments_security_report,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsSecurityReportRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsSecurityReportRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{521}
}

func (x *CreateOrganizationsEnvironmentsSecurityReportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsSecurityReportRequest) GetOrganizationsEnvironmentsSecurityReport() *GoogleCloudApigeeV1SecurityReportQuery {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityReport
	}
	return nil
}

type GetOrganizationsEnvironmentsSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsSecurityReportRequest) Reset() {
	*x = GetOrganizationsEnvironmentsSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsSecurityReportRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{522}
}

func (x *GetOrganizationsEnvironmentsSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultOrganizationsEnvironmentsSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultOrganizationsEnvironmentsSecurityReportRequest) Reset() {
	*x = GetResultOrganizationsEnvironmentsSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultOrganizationsEnvironmentsSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOrganizationsEnvironmentsSecurityReportRequest) ProtoMessage() {}

func (x *GetResultOrganizationsEnvironmentsSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOrganizationsEnvironmentsSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetResultOrganizationsEnvironmentsSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{523}
}

func (x *GetResultOrganizationsEnvironmentsSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultViewOrganizationsEnvironmentsSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) Reset() {
	*x = GetResultViewOrganizationsEnvironmentsSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultViewOrganizationsEnvironmentsSecurityReportRequest) ProtoMessage() {}

func (x *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultViewOrganizationsEnvironmentsSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetResultViewOrganizationsEnvironmentsSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{524}
}

func (x *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsSecurityReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset     string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	From        string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	PageSize    int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken   string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent      string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	SubmittedBy string `protobuf:"bytes,7,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	To          string `protobuf:"bytes,8,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsSecurityReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsSecurityReportsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsSecurityReportsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsSecurityReportsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{525}
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsSecurityReportsRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgenv                                string                                       `protobuf:"bytes,1,opt,name=orgenv,proto3" json:"orgenv,omitempty"`
	OrganizationsEnvironmentsSecurityStat *GoogleCloudApigeeV1QueryTabularStatsRequest `protobuf:"bytes,2,opt,name=organizations_environments_security_stat,json=organizationsEnvironmentsSecurityStat,proto3" json:"organizations_environments_security_stat,omitempty"`
}

func (x *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) Reset() {
	*x = QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) ProtoMessage() {}

func (x *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest.ProtoReflect.Descriptor instead.
func (*QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{526}
}

func (x *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) GetOrgenv() string {
	if x != nil {
		return x.Orgenv
	}
	return ""
}

func (x *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) GetOrganizationsEnvironmentsSecurityStat() *GoogleCloudApigeeV1QueryTabularStatsRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityStat
	}
	return nil
}

type QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgenv                                string                                          `protobuf:"bytes,1,opt,name=orgenv,proto3" json:"orgenv,omitempty"`
	OrganizationsEnvironmentsSecurityStat *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest `protobuf:"bytes,2,opt,name=organizations_environments_security_stat,json=organizationsEnvironmentsSecurityStat,proto3" json:"organizations_environments_security_stat,omitempty"`
}

func (x *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) Reset() {
	*x = QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) ProtoMessage() {}

func (x *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest.ProtoReflect.Descriptor instead.
func (*QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{527}
}

func (x *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) GetOrgenv() string {
	if x != nil {
		return x.Orgenv
	}
	return ""
}

func (x *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) GetOrganizationsEnvironmentsSecurityStat() *GoogleCloudApigeeV1QueryTimeSeriesStatsRequest {
	if x != nil {
		return x.OrganizationsEnvironmentsSecurityStat
	}
	return nil
}

type ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) Reset() {
	*x = ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{528}
}

func (x *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type DeployOrganizationsEnvironmentsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Override       bool   `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
	ServiceAccount string `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) Reset() {
	*x = DeployOrganizationsEnvironmentsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployOrganizationsEnvironmentsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{529}
}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

type GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) Reset() {
	*x = GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{530}
}

func (x *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) Reset() {
	*x = UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{531}
}

func (x *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy    string `protobuf:"bytes,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	AggTable    string `protobuf:"bytes,2,opt,name=agg_table,json=aggTable,proto3" json:"agg_table,omitempty"`
	Filter      string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit       string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Offset      string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Realtime    bool   `protobuf:"varint,7,opt,name=realtime,proto3" json:"realtime,omitempty"`
	Select      string `protobuf:"bytes,8,opt,name=select,proto3" json:"select,omitempty"`
	Sonar       bool   `protobuf:"varint,9,opt,name=sonar,proto3" json:"sonar,omitempty"`
	Sort        string `protobuf:"bytes,10,opt,name=sort,proto3" json:"sort,omitempty"`
	Sortby      string `protobuf:"bytes,11,opt,name=sortby,proto3" json:"sortby,omitempty"`
	TimeRange   string `protobuf:"bytes,12,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	TimeUnit    string `protobuf:"bytes,13,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Topk        string `protobuf:"bytes,14,opt,name=topk,proto3" json:"topk,omitempty"`
	TsAscending bool   `protobuf:"varint,15,opt,name=ts_ascending,json=tsAscending,proto3" json:"ts_ascending,omitempty"`
	Tzo         string `protobuf:"bytes,16,opt,name=tzo,proto3" json:"tzo,omitempty"`
}

func (x *GetOrganizationsEnvironmentsStatRequest) Reset() {
	*x = GetOrganizationsEnvironmentsStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsStatRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsStatRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{532}
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetAccuracy() string {
	if x != nil {
		return x.Accuracy
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetAggTable() string {
	if x != nil {
		return x.AggTable
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetRealtime() bool {
	if x != nil {
		return x.Realtime
	}
	return false
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetSonar() bool {
	if x != nil {
		return x.Sonar
	}
	return false
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetTopk() string {
	if x != nil {
		return x.Topk
	}
	return ""
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetTsAscending() bool {
	if x != nil {
		return x.TsAscending
	}
	return false
}

func (x *GetOrganizationsEnvironmentsStatRequest) GetTzo() string {
	if x != nil {
		return x.Tzo
	}
	return ""
}

type CreateOrganizationsEnvironmentsTargetserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent                                string                           `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsTargetserver *GoogleCloudApigeeV1TargetServer `protobuf:"bytes,3,opt,name=organizations_environments_targetserver,json=organizationsEnvironmentsTargetserver,proto3" json:"organizations_environments_targetserver,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsTargetserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsTargetserverRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsTargetserverRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsTargetserverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{533}
}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsTargetserverRequest) GetOrganizationsEnvironmentsTargetserver() *GoogleCloudApigeeV1TargetServer {
	if x != nil {
		return x.OrganizationsEnvironmentsTargetserver
	}
	return nil
}

type DeleteOrganizationsEnvironmentsTargetserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsTargetserverRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsTargetserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsTargetserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsTargetserverRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsTargetserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsTargetserverRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsTargetserverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{534}
}

func (x *DeleteOrganizationsEnvironmentsTargetserverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsTargetserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsTargetserverRequest) Reset() {
	*x = GetOrganizationsEnvironmentsTargetserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsTargetserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsTargetserverRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsTargetserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsTargetserverRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsTargetserverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{535}
}

func (x *GetOrganizationsEnvironmentsTargetserverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateOrganizationsEnvironmentsTargetserverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsEnvironmentsTargetserver *GoogleCloudApigeeV1TargetServer `protobuf:"bytes,2,opt,name=organizations_environments_targetserver,json=organizationsEnvironmentsTargetserver,proto3" json:"organizations_environments_targetserver,omitempty"`
}

func (x *UpdateOrganizationsEnvironmentsTargetserverRequest) Reset() {
	*x = UpdateOrganizationsEnvironmentsTargetserverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsEnvironmentsTargetserverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsEnvironmentsTargetserverRequest) ProtoMessage() {}

func (x *UpdateOrganizationsEnvironmentsTargetserverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsEnvironmentsTargetserverRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsEnvironmentsTargetserverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{536}
}

func (x *UpdateOrganizationsEnvironmentsTargetserverRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsEnvironmentsTargetserverRequest) GetOrganizationsEnvironmentsTargetserver() *GoogleCloudApigeeV1TargetServer {
	if x != nil {
		return x.OrganizationsEnvironmentsTargetserver
	}
	return nil
}

type CreateOrganizationsEnvironmentsTraceConfigOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                       string                                  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsEnvironmentsTraceConfigOverride *GoogleCloudApigeeV1TraceConfigOverride `protobuf:"bytes,2,opt,name=organizations_environments_trace_config_override,json=organizationsEnvironmentsTraceConfigOverride,proto3" json:"organizations_environments_trace_config_override,omitempty"`
}

func (x *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) Reset() {
	*x = CreateOrganizationsEnvironmentsTraceConfigOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoMessage() {}

func (x *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsEnvironmentsTraceConfigOverrideRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{537}
}

func (x *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) GetOrganizationsEnvironmentsTraceConfigOverride() *GoogleCloudApigeeV1TraceConfigOverride {
	if x != nil {
		return x.OrganizationsEnvironmentsTraceConfigOverride
	}
	return nil
}

type DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) Reset() {
	*x = DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoMessage() {}

func (x *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{538}
}

func (x *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsEnvironmentsTraceConfigOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) Reset() {
	*x = GetOrganizationsEnvironmentsTraceConfigOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoMessage() {}

func (x *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsEnvironmentsTraceConfigOverrideRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsEnvironmentsTraceConfigOverrideRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{539}
}

func (x *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsEnvironmentsTraceConfigOverridesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) Reset() {
	*x = ListOrganizationsEnvironmentsTraceConfigOverridesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsEnvironmentsTraceConfigOverridesRequest) ProtoMessage() {}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsEnvironmentsTraceConfigOverridesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsEnvironmentsTraceConfigOverridesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{540}
}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsEnvironmentsTraceConfigOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                         string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                                   string                                  `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsEnvironmentsTraceConfigOverride *GoogleCloudApigeeV1TraceConfigOverride `protobuf:"bytes,3,opt,name=organizations_environments_trace_config_override,json=organizationsEnvironmentsTraceConfigOverride,proto3" json:"organizations_environments_trace_config_override,omitempty"`
}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) Reset() {
	*x = PatchOrganizationsEnvironmentsTraceConfigOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoMessage() {}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsEnvironmentsTraceConfigOverrideRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{541}
}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) GetOrganizationsEnvironmentsTraceConfigOverride() *GoogleCloudApigeeV1TraceConfigOverride {
	if x != nil {
		return x.OrganizationsEnvironmentsTraceConfigOverride
	}
	return nil
}

type CreateOrganizationsHostQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                 string                    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsHostQuery *GoogleCloudApigeeV1Query `protobuf:"bytes,2,opt,name=organizations_host_query,json=organizationsHostQuery,proto3" json:"organizations_host_query,omitempty"`
}

func (x *CreateOrganizationsHostQueryRequest) Reset() {
	*x = CreateOrganizationsHostQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsHostQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsHostQueryRequest) ProtoMessage() {}

func (x *CreateOrganizationsHostQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsHostQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsHostQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{542}
}

func (x *CreateOrganizationsHostQueryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsHostQueryRequest) GetOrganizationsHostQuery() *GoogleCloudApigeeV1Query {
	if x != nil {
		return x.OrganizationsHostQuery
	}
	return nil
}

type GetOrganizationsHostQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsHostQueryRequest) Reset() {
	*x = GetOrganizationsHostQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsHostQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsHostQueryRequest) ProtoMessage() {}

func (x *GetOrganizationsHostQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsHostQueryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsHostQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{543}
}

func (x *GetOrganizationsHostQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultOrganizationsHostQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultOrganizationsHostQueryRequest) Reset() {
	*x = GetResultOrganizationsHostQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultOrganizationsHostQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOrganizationsHostQueryRequest) ProtoMessage() {}

func (x *GetResultOrganizationsHostQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOrganizationsHostQueryRequest.ProtoReflect.Descriptor instead.
func (*GetResultOrganizationsHostQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{544}
}

func (x *GetResultOrganizationsHostQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultViewOrganizationsHostQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultViewOrganizationsHostQueryRequest) Reset() {
	*x = GetResultViewOrganizationsHostQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultViewOrganizationsHostQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultViewOrganizationsHostQueryRequest) ProtoMessage() {}

func (x *GetResultViewOrganizationsHostQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultViewOrganizationsHostQueryRequest.ProtoReflect.Descriptor instead.
func (*GetResultViewOrganizationsHostQueryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{545}
}

func (x *GetResultViewOrganizationsHostQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsHostQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset                  string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	EnvgroupHostname         string `protobuf:"bytes,2,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	From                     string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	InclQueriesWithoutReport string `protobuf:"bytes,4,opt,name=incl_queries_without_report,json=inclQueriesWithoutReport,proto3" json:"incl_queries_without_report,omitempty"`
	Parent                   string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	Status                   string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	SubmittedBy              string `protobuf:"bytes,7,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	To                       string `protobuf:"bytes,8,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ListOrganizationsHostQueriesRequest) Reset() {
	*x = ListOrganizationsHostQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsHostQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsHostQueriesRequest) ProtoMessage() {}

func (x *ListOrganizationsHostQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsHostQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsHostQueriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{546}
}

func (x *ListOrganizationsHostQueriesRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetInclQueriesWithoutReport() string {
	if x != nil {
		return x.InclQueriesWithoutReport
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *ListOrganizationsHostQueriesRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type CreateOrganizationsHostSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                          string                                  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsHostSecurityReport *GoogleCloudApigeeV1SecurityReportQuery `protobuf:"bytes,2,opt,name=organizations_host_security_report,json=organizationsHostSecurityReport,proto3" json:"organizations_host_security_report,omitempty"`
}

func (x *CreateOrganizationsHostSecurityReportRequest) Reset() {
	*x = CreateOrganizationsHostSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsHostSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsHostSecurityReportRequest) ProtoMessage() {}

func (x *CreateOrganizationsHostSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsHostSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsHostSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{547}
}

func (x *CreateOrganizationsHostSecurityReportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsHostSecurityReportRequest) GetOrganizationsHostSecurityReport() *GoogleCloudApigeeV1SecurityReportQuery {
	if x != nil {
		return x.OrganizationsHostSecurityReport
	}
	return nil
}

type GetOrganizationsHostSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsHostSecurityReportRequest) Reset() {
	*x = GetOrganizationsHostSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsHostSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsHostSecurityReportRequest) ProtoMessage() {}

func (x *GetOrganizationsHostSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsHostSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsHostSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{548}
}

func (x *GetOrganizationsHostSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultOrganizationsHostSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultOrganizationsHostSecurityReportRequest) Reset() {
	*x = GetResultOrganizationsHostSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultOrganizationsHostSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultOrganizationsHostSecurityReportRequest) ProtoMessage() {}

func (x *GetResultOrganizationsHostSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultOrganizationsHostSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetResultOrganizationsHostSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{549}
}

func (x *GetResultOrganizationsHostSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetResultViewOrganizationsHostSecurityReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetResultViewOrganizationsHostSecurityReportRequest) Reset() {
	*x = GetResultViewOrganizationsHostSecurityReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultViewOrganizationsHostSecurityReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultViewOrganizationsHostSecurityReportRequest) ProtoMessage() {}

func (x *GetResultViewOrganizationsHostSecurityReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultViewOrganizationsHostSecurityReportRequest.ProtoReflect.Descriptor instead.
func (*GetResultViewOrganizationsHostSecurityReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{550}
}

func (x *GetResultViewOrganizationsHostSecurityReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsHostSecurityReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dataset          string `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	EnvgroupHostname string `protobuf:"bytes,2,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	From             string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	PageSize         int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken        string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent           string `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Status           string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	SubmittedBy      string `protobuf:"bytes,8,opt,name=submitted_by,json=submittedBy,proto3" json:"submitted_by,omitempty"`
	To               string `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ListOrganizationsHostSecurityReportsRequest) Reset() {
	*x = ListOrganizationsHostSecurityReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsHostSecurityReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsHostSecurityReportsRequest) ProtoMessage() {}

func (x *ListOrganizationsHostSecurityReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsHostSecurityReportsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsHostSecurityReportsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{551}
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetSubmittedBy() string {
	if x != nil {
		return x.SubmittedBy
	}
	return ""
}

func (x *ListOrganizationsHostSecurityReportsRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type GetOrganizationsHostStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy         string `protobuf:"bytes,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	EnvgroupHostname string `protobuf:"bytes,2,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	Filter           string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit            string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Offset           string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Realtime         bool   `protobuf:"varint,7,opt,name=realtime,proto3" json:"realtime,omitempty"`
	Select           string `protobuf:"bytes,8,opt,name=select,proto3" json:"select,omitempty"`
	Sort             string `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Sortby           string `protobuf:"bytes,10,opt,name=sortby,proto3" json:"sortby,omitempty"`
	TimeRange        string `protobuf:"bytes,11,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	TimeUnit         string `protobuf:"bytes,12,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Topk             string `protobuf:"bytes,13,opt,name=topk,proto3" json:"topk,omitempty"`
	TsAscending      bool   `protobuf:"varint,14,opt,name=ts_ascending,json=tsAscending,proto3" json:"ts_ascending,omitempty"`
	Tzo              string `protobuf:"bytes,15,opt,name=tzo,proto3" json:"tzo,omitempty"`
}

func (x *GetOrganizationsHostStatRequest) Reset() {
	*x = GetOrganizationsHostStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsHostStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsHostStatRequest) ProtoMessage() {}

func (x *GetOrganizationsHostStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsHostStatRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsHostStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{552}
}

func (x *GetOrganizationsHostStatRequest) GetAccuracy() string {
	if x != nil {
		return x.Accuracy
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetRealtime() bool {
	if x != nil {
		return x.Realtime
	}
	return false
}

func (x *GetOrganizationsHostStatRequest) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetTopk() string {
	if x != nil {
		return x.Topk
	}
	return ""
}

func (x *GetOrganizationsHostStatRequest) GetTsAscending() bool {
	if x != nil {
		return x.TsAscending
	}
	return false
}

func (x *GetOrganizationsHostStatRequest) GetTzo() string {
	if x != nil {
		return x.Tzo
	}
	return ""
}

type CreateOrganizationsInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                string                       `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsInstance *GoogleCloudApigeeV1Instance `protobuf:"bytes,2,opt,name=organizations_instance,json=organizationsInstance,proto3" json:"organizations_instance,omitempty"`
}

func (x *CreateOrganizationsInstanceRequest) Reset() {
	*x = CreateOrganizationsInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsInstanceRequest) ProtoMessage() {}

func (x *CreateOrganizationsInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsInstanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{553}
}

func (x *CreateOrganizationsInstanceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsInstanceRequest) GetOrganizationsInstance() *GoogleCloudApigeeV1Instance {
	if x != nil {
		return x.OrganizationsInstance
	}
	return nil
}

type DeleteOrganizationsInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsInstanceRequest) Reset() {
	*x = DeleteOrganizationsInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsInstanceRequest) ProtoMessage() {}

func (x *DeleteOrganizationsInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsInstanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{554}
}

func (x *DeleteOrganizationsInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsInstanceRequest) Reset() {
	*x = GetOrganizationsInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsInstanceRequest) ProtoMessage() {}

func (x *GetOrganizationsInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsInstanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{555}
}

func (x *GetOrganizationsInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsInstancesRequest) Reset() {
	*x = ListOrganizationsInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsInstancesRequest) ProtoMessage() {}

func (x *ListOrganizationsInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsInstancesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{556}
}

func (x *ListOrganizationsInstancesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsInstancesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsInstancesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask            string                       `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsInstance *GoogleCloudApigeeV1Instance `protobuf:"bytes,3,opt,name=organizations_instance,json=organizationsInstance,proto3" json:"organizations_instance,omitempty"`
}

func (x *PatchOrganizationsInstanceRequest) Reset() {
	*x = PatchOrganizationsInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsInstanceRequest) ProtoMessage() {}

func (x *PatchOrganizationsInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsInstanceRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsInstanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{557}
}

func (x *PatchOrganizationsInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsInstanceRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsInstanceRequest) GetOrganizationsInstance() *GoogleCloudApigeeV1Instance {
	if x != nil {
		return x.OrganizationsInstance
	}
	return nil
}

type ReportStatusOrganizationsInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance              string                                          `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	OrganizationsInstance *GoogleCloudApigeeV1ReportInstanceStatusRequest `protobuf:"bytes,2,opt,name=organizations_instance,json=organizationsInstance,proto3" json:"organizations_instance,omitempty"`
}

func (x *ReportStatusOrganizationsInstanceRequest) Reset() {
	*x = ReportStatusOrganizationsInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatusOrganizationsInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatusOrganizationsInstanceRequest) ProtoMessage() {}

func (x *ReportStatusOrganizationsInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatusOrganizationsInstanceRequest.ProtoReflect.Descriptor instead.
func (*ReportStatusOrganizationsInstanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{558}
}

func (x *ReportStatusOrganizationsInstanceRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *ReportStatusOrganizationsInstanceRequest) GetOrganizationsInstance() *GoogleCloudApigeeV1ReportInstanceStatusRequest {
	if x != nil {
		return x.OrganizationsInstance
	}
	return nil
}

type CreateOrganizationsInstancesAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                           string                                 `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsInstancesAttachment *GoogleCloudApigeeV1InstanceAttachment `protobuf:"bytes,2,opt,name=organizations_instances_attachment,json=organizationsInstancesAttachment,proto3" json:"organizations_instances_attachment,omitempty"`
}

func (x *CreateOrganizationsInstancesAttachmentRequest) Reset() {
	*x = CreateOrganizationsInstancesAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsInstancesAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsInstancesAttachmentRequest) ProtoMessage() {}

func (x *CreateOrganizationsInstancesAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsInstancesAttachmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsInstancesAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{559}
}

func (x *CreateOrganizationsInstancesAttachmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsInstancesAttachmentRequest) GetOrganizationsInstancesAttachment() *GoogleCloudApigeeV1InstanceAttachment {
	if x != nil {
		return x.OrganizationsInstancesAttachment
	}
	return nil
}

type DeleteOrganizationsInstancesAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsInstancesAttachmentRequest) Reset() {
	*x = DeleteOrganizationsInstancesAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsInstancesAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsInstancesAttachmentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsInstancesAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsInstancesAttachmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsInstancesAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{560}
}

func (x *DeleteOrganizationsInstancesAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsInstancesAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsInstancesAttachmentRequest) Reset() {
	*x = GetOrganizationsInstancesAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsInstancesAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsInstancesAttachmentRequest) ProtoMessage() {}

func (x *GetOrganizationsInstancesAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsInstancesAttachmentRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsInstancesAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{561}
}

func (x *GetOrganizationsInstancesAttachmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsInstancesAttachmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsInstancesAttachmentsRequest) Reset() {
	*x = ListOrganizationsInstancesAttachmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsInstancesAttachmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsInstancesAttachmentsRequest) ProtoMessage() {}

func (x *ListOrganizationsInstancesAttachmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsInstancesAttachmentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsInstancesAttachmentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{562}
}

func (x *ListOrganizationsInstancesAttachmentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsInstancesAttachmentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsInstancesAttachmentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsInstancesCanaryevaluationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                 string                               `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsInstancesCanaryevaluation *GoogleCloudApigeeV1CanaryEvaluation `protobuf:"bytes,2,opt,name=organizations_instances_canaryevaluation,json=organizationsInstancesCanaryevaluation,proto3" json:"organizations_instances_canaryevaluation,omitempty"`
}

func (x *CreateOrganizationsInstancesCanaryevaluationRequest) Reset() {
	*x = CreateOrganizationsInstancesCanaryevaluationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsInstancesCanaryevaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsInstancesCanaryevaluationRequest) ProtoMessage() {}

func (x *CreateOrganizationsInstancesCanaryevaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsInstancesCanaryevaluationRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsInstancesCanaryevaluationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{563}
}

func (x *CreateOrganizationsInstancesCanaryevaluationRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsInstancesCanaryevaluationRequest) GetOrganizationsInstancesCanaryevaluation() *GoogleCloudApigeeV1CanaryEvaluation {
	if x != nil {
		return x.OrganizationsInstancesCanaryevaluation
	}
	return nil
}

type GetOrganizationsInstancesCanaryevaluationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsInstancesCanaryevaluationRequest) Reset() {
	*x = GetOrganizationsInstancesCanaryevaluationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsInstancesCanaryevaluationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsInstancesCanaryevaluationRequest) ProtoMessage() {}

func (x *GetOrganizationsInstancesCanaryevaluationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsInstancesCanaryevaluationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsInstancesCanaryevaluationRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{564}
}

func (x *GetOrganizationsInstancesCanaryevaluationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ActivateOrganizationsInstancesNatAddresseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                              string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsInstancesNatAddresse *GoogleCloudApigeeV1ActivateNatAddressRequest `protobuf:"bytes,2,opt,name=organizations_instances_nat_addresse,json=organizationsInstancesNatAddresse,proto3" json:"organizations_instances_nat_addresse,omitempty"`
}

func (x *ActivateOrganizationsInstancesNatAddresseRequest) Reset() {
	*x = ActivateOrganizationsInstancesNatAddresseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateOrganizationsInstancesNatAddresseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateOrganizationsInstancesNatAddresseRequest) ProtoMessage() {}

func (x *ActivateOrganizationsInstancesNatAddresseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateOrganizationsInstancesNatAddresseRequest.ProtoReflect.Descriptor instead.
func (*ActivateOrganizationsInstancesNatAddresseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{565}
}

func (x *ActivateOrganizationsInstancesNatAddresseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivateOrganizationsInstancesNatAddresseRequest) GetOrganizationsInstancesNatAddresse() *GoogleCloudApigeeV1ActivateNatAddressRequest {
	if x != nil {
		return x.OrganizationsInstancesNatAddresse
	}
	return nil
}

type CreateOrganizationsInstancesNatAddresseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                            string                         `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsInstancesNatAddresse *GoogleCloudApigeeV1NatAddress `protobuf:"bytes,2,opt,name=organizations_instances_nat_addresse,json=organizationsInstancesNatAddresse,proto3" json:"organizations_instances_nat_addresse,omitempty"`
}

func (x *CreateOrganizationsInstancesNatAddresseRequest) Reset() {
	*x = CreateOrganizationsInstancesNatAddresseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsInstancesNatAddresseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsInstancesNatAddresseRequest) ProtoMessage() {}

func (x *CreateOrganizationsInstancesNatAddresseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsInstancesNatAddresseRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsInstancesNatAddresseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{566}
}

func (x *CreateOrganizationsInstancesNatAddresseRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsInstancesNatAddresseRequest) GetOrganizationsInstancesNatAddresse() *GoogleCloudApigeeV1NatAddress {
	if x != nil {
		return x.OrganizationsInstancesNatAddresse
	}
	return nil
}

type DeleteOrganizationsInstancesNatAddresseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsInstancesNatAddresseRequest) Reset() {
	*x = DeleteOrganizationsInstancesNatAddresseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsInstancesNatAddresseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsInstancesNatAddresseRequest) ProtoMessage() {}

func (x *DeleteOrganizationsInstancesNatAddresseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsInstancesNatAddresseRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsInstancesNatAddresseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{567}
}

func (x *DeleteOrganizationsInstancesNatAddresseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsInstancesNatAddresseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsInstancesNatAddresseRequest) Reset() {
	*x = GetOrganizationsInstancesNatAddresseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsInstancesNatAddresseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsInstancesNatAddresseRequest) ProtoMessage() {}

func (x *GetOrganizationsInstancesNatAddresseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsInstancesNatAddresseRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsInstancesNatAddresseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{568}
}

func (x *GetOrganizationsInstancesNatAddresseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsInstancesNatAddressesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsInstancesNatAddressesRequest) Reset() {
	*x = ListOrganizationsInstancesNatAddressesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsInstancesNatAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsInstancesNatAddressesRequest) ProtoMessage() {}

func (x *ListOrganizationsInstancesNatAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsInstancesNatAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsInstancesNatAddressesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{569}
}

func (x *ListOrganizationsInstancesNatAddressesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsInstancesNatAddressesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsInstancesNatAddressesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                   string                          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsKeyvaluemap *GoogleCloudApigeeV1KeyValueMap `protobuf:"bytes,2,opt,name=organizations_keyvaluemap,json=organizationsKeyvaluemap,proto3" json:"organizations_keyvaluemap,omitempty"`
}

func (x *CreateOrganizationsKeyvaluemapRequest) Reset() {
	*x = CreateOrganizationsKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsKeyvaluemapRequest) ProtoMessage() {}

func (x *CreateOrganizationsKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{570}
}

func (x *CreateOrganizationsKeyvaluemapRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsKeyvaluemapRequest) GetOrganizationsKeyvaluemap() *GoogleCloudApigeeV1KeyValueMap {
	if x != nil {
		return x.OrganizationsKeyvaluemap
	}
	return nil
}

type DeleteOrganizationsKeyvaluemapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsKeyvaluemapRequest) Reset() {
	*x = DeleteOrganizationsKeyvaluemapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsKeyvaluemapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsKeyvaluemapRequest) ProtoMessage() {}

func (x *DeleteOrganizationsKeyvaluemapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsKeyvaluemapRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsKeyvaluemapRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{571}
}

func (x *DeleteOrganizationsKeyvaluemapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                         string                            `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_keyvaluemaps_entry,json=organizationsKeyvaluemapsEntry,proto3" json:"organizations_keyvaluemaps_entry,omitempty"`
}

func (x *CreateOrganizationsKeyvaluemapsEntryRequest) Reset() {
	*x = CreateOrganizationsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *CreateOrganizationsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{572}
}

func (x *CreateOrganizationsKeyvaluemapsEntryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsKeyvaluemapsEntryRequest) GetOrganizationsKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsKeyvaluemapsEntry
	}
	return nil
}

type DeleteOrganizationsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsKeyvaluemapsEntryRequest) Reset() {
	*x = DeleteOrganizationsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *DeleteOrganizationsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{573}
}

func (x *DeleteOrganizationsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsKeyvaluemapsEntryRequest) Reset() {
	*x = GetOrganizationsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *GetOrganizationsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{574}
}

func (x *GetOrganizationsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsKeyvaluemapsEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) Reset() {
	*x = ListOrganizationsKeyvaluemapsEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsKeyvaluemapsEntriesRequest) ProtoMessage() {}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsKeyvaluemapsEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsKeyvaluemapsEntriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{575}
}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsKeyvaluemapsEntriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsKeyvaluemapsEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           string                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsKeyvaluemapsEntry *GoogleCloudApigeeV1KeyValueEntry `protobuf:"bytes,2,opt,name=organizations_keyvaluemaps_entry,json=organizationsKeyvaluemapsEntry,proto3" json:"organizations_keyvaluemaps_entry,omitempty"`
}

func (x *UpdateOrganizationsKeyvaluemapsEntryRequest) Reset() {
	*x = UpdateOrganizationsKeyvaluemapsEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsKeyvaluemapsEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsKeyvaluemapsEntryRequest) ProtoMessage() {}

func (x *UpdateOrganizationsKeyvaluemapsEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsKeyvaluemapsEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsKeyvaluemapsEntryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{576}
}

func (x *UpdateOrganizationsKeyvaluemapsEntryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsKeyvaluemapsEntryRequest) GetOrganizationsKeyvaluemapsEntry() *GoogleCloudApigeeV1KeyValueEntry {
	if x != nil {
		return x.OrganizationsKeyvaluemapsEntry
	}
	return nil
}

type GetOrganizationsOptimizedHostStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accuracy         string `protobuf:"bytes,1,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	EnvgroupHostname string `protobuf:"bytes,2,opt,name=envgroup_hostname,json=envgroupHostname,proto3" json:"envgroup_hostname,omitempty"`
	Filter           string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Limit            string `protobuf:"bytes,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Name             string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Offset           string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Realtime         bool   `protobuf:"varint,7,opt,name=realtime,proto3" json:"realtime,omitempty"`
	Select           string `protobuf:"bytes,8,opt,name=select,proto3" json:"select,omitempty"`
	Sort             string `protobuf:"bytes,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Sortby           string `protobuf:"bytes,10,opt,name=sortby,proto3" json:"sortby,omitempty"`
	TimeRange        string `protobuf:"bytes,11,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	TimeUnit         string `protobuf:"bytes,12,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	Topk             string `protobuf:"bytes,13,opt,name=topk,proto3" json:"topk,omitempty"`
	TsAscending      bool   `protobuf:"varint,14,opt,name=ts_ascending,json=tsAscending,proto3" json:"ts_ascending,omitempty"`
	Tzo              string `protobuf:"bytes,15,opt,name=tzo,proto3" json:"tzo,omitempty"`
}

func (x *GetOrganizationsOptimizedHostStatRequest) Reset() {
	*x = GetOrganizationsOptimizedHostStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsOptimizedHostStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsOptimizedHostStatRequest) ProtoMessage() {}

func (x *GetOrganizationsOptimizedHostStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsOptimizedHostStatRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsOptimizedHostStatRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{577}
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetAccuracy() string {
	if x != nil {
		return x.Accuracy
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetEnvgroupHostname() string {
	if x != nil {
		return x.EnvgroupHostname
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetRealtime() bool {
	if x != nil {
		return x.Realtime
	}
	return false
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetSelect() string {
	if x != nil {
		return x.Select
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetSortby() string {
	if x != nil {
		return x.Sortby
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetTimeUnit() string {
	if x != nil {
		return x.TimeUnit
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetTopk() string {
	if x != nil {
		return x.Topk
	}
	return ""
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetTsAscending() bool {
	if x != nil {
		return x.TsAscending
	}
	return false
}

func (x *GetOrganizationsOptimizedHostStatRequest) GetTzo() string {
	if x != nil {
		return x.Tzo
	}
	return ""
}

type CreateOrganizationsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent              string                           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsReport *GoogleCloudApigeeV1CustomReport `protobuf:"bytes,2,opt,name=organizations_report,json=organizationsReport,proto3" json:"organizations_report,omitempty"`
}

func (x *CreateOrganizationsReportRequest) Reset() {
	*x = CreateOrganizationsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsReportRequest) ProtoMessage() {}

func (x *CreateOrganizationsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsReportRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{578}
}

func (x *CreateOrganizationsReportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsReportRequest) GetOrganizationsReport() *GoogleCloudApigeeV1CustomReport {
	if x != nil {
		return x.OrganizationsReport
	}
	return nil
}

type DeleteOrganizationsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsReportRequest) Reset() {
	*x = DeleteOrganizationsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsReportRequest) ProtoMessage() {}

func (x *DeleteOrganizationsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsReportRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{579}
}

func (x *DeleteOrganizationsReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsReportRequest) Reset() {
	*x = GetOrganizationsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsReportRequest) ProtoMessage() {}

func (x *GetOrganizationsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsReportRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{580}
}

func (x *GetOrganizationsReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expand bool   `protobuf:"varint,1,opt,name=expand,proto3" json:"expand,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsReportsRequest) Reset() {
	*x = ListOrganizationsReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsReportsRequest) ProtoMessage() {}

func (x *ListOrganizationsReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsReportsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsReportsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{581}
}

func (x *ListOrganizationsReportsRequest) GetExpand() bool {
	if x != nil {
		return x.Expand
	}
	return false
}

func (x *ListOrganizationsReportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsReport *GoogleCloudApigeeV1CustomReport `protobuf:"bytes,2,opt,name=organizations_report,json=organizationsReport,proto3" json:"organizations_report,omitempty"`
}

func (x *UpdateOrganizationsReportRequest) Reset() {
	*x = UpdateOrganizationsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsReportRequest) ProtoMessage() {}

func (x *UpdateOrganizationsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsReportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{582}
}

func (x *UpdateOrganizationsReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsReportRequest) GetOrganizationsReport() *GoogleCloudApigeeV1CustomReport {
	if x != nil {
		return x.OrganizationsReport
	}
	return nil
}

type BatchComputeOrganizationsSecurityAssessmentResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                  string                                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsSecurityAssessmentResult *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest `protobuf:"bytes,2,opt,name=organizations_security_assessment_result,json=organizationsSecurityAssessmentResult,proto3" json:"organizations_security_assessment_result,omitempty"`
}

func (x *BatchComputeOrganizationsSecurityAssessmentResultRequest) Reset() {
	*x = BatchComputeOrganizationsSecurityAssessmentResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchComputeOrganizationsSecurityAssessmentResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchComputeOrganizationsSecurityAssessmentResultRequest) ProtoMessage() {}

func (x *BatchComputeOrganizationsSecurityAssessmentResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchComputeOrganizationsSecurityAssessmentResultRequest.ProtoReflect.Descriptor instead.
func (*BatchComputeOrganizationsSecurityAssessmentResultRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{583}
}

func (x *BatchComputeOrganizationsSecurityAssessmentResultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BatchComputeOrganizationsSecurityAssessmentResultRequest) GetOrganizationsSecurityAssessmentResult() *GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest {
	if x != nil {
		return x.OrganizationsSecurityAssessmentResult
	}
	return nil
}

type CreateOrganizationsSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                       string                              `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	SecurityProfileId            string                              `protobuf:"bytes,2,opt,name=security_profile_id,json=securityProfileId,proto3" json:"security_profile_id,omitempty"`
	OrganizationsSecurityProfile *GoogleCloudApigeeV1SecurityProfile `protobuf:"bytes,3,opt,name=organizations_security_profile,json=organizationsSecurityProfile,proto3" json:"organizations_security_profile,omitempty"`
}

func (x *CreateOrganizationsSecurityProfileRequest) Reset() {
	*x = CreateOrganizationsSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSecurityProfileRequest) ProtoMessage() {}

func (x *CreateOrganizationsSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{584}
}

func (x *CreateOrganizationsSecurityProfileRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSecurityProfileRequest) GetSecurityProfileId() string {
	if x != nil {
		return x.SecurityProfileId
	}
	return ""
}

func (x *CreateOrganizationsSecurityProfileRequest) GetOrganizationsSecurityProfile() *GoogleCloudApigeeV1SecurityProfile {
	if x != nil {
		return x.OrganizationsSecurityProfile
	}
	return nil
}

type DeleteOrganizationsSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSecurityProfileRequest) Reset() {
	*x = DeleteOrganizationsSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSecurityProfileRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{585}
}

func (x *DeleteOrganizationsSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSecurityProfileRequest) Reset() {
	*x = GetOrganizationsSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSecurityProfileRequest) ProtoMessage() {}

func (x *GetOrganizationsSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{586}
}

func (x *GetOrganizationsSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsSecurityProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSecurityProfilesRequest) Reset() {
	*x = ListOrganizationsSecurityProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSecurityProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSecurityProfilesRequest) ProtoMessage() {}

func (x *ListOrganizationsSecurityProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSecurityProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSecurityProfilesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{587}
}

func (x *ListOrganizationsSecurityProfilesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsSecurityProfilesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsSecurityProfilesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListRevisionsOrganizationsSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) Reset() {
	*x = ListRevisionsOrganizationsSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRevisionsOrganizationsSecurityProfileRequest) ProtoMessage() {}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRevisionsOrganizationsSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*ListRevisionsOrganizationsSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{588}
}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRevisionsOrganizationsSecurityProfileRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type PatchOrganizationsSecurityProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                   string                              `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsSecurityProfile *GoogleCloudApigeeV1SecurityProfile `protobuf:"bytes,3,opt,name=organizations_security_profile,json=organizationsSecurityProfile,proto3" json:"organizations_security_profile,omitempty"`
}

func (x *PatchOrganizationsSecurityProfileRequest) Reset() {
	*x = PatchOrganizationsSecurityProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsSecurityProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsSecurityProfileRequest) ProtoMessage() {}

func (x *PatchOrganizationsSecurityProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsSecurityProfileRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsSecurityProfileRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{589}
}

func (x *PatchOrganizationsSecurityProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsSecurityProfileRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsSecurityProfileRequest) GetOrganizationsSecurityProfile() *GoogleCloudApigeeV1SecurityProfile {
	if x != nil {
		return x.OrganizationsSecurityProfile
	}
	return nil
}

type ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileEnvironment                       string                                              `protobuf:"bytes,1,opt,name=profile_environment,json=profileEnvironment,proto3" json:"profile_environment,omitempty"`
	OrganizationsSecurityProfilesEnvironment *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest `protobuf:"bytes,2,opt,name=organizations_security_profiles_environment,json=organizationsSecurityProfilesEnvironment,proto3" json:"organizations_security_profiles_environment,omitempty"`
}

func (x *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) Reset() {
	*x = ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) ProtoMessage() {}

func (x *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{590}
}

func (x *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) GetProfileEnvironment() string {
	if x != nil {
		return x.ProfileEnvironment
	}
	return ""
}

func (x *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) GetOrganizationsSecurityProfilesEnvironment() *GoogleCloudApigeeV1ComputeEnvironmentScoresRequest {
	if x != nil {
		return x.OrganizationsSecurityProfilesEnvironment
	}
	return nil
}

type CreateOrganizationsSecurityProfilesEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                                   string                                                    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsSecurityProfilesEnvironment *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation `protobuf:"bytes,2,opt,name=organizations_security_profiles_environment,json=organizationsSecurityProfilesEnvironment,proto3" json:"organizations_security_profiles_environment,omitempty"`
}

func (x *CreateOrganizationsSecurityProfilesEnvironmentRequest) Reset() {
	*x = CreateOrganizationsSecurityProfilesEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSecurityProfilesEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSecurityProfilesEnvironmentRequest) ProtoMessage() {}

func (x *CreateOrganizationsSecurityProfilesEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSecurityProfilesEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSecurityProfilesEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{591}
}

func (x *CreateOrganizationsSecurityProfilesEnvironmentRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSecurityProfilesEnvironmentRequest) GetOrganizationsSecurityProfilesEnvironment() *GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation {
	if x != nil {
		return x.OrganizationsSecurityProfilesEnvironment
	}
	return nil
}

type DeleteOrganizationsSecurityProfilesEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSecurityProfilesEnvironmentRequest) Reset() {
	*x = DeleteOrganizationsSecurityProfilesEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSecurityProfilesEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSecurityProfilesEnvironmentRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSecurityProfilesEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSecurityProfilesEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSecurityProfilesEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{592}
}

func (x *DeleteOrganizationsSecurityProfilesEnvironmentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateOrganizationsSecurityProfilesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                          string                                `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	SecurityProfileV2Id             string                                `protobuf:"bytes,2,opt,name=security_profile_v2_id,json=securityProfileV2Id,proto3" json:"security_profile_v2_id,omitempty"`
	OrganizationsSecurityProfilesV2 *GoogleCloudApigeeV1SecurityProfileV2 `protobuf:"bytes,3,opt,name=organizations_security_profiles_v2,json=organizationsSecurityProfilesV2,proto3" json:"organizations_security_profiles_v2,omitempty"`
}

func (x *CreateOrganizationsSecurityProfilesV2Request) Reset() {
	*x = CreateOrganizationsSecurityProfilesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSecurityProfilesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSecurityProfilesV2Request) ProtoMessage() {}

func (x *CreateOrganizationsSecurityProfilesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSecurityProfilesV2Request.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSecurityProfilesV2Request) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{593}
}

func (x *CreateOrganizationsSecurityProfilesV2Request) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSecurityProfilesV2Request) GetSecurityProfileV2Id() string {
	if x != nil {
		return x.SecurityProfileV2Id
	}
	return ""
}

func (x *CreateOrganizationsSecurityProfilesV2Request) GetOrganizationsSecurityProfilesV2() *GoogleCloudApigeeV1SecurityProfileV2 {
	if x != nil {
		return x.OrganizationsSecurityProfilesV2
	}
	return nil
}

type DeleteOrganizationsSecurityProfilesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSecurityProfilesV2Request) Reset() {
	*x = DeleteOrganizationsSecurityProfilesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSecurityProfilesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSecurityProfilesV2Request) ProtoMessage() {}

func (x *DeleteOrganizationsSecurityProfilesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSecurityProfilesV2Request.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSecurityProfilesV2Request) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{594}
}

func (x *DeleteOrganizationsSecurityProfilesV2Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSecurityProfilesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSecurityProfilesV2Request) Reset() {
	*x = GetOrganizationsSecurityProfilesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSecurityProfilesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSecurityProfilesV2Request) ProtoMessage() {}

func (x *GetOrganizationsSecurityProfilesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSecurityProfilesV2Request.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSecurityProfilesV2Request) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{595}
}

func (x *GetOrganizationsSecurityProfilesV2Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsSecurityProfilesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSecurityProfilesV2Request) Reset() {
	*x = ListOrganizationsSecurityProfilesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSecurityProfilesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSecurityProfilesV2Request) ProtoMessage() {}

func (x *ListOrganizationsSecurityProfilesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSecurityProfilesV2Request.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSecurityProfilesV2Request) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{596}
}

func (x *ListOrganizationsSecurityProfilesV2Request) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsSecurityProfilesV2Request) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsSecurityProfilesV2Request) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsSecurityProfilesV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                            string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UpdateMask                      string                                `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	OrganizationsSecurityProfilesV2 *GoogleCloudApigeeV1SecurityProfileV2 `protobuf:"bytes,3,opt,name=organizations_security_profiles_v2,json=organizationsSecurityProfilesV2,proto3" json:"organizations_security_profiles_v2,omitempty"`
}

func (x *PatchOrganizationsSecurityProfilesV2Request) Reset() {
	*x = PatchOrganizationsSecurityProfilesV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsSecurityProfilesV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsSecurityProfilesV2Request) ProtoMessage() {}

func (x *PatchOrganizationsSecurityProfilesV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsSecurityProfilesV2Request.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsSecurityProfilesV2Request) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{597}
}

func (x *PatchOrganizationsSecurityProfilesV2Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsSecurityProfilesV2Request) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

func (x *PatchOrganizationsSecurityProfilesV2Request) GetOrganizationsSecurityProfilesV2() *GoogleCloudApigeeV1SecurityProfileV2 {
	if x != nil {
		return x.OrganizationsSecurityProfilesV2
	}
	return nil
}

type CreateOrganizationsSharedflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action                  string             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Name                    string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Parent                  string             `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsSharedflow *GoogleApiHttpBody `protobuf:"bytes,4,opt,name=organizations_sharedflow,json=organizationsSharedflow,proto3" json:"organizations_sharedflow,omitempty"`
}

func (x *CreateOrganizationsSharedflowRequest) Reset() {
	*x = CreateOrganizationsSharedflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSharedflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSharedflowRequest) ProtoMessage() {}

func (x *CreateOrganizationsSharedflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSharedflowRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSharedflowRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{598}
}

func (x *CreateOrganizationsSharedflowRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CreateOrganizationsSharedflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationsSharedflowRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSharedflowRequest) GetOrganizationsSharedflow() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsSharedflow
	}
	return nil
}

type DeleteOrganizationsSharedflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSharedflowRequest) Reset() {
	*x = DeleteOrganizationsSharedflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSharedflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSharedflowRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSharedflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSharedflowRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSharedflowRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{599}
}

func (x *DeleteOrganizationsSharedflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSharedflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSharedflowRequest) Reset() {
	*x = GetOrganizationsSharedflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSharedflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSharedflowRequest) ProtoMessage() {}

func (x *GetOrganizationsSharedflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSharedflowRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSharedflowRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{600}
}

func (x *GetOrganizationsSharedflowRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsSharedflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMetaData  bool   `protobuf:"varint,1,opt,name=include_meta_data,json=includeMetaData,proto3" json:"include_meta_data,omitempty"`
	IncludeRevisions bool   `protobuf:"varint,2,opt,name=include_revisions,json=includeRevisions,proto3" json:"include_revisions,omitempty"`
	Parent           string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSharedflowsRequest) Reset() {
	*x = ListOrganizationsSharedflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSharedflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSharedflowsRequest) ProtoMessage() {}

func (x *ListOrganizationsSharedflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSharedflowsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSharedflowsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{601}
}

func (x *ListOrganizationsSharedflowsRequest) GetIncludeMetaData() bool {
	if x != nil {
		return x.IncludeMetaData
	}
	return false
}

func (x *ListOrganizationsSharedflowsRequest) GetIncludeRevisions() bool {
	if x != nil {
		return x.IncludeRevisions
	}
	return false
}

func (x *ListOrganizationsSharedflowsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListOrganizationsSharedflowsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSharedflowsDeploymentsRequest) Reset() {
	*x = ListOrganizationsSharedflowsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSharedflowsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSharedflowsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsSharedflowsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSharedflowsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSharedflowsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{602}
}

func (x *ListOrganizationsSharedflowsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type DeleteOrganizationsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSharedflowsRevisionRequest) Reset() {
	*x = DeleteOrganizationsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{603}
}

func (x *DeleteOrganizationsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSharedflowsRevisionRequest) Reset() {
	*x = GetOrganizationsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *GetOrganizationsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{604}
}

func (x *GetOrganizationsSharedflowsRevisionRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetOrganizationsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Validate                         bool               `protobuf:"varint,2,opt,name=validate,proto3" json:"validate,omitempty"`
	OrganizationsSharedflowsRevision *GoogleApiHttpBody `protobuf:"bytes,3,opt,name=organizations_sharedflows_revision,json=organizationsSharedflowsRevision,proto3" json:"organizations_sharedflows_revision,omitempty"`
}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) Reset() {
	*x = UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) ProtoMessage() {}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{605}
}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) GetOrganizationsSharedflowsRevision() *GoogleApiHttpBody {
	if x != nil {
		return x.OrganizationsSharedflowsRevision
	}
	return nil
}

type ListOrganizationsSharedflowsRevisionsDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) Reset() {
	*x = ListOrganizationsSharedflowsRevisionsDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSharedflowsRevisionsDeploymentsRequest) ProtoMessage() {}

func (x *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSharedflowsRevisionsDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSharedflowsRevisionsDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{606}
}

func (x *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type CreateOrganizationsSitesApicategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                        string                          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsSitesApicategory *GoogleCloudApigeeV1ApiCategory `protobuf:"bytes,2,opt,name=organizations_sites_apicategory,json=organizationsSitesApicategory,proto3" json:"organizations_sites_apicategory,omitempty"`
}

func (x *CreateOrganizationsSitesApicategoryRequest) Reset() {
	*x = CreateOrganizationsSitesApicategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSitesApicategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSitesApicategoryRequest) ProtoMessage() {}

func (x *CreateOrganizationsSitesApicategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSitesApicategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSitesApicategoryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{607}
}

func (x *CreateOrganizationsSitesApicategoryRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSitesApicategoryRequest) GetOrganizationsSitesApicategory() *GoogleCloudApigeeV1ApiCategory {
	if x != nil {
		return x.OrganizationsSitesApicategory
	}
	return nil
}

type DeleteOrganizationsSitesApicategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSitesApicategoryRequest) Reset() {
	*x = DeleteOrganizationsSitesApicategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSitesApicategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSitesApicategoryRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSitesApicategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSitesApicategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSitesApicategoryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{608}
}

func (x *DeleteOrganizationsSitesApicategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSitesApicategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSitesApicategoryRequest) Reset() {
	*x = GetOrganizationsSitesApicategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSitesApicategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSitesApicategoryRequest) ProtoMessage() {}

func (x *GetOrganizationsSitesApicategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSitesApicategoryRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSitesApicategoryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{609}
}

func (x *GetOrganizationsSitesApicategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsSitesApicategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSitesApicategoriesRequest) Reset() {
	*x = ListOrganizationsSitesApicategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSitesApicategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSitesApicategoriesRequest) ProtoMessage() {}

func (x *ListOrganizationsSitesApicategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSitesApicategoriesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSitesApicategoriesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{610}
}

func (x *ListOrganizationsSitesApicategoriesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PatchOrganizationsSitesApicategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                          string                          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsSitesApicategory *GoogleCloudApigeeV1ApiCategory `protobuf:"bytes,2,opt,name=organizations_sites_apicategory,json=organizationsSitesApicategory,proto3" json:"organizations_sites_apicategory,omitempty"`
}

func (x *PatchOrganizationsSitesApicategoryRequest) Reset() {
	*x = PatchOrganizationsSitesApicategoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchOrganizationsSitesApicategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchOrganizationsSitesApicategoryRequest) ProtoMessage() {}

func (x *PatchOrganizationsSitesApicategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchOrganizationsSitesApicategoryRequest.ProtoReflect.Descriptor instead.
func (*PatchOrganizationsSitesApicategoryRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{611}
}

func (x *PatchOrganizationsSitesApicategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchOrganizationsSitesApicategoryRequest) GetOrganizationsSitesApicategory() *GoogleCloudApigeeV1ApiCategory {
	if x != nil {
		return x.OrganizationsSitesApicategory
	}
	return nil
}

type CreateOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                   string                     `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	OrganizationsSitesApidoc *GoogleCloudApigeeV1ApiDoc `protobuf:"bytes,2,opt,name=organizations_sites_apidoc,json=organizationsSitesApidoc,proto3" json:"organizations_sites_apidoc,omitempty"`
}

func (x *CreateOrganizationsSitesApidocRequest) Reset() {
	*x = CreateOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *CreateOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{612}
}

func (x *CreateOrganizationsSitesApidocRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateOrganizationsSitesApidocRequest) GetOrganizationsSitesApidoc() *GoogleCloudApigeeV1ApiDoc {
	if x != nil {
		return x.OrganizationsSitesApidoc
	}
	return nil
}

type DeleteOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationsSitesApidocRequest) Reset() {
	*x = DeleteOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *DeleteOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{613}
}

func (x *DeleteOrganizationsSitesApidocRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationsSitesApidocRequest) Reset() {
	*x = GetOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *GetOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{614}
}

func (x *GetOrganizationsSitesApidocRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDocumentationOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDocumentationOrganizationsSitesApidocRequest) Reset() {
	*x = GetDocumentationOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocumentationOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentationOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *GetDocumentationOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentationOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentationOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{615}
}

func (x *GetDocumentationOrganizationsSitesApidocRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOrganizationsSitesApidocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Parent    string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListOrganizationsSitesApidocsRequest) Reset() {
	*x = ListOrganizationsSitesApidocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationsSitesApidocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationsSitesApidocsRequest) ProtoMessage() {}

func (x *ListOrganizationsSitesApidocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationsSitesApidocsRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationsSitesApidocsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{616}
}

func (x *ListOrganizationsSitesApidocsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOrganizationsSitesApidocsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOrganizationsSitesApidocsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type UpdateOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsSitesApidoc *GoogleCloudApigeeV1ApiDoc `protobuf:"bytes,2,opt,name=organizations_sites_apidoc,json=organizationsSitesApidoc,proto3" json:"organizations_sites_apidoc,omitempty"`
}

func (x *UpdateOrganizationsSitesApidocRequest) Reset() {
	*x = UpdateOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *UpdateOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{617}
}

func (x *UpdateOrganizationsSitesApidocRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationsSitesApidocRequest) GetOrganizationsSitesApidoc() *GoogleCloudApigeeV1ApiDoc {
	if x != nil {
		return x.OrganizationsSitesApidoc
	}
	return nil
}

type UpdateDocumentationOrganizationsSitesApidocRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationsSitesApidoc *GoogleCloudApigeeV1ApiDocDocumentation `protobuf:"bytes,2,opt,name=organizations_sites_apidoc,json=organizationsSitesApidoc,proto3" json:"organizations_sites_apidoc,omitempty"`
}

func (x *UpdateDocumentationOrganizationsSitesApidocRequest) Reset() {
	*x = UpdateDocumentationOrganizationsSitesApidocRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDocumentationOrganizationsSitesApidocRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocumentationOrganizationsSitesApidocRequest) ProtoMessage() {}

func (x *UpdateDocumentationOrganizationsSitesApidocRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocumentationOrganizationsSitesApidocRequest.ProtoReflect.Descriptor instead.
func (*UpdateDocumentationOrganizationsSitesApidocRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{618}
}

func (x *UpdateDocumentationOrganizationsSitesApidocRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDocumentationOrganizationsSitesApidocRequest) GetOrganizationsSitesApidoc() *GoogleCloudApigeeV1ApiDocDocumentation {
	if x != nil {
		return x.OrganizationsSitesApidoc
	}
	return nil
}

type ProvisionOrganizationProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project *GoogleCloudApigeeV1ProvisionOrganizationRequest `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ProvisionOrganizationProjectRequest) Reset() {
	*x = ProvisionOrganizationProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionOrganizationProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionOrganizationProjectRequest) ProtoMessage() {}

func (x *ProvisionOrganizationProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionOrganizationProjectRequest.ProtoReflect.Descriptor instead.
func (*ProvisionOrganizationProjectRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP(), []int{619}
}

func (x *ProvisionOrganizationProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProvisionOrganizationProjectRequest) GetProject() *GoogleCloudApigeeV1ProvisionOrganizationRequest {
	if x != nil {
		return x.Project
	}
	return nil
}

var File_mockgcp_cloud_apigee_v1_service_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_apigee_v1_service_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x82, 0x01, 0x0a, 0x1e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x61, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x27, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x61, 0x64,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01,
	0x0a, 0x11, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x62, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x47, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x03, 0x47, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x47, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x52, 0x03, 0x53, 0x65, 0x74, 0x22, 0x48, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5a, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a,
	0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2e, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd5, 0x05, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x77, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4f,
	0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66,
	0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x11, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x7c, 0x0a, 0x30, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4f, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x56, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x26, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x22, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x26,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xfb, 0x04, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6e, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x17, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x5f, 0x70, 0x5f,
	0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x64, 0x67, 0x65, 0x41, 0x50, 0x49, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x22, 0x8a, 0x02, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x15,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x11, 0x6f, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x41, 0x53, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6f, 0x61,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5,
	0x01, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69,
	0x44, 0x6f, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x69, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x07, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x79, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x15, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x70, 0x0a, 0x14, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x70, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x67, 0x72, 0x70, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x13, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb5, 0x09, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x6e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x1e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x68,
	0x61, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x33, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x60, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x4d, 0x0a, 0x1f, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x24, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x2b, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x05, 0x0a, 0x16, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x70, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x03,
	0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xfe, 0x03, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x70, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x0c, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x50, 0x49,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcd, 0x02, 0x0a,
	0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x63, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x63, 0x73, 0x55, 0x72, 0x69, 0x12, 0x61, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x04, 0x0a,
	0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x23, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x22, 0xea, 0x01, 0x0a, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a,
	0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x74, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xc7, 0x03,
	0x0a, 0x3f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7f, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x65, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x49, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x4c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x54, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x40, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x36, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x37, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43,
	0x61, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6d, 0x0a,
	0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x2f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x03,
	0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a,
	0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x41, 0x6c, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a,
	0x0a, 0x19, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x63, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x57, 0x69, 0x6c, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x02,
	0x0a, 0x32, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x38, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x33, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0x6c, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a,
	0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x44, 0x0a, 0x1e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x6e, 0x63,
	0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x8c, 0x03, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb2, 0x01, 0x0a, 0x30, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa0, 0x06, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x22, 0x57, 0x0a, 0x25, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x26, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x02, 0x0a,
	0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x66,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x46, 0x0a, 0x1c, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x13, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x5f,
	0x73, 0x5f, 0x6f, 0x5f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x78, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x58,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6a, 0x5f, 0x73, 0x5f,
	0x6f, 0x5f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x78, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x58, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x16, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x5f, 0x73, 0x5f, 0x6f, 0x5f, 0x6e, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x78, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x58, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x2a, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0x49, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x21,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x63, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x05, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x52, 0x0e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x89, 0x03,
	0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x78, 0x0a, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x52, 0x70, 0x63, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x36, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x7c, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x78, 0x0a, 0x0d, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x38, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x12, 0x8a, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x53, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb3, 0x01, 0x0a,
	0x3a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xcd, 0x04, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x69, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x87, 0x04, 0x0a, 0x1c, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x12,
	0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x04, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x22,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b,
	0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x5c, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x99,
	0x01, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe1, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x24, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x30, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x71, 0x0a, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x49, 0x64, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe0,
	0x05, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72,
	0x69, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x68, 0x61, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xd4, 0x01, 0x0a, 0x36, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x99, 0x01, 0x0a,
	0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x14, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x4a, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x0e, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x6e, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x5e, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x76, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x74, 0x0a,
	0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x69, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x58, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x6c,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x1a,
	0x3f, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x01, 0x0a, 0x3c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x14, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x22, 0xa0, 0x01, 0x0a, 0x50, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x29, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x78, 0x0a, 0x17, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x15, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22,
	0x37, 0x0a, 0x35, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x19, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x9f,
	0x02, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x73, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x73, 0x76, 0x44,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f,
	0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x22, 0x2d, 0x0a,
	0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x2c,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x22, 0x9a, 0x01, 0x0a, 0x31,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x47, 0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x7d, 0x0a, 0x38, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x52, 0x4c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x30, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x23, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x22, 0xcf, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x61, 0x70, 0x68, 0x51,
	0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x72, 0x69, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x26, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x47, 0x72, 0x70, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x25, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x47, 0x72, 0x70, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x6c, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x72, 0x70, 0x63, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x22, 0xaa, 0x02, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x9a, 0x05,
	0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x73, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x13, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x69, 0x64, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x25, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x2b, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7a,
	0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x3b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x38, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5f, 0x0a, 0x24, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x20, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x1e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x21, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x59, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xeb, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x02,
	0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x2a, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x22, 0x7b, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x78, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x22, 0xb4, 0x01,
	0x0a, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaf, 0x01,
	0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xcb, 0x01, 0x0a, 0x31, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x13, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7f, 0x0a,
	0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x09, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x2c, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7a, 0x0a,
	0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xd9, 0x01, 0x0a, 0x35, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x32, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x14,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x3a, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x30,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x12, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x33, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x26,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x32, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbf, 0x01, 0x0a,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb2,
	0x01, 0x0a, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x6e,
	0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xc7, 0x01, 0x0a, 0x30, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6b,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x37,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x68, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x2f, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0xcc, 0x01, 0x0a, 0x31, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6f, 0x0a,
	0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x22, 0xbf,
	0x01, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x87, 0x01, 0x0a, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0b, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x33, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x75, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x72, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4e,
	0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x90, 0x01, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x41, 0x53, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x51, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0x54, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47,
	0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x68, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x24,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x50, 0x0a, 0x0c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83,
	0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x51, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x99, 0x0a, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0d, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x25, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x20, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x70, 0x69, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63,
	0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x78, 0x0a, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x85, 0x01, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x62, 0x75, 0x73, 0x65,
	0x22, 0x2f, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x26, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x4f, 0x52, 0x53, 0x22, 0xcf, 0x04, 0x0a, 0x28, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x61, 0x62, 0x75, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x41, 0x62, 0x75, 0x73, 0x65, 0x52, 0x05, 0x61, 0x62, 0x75, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x4f, 0x52, 0x53, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x04, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x54, 0x4c, 0x53, 0x52, 0x04, 0x6d, 0x74,
	0x6c, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x74, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x54, 0x4c, 0x53, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x28, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x22, 0x71, 0x0a, 0x1d, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0x47, 0x0a,
	0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x70, 0x63, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x70, 0x63, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xda, 0x03, 0x0a, 0x18, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x73, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x73, 0x76, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a,
	0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x1e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x60, 0x0a, 0x32, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x63, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xdd, 0x01, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x68, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x6b, 0x0a, 0x3d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xeb, 0x02, 0x0a,
	0x37, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x18, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xca, 0x07, 0x0a, 0x1b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x58, 0x0a,
	0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x13, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x08, 0x73, 0x65, 0x74, 0x75, 0x70, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5d, 0x0a, 0x22, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x21, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x21, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49,
	0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x5d,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xd2, 0x01,
	0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0xe3, 0x03, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x05, 0x75, 0x5f, 0x72, 0x5f, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x52, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x22, 0x79, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x76, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x02, 0x0a,
	0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6d, 0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x74, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x18, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x2b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb0, 0x01,
	0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x22, 0xb9, 0x03, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x14,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x0f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd2, 0x02, 0x0a,
	0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6f,
	0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x6e, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x5f, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x76, 0x0a, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x18, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x60, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x80, 0x03,
	0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x72, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xeb, 0x01, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xde,
	0x01, 0x0a, 0x35, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x73, 0x0a, 0x42, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xe9, 0x05, 0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x05, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x69,
	0x65, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x28, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x22, 0xa4, 0x03, 0x0a, 0x30, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x73, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x61, 0x73, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x4c, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x5e, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x2b, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x2b, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x78, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x73, 0x63,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x33,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x06,
	0x0a, 0x38, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xaf, 0x01, 0x0a, 0x1a, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x70, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x19, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x1c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x1a, 0xb7, 0x01, 0x0a, 0x1e, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x7f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xee, 0x02, 0x0a, 0x50, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x77, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x94, 0x02, 0x0a, 0x5e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x62, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0xe6, 0x03, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5f, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x69, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85,
	0x06, 0x0a, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x0c, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x13, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x12, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x38, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0xbd, 0x04, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xa1, 0x01,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x6a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x55, 0x0a, 0x3b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd4, 0x04, 0x0a, 0x21, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xa5, 0x02, 0x0a, 0x29, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x73, 0x76, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x73, 0x76, 0x44, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x12, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5f, 0x0a, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x22, 0xf7, 0x01, 0x0a, 0x2b, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x7e, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x6c, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x6d, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x61, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x2c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x0d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd6, 0x01,
	0x0a, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x06, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x6e, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x1e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x4d, 0x0a, 0x1f, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x05,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x51,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xe9, 0x01, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5b,
	0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x01,
	0x0a, 0x21, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x24, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x1f, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0a, 0x73, 0x5f, 0x73, 0x5f, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x54, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x53, 0x4c,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x54, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x54, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x74,
	0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x28, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xad,
	0x03, 0x0a, 0x1a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x6c, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x63,
	0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x84, 0x04, 0x0a, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x6c, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x6d, 0x0a, 0x13,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xc3, 0x01, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x67, 0x0a, 0x26, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0xd2,
	0x01, 0x0a, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x22, 0x7e, 0x0a, 0x1e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x30, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x19, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x1e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x53, 0x65, 0x74, 0x49, 0x61,
	0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x61, 0x6d, 0x56, 0x31, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x48, 0x0a, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d,
	0x56, 0x31, 0x54, 0x65, 0x73, 0x74, 0x49, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a,
	0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x61, 0x6d, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74,
	0x49, 0x61, 0x6d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x27, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x7e, 0x0a, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x77, 0x0a, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0f, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x0e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x0f,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x22, 0x2e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3c, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x60, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x62, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xc2, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x60, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01,
	0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x42, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8,
	0x01, 0x0a, 0x2a, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x2c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x28, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x17, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x3a, 0x0a, 0x24, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xd6, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x44, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x47, 0x0a, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x41, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x23, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xcc, 0x01, 0x0a,
	0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x43, 0x0a, 0x2d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74,
	0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x40, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x2d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x22, 0x33, 0x0a,
	0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x61, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x10, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x22,
	0x41, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x22, 0x3f, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x2f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x45, 0x0a, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x2c, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8c,
	0x01, 0x0a, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3c, 0x0a,
	0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4,
	0x01, 0x0a, 0x36, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x1b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x19, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0xa9, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x6b, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x38, 0x0a,
	0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0xbd, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0xb9, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70,
	0x70, 0x52, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x22, 0x3c, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x77, 0x0a, 0x1b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x52, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x70, 0x70, 0x22, 0xca, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x22,
	0x40, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x38, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x90, 0x01, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70,
	0x73, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x35, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x7b, 0x0a, 0x4d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79,
	0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xfa, 0x02, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe9, 0x01,
	0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7a, 0x0a,
	0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x1a, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3d, 0x0a, 0x27, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x7a, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x60,
	0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x22, 0xb2, 0x01, 0x0a, 0x27, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x16, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0xad, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x16, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3d, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x22, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x22, 0x5d, 0x0a, 0x2f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x35,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x17, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a,
	0x2b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x78, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x1a,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x22, 0xbd, 0x01, 0x0a, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7a,
	0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x1a,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x22, 0x3d, 0x0a, 0x27, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x4a, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x22, 0x68, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x26, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x22,
	0xb9, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7a, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x22, 0x47, 0x0a, 0x31, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x30, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x46, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x24,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a,
	0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x3b, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x22, 0xf1, 0x01, 0x0a, 0x3a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x36, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x4f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x32, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x29, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a,
	0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x40, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xdb, 0x01, 0x0a,
	0x3f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x2b, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x93,
	0x01, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x20, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe2,
	0x01, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x25,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x23,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x30, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa2, 0x01, 0x0a,
	0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x23, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x43, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x42, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x16,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x38, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x22, 0x77, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x21,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x73, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xde, 0x01, 0x0a, 0x2d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x2d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x40, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x74,
	0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x50, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x6d,
	0x61, 0x73, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d,
	0x0a, 0x37, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a,
	0x2d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x30, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x74, 0x0a, 0x19,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x42, 0x0a, 0x28, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x2a, 0x55, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x75, 0x0a,
	0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x72, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a,
	0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x74, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x3a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x7e, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xdd, 0x01, 0x0a, 0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x74, 0x0a, 0x19, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xf5, 0x01, 0x0a, 0x3e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x39, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x32, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x48, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x33, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x32, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x34, 0x55, 0x6e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x22, 0xa2, 0x02, 0x0a, 0x3f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x36, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x32, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x43, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x52, 0x0a, 0x3c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x3e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x41, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x51, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x53, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x37, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xa0, 0x01, 0x0a, 0x2d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x37,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x44,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x2d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x42, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a,
	0x34, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x36, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x90, 0x02, 0x0a, 0x36, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0xa0, 0x01, 0x0a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x2f, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x42, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f,
	0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x5a, 0x0a, 0x44, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x21, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x22, 0x44, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x35, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a,
	0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x28,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x32, 0x43, 0x73, 0x72, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x35, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x3d, 0x47, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcd,
	0x02, 0x0a, 0x35, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x77,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x77,
	0x6c, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x31, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a,
	0x26, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x22, 0x47, 0x0a, 0x31,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x37, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x2d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x2a, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4d, 0x0a, 0x37, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x34, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x37, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0xc0, 0x03, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x6f, 0x6e, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x6f, 0x70, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x73, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x7a, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x7a, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x7b, 0x0a,
	0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x3e, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x47, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x6c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x2b, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e,
	0x63, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x2f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x22, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x45, 0x0a, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x2f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xf9, 0x01, 0x0a,
	0x32, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x74, 0x0a, 0x32, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71,
	0x0a, 0x2f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x5f, 0x0a, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x72, 0x0a, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x25, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x34, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x97, 0x01, 0x0a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x35,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x2a, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x34, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa4,
	0x01, 0x0a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x27, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x33, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x3b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x2c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x29, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a,
	0x33, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x35, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x8c,
	0x02, 0x0a, 0x35, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x9d, 0x01,
	0x0a, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x29, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x01,
	0x0a, 0x34, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x9c,
	0x01, 0x0a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x47, 0x0a,
	0x31, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x37, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x3b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x33, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xf7, 0x01,
	0x0a, 0x3d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x72, 0x67, 0x65, 0x6e, 0x76, 0x12, 0x9d, 0x01, 0x0a, 0x28, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x40, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x67, 0x65, 0x6e, 0x76, 0x12, 0xa0, 0x01, 0x0a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x54, 0x0a, 0x3a, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x01,
	0x0a, 0x39, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x41, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x3b, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xb7, 0x03, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x67,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x73, 0x6f, 0x6e, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x72, 0x74, 0x62, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x73, 0x41,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x7a, 0x6f, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x7a, 0x6f, 0x22, 0xf3, 0x01, 0x0a, 0x32, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x90, 0x01,
	0x0a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x48, 0x0a, 0x32, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x2f, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xdb, 0x01, 0x0a, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0xfd, 0x01, 0x0a, 0x39, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x30, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0x4f, 0x0a, 0x39, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4c, 0x0a, 0x36, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e,
	0x01, 0x0a, 0x38, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x99, 0x02, 0x0a, 0x38, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0xa7, 0x01, 0x0a, 0x30, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x2c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x18, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x36, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3c, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40,
	0x0a, 0x2a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8c,
	0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x1f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3f, 0x0a,
	0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45,
	0x0a, 0x2f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa7, 0x02, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xa9, 0x03, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x62,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x6f, 0x70, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x73, 0x41, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x7a, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x7a, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x38, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x77, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a,
	0x21, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x6b, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7e, 0x0a,
	0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x01,
	0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x2d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x33, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x26, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72,
	0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x30, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x30, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a,
	0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x87, 0x01, 0x0a, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4e, 0x61, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e,
	0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x41, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x25, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x19, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x22, 0x3b, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcb,
	0x01, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1e, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x2b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xb2, 0x03,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x70,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x6b, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x73, 0x5f, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x73, 0x41, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x7a, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x7a, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x6b, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x36, 0x0a, 0x20,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x1f, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x38, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x81, 0x01,
	0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x3f, 0x0a, 0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x7e, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x82, 0x01, 0x0a, 0x30, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe3, 0x01, 0x0a, 0x28, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x1c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x47,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x2b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x28, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xb0, 0x01, 0x0a, 0x2b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x35, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x56, 0x32, 0x49, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x32, 0x52, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x56, 0x32, 0x22, 0x42, 0x0a, 0x2c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x2b, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x8a, 0x01, 0x0a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x52, 0x1f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x22, 0xd1, 0x01, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x18, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x22, 0x3a, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x48,
	0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x2d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x3f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x22, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x7f, 0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x1d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x22, 0x40, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x44, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x29, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x1f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x1d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41,
	0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1a,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x69, 0x44, 0x6f, 0x63, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x22, 0x3b,
	0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x24,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x69, 0x64, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52, 0x18,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x22, 0xc7, 0x01, 0x0a, 0x32, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x6f,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64,
	0x6f, 0x63, 0x22, 0x9d, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x32, 0x0e, 0x0a, 0x0c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x32, 0xc8, 0x01, 0x0a, 0x13, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb0, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73,
	0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x7d, 0x32, 0xcf, 0x17,
	0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xdd, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xdc, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xc9, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xd5, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x33, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x7d,
	0x12, 0xea, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x2f,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6f, 0x72, 0x67, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x3a, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xea, 0x01, 0x0a,
	0x20, 0x53, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb4, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x1a, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0xd0, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x32, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x7d, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xe9, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x32, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x7d, 0x3a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0x1e, 0x0a, 0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32,
	0xec, 0x0b, 0x0a, 0x26, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x83, 0x02, 0x0a, 0x25, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x3a, 0x21, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0xd7, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x2a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xeb, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x12, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x90, 0x02, 0x0a, 0x23, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x22, 0x36, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x3a, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x83, 0x02, 0x0a, 0x25, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x56, 0x1a, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x21, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x32, 0xc8,
	0x0a, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xf5, 0x01, 0x0a, 0x21, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a,
	0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0xe2, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x3a, 0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0xc8,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a,
	0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x30, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd3,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0xe2, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x4a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x44, 0x1a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x18, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x32, 0x9a, 0x08, 0x0a, 0x28, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xe8, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe7, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xb3, 0x02, 0x0a, 0x3a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x5a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x23, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0xf9, 0x09, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x88, 0x02, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x46, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x60, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x5a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0xe4, 0x01,
	0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xde, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x43, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12,
	0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xef, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x61,
	0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x88, 0x02, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x65, 0x70,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x1a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x22,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70,
	0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x70, 0x6c,
	0x61, 0x6e, 0x32, 0xcf, 0x07, 0x0a, 0x17, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xcc,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x3a, 0x11, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x12, 0xb1, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xab, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xbd, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x12,
	0xc2, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x32, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x70, 0x69, 0x32, 0x89, 0x02, 0x0a, 0x22, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xe2, 0x01, 0x0a, 0x20,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12,
	0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x81, 0x04, 0x0a, 0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xfb, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12,
	0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69,
	0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x58, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x52, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x3a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0xdb, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x42, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x32, 0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x2f, 0x2a, 0x7d, 0x32, 0xd0, 0x0a, 0x0a, 0x2a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x9a, 0x02, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x63, 0x22, 0x3a, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0xf3, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x2a, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xed, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x81, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x9a, 0x02, 0x0a, 0x28, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x69, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x63, 0x1a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x3a, 0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x70, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x32, 0xd5, 0x05, 0x0a, 0x20, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd7, 0x01, 0x0a,
	0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x94, 0x02, 0x0a, 0x2f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4c, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0xb0, 0x02, 0x0a, 0x2b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x80, 0x02, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x32, 0xa2, 0x08, 0x0a, 0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc0,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xba, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xcb,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xd8, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x1a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x8a, 0x09, 0x0a, 0x20, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xef, 0x01, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70,
	0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4c, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x3a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x12, 0xd2,
	0x01, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x70, 0x70, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xcc, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xdd, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x1a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x32, 0x9c, 0x08, 0x0a, 0x24, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x86, 0x02,
	0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x22, 0x34,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x3a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0xe4, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x43,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xde, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xa2,
	0x02, 0x0a, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x4b, 0x65, 0x79, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x22, 0x34, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x32, 0xe9, 0x04, 0x0a, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x88, 0x02, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x42,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xaa, 0x02, 0x0a, 0x46, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b,
	0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x66, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x42, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x32,
	0xfc, 0x02, 0x0a, 0x17, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xa6, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x70, 0x70, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x70, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x73, 0x12, 0x35,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x32, 0x86,
	0x09, 0x0a, 0x21, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xf1, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x2b,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x3a, 0x1b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xc7, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x2a, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x32, 0x2b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x1b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0xf6, 0x01, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd3, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x98, 0x12, 0x0a, 0x1d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xf3, 0x01, 0x0a, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a,
	0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0xdd, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0x48,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x3a,
	0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0xc4, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xbe, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x39, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0xdb, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0x87,
	0x02, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x4b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xd1, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x12, 0xd3, 0x01, 0x0a,
	0x28, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xdd, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42,
	0x1a, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0xa6, 0x02, 0x0a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e,
	0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65,
	0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x1a, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x7d, 0x3a, 0x17, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x32, 0xe6, 0x0d, 0x0a, 0x21,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x85, 0x02, 0x0a, 0x24, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59,
	0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x1c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x12, 0xf4, 0x01, 0x0a, 0x20, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x12, 0x40,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4e, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x3a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x12, 0xd6, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x70, 0x70, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xba, 0x02, 0x0a, 0x43, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x12, 0x63, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x22, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x12, 0xd0, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x12, 0xf4, 0x01,
	0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41,
	0x70, 0x70, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x22, 0x54,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x1a, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x32, 0xd5, 0x08, 0x0a, 0x2b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xf4, 0x01, 0x0a, 0x2a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xee, 0x01, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf3, 0x01, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xc7, 0x02, 0x0a, 0x3f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x5f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x6c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0xdf, 0x0a, 0x0a,
	0x25, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x8b, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x3a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x12, 0xe8, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x44, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xe2, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70,
	0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xab, 0x02, 0x0a, 0x34, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79,
	0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x1a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x12, 0xa9, 0x02, 0x0a, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x5a, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x21, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x32, 0xf3,
	0x04, 0x0a, 0x30, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x8c, 0x02, 0x0a, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41,
	0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x2a, 0x43, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xaf, 0x02, 0x0a, 0x48, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70,
	0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x68, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22,
	0x43, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x6b,
	0x65, 0x79, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x32, 0xd8, 0x02, 0x0a, 0x2b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xa8, 0x02, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x70, 0x70, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x6f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x3a, 0x29, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x32,
	0x8a, 0x08, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xe5, 0x01, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x43, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12,
	0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xad, 0x02, 0x0a,
	0x38, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x58, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x5a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0xc4, 0x04, 0x0a,
	0x24, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x8c, 0x02, 0x0a, 0x24, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x3a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x8c, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x3a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x32, 0xfa, 0x08, 0x0a, 0x2a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xa1, 0x02, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x60, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x25, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa8, 0x02, 0x0a, 0x29, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x67, 0x22, 0x3e, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x3a, 0x25, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xf4, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x85, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0xba, 0x07, 0x0a, 0x26, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xea, 0x01, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x55, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x21, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x2a, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf3, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xf6, 0x09,
	0x0a, 0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc1,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x40, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x16, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0xa9, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc2,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0x88, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xd3,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x16,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0xe4, 0x07, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xf1, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x34, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xcd, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36,
	0x2a, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x81, 0x02, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xc5, 0x20,
	0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xcd, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x29, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0xb2, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc6, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xec, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0x9c,
	0x02, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xe0, 0x01,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x7d,
	0x12, 0xf7, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x12, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0x90, 0x02, 0x0a, 0x30, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xe8, 0x01,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x12, 0xe3, 0x01, 0x0a, 0x29, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x32, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xdf,
	0x01, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0xf4, 0x01, 0x0a, 0x23, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x54, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x3a, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a, 0x19, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xe7, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x1a, 0x29, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x81, 0x02, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x6d, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x56, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x50, 0x32, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x6d, 0x61, 0x73, 0x6b, 0x7d, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xfd, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xb1, 0x02, 0x0a, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x32, 0x3f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x3a, 0x19,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x89, 0x02, 0x0a, 0x29, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x58, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x52, 0x32, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0xde, 0x02, 0x0a, 0x2b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xae, 0x02, 0x0a, 0x37, 0x53, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x57, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x75, 0x22, 0x49, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x28, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x2a, 0x0a, 0x28, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x32, 0xba, 0x02, 0x0a, 0x2d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x88, 0x02, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x76, 0x32, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x52, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76,
	0x32, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x76, 0x32, 0x7d, 0x32,
	0xdd, 0x06, 0x0a, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xa8, 0x02, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x72, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x6c, 0x22, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x3a, 0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xf5,
	0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x86, 0x02, 0x0a, 0x2d, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f,
	0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32,
	0x25, 0x0a, 0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0xbc, 0x02, 0x0a, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x89, 0x02, 0x0a, 0x2c, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xcd, 0x06, 0x0a, 0x2c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x84, 0x02, 0x0a, 0x2b, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x50, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4a, 0x22, 0x48, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x94, 0x02,
	0x0a, 0x33, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0xfe, 0x01, 0x0a, 0x2d, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x2a, 0x48, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x97, 0x0a, 0x0a, 0x39, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xde, 0x02, 0x0a, 0x38, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x86, 0x01, 0x22, 0x4c,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x36, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0xa5, 0x02, 0x0a, 0x3c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x53, 0x2a, 0x51, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9e, 0x02, 0x0a,
	0x35, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12,
	0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xaf, 0x02,
	0x0a, 0x37, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4e, 0x12, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32,
	0xfc, 0x02, 0x0a, 0x3d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xba, 0x02, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x12, 0x53, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x2a, 0x7d, 0x32, 0x97,
	0x06, 0x0a, 0x37, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xe9, 0x02, 0x0a, 0x4a, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x65, 0x22, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xef, 0x02, 0x0a, 0x4c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x6d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x67, 0x22, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x8f, 0x11, 0x0a, 0x31, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x9a,
	0x02, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6f, 0x22, 0x3e, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x2d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xfa, 0x01, 0x0a, 0x30,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x2a, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf4, 0x02, 0x0a, 0x3d, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8a, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x83, 0x01, 0x22, 0x52, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c,
	0x3a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0xec, 0x02, 0x0a, 0x3b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x5b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x81, 0x01, 0x22, 0x50, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x3a,
	0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x85,
	0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x96, 0x02, 0x0a, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12,
	0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xb8, 0x02, 0x0a, 0x2f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x75, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6f, 0x32, 0x3e, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x2d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x80, 0x02, 0x0a, 0x25, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xd6, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x44, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0x95, 0x04,
	0x0a, 0x2a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xe9, 0x01, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xfa, 0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xdb, 0x06, 0x0a, 0x28, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xb4, 0x02, 0x0a, 0x3b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f,
	0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x5b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x6f, 0x46,
	0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x46, 0x6c, 0x6f,
	0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5c, 0x1a, 0x35, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x23, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x93, 0x02, 0x0a, 0x3d, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x5d, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f,
	0x6f, 0x6b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x6c, 0x6f, 0x77, 0x68,
	0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x6f, 0x6b,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xe1, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46,
	0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x46, 0x6c, 0x6f, 0x77,
	0x48, 0x6f, 0x6f, 0x6b, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x2f, 0x2a, 0x7d, 0x32, 0x87, 0x06, 0x0a, 0x28, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x8c, 0x02, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x5c, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x3a, 0x23, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0xe7, 0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0x8b, 0x0d,
	0x0a, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xa9, 0x02, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x22,
	0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x3a, 0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0xf3, 0x01,
	0x0a, 0x2b, 0x43, 0x73, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0x4b, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x73, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74,
	0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x12, 0x43,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x63, 0x73, 0x72, 0x12, 0xfc, 0x01, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x41, 0x2a, 0x3f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a,
	0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x91, 0x02, 0x0a, 0x36,
	0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x12, 0x56, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0xa9, 0x02, 0x0a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6e, 0x1a, 0x3f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x2b,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x32, 0xc1, 0x04, 0x0a, 0x2b,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x9b, 0x02, 0x0a, 0x2a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22,
	0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x62, 0x22, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x3a, 0x26, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0xf3, 0x01, 0x0a, 0x2a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x40, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x32,
	0xe0, 0x0b, 0x0a, 0x32, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xba, 0x02, 0x0a, 0x30, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x50, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73,
	0x22, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x3a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x8b, 0x02, 0x0a, 0x30, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x2a, 0x42, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0x85, 0x02, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x99, 0x02, 0x0a, 0x30, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x50,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0xba, 0x02, 0x0a, 0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x50, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x73, 0x1a,
	0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x2d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x32, 0xa9, 0x02, 0x0a, 0x2d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xf7, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x2e, 0x2a, 0x7d, 0x32, 0xf1,
	0x09, 0x0a, 0x26, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x83, 0x02, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x20, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0xdb, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe2, 0x01,
	0x0a, 0x27, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7d, 0x12, 0x8b, 0x02, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x75, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x6c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x6c, 0x7d,
	0x12, 0xef, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x32, 0xa9, 0x08, 0x0a, 0x29, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x91, 0x02, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x64,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e, 0x22, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x24,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0xeb, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x91, 0x02, 0x0a, 0x28, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e,
	0x1a, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x32, 0xc3,
	0x0d, 0x0a, 0x2c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0xa0, 0x02, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x22, 0x39,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x49, 0x2a, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x4f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x89,
	0x02, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12,
	0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xb6, 0x02, 0x0a, 0x3d, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x5d, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x12, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x79,
	0x70, 0x65, 0x7d, 0x12, 0xae, 0x02, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x78, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x72, 0x1a, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74,
	0x79, 0x70, 0x65, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x27, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x66, 0x69, 0x6c, 0x65, 0x32, 0xd4, 0x0b, 0x0a, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xab, 0x02, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x22, 0x3b, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb5, 0x02, 0x0a, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x71, 0x22, 0x43, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x3a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x02,
	0x0a, 0x2d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x70, 0x22, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xf9, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8a,
	0x02, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0xe3, 0x09, 0x0a, 0x30,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0xdf, 0x02, 0x0a, 0x34, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x79, 0x22, 0x49, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x3a, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x12, 0x81, 0x02, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x92, 0x02, 0x0a, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb3, 0x02, 0x0a, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x6d, 0x32, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x2c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x32, 0x8b, 0x0b, 0x0a, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xab, 0x02, 0x0a, 0x2d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x22, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x2a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0xf9, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xfc,
	0x01, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64,
	0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7d, 0x12, 0xa2, 0x02,
	0x0a, 0x34, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x7d, 0x12, 0x8a, 0x02, 0x0a, 0x2c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32,
	0xed, 0x05, 0x0a, 0x2c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0xd6, 0x02, 0x0a, 0x36, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x56, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x77, 0x22, 0x4b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x65, 0x6e, 0x76, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x3a,
	0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x12, 0xe3, 0x02, 0x0a, 0x39, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x59, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x7a, 0x22, 0x4e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x65,
	0x6e, 0x76, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x32,
	0x2c, 0x0a, 0x2a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0xd8, 0x02,
	0x0a, 0x35, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x9e, 0x02, 0x0a, 0x33, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x53, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x47, 0x12, 0x45, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x93, 0x07, 0x0a, 0x33, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x99, 0x02, 0x0a, 0x32, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x22, 0x4f, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa9, 0x02, 0x0a,
	0x3a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x12, 0x4f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x2f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x93, 0x02, 0x0a, 0x34, 0x55, 0x6e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x2a, 0x4f, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xfc,
	0x01, 0x0a, 0x24, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x40, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x2e, 0x2a, 0x7d, 0x32, 0xe2, 0x08,
	0x0a, 0x2c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xa0,
	0x02, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x4b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x22, 0x39, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0xf7, 0x01, 0x0a, 0x2b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x2a, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x28,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xa0, 0x02, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x64, 0x1a, 0x39,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x27, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x32, 0x2c, 0x0a, 0x2a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x32, 0xfc, 0x0b, 0x0a, 0x33, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc6, 0x02, 0x0a, 0x32, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x52, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x22, 0x41, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x7d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x3a,
	0x30, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x81, 0x02, 0x0a, 0x32, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x52, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x43, 0x2a, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x8e, 0x02, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9f, 0x02, 0x0a, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x51, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7d, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0xc4, 0x02, 0x0a, 0x31, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x51,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x22, 0x7b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x75, 0x32, 0x41, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x30, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x32,
	0xd3, 0x08, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xe0, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x44, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x68, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x18, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0xc0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc7, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70,
	0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x7d, 0x12, 0xe9, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x7d, 0x12, 0xd4,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x79, 0x6e, 0x63, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x32, 0xf4, 0x09, 0x0a, 0x26, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x88, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x56, 0x22, 0x30, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xde, 0x01, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe1, 0x01, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x7d,
	0x12, 0x87, 0x02, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x4c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x65, 0x77, 0x7d, 0x12, 0xef, 0x01, 0x0a, 0x24, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32, 0xd9, 0x01, 0x0a,
	0x1c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xb8, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x38, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12,
	0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2f, 0x2e, 0x2a, 0x7d, 0x32, 0xe7, 0x09, 0x0a, 0x1c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xc1, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x26, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x16, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x2a, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x16,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x89, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x51, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x16, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x32, 0xd4, 0x07, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xf1,
	0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x22,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0xcd, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c,
	0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xe8, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf9, 0x01,
	0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xb6, 0x04, 0x0a, 0x2d, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x89, 0x02, 0x0a, 0x2c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x66, 0x22, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x61,
	0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x28, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xf8, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x61,
	0x6e, 0x61, 0x72, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x63, 0x61,
	0x6e, 0x61, 0x72, 0x79, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x32, 0xda, 0x09, 0x0a, 0x28, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x83, 0x02, 0x0a, 0x29, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x49, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x22,
	0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a,
	0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0xf6, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x5d, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6e, 0x61, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x3a, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0xd0,
	0x01, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e,
	0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x6e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xe3, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e,
	0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4e, 0x61,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf5, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x46, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x6e, 0x61, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x32,
	0xda, 0x03, 0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xe7, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x3a, 0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x12, 0xcc, 0x01,
	0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0xf7, 0x09, 0x0a,
	0x26, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x86, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0xe4, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xde, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b,
	0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xf2, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65,
	0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x86, 0x02,
	0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x57, 0x1a,
	0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6b, 0x65, 0x79, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x32, 0x86, 0x02, 0x0a, 0x25, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x64, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0xdc, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x2e, 0x2a, 0x7d, 0x32,
	0xa0, 0x08, 0x0a, 0x1a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xd4,
	0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x3a,
	0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xcc, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xc9, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x56, 0x31, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x14, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x32, 0x87, 0x03, 0x0a, 0x2c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0xd6, 0x02, 0x0a, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x59, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x6d, 0x22,
	0x41, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x7d, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x3a, 0x28, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xc4, 0x0b, 0x0a,
	0x23, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0xfc, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4f, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x3a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x35, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x12, 0xd6, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe7, 0x01, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x8d, 0x02, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x50, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xfa, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x41, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4f, 0x32, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x3a, 0x1e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x32, 0xd1, 0x07, 0x0a, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xdd, 0x02, 0x0a, 0x40, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4c,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x63, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3d, 0x2a,
	0x7d, 0x3a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x3a, 0x2b, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0xc6, 0x02, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x6b, 0x22, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x2b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0xf4, 0x01, 0x0a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x2a, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0xec, 0x09, 0x0a, 0x25, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x8a, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x45, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x32, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x12, 0xd5,
	0x01, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x56, 0x32, 0x2f, 0x2a, 0x7d, 0x12, 0xe0, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x42, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x2f, 0x2a, 0x7d, 0x12, 0xef, 0x01, 0x0a, 0x23, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56,
	0x32, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x12, 0x88, 0x02, 0x0a, 0x24,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x56, 0x32, 0x12, 0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x55, 0x32, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x32, 0x2f,
	0x2a, 0x7d, 0x3a, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x76, 0x32, 0x32, 0xf3, 0x06, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xea, 0x01, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x18, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0xc8, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x2a, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x46, 0x6c, 0x6f, 0x77, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd3, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x32, 0xa5, 0x02, 0x0a,
	0x29, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xf7, 0x01, 0x0a, 0x27, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0xaa, 0x06, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0xee, 0x01, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x2a, 0x34, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xd4, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41,
	0x70, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb6, 0x02, 0x0a, 0x38, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a, 0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x22, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0xcc, 0x02, 0x0a, 0x32, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x95, 0x02, 0x0a, 0x30, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x32, 0x1a, 0x0a, 0x18, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x32, 0xf4, 0x09, 0x0a,
	0x25, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x88, 0x02, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x32, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x3a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0xe2, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe1, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73,
	0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xed, 0x01, 0x0a, 0x23, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69,
	0x67, 0x65, 0x65, 0x56, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x86, 0x02, 0x0a, 0x22, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x32, 0x32,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x1f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x32, 0xa9, 0x0d, 0x0a, 0x1f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0xee, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69,
	0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x2c,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x3a, 0x1a, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0xd2, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x3e, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70,
	0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a,
	0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xcc, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x3b, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69,
	0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x81, 0x02, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x48, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56,
	0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x2f,
	0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d,
	0x12, 0xd5, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f,
	0x63, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x3e, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70,
	0x69, 0x64, 0x6f, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x41, 0x70, 0x69, 0x67, 0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x1a,
	0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x1a, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0xa3, 0x02, 0x0a, 0x2b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69,
	0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x12, 0x4b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x56, 0x31, 0x41, 0x70, 0x69, 0x44, 0x6f, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x58, 0x32, 0x3a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x3a, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x64, 0x6f, 0x63, 0x32,
	0xcc, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0xb9, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x34,
	0x5a, 0x32, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x67, 0x65, 0x65, 0x70, 0x62, 0x3b, 0x61, 0x70, 0x69, 0x67,
	0x65, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_apigee_v1_service_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_apigee_v1_service_proto_rawDescData = file_mockgcp_cloud_apigee_v1_service_proto_rawDesc
)

func file_mockgcp_cloud_apigee_v1_service_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_apigee_v1_service_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_apigee_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_apigee_v1_service_proto_rawDescData)
	})
	return file_mockgcp_cloud_apigee_v1_service_proto_rawDescData
}

var file_mockgcp_cloud_apigee_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 633)
var file_mockgcp_cloud_apigee_v1_service_proto_goTypes = []interface{}{
	(*EdgeConfigstoreBundleBadBundle)(nil),                                                                     // 0: mockgcp.cloud.apigee.v1.EdgeConfigstoreBundleBadBundle
	(*EdgeConfigstoreBundleBadBundleViolation)(nil),                                                            // 1: mockgcp.cloud.apigee.v1.EdgeConfigstoreBundleBadBundleViolation
	(*GoogleApiHttpBody)(nil),                                                                                  // 2: mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	(*GoogleCloudApigeeV1APIProductAssociation)(nil),                                                           // 3: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1APIProductAssociation
	(*GoogleCloudApigeeV1Access)(nil),                                                                          // 4: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Access
	(*GoogleCloudApigeeV1AccessGet)(nil),                                                                       // 5: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessGet
	(*GoogleCloudApigeeV1AccessLoggingConfig)(nil),                                                             // 6: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessLoggingConfig
	(*GoogleCloudApigeeV1AccessRemove)(nil),                                                                    // 7: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessRemove
	(*GoogleCloudApigeeV1AccessSet)(nil),                                                                       // 8: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessSet
	(*GoogleCloudApigeeV1ActivateNatAddressRequest)(nil),                                                       // 9: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ActivateNatAddressRequest
	(*GoogleCloudApigeeV1AddonsConfig)(nil),                                                                    // 10: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig
	(*GoogleCloudApigeeV1AdjustDeveloperBalanceRequest)(nil),                                                   // 11: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AdjustDeveloperBalanceRequest
	(*GoogleCloudApigeeV1AdvancedApiOpsConfig)(nil),                                                            // 12: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AdvancedApiOpsConfig
	(*GoogleCloudApigeeV1Alias)(nil),                                                                           // 13: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias
	(*GoogleCloudApigeeV1AliasRevisionConfig)(nil),                                                             // 14: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AliasRevisionConfig
	(*GoogleCloudApigeeV1AnalyticsConfig)(nil),                                                                 // 15: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AnalyticsConfig
	(*GoogleCloudApigeeV1ApiCategory)(nil),                                                                     // 16: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategory
	(*GoogleCloudApigeeV1ApiCategoryResponse)(nil),                                                             // 17: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategoryResponse
	(*GoogleCloudApigeeV1ApiDoc)(nil),                                                                          // 18: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDoc
	(*GoogleCloudApigeeV1ApiDocDocumentation)(nil),                                                             // 19: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentation
	(*GoogleCloudApigeeV1ApiDocDocumentationResponse)(nil),                                                     // 20: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentationResponse
	(*GoogleCloudApigeeV1ApiDocResponse)(nil),                                                                  // 21: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocResponse
	(*GoogleCloudApigeeV1ApiProduct)(nil),                                                                      // 22: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	(*GoogleCloudApigeeV1ApiProductRef)(nil),                                                                   // 23: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProductRef
	(*GoogleCloudApigeeV1ApiProxy)(nil),                                                                        // 24: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	(*GoogleCloudApigeeV1ApiProxyRevision)(nil),                                                                // 25: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision
	(*GoogleCloudApigeeV1ApiSecurityConfig)(nil),                                                               // 26: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiSecurityConfig
	(*GoogleCloudApigeeV1ApiSecurityRuntimeConfig)(nil),                                                        // 27: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiSecurityRuntimeConfig
	(*GoogleCloudApigeeV1App)(nil),                                                                             // 28: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App
	(*GoogleCloudApigeeV1AppGroup)(nil),                                                                        // 29: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	(*GoogleCloudApigeeV1AppGroupApp)(nil),                                                                     // 30: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	(*GoogleCloudApigeeV1AppGroupAppKey)(nil),                                                                  // 31: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	(*GoogleCloudApigeeV1ArchiveDeployment)(nil),                                                               // 32: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	(*GoogleCloudApigeeV1AsyncQuery)(nil),                                                                      // 33: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	(*GoogleCloudApigeeV1AsyncQueryResult)(nil),                                                                // 34: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResult
	(*GoogleCloudApigeeV1AsyncQueryResultView)(nil),                                                            // 35: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResultView
	(*GoogleCloudApigeeV1Attribute)(nil),                                                                       // 36: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	(*GoogleCloudApigeeV1Attributes)(nil),                                                                      // 37: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest)(nil),                                    // 38: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest
	(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll)(nil),                          // 39: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll
	(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray)(nil),                       // 40: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray
	(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource)(nil),               // 41: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource
	(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse)(nil),                                   // 42: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse
	(*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest)(nil),                                             // 43: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest
	(*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse)(nil),                                            // 44: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse
	(*GoogleCloudApigeeV1CanaryEvaluation)(nil),                                                                // 45: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation
	(*GoogleCloudApigeeV1CanaryEvaluationMetricLabels)(nil),                                                    // 46: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluationMetricLabels
	(*GoogleCloudApigeeV1CertInfo)(nil),                                                                        // 47: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CertInfo
	(*GoogleCloudApigeeV1Certificate)(nil),                                                                     // 48: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Certificate
	(*GoogleCloudApigeeV1CommonNameConfig)(nil),                                                                // 49: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CommonNameConfig
	(*GoogleCloudApigeeV1ComputeEnvironmentScoresRequest)(nil),                                                 // 50: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequest
	(*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter)(nil),                                           // 51: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter
	(*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse)(nil),                                                // 52: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresResponse
	(*GoogleCloudApigeeV1ConfigVersion)(nil),                                                                   // 53: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ConfigVersion
	(*GoogleCloudApigeeV1ConnectorsPlatformConfig)(nil),                                                        // 54: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ConnectorsPlatformConfig
	(*GoogleCloudApigeeV1ControlPlaneAccess)(nil),                                                              // 55: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ControlPlaneAccess
	(*GoogleCloudApigeeV1Credential)(nil),                                                                      // 56: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential
	(*GoogleCloudApigeeV1CreditDeveloperBalanceRequest)(nil),                                                   // 57: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CreditDeveloperBalanceRequest
	(*GoogleCloudApigeeV1CustomReport)(nil),                                                                    // 58: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	(*GoogleCloudApigeeV1CustomReportMetric)(nil),                                                              // 59: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReportMetric
	(*GoogleCloudApigeeV1DataCollector)(nil),                                                                   // 60: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	(*GoogleCloudApigeeV1DataCollectorConfig)(nil),                                                             // 61: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollectorConfig
	(*GoogleCloudApigeeV1Datastore)(nil),                                                                       // 62: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	(*GoogleCloudApigeeV1DatastoreConfig)(nil),                                                                 // 63: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DatastoreConfig
	(*GoogleCloudApigeeV1DateRange)(nil),                                                                       // 64: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DateRange
	(*GoogleCloudApigeeV1DebugMask)(nil),                                                                       // 65: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask
	(*GoogleCloudApigeeV1DebugSession)(nil),                                                                    // 66: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSession
	(*GoogleCloudApigeeV1DebugSessionTransaction)(nil),                                                         // 67: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSessionTransaction
	(*GoogleCloudApigeeV1DeleteCustomReportResponse)(nil),                                                      // 68: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeleteCustomReportResponse
	(*GoogleCloudApigeeV1DeleteResponse)(nil),                                                                  // 69: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeleteResponse
	(*GoogleCloudApigeeV1Deployment)(nil),                                                                      // 70: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	(*GoogleCloudApigeeV1DeploymentChangeReport)(nil),                                                          // 71: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport
	(*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange)(nil),                                             // 72: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingChange
	(*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict)(nil),                                           // 73: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict
	(*GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment)(nil),                                         // 74: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
	(*GoogleCloudApigeeV1DeploymentConfig)(nil),                                                                // 75: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig
	(*GoogleCloudApigeeV1DeploymentGroupConfig)(nil),                                                           // 76: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentGroupConfig
	(*GoogleCloudApigeeV1Developer)(nil),                                                                       // 77: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	(*GoogleCloudApigeeV1DeveloperApp)(nil),                                                                    // 78: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	(*GoogleCloudApigeeV1DeveloperAppKey)(nil),                                                                 // 79: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	(*GoogleCloudApigeeV1DeveloperBalance)(nil),                                                                // 80: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalance
	(*GoogleCloudApigeeV1DeveloperBalanceWallet)(nil),                                                          // 81: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalanceWallet
	(*GoogleCloudApigeeV1DeveloperMonetizationConfig)(nil),                                                     // 82: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperMonetizationConfig
	(*GoogleCloudApigeeV1DeveloperSubscription)(nil),                                                           // 83: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	(*GoogleCloudApigeeV1DimensionMetric)(nil),                                                                 // 84: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DimensionMetric
	(*GoogleCloudApigeeV1DisableSecurityActionRequest)(nil),                                                    // 85: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DisableSecurityActionRequest
	(*GoogleCloudApigeeV1DocumentationFile)(nil),                                                               // 86: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DocumentationFile
	(*GoogleCloudApigeeV1EnableSecurityActionRequest)(nil),                                                     // 87: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnableSecurityActionRequest
	(*GoogleCloudApigeeV1EndpointAttachment)(nil),                                                              // 88: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointAttachment
	(*GoogleCloudApigeeV1EndpointChainingRule)(nil),                                                            // 89: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointChainingRule
	(*GoogleCloudApigeeV1EntityMetadata)(nil),                                                                  // 90: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EntityMetadata
	(*GoogleCloudApigeeV1Environment)(nil),                                                                     // 91: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	(*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig)(nil),                                             // 92: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig
	(*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm)(nil),                         // 93: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm
	(*GoogleCloudApigeeV1EnvironmentConfig)(nil),                                                               // 94: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig
	(*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig)(nil),                                       // 95: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig
	(*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm)(nil),                   // 96: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm
	(*GoogleCloudApigeeV1EnvironmentGroup)(nil),                                                                // 97: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroup
	(*GoogleCloudApigeeV1EnvironmentGroupAttachment)(nil),                                                      // 98: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupAttachment
	(*GoogleCloudApigeeV1EnvironmentGroupConfig)(nil),                                                          // 99: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupConfig
	(*GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest)(nil),                                              // 100: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest
	(*GoogleCloudApigeeV1Export)(nil),                                                                          // 101: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Export
	(*GoogleCloudApigeeV1ExportRequest)(nil),                                                                   // 102: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ExportRequest
	(*GoogleCloudApigeeV1FlowHook)(nil),                                                                        // 103: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHook
	(*GoogleCloudApigeeV1FlowHookConfig)(nil),                                                                  // 104: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHookConfig
	(*GoogleCloudApigeeV1GenerateDownloadUrlRequest)(nil),                                                      // 105: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateDownloadUrlRequest
	(*GoogleCloudApigeeV1GenerateDownloadUrlResponse)(nil),                                                     // 106: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateDownloadUrlResponse
	(*GoogleCloudApigeeV1GenerateUploadUrlRequest)(nil),                                                        // 107: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateUploadUrlRequest
	(*GoogleCloudApigeeV1GenerateUploadUrlResponse)(nil),                                                       // 108: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateUploadUrlResponse
	(*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse)(nil),                                                  // 109: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse
	(*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo)(nil),                                           // 110: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo
	(*GoogleCloudApigeeV1GetSyncAuthorizationRequest)(nil),                                                     // 111: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetSyncAuthorizationRequest
	(*GoogleCloudApigeeV1GraphQLOperation)(nil),                                                                // 112: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperation
	(*GoogleCloudApigeeV1GraphQLOperationConfig)(nil),                                                          // 113: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationConfig
	(*GoogleCloudApigeeV1GraphQLOperationGroup)(nil),                                                           // 114: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationGroup
	(*GoogleCloudApigeeV1GraphqlDocumentation)(nil),                                                            // 115: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphqlDocumentation
	(*GoogleCloudApigeeV1GrpcOperationConfig)(nil),                                                             // 116: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationConfig
	(*GoogleCloudApigeeV1GrpcOperationGroup)(nil),                                                              // 117: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationGroup
	(*GoogleCloudApigeeV1IngressConfig)(nil),                                                                   // 118: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IngressConfig
	(*GoogleCloudApigeeV1Instance)(nil),                                                                        // 119: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance
	(*GoogleCloudApigeeV1InstanceAttachment)(nil),                                                              // 120: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceAttachment
	(*GoogleCloudApigeeV1InstanceDeploymentStatus)(nil),                                                        // 121: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatus
	(*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision)(nil),                                        // 122: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision
	(*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute)(nil),                                           // 123: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute
	(*GoogleCloudApigeeV1IntegrationConfig)(nil),                                                               // 124: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IntegrationConfig
	(*GoogleCloudApigeeV1KeyAliasReference)(nil),                                                               // 125: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyAliasReference
	(*GoogleCloudApigeeV1KeyValueEntry)(nil),                                                                   // 126: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	(*GoogleCloudApigeeV1KeyValueMap)(nil),                                                                     // 127: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	(*GoogleCloudApigeeV1Keystore)(nil),                                                                        // 128: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Keystore
	(*GoogleCloudApigeeV1KeystoreConfig)(nil),                                                                  // 129: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeystoreConfig
	(*GoogleCloudApigeeV1ListApiCategoriesResponse)(nil),                                                       // 130: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiCategoriesResponse
	(*GoogleCloudApigeeV1ListApiDocsResponse)(nil),                                                             // 131: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiDocsResponse
	(*GoogleCloudApigeeV1ListApiProductsResponse)(nil),                                                         // 132: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProductsResponse
	(*GoogleCloudApigeeV1ListApiProxiesResponse)(nil),                                                          // 133: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProxiesResponse
	(*GoogleCloudApigeeV1ListAppGroupAppsResponse)(nil),                                                        // 134: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupAppsResponse
	(*GoogleCloudApigeeV1ListAppGroupsResponse)(nil),                                                           // 135: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupsResponse
	(*GoogleCloudApigeeV1ListAppsResponse)(nil),                                                                // 136: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppsResponse
	(*GoogleCloudApigeeV1ListArchiveDeploymentsResponse)(nil),                                                  // 137: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListArchiveDeploymentsResponse
	(*GoogleCloudApigeeV1ListAsyncQueriesResponse)(nil),                                                        // 138: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAsyncQueriesResponse
	(*GoogleCloudApigeeV1ListCustomReportsResponse)(nil),                                                       // 139: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListCustomReportsResponse
	(*GoogleCloudApigeeV1ListDataCollectorsResponse)(nil),                                                      // 140: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDataCollectorsResponse
	(*GoogleCloudApigeeV1ListDatastoresResponse)(nil),                                                          // 141: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDatastoresResponse
	(*GoogleCloudApigeeV1ListDebugSessionsResponse)(nil),                                                       // 142: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDebugSessionsResponse
	(*GoogleCloudApigeeV1ListDeploymentsResponse)(nil),                                                         // 143: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	(*GoogleCloudApigeeV1ListDeveloperAppsResponse)(nil),                                                       // 144: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperAppsResponse
	(*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse)(nil),                                              // 145: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse
	(*GoogleCloudApigeeV1ListEndpointAttachmentsResponse)(nil),                                                 // 146: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEndpointAttachmentsResponse
	(*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse)(nil),                                         // 147: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse
	(*GoogleCloudApigeeV1ListEnvironmentGroupsResponse)(nil),                                                   // 148: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupsResponse
	(*GoogleCloudApigeeV1ListEnvironmentResourcesResponse)(nil),                                                // 149: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentResourcesResponse
	(*GoogleCloudApigeeV1ListExportsResponse)(nil),                                                             // 150: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListExportsResponse
	(*GoogleCloudApigeeV1ListHybridIssuersResponse)(nil),                                                       // 151: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListHybridIssuersResponse
	(*GoogleCloudApigeeV1ListInstanceAttachmentsResponse)(nil),                                                 // 152: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstanceAttachmentsResponse
	(*GoogleCloudApigeeV1ListInstancesResponse)(nil),                                                           // 153: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstancesResponse
	(*GoogleCloudApigeeV1ListKeyValueEntriesResponse)(nil),                                                     // 154: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListKeyValueEntriesResponse
	(*GoogleCloudApigeeV1ListNatAddressesResponse)(nil),                                                        // 155: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListNatAddressesResponse
	(*GoogleCloudApigeeV1ListOfDevelopersResponse)(nil),                                                        // 156: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOfDevelopersResponse
	(*GoogleCloudApigeeV1ListOrganizationsResponse)(nil),                                                       // 157: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOrganizationsResponse
	(*GoogleCloudApigeeV1ListRatePlansResponse)(nil),                                                           // 158: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListRatePlansResponse
	(*GoogleCloudApigeeV1ListSecurityActionsResponse)(nil),                                                     // 159: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityActionsResponse
	(*GoogleCloudApigeeV1ListSecurityIncidentsResponse)(nil),                                                   // 160: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityIncidentsResponse
	(*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse)(nil),                                            // 161: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse
	(*GoogleCloudApigeeV1ListSecurityProfilesResponse)(nil),                                                    // 162: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesResponse
	(*GoogleCloudApigeeV1ListSecurityProfilesV2Response)(nil),                                                  // 163: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesV2Response
	(*GoogleCloudApigeeV1ListSecurityReportsResponse)(nil),                                                     // 164: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityReportsResponse
	(*GoogleCloudApigeeV1ListSharedFlowsResponse)(nil),                                                         // 165: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSharedFlowsResponse
	(*GoogleCloudApigeeV1ListTraceConfigOverridesResponse)(nil),                                                // 166: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListTraceConfigOverridesResponse
	(*GoogleCloudApigeeV1Metadata)(nil),                                                                        // 167: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metadata
	(*GoogleCloudApigeeV1Metric)(nil),                                                                          // 168: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metric
	(*GoogleCloudApigeeV1MetricAggregation)(nil),                                                               // 169: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1MetricAggregation
	(*GoogleCloudApigeeV1MonetizationConfig)(nil),                                                              // 170: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1MonetizationConfig
	(*GoogleCloudApigeeV1NatAddress)(nil),                                                                      // 171: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NatAddress
	(*GoogleCloudApigeeV1NodeConfig)(nil),                                                                      // 172: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NodeConfig
	(*GoogleCloudApigeeV1OASDocumentation)(nil),                                                                // 173: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OASDocumentation
	(*GoogleCloudApigeeV1Operation)(nil),                                                                       // 174: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Operation
	(*GoogleCloudApigeeV1OperationConfig)(nil),                                                                 // 175: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationConfig
	(*GoogleCloudApigeeV1OperationGroup)(nil),                                                                  // 176: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationGroup
	(*GoogleCloudApigeeV1OperationMetadata)(nil),                                                               // 177: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadata
	(*GoogleCloudApigeeV1OperationMetadataProgress)(nil),                                                       // 178: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress
	(*GoogleCloudApigeeV1OptimizedStats)(nil),                                                                  // 179: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStats
	(*GoogleCloudApigeeV1OptimizedStatsNode)(nil),                                                              // 180: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsNode
	(*GoogleCloudApigeeV1OptimizedStatsResponse)(nil),                                                          // 181: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsResponse
	(*GoogleCloudApigeeV1Organization)(nil),                                                                    // 182: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization
	(*GoogleCloudApigeeV1OrganizationProjectMapping)(nil),                                                      // 183: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OrganizationProjectMapping
	(*GoogleCloudApigeeV1PodStatus)(nil),                                                                       // 184: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1PodStatus
	(*GoogleCloudApigeeV1Point)(nil),                                                                           // 185: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Point
	(*GoogleCloudApigeeV1ProfileConfig)(nil),                                                                   // 186: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfig
	(*GoogleCloudApigeeV1ProfileConfigAbuse)(nil),                                                              // 187: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigAbuse
	(*GoogleCloudApigeeV1ProfileConfigAuthorization)(nil),                                                      // 188: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigAuthorization
	(*GoogleCloudApigeeV1ProfileConfigCORS)(nil),                                                               // 189: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCORS
	(*GoogleCloudApigeeV1ProfileConfigCategory)(nil),                                                           // 190: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory
	(*GoogleCloudApigeeV1ProfileConfigMTLS)(nil),                                                               // 191: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigMTLS
	(*GoogleCloudApigeeV1ProfileConfigMediation)(nil),                                                          // 192: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigMediation
	(*GoogleCloudApigeeV1ProfileConfigThreat)(nil),                                                             // 193: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigThreat
	(*GoogleCloudApigeeV1Properties)(nil),                                                                      // 194: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Properties
	(*GoogleCloudApigeeV1Property)(nil),                                                                        // 195: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Property
	(*GoogleCloudApigeeV1ProvisionOrganizationRequest)(nil),                                                    // 196: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProvisionOrganizationRequest
	(*GoogleCloudApigeeV1Query)(nil),                                                                           // 197: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Query
	(*GoogleCloudApigeeV1QueryMetadata)(nil),                                                                   // 198: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryMetadata
	(*GoogleCloudApigeeV1QueryMetric)(nil),                                                                     // 199: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryMetric
	(*GoogleCloudApigeeV1QueryTabularStatsRequest)(nil),                                                        // 200: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsRequest
	(*GoogleCloudApigeeV1QueryTabularStatsResponseValues)(nil),                                                 // 201: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponseValues
	(*GoogleCloudApigeeV1QueryTabularStatsResponse)(nil),                                                       // 202: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponse
	(*GoogleCloudApigeeV1QueryTimeSeriesStatsRequest)(nil),                                                     // 203: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsRequest
	(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse)(nil),                                                    // 204: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponse
	(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints)(nil),                                      // 205: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints
	(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence)(nil),                                            // 206: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence
	(*GoogleCloudApigeeV1Quota)(nil),                                                                           // 207: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Quota
	(*GoogleCloudApigeeV1RatePlan)(nil),                                                                        // 208: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	(*GoogleCloudApigeeV1RateRange)(nil),                                                                       // 209: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RateRange
	(*GoogleCloudApigeeV1Reference)(nil),                                                                       // 210: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	(*GoogleCloudApigeeV1ReferenceConfig)(nil),                                                                 // 211: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReferenceConfig
	(*GoogleCloudApigeeV1ReportInstanceStatusRequest)(nil),                                                     // 212: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusRequest
	(*GoogleCloudApigeeV1ReportInstanceStatusResponse)(nil),                                                    // 213: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusResponse
	(*GoogleCloudApigeeV1ReportProperty)(nil),                                                                  // 214: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportProperty
	(*GoogleCloudApigeeV1ResourceConfig)(nil),                                                                  // 215: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceConfig
	(*GoogleCloudApigeeV1ResourceFile)(nil),                                                                    // 216: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	(*GoogleCloudApigeeV1ResourceFiles)(nil),                                                                   // 217: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFiles
	(*GoogleCloudApigeeV1ResourceStatus)(nil),                                                                  // 218: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceStatus
	(*GoogleCloudApigeeV1Result)(nil),                                                                          // 219: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Result
	(*GoogleCloudApigeeV1RevenueShareRange)(nil),                                                               // 220: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RevenueShareRange
	(*GoogleCloudApigeeV1RevisionStatus)(nil),                                                                  // 221: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RevisionStatus
	(*GoogleCloudApigeeV1RoutingRule)(nil),                                                                     // 222: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RoutingRule
	(*GoogleCloudApigeeV1RuntimeAddonsConfig)(nil),                                                             // 223: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAddonsConfig
	(*GoogleCloudApigeeV1RuntimeAnalyticsConfig)(nil),                                                          // 224: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAnalyticsConfig
	(*GoogleCloudApigeeV1RuntimeApiSecurityConfig)(nil),                                                        // 225: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeApiSecurityConfig
	(*GoogleCloudApigeeV1RuntimeConfig)(nil),                                                                   // 226: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeConfig
	(*GoogleCloudApigeeV1RuntimeTraceConfig)(nil),                                                              // 227: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfig
	(*GoogleCloudApigeeV1RuntimeTraceConfigOverride)(nil),                                                      // 228: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfigOverride
	(*GoogleCloudApigeeV1RuntimeTraceSamplingConfig)(nil),                                                      // 229: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceSamplingConfig
	(*GoogleCloudApigeeV1Schema)(nil),                                                                          // 230: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Schema
	(*GoogleCloudApigeeV1SchemaSchemaElement)(nil),                                                             // 231: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaElement
	(*GoogleCloudApigeeV1SchemaSchemaProperty)(nil),                                                            // 232: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaProperty
	(*GoogleCloudApigeeV1Score)(nil),                                                                           // 233: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Score
	(*GoogleCloudApigeeV1ScoreComponent)(nil),                                                                  // 234: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent
	(*GoogleCloudApigeeV1ScoreComponentRecommendation)(nil),                                                    // 235: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendation
	(*GoogleCloudApigeeV1ScoreComponentRecommendationAction)(nil),                                              // 236: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendationAction
	(*GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext)(nil),                                 // 237: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext
	(*GoogleCloudApigeeV1SecurityAction)(nil),                                                                  // 238: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	(*GoogleCloudApigeeV1SecurityActionAllow)(nil),                                                             // 239: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionAllow
	(*GoogleCloudApigeeV1SecurityActionConditionConfig)(nil),                                                   // 240: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionConditionConfig
	(*GoogleCloudApigeeV1SecurityActionDeny)(nil),                                                              // 241: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionDeny
	(*GoogleCloudApigeeV1SecurityActionFlag)(nil),                                                              // 242: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionFlag
	(*GoogleCloudApigeeV1SecurityActionHttpHeader)(nil),                                                        // 243: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionHttpHeader
	(*GoogleCloudApigeeV1SecurityActionsConfig)(nil),                                                           // 244: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionsConfig
	(*GoogleCloudApigeeV1SecurityAssessmentResult)(nil),                                                        // 245: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult
	(*GoogleCloudApigeeV1SecurityAssessmentResultResource)(nil),                                                // 246: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultResource
	(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResult)(nil),                                           // 247: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult
	(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation)(nil),                   // 248: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation
	(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation)(nil),     // 249: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation
	(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink)(nil), // 250: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink
	(*GoogleCloudApigeeV1SecurityIncident)(nil),                                                                // 251: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	(*GoogleCloudApigeeV1SecurityProfile)(nil),                                                                 // 252: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	(*GoogleCloudApigeeV1SecurityProfileEnvironment)(nil),                                                      // 253: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironment
	(*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation)(nil),                                           // 254: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation
	(*GoogleCloudApigeeV1SecurityProfileScoringConfig)(nil),                                                    // 255: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileScoringConfig
	(*GoogleCloudApigeeV1SecurityProfileV2)(nil),                                                               // 256: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	(*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig)(nil),                                        // 257: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig
	(*GoogleCloudApigeeV1SecurityReport)(nil),                                                                  // 258: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	(*GoogleCloudApigeeV1SecurityReportMetadata)(nil),                                                          // 259: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportMetadata
	(*GoogleCloudApigeeV1SecurityReportQuery)(nil),                                                             // 260: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQuery
	(*GoogleCloudApigeeV1SecurityReportQueryMetric)(nil),                                                       // 261: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQueryMetric
	(*GoogleCloudApigeeV1SecurityReportResultMetadata)(nil),                                                    // 262: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultMetadata
	(*GoogleCloudApigeeV1SecurityReportResultView)(nil),                                                        // 263: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultView
	(*GoogleCloudApigeeV1SecuritySettings)(nil),                                                                // 264: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecuritySettings
	(*GoogleCloudApigeeV1ServiceIssuersMapping)(nil),                                                           // 265: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ServiceIssuersMapping
	(*GoogleCloudApigeeV1Session)(nil),                                                                         // 266: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Session
	(*GoogleCloudApigeeV1SetAddonEnablementRequest)(nil),                                                       // 267: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SetAddonEnablementRequest
	(*GoogleCloudApigeeV1SetAddonsRequest)(nil),                                                                // 268: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SetAddonsRequest
	(*GoogleCloudApigeeV1SharedFlow)(nil),                                                                      // 269: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlow
	(*GoogleCloudApigeeV1SharedFlowRevision)(nil),                                                              // 270: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision
	(*GoogleCloudApigeeV1Stats)(nil),                                                                           // 271: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats
	(*GoogleCloudApigeeV1StatsEnvironmentStats)(nil),                                                           // 272: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsEnvironmentStats
	(*GoogleCloudApigeeV1StatsHostStats)(nil),                                                                  // 273: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsHostStats
	(*GoogleCloudApigeeV1Subscription)(nil),                                                                    // 274: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Subscription
	(*GoogleCloudApigeeV1SyncAuthorization)(nil),                                                               // 275: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SyncAuthorization
	(*GoogleCloudApigeeV1TargetServer)(nil),                                                                    // 276: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	(*GoogleCloudApigeeV1TargetServerConfig)(nil),                                                              // 277: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServerConfig
	(*GoogleCloudApigeeV1TestDatastoreResponse)(nil),                                                           // 278: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TestDatastoreResponse
	(*GoogleCloudApigeeV1TlsInfo)(nil),                                                                         // 279: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfo
	(*GoogleCloudApigeeV1TlsInfoCommonName)(nil),                                                               // 280: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoCommonName
	(*GoogleCloudApigeeV1TlsInfoConfig)(nil),                                                                   // 281: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoConfig
	(*GoogleCloudApigeeV1TraceConfig)(nil),                                                                     // 282: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfig
	(*GoogleCloudApigeeV1TraceConfigOverride)(nil),                                                             // 283: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	(*GoogleCloudApigeeV1TraceSamplingConfig)(nil),                                                             // 284: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceSamplingConfig
	(*GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest)(nil),                                                     // 285: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest
	(*GoogleCloudApigeeV1UpdateError)(nil),                                                                     // 286: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateError
	(*GoogleCloudApigeeV1UpdateSecurityIncidentRequest)(nil),                                                   // 287: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateSecurityIncidentRequest
	(*GoogleIamV1AuditConfig)(nil),                                                                             // 288: mockgcp.cloud.apigee.v1.GoogleIamV1AuditConfig
	(*GoogleIamV1AuditLogConfig)(nil),                                                                          // 289: mockgcp.cloud.apigee.v1.GoogleIamV1AuditLogConfig
	(*GoogleIamV1Binding)(nil),                                                                                 // 290: mockgcp.cloud.apigee.v1.GoogleIamV1Binding
	(*GoogleIamV1Policy)(nil),                                                                                  // 291: mockgcp.cloud.apigee.v1.GoogleIamV1Policy
	(*GoogleIamV1SetIamPolicyRequest)(nil),                                                                     // 292: mockgcp.cloud.apigee.v1.GoogleIamV1SetIamPolicyRequest
	(*GoogleIamV1TestIamPermissionsRequest)(nil),                                                               // 293: mockgcp.cloud.apigee.v1.GoogleIamV1TestIamPermissionsRequest
	(*GoogleIamV1TestIamPermissionsResponse)(nil),                                                              // 294: mockgcp.cloud.apigee.v1.GoogleIamV1TestIamPermissionsResponse
	(*GoogleLongrunningListOperationsResponse)(nil),                                                            // 295: mockgcp.cloud.apigee.v1.GoogleLongrunningListOperationsResponse
	(*GoogleProtobufEmpty)(nil),                                                                                // 296: mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	(*GoogleRpcPreconditionFailure)(nil),                                                                       // 297: mockgcp.cloud.apigee.v1.GoogleRpcPreconditionFailure
	(*GoogleRpcPreconditionFailureViolation)(nil),                                                              // 298: mockgcp.cloud.apigee.v1.GoogleRpcPreconditionFailureViolation
	(*GoogleRpcStatus)(nil),                                                                                    // 299: mockgcp.cloud.apigee.v1.GoogleRpcStatus
	(*GoogleTypeExpr)(nil),                                                                                     // 300: mockgcp.cloud.apigee.v1.GoogleTypeExpr
	(*GoogleTypeInterval)(nil),                                                                                 // 301: mockgcp.cloud.apigee.v1.GoogleTypeInterval
	(*GoogleTypeMoney)(nil),                                                                                    // 302: mockgcp.cloud.apigee.v1.GoogleTypeMoney
	(*ListHybridIssuersRequest)(nil),                                                                           // 303: mockgcp.cloud.apigee.v1.ListHybridIssuersRequest
	(*CreateOrganizationRequest)(nil),                                                                          // 304: mockgcp.cloud.apigee.v1.CreateOrganizationRequest
	(*DeleteOrganizationRequest)(nil),                                                                          // 305: mockgcp.cloud.apigee.v1.DeleteOrganizationRequest
	(*GetOrganizationRequest)(nil),                                                                             // 306: mockgcp.cloud.apigee.v1.GetOrganizationRequest
	(*GetControlPlaneAccessOrganizationRequest)(nil),                                                           // 307: mockgcp.cloud.apigee.v1.GetControlPlaneAccessOrganizationRequest
	(*GetDeployedIngressConfigOrganizationRequest)(nil),                                                        // 308: mockgcp.cloud.apigee.v1.GetDeployedIngressConfigOrganizationRequest
	(*GetProjectMappingOrganizationRequest)(nil),                                                               // 309: mockgcp.cloud.apigee.v1.GetProjectMappingOrganizationRequest
	(*GetRuntimeConfigOrganizationRequest)(nil),                                                                // 310: mockgcp.cloud.apigee.v1.GetRuntimeConfigOrganizationRequest
	(*GetSecuritySettingsOrganizationRequest)(nil),                                                             // 311: mockgcp.cloud.apigee.v1.GetSecuritySettingsOrganizationRequest
	(*GetSyncAuthorizationOrganizationRequest)(nil),                                                            // 312: mockgcp.cloud.apigee.v1.GetSyncAuthorizationOrganizationRequest
	(*ListOrganizationsRequest)(nil),                                                                           // 313: mockgcp.cloud.apigee.v1.ListOrganizationsRequest
	(*SetAddonsOrganizationRequest)(nil),                                                                       // 314: mockgcp.cloud.apigee.v1.SetAddonsOrganizationRequest
	(*SetSyncAuthorizationOrganizationRequest)(nil),                                                            // 315: mockgcp.cloud.apigee.v1.SetSyncAuthorizationOrganizationRequest
	(*UpdateOrganizationRequest)(nil),                                                                          // 316: mockgcp.cloud.apigee.v1.UpdateOrganizationRequest
	(*UpdateControlPlaneAccessOrganizationRequest)(nil),                                                        // 317: mockgcp.cloud.apigee.v1.UpdateControlPlaneAccessOrganizationRequest
	(*UpdateSecuritySettingsOrganizationRequest)(nil),                                                          // 318: mockgcp.cloud.apigee.v1.UpdateSecuritySettingsOrganizationRequest
	(*CreateOrganizationsAnalyticsDatastoreRequest)(nil),                                                       // 319: mockgcp.cloud.apigee.v1.CreateOrganizationsAnalyticsDatastoreRequest
	(*DeleteOrganizationsAnalyticsDatastoreRequest)(nil),                                                       // 320: mockgcp.cloud.apigee.v1.DeleteOrganizationsAnalyticsDatastoreRequest
	(*GetOrganizationsAnalyticsDatastoreRequest)(nil),                                                          // 321: mockgcp.cloud.apigee.v1.GetOrganizationsAnalyticsDatastoreRequest
	(*ListOrganizationsAnalyticsDatastoresRequest)(nil),                                                        // 322: mockgcp.cloud.apigee.v1.ListOrganizationsAnalyticsDatastoresRequest
	(*TestOrganizationsAnalyticsDatastoreRequest)(nil),                                                         // 323: mockgcp.cloud.apigee.v1.TestOrganizationsAnalyticsDatastoreRequest
	(*UpdateOrganizationsAnalyticsDatastoreRequest)(nil),                                                       // 324: mockgcp.cloud.apigee.v1.UpdateOrganizationsAnalyticsDatastoreRequest
	(*AttributesOrganizationsApiproductRequest)(nil),                                                           // 325: mockgcp.cloud.apigee.v1.AttributesOrganizationsApiproductRequest
	(*CreateOrganizationsApiproductRequest)(nil),                                                               // 326: mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductRequest
	(*DeleteOrganizationsApiproductRequest)(nil),                                                               // 327: mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductRequest
	(*GetOrganizationsApiproductRequest)(nil),                                                                  // 328: mockgcp.cloud.apigee.v1.GetOrganizationsApiproductRequest
	(*ListOrganizationsApiproductsRequest)(nil),                                                                // 329: mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsRequest
	(*UpdateOrganizationsApiproductRequest)(nil),                                                               // 330: mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductRequest
	(*DeleteOrganizationsApiproductsAttributeRequest)(nil),                                                     // 331: mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductsAttributeRequest
	(*GetOrganizationsApiproductsAttributeRequest)(nil),                                                        // 332: mockgcp.cloud.apigee.v1.GetOrganizationsApiproductsAttributeRequest
	(*ListOrganizationsApiproductsAttributesRequest)(nil),                                                      // 333: mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsAttributesRequest
	(*UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest)(nil),                                  // 334: mockgcp.cloud.apigee.v1.UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest
	(*CreateOrganizationsApiproductsRateplanRequest)(nil),                                                      // 335: mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductsRateplanRequest
	(*DeleteOrganizationsApiproductsRateplanRequest)(nil),                                                      // 336: mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductsRateplanRequest
	(*GetOrganizationsApiproductsRateplanRequest)(nil),                                                         // 337: mockgcp.cloud.apigee.v1.GetOrganizationsApiproductsRateplanRequest
	(*ListOrganizationsApiproductsRateplansRequest)(nil),                                                       // 338: mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsRateplansRequest
	(*UpdateOrganizationsApiproductsRateplanRequest)(nil),                                                      // 339: mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductsRateplanRequest
	(*CreateOrganizationsApiRequest)(nil),                                                                      // 340: mockgcp.cloud.apigee.v1.CreateOrganizationsApiRequest
	(*DeleteOrganizationsApiRequest)(nil),                                                                      // 341: mockgcp.cloud.apigee.v1.DeleteOrganizationsApiRequest
	(*GetOrganizationsApiRequest)(nil),                                                                         // 342: mockgcp.cloud.apigee.v1.GetOrganizationsApiRequest
	(*ListOrganizationsApisRequest)(nil),                                                                       // 343: mockgcp.cloud.apigee.v1.ListOrganizationsApisRequest
	(*PatchOrganizationsApiRequest)(nil),                                                                       // 344: mockgcp.cloud.apigee.v1.PatchOrganizationsApiRequest
	(*ListOrganizationsApisDeploymentsRequest)(nil),                                                            // 345: mockgcp.cloud.apigee.v1.ListOrganizationsApisDeploymentsRequest
	(*CreateOrganizationsApisKeyvaluemapRequest)(nil),                                                          // 346: mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapRequest
	(*DeleteOrganizationsApisKeyvaluemapRequest)(nil),                                                          // 347: mockgcp.cloud.apigee.v1.DeleteOrganizationsApisKeyvaluemapRequest
	(*CreateOrganizationsApisKeyvaluemapsEntryRequest)(nil),                                                    // 348: mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapsEntryRequest
	(*DeleteOrganizationsApisKeyvaluemapsEntryRequest)(nil),                                                    // 349: mockgcp.cloud.apigee.v1.DeleteOrganizationsApisKeyvaluemapsEntryRequest
	(*GetOrganizationsApisKeyvaluemapsEntryRequest)(nil),                                                       // 350: mockgcp.cloud.apigee.v1.GetOrganizationsApisKeyvaluemapsEntryRequest
	(*ListOrganizationsApisKeyvaluemapsEntriesRequest)(nil),                                                    // 351: mockgcp.cloud.apigee.v1.ListOrganizationsApisKeyvaluemapsEntriesRequest
	(*UpdateOrganizationsApisKeyvaluemapsEntryRequest)(nil),                                                    // 352: mockgcp.cloud.apigee.v1.UpdateOrganizationsApisKeyvaluemapsEntryRequest
	(*DeleteOrganizationsApisRevisionRequest)(nil),                                                             // 353: mockgcp.cloud.apigee.v1.DeleteOrganizationsApisRevisionRequest
	(*GetOrganizationsApisRevisionRequest)(nil),                                                                // 354: mockgcp.cloud.apigee.v1.GetOrganizationsApisRevisionRequest
	(*UpdateApiProxyRevisionOrganizationsApisRevisionRequest)(nil),                                             // 355: mockgcp.cloud.apigee.v1.UpdateApiProxyRevisionOrganizationsApisRevisionRequest
	(*ListOrganizationsApisRevisionsDeploymentsRequest)(nil),                                                   // 356: mockgcp.cloud.apigee.v1.ListOrganizationsApisRevisionsDeploymentsRequest
	(*CreateOrganizationsAppgroupRequest)(nil),                                                                 // 357: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupRequest
	(*DeleteOrganizationsAppgroupRequest)(nil),                                                                 // 358: mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupRequest
	(*GetOrganizationsAppgroupRequest)(nil),                                                                    // 359: mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupRequest
	(*ListOrganizationsAppgroupsRequest)(nil),                                                                  // 360: mockgcp.cloud.apigee.v1.ListOrganizationsAppgroupsRequest
	(*UpdateOrganizationsAppgroupRequest)(nil),                                                                 // 361: mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupRequest
	(*CreateOrganizationsAppgroupsAppRequest)(nil),                                                             // 362: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppRequest
	(*DeleteOrganizationsAppgroupsAppRequest)(nil),                                                             // 363: mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppRequest
	(*GetOrganizationsAppgroupsAppRequest)(nil),                                                                // 364: mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupsAppRequest
	(*ListOrganizationsAppgroupsAppsRequest)(nil),                                                              // 365: mockgcp.cloud.apigee.v1.ListOrganizationsAppgroupsAppsRequest
	(*UpdateOrganizationsAppgroupsAppRequest)(nil),                                                             // 366: mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupsAppRequest
	(*CreateOrganizationsAppgroupsAppsKeyRequest)(nil),                                                         // 367: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppsKeyRequest
	(*DeleteOrganizationsAppgroupsAppsKeyRequest)(nil),                                                         // 368: mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppsKeyRequest
	(*GetOrganizationsAppgroupsAppsKeyRequest)(nil),                                                            // 369: mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupsAppsKeyRequest
	(*UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest)(nil),                                           // 370: mockgcp.cloud.apigee.v1.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest
	(*DeleteOrganizationsAppgroupsAppsKeysApiproductRequest)(nil),                                              // 371: mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppsKeysApiproductRequest
	(*UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest)(nil),                      // 372: mockgcp.cloud.apigee.v1.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest
	(*GetOrganizationsAppRequest)(nil),                                                                         // 373: mockgcp.cloud.apigee.v1.GetOrganizationsAppRequest
	(*ListOrganizationsAppsRequest)(nil),                                                                       // 374: mockgcp.cloud.apigee.v1.ListOrganizationsAppsRequest
	(*CreateOrganizationsDatacollectorRequest)(nil),                                                            // 375: mockgcp.cloud.apigee.v1.CreateOrganizationsDatacollectorRequest
	(*DeleteOrganizationsDatacollectorRequest)(nil),                                                            // 376: mockgcp.cloud.apigee.v1.DeleteOrganizationsDatacollectorRequest
	(*GetOrganizationsDatacollectorRequest)(nil),                                                               // 377: mockgcp.cloud.apigee.v1.GetOrganizationsDatacollectorRequest
	(*ListOrganizationsDatacollectorsRequest)(nil),                                                             // 378: mockgcp.cloud.apigee.v1.ListOrganizationsDatacollectorsRequest
	(*PatchOrganizationsDatacollectorRequest)(nil),                                                             // 379: mockgcp.cloud.apigee.v1.PatchOrganizationsDatacollectorRequest
	(*ListOrganizationsDeploymentsRequest)(nil),                                                                // 380: mockgcp.cloud.apigee.v1.ListOrganizationsDeploymentsRequest
	(*AttributesOrganizationsDeveloperRequest)(nil),                                                            // 381: mockgcp.cloud.apigee.v1.AttributesOrganizationsDeveloperRequest
	(*CreateOrganizationsDeveloperRequest)(nil),                                                                // 382: mockgcp.cloud.apigee.v1.CreateOrganizationsDeveloperRequest
	(*DeleteOrganizationsDeveloperRequest)(nil),                                                                // 383: mockgcp.cloud.apigee.v1.DeleteOrganizationsDeveloperRequest
	(*GetOrganizationsDeveloperRequest)(nil),                                                                   // 384: mockgcp.cloud.apigee.v1.GetOrganizationsDeveloperRequest
	(*GetBalanceOrganizationsDeveloperRequest)(nil),                                                            // 385: mockgcp.cloud.apigee.v1.GetBalanceOrganizationsDeveloperRequest
	(*GetMonetizationConfigOrganizationsDeveloperRequest)(nil),                                                 // 386: mockgcp.cloud.apigee.v1.GetMonetizationConfigOrganizationsDeveloperRequest
	(*ListOrganizationsDevelopersRequest)(nil),                                                                 // 387: mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersRequest
	(*SetDeveloperStatusOrganizationsDeveloperRequest)(nil),                                                    // 388: mockgcp.cloud.apigee.v1.SetDeveloperStatusOrganizationsDeveloperRequest
	(*UpdateOrganizationsDeveloperRequest)(nil),                                                                // 389: mockgcp.cloud.apigee.v1.UpdateOrganizationsDeveloperRequest
	(*UpdateMonetizationConfigOrganizationsDeveloperRequest)(nil),                                              // 390: mockgcp.cloud.apigee.v1.UpdateMonetizationConfigOrganizationsDeveloperRequest
	(*AttributesOrganizationsDevelopersAppRequest)(nil),                                                        // 391: mockgcp.cloud.apigee.v1.AttributesOrganizationsDevelopersAppRequest
	(*CreateOrganizationsDevelopersAppRequest)(nil),                                                            // 392: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppRequest
	(*DeleteOrganizationsDevelopersAppRequest)(nil),                                                            // 393: mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppRequest
	(*GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest)(nil),                         // 394: mockgcp.cloud.apigee.v1.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest
	(*GetOrganizationsDevelopersAppRequest)(nil),                                                               // 395: mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppRequest
	(*ListOrganizationsDevelopersAppsRequest)(nil),                                                             // 396: mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAppsRequest
	(*UpdateOrganizationsDevelopersAppRequest)(nil),                                                            // 397: mockgcp.cloud.apigee.v1.UpdateOrganizationsDevelopersAppRequest
	(*DeleteOrganizationsDevelopersAppsAttributeRequest)(nil),                                                  // 398: mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsAttributeRequest
	(*GetOrganizationsDevelopersAppsAttributeRequest)(nil),                                                     // 399: mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppsAttributeRequest
	(*ListOrganizationsDevelopersAppsAttributesRequest)(nil),                                                   // 400: mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAppsAttributesRequest
	(*UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest)(nil),                             // 401: mockgcp.cloud.apigee.v1.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest
	(*CreateOrganizationsDevelopersAppsKeyRequest)(nil),                                                        // 402: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeyRequest
	(*DeleteOrganizationsDevelopersAppsKeyRequest)(nil),                                                        // 403: mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsKeyRequest
	(*GetOrganizationsDevelopersAppsKeyRequest)(nil),                                                           // 404: mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppsKeyRequest
	(*ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest)(nil),                                        // 405: mockgcp.cloud.apigee.v1.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	(*UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest)(nil),                                         // 406: mockgcp.cloud.apigee.v1.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	(*DeleteOrganizationsDevelopersAppsKeysApiproductRequest)(nil),                                             // 407: mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsKeysApiproductRequest
	(*UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest)(nil),                    // 408: mockgcp.cloud.apigee.v1.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest
	(*CreateOrganizationsDevelopersAppsKeysCreateRequest)(nil),                                                 // 409: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeysCreateRequest
	(*DeleteOrganizationsDevelopersAttributeRequest)(nil),                                                      // 410: mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAttributeRequest
	(*GetOrganizationsDevelopersAttributeRequest)(nil),                                                         // 411: mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAttributeRequest
	(*ListOrganizationsDevelopersAttributesRequest)(nil),                                                       // 412: mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAttributesRequest
	(*UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest)(nil),                                    // 413: mockgcp.cloud.apigee.v1.UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest
	(*AdjustOrganizationsDevelopersBalanceRequest)(nil),                                                        // 414: mockgcp.cloud.apigee.v1.AdjustOrganizationsDevelopersBalanceRequest
	(*CreditOrganizationsDevelopersBalanceRequest)(nil),                                                        // 415: mockgcp.cloud.apigee.v1.CreditOrganizationsDevelopersBalanceRequest
	(*CreateOrganizationsDevelopersSubscriptionRequest)(nil),                                                   // 416: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersSubscriptionRequest
	(*ExpireOrganizationsDevelopersSubscriptionRequest)(nil),                                                   // 417: mockgcp.cloud.apigee.v1.ExpireOrganizationsDevelopersSubscriptionRequest
	(*GetOrganizationsDevelopersSubscriptionRequest)(nil),                                                      // 418: mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersSubscriptionRequest
	(*ListOrganizationsDevelopersSubscriptionsRequest)(nil),                                                    // 419: mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersSubscriptionsRequest
	(*CreateOrganizationsEndpointAttachmentRequest)(nil),                                                       // 420: mockgcp.cloud.apigee.v1.CreateOrganizationsEndpointAttachmentRequest
	(*DeleteOrganizationsEndpointAttachmentRequest)(nil),                                                       // 421: mockgcp.cloud.apigee.v1.DeleteOrganizationsEndpointAttachmentRequest
	(*GetOrganizationsEndpointAttachmentRequest)(nil),                                                          // 422: mockgcp.cloud.apigee.v1.GetOrganizationsEndpointAttachmentRequest
	(*ListOrganizationsEndpointAttachmentsRequest)(nil),                                                        // 423: mockgcp.cloud.apigee.v1.ListOrganizationsEndpointAttachmentsRequest
	(*CreateOrganizationsEnvgroupRequest)(nil),                                                                 // 424: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupRequest
	(*DeleteOrganizationsEnvgroupRequest)(nil),                                                                 // 425: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvgroupRequest
	(*GetOrganizationsEnvgroupRequest)(nil),                                                                    // 426: mockgcp.cloud.apigee.v1.GetOrganizationsEnvgroupRequest
	(*GetDeployedIngressConfigOrganizationsEnvgroupRequest)(nil),                                               // 427: mockgcp.cloud.apigee.v1.GetDeployedIngressConfigOrganizationsEnvgroupRequest
	(*ListOrganizationsEnvgroupsRequest)(nil),                                                                  // 428: mockgcp.cloud.apigee.v1.ListOrganizationsEnvgroupsRequest
	(*PatchOrganizationsEnvgroupRequest)(nil),                                                                  // 429: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvgroupRequest
	(*CreateOrganizationsEnvgroupsAttachmentRequest)(nil),                                                      // 430: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupsAttachmentRequest
	(*DeleteOrganizationsEnvgroupsAttachmentRequest)(nil),                                                      // 431: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvgroupsAttachmentRequest
	(*GetOrganizationsEnvgroupsAttachmentRequest)(nil),                                                         // 432: mockgcp.cloud.apigee.v1.GetOrganizationsEnvgroupsAttachmentRequest
	(*ListOrganizationsEnvgroupsAttachmentsRequest)(nil),                                                       // 433: mockgcp.cloud.apigee.v1.ListOrganizationsEnvgroupsAttachmentsRequest
	(*CreateOrganizationsEnvironmentRequest)(nil),                                                              // 434: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentRequest
	(*DeleteOrganizationsEnvironmentRequest)(nil),                                                              // 435: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentRequest
	(*GetOrganizationsEnvironmentRequest)(nil),                                                                 // 436: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentRequest
	(*GetAddonsConfigOrganizationsEnvironmentRequest)(nil),                                                     // 437: mockgcp.cloud.apigee.v1.GetAddonsConfigOrganizationsEnvironmentRequest
	(*GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest)(nil),                                         // 438: mockgcp.cloud.apigee.v1.GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest
	(*GetDebugmaskOrganizationsEnvironmentRequest)(nil),                                                        // 439: mockgcp.cloud.apigee.v1.GetDebugmaskOrganizationsEnvironmentRequest
	(*GetDeployedConfigOrganizationsEnvironmentRequest)(nil),                                                   // 440: mockgcp.cloud.apigee.v1.GetDeployedConfigOrganizationsEnvironmentRequest
	(*GetSecurityActionsConfigOrganizationsEnvironmentRequest)(nil),                                            // 441: mockgcp.cloud.apigee.v1.GetSecurityActionsConfigOrganizationsEnvironmentRequest
	(*GetTraceConfigOrganizationsEnvironmentRequest)(nil),                                                      // 442: mockgcp.cloud.apigee.v1.GetTraceConfigOrganizationsEnvironmentRequest
	(*ModifyEnvironmentOrganizationsEnvironmentRequest)(nil),                                                   // 443: mockgcp.cloud.apigee.v1.ModifyEnvironmentOrganizationsEnvironmentRequest
	(*SubscribeOrganizationsEnvironmentRequest)(nil),                                                           // 444: mockgcp.cloud.apigee.v1.SubscribeOrganizationsEnvironmentRequest
	(*UnsubscribeOrganizationsEnvironmentRequest)(nil),                                                         // 445: mockgcp.cloud.apigee.v1.UnsubscribeOrganizationsEnvironmentRequest
	(*UpdateOrganizationsEnvironmentRequest)(nil),                                                              // 446: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentRequest
	(*UpdateDebugmaskOrganizationsEnvironmentRequest)(nil),                                                     // 447: mockgcp.cloud.apigee.v1.UpdateDebugmaskOrganizationsEnvironmentRequest
	(*UpdateEnvironmentOrganizationsEnvironmentRequest)(nil),                                                   // 448: mockgcp.cloud.apigee.v1.UpdateEnvironmentOrganizationsEnvironmentRequest
	(*UpdateSecurityActionsConfigOrganizationsEnvironmentRequest)(nil),                                         // 449: mockgcp.cloud.apigee.v1.UpdateSecurityActionsConfigOrganizationsEnvironmentRequest
	(*UpdateTraceConfigOrganizationsEnvironmentRequest)(nil),                                                   // 450: mockgcp.cloud.apigee.v1.UpdateTraceConfigOrganizationsEnvironmentRequest
	(*SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest)(nil),                                     // 451: mockgcp.cloud.apigee.v1.SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest
	(*GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest)(nil),                                          // 452: mockgcp.cloud.apigee.v1.GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest
	(*CreateOrganizationsEnvironmentsAnalyticsExportRequest)(nil),                                              // 453: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsAnalyticsExportRequest
	(*GetOrganizationsEnvironmentsAnalyticsExportRequest)(nil),                                                 // 454: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsAnalyticsExportRequest
	(*ListOrganizationsEnvironmentsAnalyticsExportsRequest)(nil),                                               // 455: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsAnalyticsExportsRequest
	(*ListOrganizationsEnvironmentsApisDeploymentsRequest)(nil),                                                // 456: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsApisDeploymentsRequest
	(*DeployOrganizationsEnvironmentsApisRevisionRequest)(nil),                                                 // 457: mockgcp.cloud.apigee.v1.DeployOrganizationsEnvironmentsApisRevisionRequest
	(*GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest)(nil),                                         // 458: mockgcp.cloud.apigee.v1.GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest
	(*UndeployOrganizationsEnvironmentsApisRevisionRequest)(nil),                                               // 459: mockgcp.cloud.apigee.v1.UndeployOrganizationsEnvironmentsApisRevisionRequest
	(*CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)(nil),                                    // 460: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	(*DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)(nil),                                // 461: mockgcp.cloud.apigee.v1.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)(nil),                                       // 462: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	(*ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest)(nil),                                     // 463: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest
	(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest)(nil),                                  // 464: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest
	(*GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest)(nil),                  // 465: mockgcp.cloud.apigee.v1.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	(*GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest)(nil),                // 466: mockgcp.cloud.apigee.v1.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	(*CreateOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                                            // 467: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsArchiveDeploymentRequest
	(*DeleteOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                                            // 468: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsArchiveDeploymentRequest
	(*GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                               // 469: mockgcp.cloud.apigee.v1.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	(*GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                                 // 470: mockgcp.cloud.apigee.v1.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	(*GetOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                                               // 471: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsArchiveDeploymentRequest
	(*ListOrganizationsEnvironmentsArchiveDeploymentsRequest)(nil),                                             // 472: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsArchiveDeploymentsRequest
	(*PatchOrganizationsEnvironmentsArchiveDeploymentRequest)(nil),                                             // 473: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsArchiveDeploymentRequest
	(*DeleteOrganizationsEnvironmentsCacheRequest)(nil),                                                        // 474: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsCacheRequest
	(*GetOrganizationsEnvironmentsDeploymentRequest)(nil),                                                      // 475: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsDeploymentRequest
	(*ListOrganizationsEnvironmentsDeploymentsRequest)(nil),                                                    // 476: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsDeploymentsRequest
	(*AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest)(nil),                                 // 477: mockgcp.cloud.apigee.v1.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest
	(*DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest)(nil),                               // 478: mockgcp.cloud.apigee.v1.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest
	(*GetOrganizationsEnvironmentsFlowhookRequest)(nil),                                                        // 479: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsFlowhookRequest
	(*CreateOrganizationsEnvironmentsKeystoreRequest)(nil),                                                     // 480: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoreRequest
	(*DeleteOrganizationsEnvironmentsKeystoreRequest)(nil),                                                     // 481: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeystoreRequest
	(*GetOrganizationsEnvironmentsKeystoreRequest)(nil),                                                        // 482: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeystoreRequest
	(*CreateOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                              // 483: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoresAliaseRequest
	(*CsrOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                                 // 484: mockgcp.cloud.apigee.v1.CsrOrganizationsEnvironmentsKeystoresAliaseRequest
	(*DeleteOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                              // 485: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeystoresAliaseRequest
	(*GetOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                                 // 486: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeystoresAliaseRequest
	(*GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                      // 487: mockgcp.cloud.apigee.v1.GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest
	(*UpdateOrganizationsEnvironmentsKeystoresAliaseRequest)(nil),                                              // 488: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeystoresAliaseRequest
	(*CreateOrganizationsEnvironmentsKeyvaluemapRequest)(nil),                                                  // 489: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapRequest
	(*DeleteOrganizationsEnvironmentsKeyvaluemapRequest)(nil),                                                  // 490: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeyvaluemapRequest
	(*CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest)(nil),                                            // 491: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	(*DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest)(nil),                                            // 492: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	(*GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest)(nil),                                               // 493: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	(*ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest)(nil),                                            // 494: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest
	(*UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest)(nil),                                            // 495: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	(*GetOrganizationsEnvironmentsOptimizedStatRequest)(nil),                                                   // 496: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsOptimizedStatRequest
	(*CreateOrganizationsEnvironmentsQueryRequest)(nil),                                                        // 497: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsQueryRequest
	(*GetOrganizationsEnvironmentsQueryRequest)(nil),                                                           // 498: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsQueryRequest
	(*GetResultOrganizationsEnvironmentsQueryRequest)(nil),                                                     // 499: mockgcp.cloud.apigee.v1.GetResultOrganizationsEnvironmentsQueryRequest
	(*GetResulturlOrganizationsEnvironmentsQueryRequest)(nil),                                                  // 500: mockgcp.cloud.apigee.v1.GetResulturlOrganizationsEnvironmentsQueryRequest
	(*ListOrganizationsEnvironmentsQueriesRequest)(nil),                                                        // 501: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsQueriesRequest
	(*CreateOrganizationsEnvironmentsReferenceRequest)(nil),                                                    // 502: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsReferenceRequest
	(*DeleteOrganizationsEnvironmentsReferenceRequest)(nil),                                                    // 503: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsReferenceRequest
	(*GetOrganizationsEnvironmentsReferenceRequest)(nil),                                                       // 504: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsReferenceRequest
	(*UpdateOrganizationsEnvironmentsReferenceRequest)(nil),                                                    // 505: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsReferenceRequest
	(*CreateOrganizationsEnvironmentsResourcefileRequest)(nil),                                                 // 506: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsResourcefileRequest
	(*DeleteOrganizationsEnvironmentsResourcefileRequest)(nil),                                                 // 507: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsResourcefileRequest
	(*GetOrganizationsEnvironmentsResourcefileRequest)(nil),                                                    // 508: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsResourcefileRequest
	(*ListOrganizationsEnvironmentsResourcefilesRequest)(nil),                                                  // 509: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsResourcefilesRequest
	(*ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest)(nil),                               // 510: mockgcp.cloud.apigee.v1.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest
	(*UpdateOrganizationsEnvironmentsResourcefileRequest)(nil),                                                 // 511: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsResourcefileRequest
	(*CreateOrganizationsEnvironmentsSecurityActionRequest)(nil),                                               // 512: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityActionRequest
	(*DisableOrganizationsEnvironmentsSecurityActionRequest)(nil),                                              // 513: mockgcp.cloud.apigee.v1.DisableOrganizationsEnvironmentsSecurityActionRequest
	(*EnableOrganizationsEnvironmentsSecurityActionRequest)(nil),                                               // 514: mockgcp.cloud.apigee.v1.EnableOrganizationsEnvironmentsSecurityActionRequest
	(*GetOrganizationsEnvironmentsSecurityActionRequest)(nil),                                                  // 515: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityActionRequest
	(*ListOrganizationsEnvironmentsSecurityActionsRequest)(nil),                                                // 516: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityActionsRequest
	(*BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest)(nil),                                        // 517: mockgcp.cloud.apigee.v1.BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest
	(*GetOrganizationsEnvironmentsSecurityIncidentRequest)(nil),                                                // 518: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityIncidentRequest
	(*ListOrganizationsEnvironmentsSecurityIncidentsRequest)(nil),                                              // 519: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityIncidentsRequest
	(*PatchOrganizationsEnvironmentsSecurityIncidentRequest)(nil),                                              // 520: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsSecurityIncidentRequest
	(*CreateOrganizationsEnvironmentsSecurityReportRequest)(nil),                                               // 521: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityReportRequest
	(*GetOrganizationsEnvironmentsSecurityReportRequest)(nil),                                                  // 522: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityReportRequest
	(*GetResultOrganizationsEnvironmentsSecurityReportRequest)(nil),                                            // 523: mockgcp.cloud.apigee.v1.GetResultOrganizationsEnvironmentsSecurityReportRequest
	(*GetResultViewOrganizationsEnvironmentsSecurityReportRequest)(nil),                                        // 524: mockgcp.cloud.apigee.v1.GetResultViewOrganizationsEnvironmentsSecurityReportRequest
	(*ListOrganizationsEnvironmentsSecurityReportsRequest)(nil),                                                // 525: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityReportsRequest
	(*QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest)(nil),                                      // 526: mockgcp.cloud.apigee.v1.QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest
	(*QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest)(nil),                                   // 527: mockgcp.cloud.apigee.v1.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest
	(*ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest)(nil),                                         // 528: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest
	(*DeployOrganizationsEnvironmentsSharedflowsRevisionRequest)(nil),                                          // 529: mockgcp.cloud.apigee.v1.DeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	(*GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest)(nil),                                  // 530: mockgcp.cloud.apigee.v1.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest
	(*UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest)(nil),                                        // 531: mockgcp.cloud.apigee.v1.UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	(*GetOrganizationsEnvironmentsStatRequest)(nil),                                                            // 532: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsStatRequest
	(*CreateOrganizationsEnvironmentsTargetserverRequest)(nil),                                                 // 533: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTargetserverRequest
	(*DeleteOrganizationsEnvironmentsTargetserverRequest)(nil),                                                 // 534: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsTargetserverRequest
	(*GetOrganizationsEnvironmentsTargetserverRequest)(nil),                                                    // 535: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsTargetserverRequest
	(*UpdateOrganizationsEnvironmentsTargetserverRequest)(nil),                                                 // 536: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsTargetserverRequest
	(*CreateOrganizationsEnvironmentsTraceConfigOverrideRequest)(nil),                                          // 537: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTraceConfigOverrideRequest
	(*DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest)(nil),                                          // 538: mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest
	(*GetOrganizationsEnvironmentsTraceConfigOverrideRequest)(nil),                                             // 539: mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsTraceConfigOverrideRequest
	(*ListOrganizationsEnvironmentsTraceConfigOverridesRequest)(nil),                                           // 540: mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsTraceConfigOverridesRequest
	(*PatchOrganizationsEnvironmentsTraceConfigOverrideRequest)(nil),                                           // 541: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsTraceConfigOverrideRequest
	(*CreateOrganizationsHostQueryRequest)(nil),                                                                // 542: mockgcp.cloud.apigee.v1.CreateOrganizationsHostQueryRequest
	(*GetOrganizationsHostQueryRequest)(nil),                                                                   // 543: mockgcp.cloud.apigee.v1.GetOrganizationsHostQueryRequest
	(*GetResultOrganizationsHostQueryRequest)(nil),                                                             // 544: mockgcp.cloud.apigee.v1.GetResultOrganizationsHostQueryRequest
	(*GetResultViewOrganizationsHostQueryRequest)(nil),                                                         // 545: mockgcp.cloud.apigee.v1.GetResultViewOrganizationsHostQueryRequest
	(*ListOrganizationsHostQueriesRequest)(nil),                                                                // 546: mockgcp.cloud.apigee.v1.ListOrganizationsHostQueriesRequest
	(*CreateOrganizationsHostSecurityReportRequest)(nil),                                                       // 547: mockgcp.cloud.apigee.v1.CreateOrganizationsHostSecurityReportRequest
	(*GetOrganizationsHostSecurityReportRequest)(nil),                                                          // 548: mockgcp.cloud.apigee.v1.GetOrganizationsHostSecurityReportRequest
	(*GetResultOrganizationsHostSecurityReportRequest)(nil),                                                    // 549: mockgcp.cloud.apigee.v1.GetResultOrganizationsHostSecurityReportRequest
	(*GetResultViewOrganizationsHostSecurityReportRequest)(nil),                                                // 550: mockgcp.cloud.apigee.v1.GetResultViewOrganizationsHostSecurityReportRequest
	(*ListOrganizationsHostSecurityReportsRequest)(nil),                                                        // 551: mockgcp.cloud.apigee.v1.ListOrganizationsHostSecurityReportsRequest
	(*GetOrganizationsHostStatRequest)(nil),                                                                    // 552: mockgcp.cloud.apigee.v1.GetOrganizationsHostStatRequest
	(*CreateOrganizationsInstanceRequest)(nil),                                                                 // 553: mockgcp.cloud.apigee.v1.CreateOrganizationsInstanceRequest
	(*DeleteOrganizationsInstanceRequest)(nil),                                                                 // 554: mockgcp.cloud.apigee.v1.DeleteOrganizationsInstanceRequest
	(*GetOrganizationsInstanceRequest)(nil),                                                                    // 555: mockgcp.cloud.apigee.v1.GetOrganizationsInstanceRequest
	(*ListOrganizationsInstancesRequest)(nil),                                                                  // 556: mockgcp.cloud.apigee.v1.ListOrganizationsInstancesRequest
	(*PatchOrganizationsInstanceRequest)(nil),                                                                  // 557: mockgcp.cloud.apigee.v1.PatchOrganizationsInstanceRequest
	(*ReportStatusOrganizationsInstanceRequest)(nil),                                                           // 558: mockgcp.cloud.apigee.v1.ReportStatusOrganizationsInstanceRequest
	(*CreateOrganizationsInstancesAttachmentRequest)(nil),                                                      // 559: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesAttachmentRequest
	(*DeleteOrganizationsInstancesAttachmentRequest)(nil),                                                      // 560: mockgcp.cloud.apigee.v1.DeleteOrganizationsInstancesAttachmentRequest
	(*GetOrganizationsInstancesAttachmentRequest)(nil),                                                         // 561: mockgcp.cloud.apigee.v1.GetOrganizationsInstancesAttachmentRequest
	(*ListOrganizationsInstancesAttachmentsRequest)(nil),                                                       // 562: mockgcp.cloud.apigee.v1.ListOrganizationsInstancesAttachmentsRequest
	(*CreateOrganizationsInstancesCanaryevaluationRequest)(nil),                                                // 563: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesCanaryevaluationRequest
	(*GetOrganizationsInstancesCanaryevaluationRequest)(nil),                                                   // 564: mockgcp.cloud.apigee.v1.GetOrganizationsInstancesCanaryevaluationRequest
	(*ActivateOrganizationsInstancesNatAddresseRequest)(nil),                                                   // 565: mockgcp.cloud.apigee.v1.ActivateOrganizationsInstancesNatAddresseRequest
	(*CreateOrganizationsInstancesNatAddresseRequest)(nil),                                                     // 566: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesNatAddresseRequest
	(*DeleteOrganizationsInstancesNatAddresseRequest)(nil),                                                     // 567: mockgcp.cloud.apigee.v1.DeleteOrganizationsInstancesNatAddresseRequest
	(*GetOrganizationsInstancesNatAddresseRequest)(nil),                                                        // 568: mockgcp.cloud.apigee.v1.GetOrganizationsInstancesNatAddresseRequest
	(*ListOrganizationsInstancesNatAddressesRequest)(nil),                                                      // 569: mockgcp.cloud.apigee.v1.ListOrganizationsInstancesNatAddressesRequest
	(*CreateOrganizationsKeyvaluemapRequest)(nil),                                                              // 570: mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapRequest
	(*DeleteOrganizationsKeyvaluemapRequest)(nil),                                                              // 571: mockgcp.cloud.apigee.v1.DeleteOrganizationsKeyvaluemapRequest
	(*CreateOrganizationsKeyvaluemapsEntryRequest)(nil),                                                        // 572: mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapsEntryRequest
	(*DeleteOrganizationsKeyvaluemapsEntryRequest)(nil),                                                        // 573: mockgcp.cloud.apigee.v1.DeleteOrganizationsKeyvaluemapsEntryRequest
	(*GetOrganizationsKeyvaluemapsEntryRequest)(nil),                                                           // 574: mockgcp.cloud.apigee.v1.GetOrganizationsKeyvaluemapsEntryRequest
	(*ListOrganizationsKeyvaluemapsEntriesRequest)(nil),                                                        // 575: mockgcp.cloud.apigee.v1.ListOrganizationsKeyvaluemapsEntriesRequest
	(*UpdateOrganizationsKeyvaluemapsEntryRequest)(nil),                                                        // 576: mockgcp.cloud.apigee.v1.UpdateOrganizationsKeyvaluemapsEntryRequest
	(*GetOrganizationsOptimizedHostStatRequest)(nil),                                                           // 577: mockgcp.cloud.apigee.v1.GetOrganizationsOptimizedHostStatRequest
	(*CreateOrganizationsReportRequest)(nil),                                                                   // 578: mockgcp.cloud.apigee.v1.CreateOrganizationsReportRequest
	(*DeleteOrganizationsReportRequest)(nil),                                                                   // 579: mockgcp.cloud.apigee.v1.DeleteOrganizationsReportRequest
	(*GetOrganizationsReportRequest)(nil),                                                                      // 580: mockgcp.cloud.apigee.v1.GetOrganizationsReportRequest
	(*ListOrganizationsReportsRequest)(nil),                                                                    // 581: mockgcp.cloud.apigee.v1.ListOrganizationsReportsRequest
	(*UpdateOrganizationsReportRequest)(nil),                                                                   // 582: mockgcp.cloud.apigee.v1.UpdateOrganizationsReportRequest
	(*BatchComputeOrganizationsSecurityAssessmentResultRequest)(nil),                                           // 583: mockgcp.cloud.apigee.v1.BatchComputeOrganizationsSecurityAssessmentResultRequest
	(*CreateOrganizationsSecurityProfileRequest)(nil),                                                          // 584: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfileRequest
	(*DeleteOrganizationsSecurityProfileRequest)(nil),                                                          // 585: mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfileRequest
	(*GetOrganizationsSecurityProfileRequest)(nil),                                                             // 586: mockgcp.cloud.apigee.v1.GetOrganizationsSecurityProfileRequest
	(*ListOrganizationsSecurityProfilesRequest)(nil),                                                           // 587: mockgcp.cloud.apigee.v1.ListOrganizationsSecurityProfilesRequest
	(*ListRevisionsOrganizationsSecurityProfileRequest)(nil),                                                   // 588: mockgcp.cloud.apigee.v1.ListRevisionsOrganizationsSecurityProfileRequest
	(*PatchOrganizationsSecurityProfileRequest)(nil),                                                           // 589: mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfileRequest
	(*ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest)(nil),                            // 590: mockgcp.cloud.apigee.v1.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest
	(*CreateOrganizationsSecurityProfilesEnvironmentRequest)(nil),                                              // 591: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesEnvironmentRequest
	(*DeleteOrganizationsSecurityProfilesEnvironmentRequest)(nil),                                              // 592: mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfilesEnvironmentRequest
	(*CreateOrganizationsSecurityProfilesV2Request)(nil),                                                       // 593: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesV2Request
	(*DeleteOrganizationsSecurityProfilesV2Request)(nil),                                                       // 594: mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfilesV2Request
	(*GetOrganizationsSecurityProfilesV2Request)(nil),                                                          // 595: mockgcp.cloud.apigee.v1.GetOrganizationsSecurityProfilesV2Request
	(*ListOrganizationsSecurityProfilesV2Request)(nil),                                                         // 596: mockgcp.cloud.apigee.v1.ListOrganizationsSecurityProfilesV2Request
	(*PatchOrganizationsSecurityProfilesV2Request)(nil),                                                        // 597: mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfilesV2Request
	(*CreateOrganizationsSharedflowRequest)(nil),                                                               // 598: mockgcp.cloud.apigee.v1.CreateOrganizationsSharedflowRequest
	(*DeleteOrganizationsSharedflowRequest)(nil),                                                               // 599: mockgcp.cloud.apigee.v1.DeleteOrganizationsSharedflowRequest
	(*GetOrganizationsSharedflowRequest)(nil),                                                                  // 600: mockgcp.cloud.apigee.v1.GetOrganizationsSharedflowRequest
	(*ListOrganizationsSharedflowsRequest)(nil),                                                                // 601: mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsRequest
	(*ListOrganizationsSharedflowsDeploymentsRequest)(nil),                                                     // 602: mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsDeploymentsRequest
	(*DeleteOrganizationsSharedflowsRevisionRequest)(nil),                                                      // 603: mockgcp.cloud.apigee.v1.DeleteOrganizationsSharedflowsRevisionRequest
	(*GetOrganizationsSharedflowsRevisionRequest)(nil),                                                         // 604: mockgcp.cloud.apigee.v1.GetOrganizationsSharedflowsRevisionRequest
	(*UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest)(nil),                                    // 605: mockgcp.cloud.apigee.v1.UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest
	(*ListOrganizationsSharedflowsRevisionsDeploymentsRequest)(nil),                                            // 606: mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsRevisionsDeploymentsRequest
	(*CreateOrganizationsSitesApicategoryRequest)(nil),                                                         // 607: mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApicategoryRequest
	(*DeleteOrganizationsSitesApicategoryRequest)(nil),                                                         // 608: mockgcp.cloud.apigee.v1.DeleteOrganizationsSitesApicategoryRequest
	(*GetOrganizationsSitesApicategoryRequest)(nil),                                                            // 609: mockgcp.cloud.apigee.v1.GetOrganizationsSitesApicategoryRequest
	(*ListOrganizationsSitesApicategoriesRequest)(nil),                                                         // 610: mockgcp.cloud.apigee.v1.ListOrganizationsSitesApicategoriesRequest
	(*PatchOrganizationsSitesApicategoryRequest)(nil),                                                          // 611: mockgcp.cloud.apigee.v1.PatchOrganizationsSitesApicategoryRequest
	(*CreateOrganizationsSitesApidocRequest)(nil),                                                              // 612: mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApidocRequest
	(*DeleteOrganizationsSitesApidocRequest)(nil),                                                              // 613: mockgcp.cloud.apigee.v1.DeleteOrganizationsSitesApidocRequest
	(*GetOrganizationsSitesApidocRequest)(nil),                                                                 // 614: mockgcp.cloud.apigee.v1.GetOrganizationsSitesApidocRequest
	(*GetDocumentationOrganizationsSitesApidocRequest)(nil),                                                    // 615: mockgcp.cloud.apigee.v1.GetDocumentationOrganizationsSitesApidocRequest
	(*ListOrganizationsSitesApidocsRequest)(nil),                                                               // 616: mockgcp.cloud.apigee.v1.ListOrganizationsSitesApidocsRequest
	(*UpdateOrganizationsSitesApidocRequest)(nil),                                                              // 617: mockgcp.cloud.apigee.v1.UpdateOrganizationsSitesApidocRequest
	(*UpdateDocumentationOrganizationsSitesApidocRequest)(nil),                                                 // 618: mockgcp.cloud.apigee.v1.UpdateDocumentationOrganizationsSitesApidocRequest
	(*ProvisionOrganizationProjectRequest)(nil),                                                                // 619: mockgcp.cloud.apigee.v1.ProvisionOrganizationProjectRequest
	nil,                             // 620: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy.LabelsEntry
	nil,                             // 621: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision.EntityMetaDataAsPropertiesEntry
	nil,                             // 622: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment.LabelsEntry
	nil,                             // 623: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask.NamespacesEntry
	nil,                             // 624: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.AttributesEntry
	nil,                             // 625: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.EndpointsEntry
	nil,                             // 626: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.FeatureFlagsEntry
	nil,                             // 627: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress.DetailsEntry
	nil,                             // 628: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.DimensionsEntry
	nil,                             // 629: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.AssessmentRecommendationsEntry
	nil,                             // 630: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.FailedAssessmentPerWeightEntry
	nil,                             // 631: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.ProfileAssessmentConfigsEntry
	nil,                             // 632: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision.EntityMetaDataAsPropertiesEntry
	(*any1.Any)(nil),                // 633: google.protobuf.Any
	(*timestamp.Timestamp)(nil),     // 634: google.protobuf.Timestamp
	(*duration.Duration)(nil),       // 635: google.protobuf.Duration
	(*longrunningpb.Operation)(nil), // 636: google.longrunning.Operation
}
var file_mockgcp_cloud_apigee_v1_service_proto_depIdxs = []int32{
	1,   // 0: mockgcp.cloud.apigee.v1.EdgeConfigstoreBundleBadBundle.violations:type_name -> mockgcp.cloud.apigee.v1.EdgeConfigstoreBundleBadBundleViolation
	633, // 1: mockgcp.cloud.apigee.v1.GoogleApiHttpBody.extensions:type_name -> google.protobuf.Any
	5,   // 2: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Access.get:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessGet
	7,   // 3: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Access.remove:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessRemove
	8,   // 4: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Access.set:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessSet
	12,  // 5: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.advanced_api_ops_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AdvancedApiOpsConfig
	15,  // 6: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.analytics_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AnalyticsConfig
	26,  // 7: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.api_security_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiSecurityConfig
	54,  // 8: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.connectors_platform_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ConnectorsPlatformConfig
	124, // 9: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.integration_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IntegrationConfig
	170, // 10: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig.monetization_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1MonetizationConfig
	302, // 11: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AdjustDeveloperBalanceRequest.adjustment:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	48,  // 12: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias.certs_info:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Certificate
	634, // 13: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AnalyticsConfig.update_time:type_name -> google.protobuf.Timestamp
	16,  // 14: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategoryResponse.data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategory
	115, // 15: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentation.graphql_documentation:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphqlDocumentation
	173, // 16: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentation.oas_documentation:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OASDocumentation
	19,  // 17: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentationResponse.data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentation
	18,  // 18: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocResponse.data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDoc
	36,  // 19: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	114, // 20: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct.graphql_operation_group:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationGroup
	117, // 21: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct.grpc_operation_group:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationGroup
	176, // 22: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct.operation_group:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationGroup
	620, // 23: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy.labels:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy.LabelsEntry
	90,  // 24: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy.meta_data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EntityMetadata
	53,  // 25: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision.configuration_version:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ConfigVersion
	621, // 26: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision.entity_meta_data_as_properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision.EntityMetaDataAsPropertiesEntry
	217, // 27: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision.resource_files:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFiles
	634, // 28: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiSecurityRuntimeConfig.update_time:type_name -> google.protobuf.Timestamp
	23,  // 29: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App.api_products:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProductRef
	36,  // 30: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	56,  // 31: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App.credentials:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential
	36,  // 32: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	36,  // 33: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	56,  // 34: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp.credentials:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential
	3,   // 35: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey.api_products:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1APIProductAssociation
	36,  // 36: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	622, // 37: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment.labels:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment.LabelsEntry
	198, // 38: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery.query_params:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryMetadata
	34,  // 39: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery.result:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResult
	198, // 40: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResultView.metadata:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryMetadata
	633, // 41: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResultView.rows:type_name -> google.protobuf.Any
	36,  // 42: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes.attribute:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	40,  // 43: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest.include:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray
	39,  // 44: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest.include_all_resources:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll
	41,  // 45: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray.resources:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource
	634, // 46: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse.assessment_time:type_name -> google.protobuf.Timestamp
	245, // 47: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse.security_assessment_results:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult
	287, // 48: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest.requests:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateSecurityIncidentRequest
	251, // 49: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse.security_incidents:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	634, // 50: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation.create_time:type_name -> google.protobuf.Timestamp
	634, // 51: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation.end_time:type_name -> google.protobuf.Timestamp
	46,  // 52: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation.metric_labels:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluationMetricLabels
	634, // 53: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation.start_time:type_name -> google.protobuf.Timestamp
	47,  // 54: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Certificate.cert_info:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CertInfo
	51,  // 55: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequest.filters:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter
	301, // 56: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequest.time_range:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeInterval
	233, // 57: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresResponse.scores:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Score
	23,  // 58: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential.api_products:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProductRef
	36,  // 59: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	302, // 60: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CreditDeveloperBalanceRequest.transaction_amount:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	59,  // 61: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReportMetric
	214, // 62: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport.properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportProperty
	63,  // 63: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore.datastore_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DatastoreConfig
	623, // 64: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask.namespaces:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask.NamespacesEntry
	634, // 65: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSession.create_time:type_name -> google.protobuf.Timestamp
	185, // 66: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSessionTransaction.point:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Point
	299, // 67: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment.errors:type_name -> mockgcp.cloud.apigee.v1.GoogleRpcStatus
	121, // 68: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment.instances:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatus
	184, // 69: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment.pods:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1PodStatus
	73,  // 70: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment.route_conflicts:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict
	72,  // 71: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport.routing_changes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingChange
	73,  // 72: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport.routing_conflicts:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict
	297, // 73: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport.validation_errors:type_name -> mockgcp.cloud.apigee.v1.GoogleRpcPreconditionFailure
	74,  // 74: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingChange.from_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
	74,  // 75: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingChange.to_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
	74,  // 76: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict.conflicting_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment
	624, // 77: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.AttributesEntry
	625, // 78: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.endpoints:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig.EndpointsEntry
	36,  // 79: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	36,  // 80: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	56,  // 81: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp.credentials:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Credential
	633, // 82: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey.api_products:type_name -> google.protobuf.Any
	36,  // 83: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	81,  // 84: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalance.wallets:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalanceWallet
	302, // 85: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalanceWallet.balance:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	168, // 86: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DimensionMetric.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metric
	92,  // 87: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment.client_ip_resolution_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig
	172, // 88: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment.node_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NodeConfig
	194, // 89: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment.properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Properties
	93,  // 90: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig.header_index_algorithm:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm
	223, // 91: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.addons_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAddonsConfig
	95,  // 92: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.client_ip_resolution_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig
	634, // 93: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.create_time:type_name -> google.protobuf.Timestamp
	61,  // 94: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.data_collectors:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollectorConfig
	65,  // 95: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.debug_mask:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask
	76,  // 96: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.deployment_groups:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentGroupConfig
	75,  // 97: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.deployments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentConfig
	626, // 98: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.feature_flags:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.FeatureFlagsEntry
	104, // 99: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.flowhooks:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHookConfig
	129, // 100: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.keystores:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeystoreConfig
	211, // 101: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.resource_references:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReferenceConfig
	215, // 102: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.resources:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceConfig
	277, // 103: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.targets:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServerConfig
	227, // 104: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig.trace_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfig
	96,  // 105: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig.header_index_algorithm:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm
	89,  // 106: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupConfig.endpoint_chaining_rules:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointChainingRule
	222, // 107: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupConfig.routing_rules:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RoutingRule
	64,  // 108: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ExportRequest.date_range:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DateRange
	110, // 109: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse.urls:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo
	36,  // 110: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationConfig.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	112, // 111: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationConfig.operations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperation
	207, // 112: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationConfig.quota:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Quota
	113, // 113: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationGroup.operation_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphQLOperationConfig
	86,  // 114: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GraphqlDocumentation.schema:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DocumentationFile
	36,  // 115: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationConfig.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	207, // 116: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationConfig.quota:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Quota
	116, // 117: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationGroup.operation_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GrpcOperationConfig
	99,  // 118: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IngressConfig.environment_groups:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupConfig
	634, // 119: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IngressConfig.revision_create_time:type_name -> google.protobuf.Timestamp
	6,   // 120: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance.access_logging_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AccessLoggingConfig
	122, // 121: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatus.deployed_revisions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision
	123, // 122: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatus.deployed_routes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute
	14,  // 123: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeystoreConfig.aliases:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AliasRevisionConfig
	16,  // 124: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiCategoriesResponse.data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategory
	18,  // 125: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiDocsResponse.data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDoc
	22,  // 126: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProductsResponse.api_product:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	24,  // 127: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProxiesResponse.proxies:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	30,  // 128: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupAppsResponse.app_group_apps:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	29,  // 129: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupsResponse.app_groups:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	28,  // 130: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppsResponse.app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App
	32,  // 131: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListArchiveDeploymentsResponse.archive_deployments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	33,  // 132: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAsyncQueriesResponse.queries:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	58,  // 133: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListCustomReportsResponse.qualifier:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	60,  // 134: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDataCollectorsResponse.data_collectors:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	62,  // 135: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDatastoresResponse.datastores:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	266, // 136: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDebugSessionsResponse.sessions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Session
	70,  // 137: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse.deployments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	78,  // 138: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperAppsResponse.app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	83,  // 139: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse.developer_subscriptions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	88,  // 140: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEndpointAttachmentsResponse.endpoint_attachments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointAttachment
	98,  // 141: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse.environment_group_attachments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupAttachment
	97,  // 142: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupsResponse.environment_groups:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroup
	216, // 143: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentResourcesResponse.resource_file:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	101, // 144: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListExportsResponse.exports:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Export
	265, // 145: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListHybridIssuersResponse.issuers:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ServiceIssuersMapping
	120, // 146: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstanceAttachmentsResponse.attachments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceAttachment
	119, // 147: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstancesResponse.instances:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance
	126, // 148: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListKeyValueEntriesResponse.key_value_entries:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	171, // 149: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListNatAddressesResponse.nat_addresses:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NatAddress
	77,  // 150: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOfDevelopersResponse.developer:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	183, // 151: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOrganizationsResponse.organizations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OrganizationProjectMapping
	208, // 152: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListRatePlansResponse.rate_plans:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	238, // 153: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityActionsResponse.security_actions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	251, // 154: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityIncidentsResponse.security_incidents:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	252, // 155: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse.security_profiles:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	252, // 156: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesResponse.security_profiles:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	256, // 157: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesV2Response.security_profiles_v2:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	258, // 158: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityReportsResponse.security_reports:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	269, // 159: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSharedFlowsResponse.shared_flows:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlow
	283, // 160: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListTraceConfigOverridesResponse.trace_config_overrides:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	633, // 161: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metric.values:type_name -> google.protobuf.Any
	86,  // 162: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OASDocumentation.spec:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DocumentationFile
	36,  // 163: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationConfig.attributes:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	174, // 164: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationConfig.operations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Operation
	207, // 165: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationConfig.quota:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Quota
	175, // 166: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationGroup.operation_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationConfig
	178, // 167: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadata.progress:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress
	627, // 168: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress.details:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress.DetailsEntry
	181, // 169: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStats.response:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsResponse
	633, // 170: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsNode.data:type_name -> google.protobuf.Any
	167, // 171: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsResponse.meta_data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metadata
	180, // 172: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsResponse.stats:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStatsNode
	10,  // 173: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization.addons_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig
	194, // 174: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization.properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Properties
	219, // 175: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Point.results:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Result
	190, // 176: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfig.categories:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory
	187, // 177: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.abuse:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigAbuse
	188, // 178: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.authorization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigAuthorization
	189, // 179: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.cors:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCORS
	192, // 180: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.mediation:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigMediation
	191, // 181: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.mtls:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigMTLS
	193, // 182: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigCategory.threat:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfigThreat
	195, // 183: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Properties.property:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Property
	199, // 184: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Query.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryMetric
	633, // 185: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Query.time_range:type_name -> google.protobuf.Any
	169, // 186: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsRequest.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1MetricAggregation
	301, // 187: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsRequest.time_range:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeInterval
	633, // 188: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponseValues.items:type_name -> google.protobuf.Any
	201, // 189: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponse.values:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponseValues
	169, // 190: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsRequest.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1MetricAggregation
	301, // 191: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsRequest.time_range:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeInterval
	206, // 192: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponse.values:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence
	633, // 193: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints.items:type_name -> google.protobuf.Any
	628, // 194: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.dimensions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.DimensionsEntry
	205, // 195: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence.points:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints
	209, // 196: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan.consumption_pricing_rates:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RateRange
	302, // 197: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan.fixed_recurring_fee:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	220, // 198: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan.revenue_share_rates:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RevenueShareRange
	302, // 199: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan.setup_fee:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	302, // 200: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RateRange.fee:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeMoney
	634, // 201: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusRequest.report_time:type_name -> google.protobuf.Timestamp
	218, // 202: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusRequest.resources:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceStatus
	36,  // 203: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportProperty.value:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	216, // 204: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFiles.resource_file:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	221, // 205: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceStatus.revisions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RevisionStatus
	4,   // 206: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Result.access_list:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Access
	195, // 207: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Result.headers:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Property
	194, // 208: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Result.properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Properties
	286, // 209: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RevisionStatus.errors:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateError
	634, // 210: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RoutingRule.update_time:type_name -> google.protobuf.Timestamp
	224, // 211: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAddonsConfig.analytics_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAnalyticsConfig
	225, // 212: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeAddonsConfig.api_security_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeApiSecurityConfig
	228, // 213: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfig.overrides:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfigOverride
	634, // 214: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfig.revision_create_time:type_name -> google.protobuf.Timestamp
	229, // 215: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfig.sampling_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceSamplingConfig
	634, // 216: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfigOverride.revision_create_time:type_name -> google.protobuf.Timestamp
	229, // 217: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceConfigOverride.sampling_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeTraceSamplingConfig
	231, // 218: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Schema.dimensions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaElement
	231, // 219: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Schema.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaElement
	232, // 220: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaElement.properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SchemaSchemaProperty
	234, // 221: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Score.component:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent
	234, // 222: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Score.subcomponents:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent
	301, // 223: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Score.time_range:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeInterval
	634, // 224: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent.calculate_time:type_name -> google.protobuf.Timestamp
	634, // 225: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent.data_capture_time:type_name -> google.protobuf.Timestamp
	235, // 226: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponent.recommendations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendation
	236, // 227: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendation.actions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendationAction
	237, // 228: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendationAction.action_context:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext
	239, // 229: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.allow:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionAllow
	240, // 230: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.condition_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionConditionConfig
	634, // 231: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.create_time:type_name -> google.protobuf.Timestamp
	241, // 232: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.deny:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionDeny
	634, // 233: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.expire_time:type_name -> google.protobuf.Timestamp
	242, // 234: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.flag:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionFlag
	635, // 235: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.ttl:type_name -> google.protobuf.Duration
	634, // 236: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction.update_time:type_name -> google.protobuf.Timestamp
	243, // 237: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionFlag.headers:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionHttpHeader
	634, // 238: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionsConfig.update_time:type_name -> google.protobuf.Timestamp
	634, // 239: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult.create_time:type_name -> google.protobuf.Timestamp
	299, // 240: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult.error:type_name -> mockgcp.cloud.apigee.v1.GoogleRpcStatus
	246, // 241: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult.resource:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultResource
	247, // 242: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResult.scoring_result:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult
	629, // 243: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.assessment_recommendations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.AssessmentRecommendationsEntry
	634, // 244: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.data_update_time:type_name -> google.protobuf.Timestamp
	630, // 245: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.failed_assessment_per_weight:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.FailedAssessmentPerWeightEntry
	249, // 246: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation.recommendations:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation
	250, // 247: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation.link:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink
	634, // 248: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident.first_detected_time:type_name -> google.protobuf.Timestamp
	634, // 249: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident.last_detected_time:type_name -> google.protobuf.Timestamp
	634, // 250: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident.last_observability_change_time:type_name -> google.protobuf.Timestamp
	253, // 251: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.environments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironment
	186, // 252: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.profile_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProfileConfig
	634, // 253: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.revision_create_time:type_name -> google.protobuf.Timestamp
	634, // 254: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.revision_publish_time:type_name -> google.protobuf.Timestamp
	634, // 255: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.revision_update_time:type_name -> google.protobuf.Timestamp
	255, // 256: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile.scoring_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileScoringConfig
	634, // 257: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironment.attach_time:type_name -> google.protobuf.Timestamp
	634, // 258: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation.attach_time:type_name -> google.protobuf.Timestamp
	634, // 259: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.create_time:type_name -> google.protobuf.Timestamp
	631, // 260: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.profile_assessment_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.ProfileAssessmentConfigsEntry
	634, // 261: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.update_time:type_name -> google.protobuf.Timestamp
	259, // 262: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport.query_params:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportMetadata
	262, // 263: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport.result:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultMetadata
	634, // 264: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportMetadata.end_timestamp:type_name -> google.protobuf.Timestamp
	634, // 265: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportMetadata.start_timestamp:type_name -> google.protobuf.Timestamp
	261, // 266: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQuery.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQueryMetric
	633, // 267: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQuery.time_range:type_name -> google.protobuf.Any
	259, // 268: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultView.metadata:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportMetadata
	633, // 269: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultView.rows:type_name -> google.protobuf.Any
	10,  // 270: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SetAddonsRequest.addons_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig
	90,  // 271: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlow.meta_data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EntityMetadata
	53,  // 272: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision.configuration_version:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ConfigVersion
	632, // 273: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision.entity_meta_data_as_properties:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision.EntityMetaDataAsPropertiesEntry
	217, // 274: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision.resource_files:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFiles
	272, // 275: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats.environments:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsEnvironmentStats
	273, // 276: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats.hosts:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsHostStats
	167, // 277: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats.meta_data:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metadata
	84,  // 278: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsEnvironmentStats.dimensions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DimensionMetric
	168, // 279: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsEnvironmentStats.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metric
	84,  // 280: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsHostStats.dimensions:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DimensionMetric
	168, // 281: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1StatsHostStats.metrics:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Metric
	279, // 282: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer.s_s_l_info:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfo
	281, // 283: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServerConfig.tls_info:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoConfig
	280, // 284: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfo.common_name:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoCommonName
	49,  // 285: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoConfig.common_name:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CommonNameConfig
	125, // 286: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TlsInfoConfig.key_alias_reference:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyAliasReference
	284, // 287: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfig.sampling_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceSamplingConfig
	284, // 288: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride.sampling_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceSamplingConfig
	31,  // 289: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest.app_group_app_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	251, // 290: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateSecurityIncidentRequest.security_incident:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	289, // 291: mockgcp.cloud.apigee.v1.GoogleIamV1AuditConfig.audit_log_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleIamV1AuditLogConfig
	300, // 292: mockgcp.cloud.apigee.v1.GoogleIamV1Binding.condition:type_name -> mockgcp.cloud.apigee.v1.GoogleTypeExpr
	288, // 293: mockgcp.cloud.apigee.v1.GoogleIamV1Policy.audit_configs:type_name -> mockgcp.cloud.apigee.v1.GoogleIamV1AuditConfig
	290, // 294: mockgcp.cloud.apigee.v1.GoogleIamV1Policy.bindings:type_name -> mockgcp.cloud.apigee.v1.GoogleIamV1Binding
	291, // 295: mockgcp.cloud.apigee.v1.GoogleIamV1SetIamPolicyRequest.policy:type_name -> mockgcp.cloud.apigee.v1.GoogleIamV1Policy
	636, // 296: mockgcp.cloud.apigee.v1.GoogleLongrunningListOperationsResponse.operations:type_name -> google.longrunning.Operation
	298, // 297: mockgcp.cloud.apigee.v1.GoogleRpcPreconditionFailure.violations:type_name -> mockgcp.cloud.apigee.v1.GoogleRpcPreconditionFailureViolation
	633, // 298: mockgcp.cloud.apigee.v1.GoogleRpcStatus.details:type_name -> google.protobuf.Any
	634, // 299: mockgcp.cloud.apigee.v1.GoogleTypeInterval.end_time:type_name -> google.protobuf.Timestamp
	634, // 300: mockgcp.cloud.apigee.v1.GoogleTypeInterval.start_time:type_name -> google.protobuf.Timestamp
	182, // 301: mockgcp.cloud.apigee.v1.CreateOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization
	111, // 302: mockgcp.cloud.apigee.v1.GetSyncAuthorizationOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetSyncAuthorizationRequest
	268, // 303: mockgcp.cloud.apigee.v1.SetAddonsOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SetAddonsRequest
	275, // 304: mockgcp.cloud.apigee.v1.SetSyncAuthorizationOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SyncAuthorization
	182, // 305: mockgcp.cloud.apigee.v1.UpdateOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization
	55,  // 306: mockgcp.cloud.apigee.v1.UpdateControlPlaneAccessOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ControlPlaneAccess
	264, // 307: mockgcp.cloud.apigee.v1.UpdateSecuritySettingsOrganizationRequest.organization:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecuritySettings
	62,  // 308: mockgcp.cloud.apigee.v1.CreateOrganizationsAnalyticsDatastoreRequest.organizations_analytics_datastore:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	62,  // 309: mockgcp.cloud.apigee.v1.TestOrganizationsAnalyticsDatastoreRequest.organizations_analytics_datastore:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	62,  // 310: mockgcp.cloud.apigee.v1.UpdateOrganizationsAnalyticsDatastoreRequest.organizations_analytics_datastore:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	37,  // 311: mockgcp.cloud.apigee.v1.AttributesOrganizationsApiproductRequest.organizations_apiproduct:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	22,  // 312: mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductRequest.organizations_apiproduct:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	22,  // 313: mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductRequest.organizations_apiproduct:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	36,  // 314: mockgcp.cloud.apigee.v1.UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest.organizations_apiproducts_attribute:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	208, // 315: mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductsRateplanRequest.organizations_apiproducts_rateplan:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	208, // 316: mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductsRateplanRequest.organizations_apiproducts_rateplan:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	2,   // 317: mockgcp.cloud.apigee.v1.CreateOrganizationsApiRequest.organizations_api:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	24,  // 318: mockgcp.cloud.apigee.v1.PatchOrganizationsApiRequest.organizations_api:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	127, // 319: mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapRequest.organizations_apis_keyvaluemap:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 320: mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapsEntryRequest.organizations_apis_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 321: mockgcp.cloud.apigee.v1.UpdateOrganizationsApisKeyvaluemapsEntryRequest.organizations_apis_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	2,   // 322: mockgcp.cloud.apigee.v1.UpdateApiProxyRevisionOrganizationsApisRevisionRequest.organizations_apis_revision:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	29,  // 323: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupRequest.organizations_appgroup:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	29,  // 324: mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupRequest.organizations_appgroup:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	30,  // 325: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppRequest.organizations_appgroups_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	30,  // 326: mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupsAppRequest.organizations_appgroups_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	31,  // 327: mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppsKeyRequest.organizations_appgroups_apps_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	285, // 328: mockgcp.cloud.apigee.v1.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest.organizations_appgroups_apps_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest
	60,  // 329: mockgcp.cloud.apigee.v1.CreateOrganizationsDatacollectorRequest.organizations_datacollector:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	60,  // 330: mockgcp.cloud.apigee.v1.PatchOrganizationsDatacollectorRequest.organizations_datacollector:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	37,  // 331: mockgcp.cloud.apigee.v1.AttributesOrganizationsDeveloperRequest.organizations_developer:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	77,  // 332: mockgcp.cloud.apigee.v1.CreateOrganizationsDeveloperRequest.organizations_developer:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	77,  // 333: mockgcp.cloud.apigee.v1.UpdateOrganizationsDeveloperRequest.organizations_developer:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	82,  // 334: mockgcp.cloud.apigee.v1.UpdateMonetizationConfigOrganizationsDeveloperRequest.organizations_developer:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperMonetizationConfig
	37,  // 335: mockgcp.cloud.apigee.v1.AttributesOrganizationsDevelopersAppRequest.organizations_developers_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	78,  // 336: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppRequest.organizations_developers_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	78,  // 337: mockgcp.cloud.apigee.v1.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest.organizations_developers_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	78,  // 338: mockgcp.cloud.apigee.v1.UpdateOrganizationsDevelopersAppRequest.organizations_developers_app:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	36,  // 339: mockgcp.cloud.apigee.v1.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest.organizations_developers_apps_attribute:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	79,  // 340: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeyRequest.organizations_developers_apps_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 341: mockgcp.cloud.apigee.v1.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest.organizations_developers_apps_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 342: mockgcp.cloud.apigee.v1.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest.organizations_developers_apps_key:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 343: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeysCreateRequest.organizations_developers_apps_keys_create:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	36,  // 344: mockgcp.cloud.apigee.v1.UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest.organizations_developers_attribute:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	11,  // 345: mockgcp.cloud.apigee.v1.AdjustOrganizationsDevelopersBalanceRequest.organizations_developers_balance:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AdjustDeveloperBalanceRequest
	57,  // 346: mockgcp.cloud.apigee.v1.CreditOrganizationsDevelopersBalanceRequest.organizations_developers_balance:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CreditDeveloperBalanceRequest
	83,  // 347: mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersSubscriptionRequest.organizations_developers_subscription:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	100, // 348: mockgcp.cloud.apigee.v1.ExpireOrganizationsDevelopersSubscriptionRequest.organizations_developers_subscription:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest
	88,  // 349: mockgcp.cloud.apigee.v1.CreateOrganizationsEndpointAttachmentRequest.organizations_endpoint_attachment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointAttachment
	97,  // 350: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupRequest.organizations_envgroup:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroup
	97,  // 351: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvgroupRequest.organizations_envgroup:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroup
	98,  // 352: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupsAttachmentRequest.organizations_envgroups_attachment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupAttachment
	91,  // 353: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	91,  // 354: mockgcp.cloud.apigee.v1.ModifyEnvironmentOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	274, // 355: mockgcp.cloud.apigee.v1.UnsubscribeOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Subscription
	91,  // 356: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	65,  // 357: mockgcp.cloud.apigee.v1.UpdateDebugmaskOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask
	91,  // 358: mockgcp.cloud.apigee.v1.UpdateEnvironmentOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	244, // 359: mockgcp.cloud.apigee.v1.UpdateSecurityActionsConfigOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionsConfig
	282, // 360: mockgcp.cloud.apigee.v1.UpdateTraceConfigOrganizationsEnvironmentRequest.organizations_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfig
	267, // 361: mockgcp.cloud.apigee.v1.SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest.organizations_environments_addons_config:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SetAddonEnablementRequest
	102, // 362: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsAnalyticsExportRequest.organizations_environments_analytics_export:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ExportRequest
	66,  // 363: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest.organizations_environments_apis_revisions_debugsession:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSession
	32,  // 364: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsArchiveDeploymentRequest.organizations_environments_archive_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	105, // 365: mockgcp.cloud.apigee.v1.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest.organizations_environments_archive_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateDownloadUrlRequest
	107, // 366: mockgcp.cloud.apigee.v1.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest.organizations_environments_archive_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateUploadUrlRequest
	32,  // 367: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsArchiveDeploymentRequest.organizations_environments_archive_deployment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	103, // 368: mockgcp.cloud.apigee.v1.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest.organizations_environments_flowhook:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHook
	128, // 369: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoreRequest.organizations_environments_keystore:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Keystore
	2,   // 370: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoresAliaseRequest.organizations_environments_keystores_aliase:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	2,   // 371: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeystoresAliaseRequest.organizations_environments_keystores_aliase:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	127, // 372: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapRequest.organizations_environments_keyvaluemap:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 373: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest.organizations_environments_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 374: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest.organizations_environments_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	197, // 375: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsQueryRequest.organizations_environments_query:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Query
	210, // 376: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsReferenceRequest.organizations_environments_reference:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	210, // 377: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsReferenceRequest.organizations_environments_reference:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	2,   // 378: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsResourcefileRequest.organizations_environments_resourcefile:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	2,   // 379: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsResourcefileRequest.organizations_environments_resourcefile:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	238, // 380: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityActionRequest.organizations_environments_security_action:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	85,  // 381: mockgcp.cloud.apigee.v1.DisableOrganizationsEnvironmentsSecurityActionRequest.organizations_environments_security_action:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DisableSecurityActionRequest
	87,  // 382: mockgcp.cloud.apigee.v1.EnableOrganizationsEnvironmentsSecurityActionRequest.organizations_environments_security_action:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnableSecurityActionRequest
	43,  // 383: mockgcp.cloud.apigee.v1.BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest.organizations_environments_security_incident:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest
	251, // 384: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsSecurityIncidentRequest.organizations_environments_security_incident:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	260, // 385: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityReportRequest.organizations_environments_security_report:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQuery
	200, // 386: mockgcp.cloud.apigee.v1.QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest.organizations_environments_security_stat:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsRequest
	203, // 387: mockgcp.cloud.apigee.v1.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest.organizations_environments_security_stat:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsRequest
	276, // 388: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTargetserverRequest.organizations_environments_targetserver:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	276, // 389: mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsTargetserverRequest.organizations_environments_targetserver:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	283, // 390: mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTraceConfigOverrideRequest.organizations_environments_trace_config_override:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	283, // 391: mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsTraceConfigOverrideRequest.organizations_environments_trace_config_override:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	197, // 392: mockgcp.cloud.apigee.v1.CreateOrganizationsHostQueryRequest.organizations_host_query:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Query
	260, // 393: mockgcp.cloud.apigee.v1.CreateOrganizationsHostSecurityReportRequest.organizations_host_security_report:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportQuery
	119, // 394: mockgcp.cloud.apigee.v1.CreateOrganizationsInstanceRequest.organizations_instance:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance
	119, // 395: mockgcp.cloud.apigee.v1.PatchOrganizationsInstanceRequest.organizations_instance:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance
	212, // 396: mockgcp.cloud.apigee.v1.ReportStatusOrganizationsInstanceRequest.organizations_instance:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusRequest
	120, // 397: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesAttachmentRequest.organizations_instances_attachment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceAttachment
	45,  // 398: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesCanaryevaluationRequest.organizations_instances_canaryevaluation:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation
	9,   // 399: mockgcp.cloud.apigee.v1.ActivateOrganizationsInstancesNatAddresseRequest.organizations_instances_nat_addresse:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ActivateNatAddressRequest
	171, // 400: mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesNatAddresseRequest.organizations_instances_nat_addresse:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NatAddress
	127, // 401: mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapRequest.organizations_keyvaluemap:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 402: mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapsEntryRequest.organizations_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 403: mockgcp.cloud.apigee.v1.UpdateOrganizationsKeyvaluemapsEntryRequest.organizations_keyvaluemaps_entry:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	58,  // 404: mockgcp.cloud.apigee.v1.CreateOrganizationsReportRequest.organizations_report:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	58,  // 405: mockgcp.cloud.apigee.v1.UpdateOrganizationsReportRequest.organizations_report:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	38,  // 406: mockgcp.cloud.apigee.v1.BatchComputeOrganizationsSecurityAssessmentResultRequest.organizations_security_assessment_result:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest
	252, // 407: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfileRequest.organizations_security_profile:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	252, // 408: mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfileRequest.organizations_security_profile:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	50,  // 409: mockgcp.cloud.apigee.v1.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest.organizations_security_profiles_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresRequest
	254, // 410: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesEnvironmentRequest.organizations_security_profiles_environment:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation
	256, // 411: mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesV2Request.organizations_security_profiles_v2:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	256, // 412: mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfilesV2Request.organizations_security_profiles_v2:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	2,   // 413: mockgcp.cloud.apigee.v1.CreateOrganizationsSharedflowRequest.organizations_sharedflow:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	2,   // 414: mockgcp.cloud.apigee.v1.UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest.organizations_sharedflows_revision:type_name -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	16,  // 415: mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApicategoryRequest.organizations_sites_apicategory:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategory
	16,  // 416: mockgcp.cloud.apigee.v1.PatchOrganizationsSitesApicategoryRequest.organizations_sites_apicategory:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategory
	18,  // 417: mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApidocRequest.organizations_sites_apidoc:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDoc
	18,  // 418: mockgcp.cloud.apigee.v1.UpdateOrganizationsSitesApidocRequest.organizations_sites_apidoc:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDoc
	19,  // 419: mockgcp.cloud.apigee.v1.UpdateDocumentationOrganizationsSitesApidocRequest.organizations_sites_apidoc:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentation
	196, // 420: mockgcp.cloud.apigee.v1.ProvisionOrganizationProjectRequest.project:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ProvisionOrganizationRequest
	633, // 421: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OperationMetadataProgress.DetailsEntry.value:type_name -> google.protobuf.Any
	248, // 422: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResult.AssessmentRecommendationsEntry.value:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation
	257, // 423: mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2.ProfileAssessmentConfigsEntry.value:type_name -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig
	303, // 424: mockgcp.cloud.apigee.v1.HybridIssuersServer.ListHybridIssuers:input_type -> mockgcp.cloud.apigee.v1.ListHybridIssuersRequest
	304, // 425: mockgcp.cloud.apigee.v1.OrganizationsServer.CreateOrganization:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationRequest
	305, // 426: mockgcp.cloud.apigee.v1.OrganizationsServer.DeleteOrganization:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationRequest
	306, // 427: mockgcp.cloud.apigee.v1.OrganizationsServer.GetOrganization:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationRequest
	307, // 428: mockgcp.cloud.apigee.v1.OrganizationsServer.GetControlPlaneAccessOrganization:input_type -> mockgcp.cloud.apigee.v1.GetControlPlaneAccessOrganizationRequest
	308, // 429: mockgcp.cloud.apigee.v1.OrganizationsServer.GetDeployedIngressConfigOrganization:input_type -> mockgcp.cloud.apigee.v1.GetDeployedIngressConfigOrganizationRequest
	309, // 430: mockgcp.cloud.apigee.v1.OrganizationsServer.GetProjectMappingOrganization:input_type -> mockgcp.cloud.apigee.v1.GetProjectMappingOrganizationRequest
	310, // 431: mockgcp.cloud.apigee.v1.OrganizationsServer.GetRuntimeConfigOrganization:input_type -> mockgcp.cloud.apigee.v1.GetRuntimeConfigOrganizationRequest
	311, // 432: mockgcp.cloud.apigee.v1.OrganizationsServer.GetSecuritySettingsOrganization:input_type -> mockgcp.cloud.apigee.v1.GetSecuritySettingsOrganizationRequest
	312, // 433: mockgcp.cloud.apigee.v1.OrganizationsServer.GetSyncAuthorizationOrganization:input_type -> mockgcp.cloud.apigee.v1.GetSyncAuthorizationOrganizationRequest
	313, // 434: mockgcp.cloud.apigee.v1.OrganizationsServer.ListOrganizations:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsRequest
	314, // 435: mockgcp.cloud.apigee.v1.OrganizationsServer.SetAddonsOrganization:input_type -> mockgcp.cloud.apigee.v1.SetAddonsOrganizationRequest
	315, // 436: mockgcp.cloud.apigee.v1.OrganizationsServer.SetSyncAuthorizationOrganization:input_type -> mockgcp.cloud.apigee.v1.SetSyncAuthorizationOrganizationRequest
	316, // 437: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateOrganization:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationRequest
	317, // 438: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateControlPlaneAccessOrganization:input_type -> mockgcp.cloud.apigee.v1.UpdateControlPlaneAccessOrganizationRequest
	318, // 439: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateSecuritySettingsOrganization:input_type -> mockgcp.cloud.apigee.v1.UpdateSecuritySettingsOrganizationRequest
	319, // 440: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.CreateOrganizationsAnalyticsDatastore:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsAnalyticsDatastoreRequest
	320, // 441: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.DeleteOrganizationsAnalyticsDatastore:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsAnalyticsDatastoreRequest
	321, // 442: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.GetOrganizationsAnalyticsDatastore:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsAnalyticsDatastoreRequest
	322, // 443: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.ListOrganizationsAnalyticsDatastores:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsAnalyticsDatastoresRequest
	323, // 444: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.TestOrganizationsAnalyticsDatastore:input_type -> mockgcp.cloud.apigee.v1.TestOrganizationsAnalyticsDatastoreRequest
	324, // 445: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.UpdateOrganizationsAnalyticsDatastore:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsAnalyticsDatastoreRequest
	325, // 446: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.AttributesOrganizationsApiproduct:input_type -> mockgcp.cloud.apigee.v1.AttributesOrganizationsApiproductRequest
	326, // 447: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.CreateOrganizationsApiproduct:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductRequest
	327, // 448: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.DeleteOrganizationsApiproduct:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductRequest
	328, // 449: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.GetOrganizationsApiproduct:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApiproductRequest
	329, // 450: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.ListOrganizationsApiproducts:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsRequest
	330, // 451: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.UpdateOrganizationsApiproduct:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductRequest
	331, // 452: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.DeleteOrganizationsApiproductsAttribute:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductsAttributeRequest
	332, // 453: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.GetOrganizationsApiproductsAttribute:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApiproductsAttributeRequest
	333, // 454: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.ListOrganizationsApiproductsAttributes:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsAttributesRequest
	334, // 455: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.UpdateApiProductAttributeOrganizationsApiproductsAttribute:input_type -> mockgcp.cloud.apigee.v1.UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest
	335, // 456: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.CreateOrganizationsApiproductsRateplan:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsApiproductsRateplanRequest
	336, // 457: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.DeleteOrganizationsApiproductsRateplan:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApiproductsRateplanRequest
	337, // 458: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.GetOrganizationsApiproductsRateplan:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApiproductsRateplanRequest
	338, // 459: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.ListOrganizationsApiproductsRateplans:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApiproductsRateplansRequest
	339, // 460: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.UpdateOrganizationsApiproductsRateplan:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsApiproductsRateplanRequest
	340, // 461: mockgcp.cloud.apigee.v1.OrganizationsApisServer.CreateOrganizationsApi:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsApiRequest
	341, // 462: mockgcp.cloud.apigee.v1.OrganizationsApisServer.DeleteOrganizationsApi:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApiRequest
	342, // 463: mockgcp.cloud.apigee.v1.OrganizationsApisServer.GetOrganizationsApi:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApiRequest
	343, // 464: mockgcp.cloud.apigee.v1.OrganizationsApisServer.ListOrganizationsApis:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApisRequest
	344, // 465: mockgcp.cloud.apigee.v1.OrganizationsApisServer.PatchOrganizationsApi:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsApiRequest
	345, // 466: mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer.ListOrganizationsApisDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApisDeploymentsRequest
	346, // 467: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer.CreateOrganizationsApisKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapRequest
	347, // 468: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer.DeleteOrganizationsApisKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApisKeyvaluemapRequest
	348, // 469: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.CreateOrganizationsApisKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsApisKeyvaluemapsEntryRequest
	349, // 470: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.DeleteOrganizationsApisKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApisKeyvaluemapsEntryRequest
	350, // 471: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.GetOrganizationsApisKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApisKeyvaluemapsEntryRequest
	351, // 472: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.ListOrganizationsApisKeyvaluemapsEntries:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApisKeyvaluemapsEntriesRequest
	352, // 473: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.UpdateOrganizationsApisKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsApisKeyvaluemapsEntryRequest
	353, // 474: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.DeleteOrganizationsApisRevision:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsApisRevisionRequest
	354, // 475: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.GetOrganizationsApisRevision:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsApisRevisionRequest
	355, // 476: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.UpdateApiProxyRevisionOrganizationsApisRevision:input_type -> mockgcp.cloud.apigee.v1.UpdateApiProxyRevisionOrganizationsApisRevisionRequest
	356, // 477: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer.ListOrganizationsApisRevisionsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsApisRevisionsDeploymentsRequest
	357, // 478: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.CreateOrganizationsAppgroup:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupRequest
	358, // 479: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.DeleteOrganizationsAppgroup:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupRequest
	359, // 480: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.GetOrganizationsAppgroup:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupRequest
	360, // 481: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.ListOrganizationsAppgroups:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsAppgroupsRequest
	361, // 482: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.UpdateOrganizationsAppgroup:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupRequest
	362, // 483: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.CreateOrganizationsAppgroupsApp:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppRequest
	363, // 484: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.DeleteOrganizationsAppgroupsApp:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppRequest
	364, // 485: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.GetOrganizationsAppgroupsApp:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupsAppRequest
	365, // 486: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.ListOrganizationsAppgroupsApps:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsAppgroupsAppsRequest
	366, // 487: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.UpdateOrganizationsAppgroupsApp:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsAppgroupsAppRequest
	367, // 488: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.CreateOrganizationsAppgroupsAppsKey:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsAppgroupsAppsKeyRequest
	368, // 489: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.DeleteOrganizationsAppgroupsAppsKey:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppsKeyRequest
	369, // 490: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.GetOrganizationsAppgroupsAppsKey:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsAppgroupsAppsKeyRequest
	370, // 491: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey:input_type -> mockgcp.cloud.apigee.v1.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest
	371, // 492: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer.DeleteOrganizationsAppgroupsAppsKeysApiproduct:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsAppgroupsAppsKeysApiproductRequest
	372, // 493: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct:input_type -> mockgcp.cloud.apigee.v1.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest
	373, // 494: mockgcp.cloud.apigee.v1.OrganizationsAppsServer.GetOrganizationsApp:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsAppRequest
	374, // 495: mockgcp.cloud.apigee.v1.OrganizationsAppsServer.ListOrganizationsApps:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsAppsRequest
	375, // 496: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.CreateOrganizationsDatacollector:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDatacollectorRequest
	376, // 497: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.DeleteOrganizationsDatacollector:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDatacollectorRequest
	377, // 498: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.GetOrganizationsDatacollector:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDatacollectorRequest
	378, // 499: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.ListOrganizationsDatacollectors:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDatacollectorsRequest
	379, // 500: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.PatchOrganizationsDatacollector:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsDatacollectorRequest
	380, // 501: mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer.ListOrganizationsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDeploymentsRequest
	381, // 502: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.AttributesOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.AttributesOrganizationsDeveloperRequest
	382, // 503: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.CreateOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDeveloperRequest
	383, // 504: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.DeleteOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDeveloperRequest
	384, // 505: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDeveloperRequest
	385, // 506: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetBalanceOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.GetBalanceOrganizationsDeveloperRequest
	386, // 507: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetMonetizationConfigOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.GetMonetizationConfigOrganizationsDeveloperRequest
	387, // 508: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.ListOrganizationsDevelopers:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersRequest
	388, // 509: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.SetDeveloperStatusOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.SetDeveloperStatusOrganizationsDeveloperRequest
	389, // 510: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.UpdateOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsDeveloperRequest
	390, // 511: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.UpdateMonetizationConfigOrganizationsDeveloper:input_type -> mockgcp.cloud.apigee.v1.UpdateMonetizationConfigOrganizationsDeveloperRequest
	391, // 512: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.AttributesOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.AttributesOrganizationsDevelopersAppRequest
	392, // 513: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.CreateOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppRequest
	393, // 514: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.DeleteOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppRequest
	394, // 515: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest
	395, // 516: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.GetOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppRequest
	396, // 517: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.ListOrganizationsDevelopersApps:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAppsRequest
	397, // 518: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.UpdateOrganizationsDevelopersApp:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsDevelopersAppRequest
	398, // 519: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.DeleteOrganizationsDevelopersAppsAttribute:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsAttributeRequest
	399, // 520: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.GetOrganizationsDevelopersAppsAttribute:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppsAttributeRequest
	400, // 521: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.ListOrganizationsDevelopersAppsAttributes:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAppsAttributesRequest
	401, // 522: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute:input_type -> mockgcp.cloud.apigee.v1.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest
	402, // 523: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.CreateOrganizationsDevelopersAppsKey:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeyRequest
	403, // 524: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.DeleteOrganizationsDevelopersAppsKey:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsKeyRequest
	404, // 525: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.GetOrganizationsDevelopersAppsKey:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAppsKeyRequest
	405, // 526: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey:input_type -> mockgcp.cloud.apigee.v1.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	406, // 527: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey:input_type -> mockgcp.cloud.apigee.v1.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	407, // 528: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer.DeleteOrganizationsDevelopersAppsKeysApiproduct:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAppsKeysApiproductRequest
	408, // 529: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct:input_type -> mockgcp.cloud.apigee.v1.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest
	409, // 530: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer.CreateOrganizationsDevelopersAppsKeysCreate:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersAppsKeysCreateRequest
	410, // 531: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.DeleteOrganizationsDevelopersAttribute:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsDevelopersAttributeRequest
	411, // 532: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.GetOrganizationsDevelopersAttribute:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersAttributeRequest
	412, // 533: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.ListOrganizationsDevelopersAttributes:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersAttributesRequest
	413, // 534: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.UpdateDeveloperAttributeOrganizationsDevelopersAttribute:input_type -> mockgcp.cloud.apigee.v1.UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest
	414, // 535: mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer.AdjustOrganizationsDevelopersBalance:input_type -> mockgcp.cloud.apigee.v1.AdjustOrganizationsDevelopersBalanceRequest
	415, // 536: mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer.CreditOrganizationsDevelopersBalance:input_type -> mockgcp.cloud.apigee.v1.CreditOrganizationsDevelopersBalanceRequest
	416, // 537: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.CreateOrganizationsDevelopersSubscription:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsDevelopersSubscriptionRequest
	417, // 538: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.ExpireOrganizationsDevelopersSubscription:input_type -> mockgcp.cloud.apigee.v1.ExpireOrganizationsDevelopersSubscriptionRequest
	418, // 539: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.GetOrganizationsDevelopersSubscription:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsDevelopersSubscriptionRequest
	419, // 540: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.ListOrganizationsDevelopersSubscriptions:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsDevelopersSubscriptionsRequest
	420, // 541: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.CreateOrganizationsEndpointAttachment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEndpointAttachmentRequest
	421, // 542: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.DeleteOrganizationsEndpointAttachment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEndpointAttachmentRequest
	422, // 543: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.GetOrganizationsEndpointAttachment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEndpointAttachmentRequest
	423, // 544: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.ListOrganizationsEndpointAttachments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEndpointAttachmentsRequest
	424, // 545: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.CreateOrganizationsEnvgroup:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupRequest
	425, // 546: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.DeleteOrganizationsEnvgroup:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvgroupRequest
	426, // 547: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.GetOrganizationsEnvgroup:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvgroupRequest
	427, // 548: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.GetDeployedIngressConfigOrganizationsEnvgroup:input_type -> mockgcp.cloud.apigee.v1.GetDeployedIngressConfigOrganizationsEnvgroupRequest
	428, // 549: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.ListOrganizationsEnvgroups:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvgroupsRequest
	429, // 550: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.PatchOrganizationsEnvgroup:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsEnvgroupRequest
	430, // 551: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.CreateOrganizationsEnvgroupsAttachment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvgroupsAttachmentRequest
	431, // 552: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.DeleteOrganizationsEnvgroupsAttachment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvgroupsAttachmentRequest
	432, // 553: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.GetOrganizationsEnvgroupsAttachment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvgroupsAttachmentRequest
	433, // 554: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.ListOrganizationsEnvgroupsAttachments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvgroupsAttachmentsRequest
	434, // 555: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.CreateOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentRequest
	435, // 556: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.DeleteOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentRequest
	436, // 557: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentRequest
	437, // 558: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetAddonsConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetAddonsConfigOrganizationsEnvironmentRequest
	438, // 559: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetApiSecurityRuntimeConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest
	439, // 560: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetDebugmaskOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetDebugmaskOrganizationsEnvironmentRequest
	440, // 561: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetDeployedConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetDeployedConfigOrganizationsEnvironmentRequest
	441, // 562: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetSecurityActionsConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetSecurityActionsConfigOrganizationsEnvironmentRequest
	442, // 563: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetTraceConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.GetTraceConfigOrganizationsEnvironmentRequest
	443, // 564: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.ModifyEnvironmentOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.ModifyEnvironmentOrganizationsEnvironmentRequest
	444, // 565: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.SubscribeOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.SubscribeOrganizationsEnvironmentRequest
	445, // 566: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UnsubscribeOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UnsubscribeOrganizationsEnvironmentRequest
	446, // 567: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentRequest
	447, // 568: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateDebugmaskOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UpdateDebugmaskOrganizationsEnvironmentRequest
	448, // 569: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateEnvironmentOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UpdateEnvironmentOrganizationsEnvironmentRequest
	449, // 570: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateSecurityActionsConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UpdateSecurityActionsConfigOrganizationsEnvironmentRequest
	450, // 571: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateTraceConfigOrganizationsEnvironment:input_type -> mockgcp.cloud.apigee.v1.UpdateTraceConfigOrganizationsEnvironmentRequest
	451, // 572: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer.SetAddonEnablementOrganizationsEnvironmentsAddonsConfig:input_type -> mockgcp.cloud.apigee.v1.SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest
	452, // 573: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer.GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin:input_type -> mockgcp.cloud.apigee.v1.GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest
	453, // 574: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.CreateOrganizationsEnvironmentsAnalyticsExport:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsAnalyticsExportRequest
	454, // 575: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.GetOrganizationsEnvironmentsAnalyticsExport:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsAnalyticsExportRequest
	455, // 576: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.ListOrganizationsEnvironmentsAnalyticsExports:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsAnalyticsExportsRequest
	456, // 577: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer.ListOrganizationsEnvironmentsApisDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsApisDeploymentsRequest
	457, // 578: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.DeployOrganizationsEnvironmentsApisRevision:input_type -> mockgcp.cloud.apigee.v1.DeployOrganizationsEnvironmentsApisRevisionRequest
	458, // 579: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.GetDeploymentsOrganizationsEnvironmentsApisRevision:input_type -> mockgcp.cloud.apigee.v1.GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest
	459, // 580: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.UndeployOrganizationsEnvironmentsApisRevision:input_type -> mockgcp.cloud.apigee.v1.UndeployOrganizationsEnvironmentsApisRevisionRequest
	460, // 581: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.CreateOrganizationsEnvironmentsApisRevisionsDebugsession:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	461, // 582: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession:input_type -> mockgcp.cloud.apigee.v1.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	462, // 583: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.GetOrganizationsEnvironmentsApisRevisionsDebugsession:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	463, // 584: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.ListOrganizationsEnvironmentsApisRevisionsDebugsessions:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest
	464, // 585: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest
	465, // 586: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment:input_type -> mockgcp.cloud.apigee.v1.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	466, // 587: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment:input_type -> mockgcp.cloud.apigee.v1.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	467, // 588: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.CreateOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsArchiveDeploymentRequest
	468, // 589: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.DeleteOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsArchiveDeploymentRequest
	469, // 590: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	470, // 591: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	471, // 592: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GetOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsArchiveDeploymentRequest
	472, // 593: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.ListOrganizationsEnvironmentsArchiveDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsArchiveDeploymentsRequest
	473, // 594: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.PatchOrganizationsEnvironmentsArchiveDeployment:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsArchiveDeploymentRequest
	474, // 595: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer.DeleteOrganizationsEnvironmentsCache:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsCacheRequest
	475, // 596: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer.GetOrganizationsEnvironmentsDeployment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsDeploymentRequest
	476, // 597: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer.ListOrganizationsEnvironmentsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsDeploymentsRequest
	477, // 598: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook:input_type -> mockgcp.cloud.apigee.v1.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest
	478, // 599: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook:input_type -> mockgcp.cloud.apigee.v1.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest
	479, // 600: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.GetOrganizationsEnvironmentsFlowhook:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsFlowhookRequest
	480, // 601: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.CreateOrganizationsEnvironmentsKeystore:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoreRequest
	481, // 602: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.DeleteOrganizationsEnvironmentsKeystore:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeystoreRequest
	482, // 603: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.GetOrganizationsEnvironmentsKeystore:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeystoreRequest
	483, // 604: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.CreateOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeystoresAliaseRequest
	484, // 605: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.CsrOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.CsrOrganizationsEnvironmentsKeystoresAliaseRequest
	485, // 606: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.DeleteOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeystoresAliaseRequest
	486, // 607: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.GetOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeystoresAliaseRequest
	487, // 608: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.GetCertificateOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest
	488, // 609: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.UpdateOrganizationsEnvironmentsKeystoresAliase:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeystoresAliaseRequest
	489, // 610: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer.CreateOrganizationsEnvironmentsKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapRequest
	490, // 611: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer.DeleteOrganizationsEnvironmentsKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeyvaluemapRequest
	491, // 612: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.CreateOrganizationsEnvironmentsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	492, // 613: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.DeleteOrganizationsEnvironmentsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	493, // 614: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.GetOrganizationsEnvironmentsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	494, // 615: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.ListOrganizationsEnvironmentsKeyvaluemapsEntries:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest
	495, // 616: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.UpdateOrganizationsEnvironmentsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	496, // 617: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer.GetOrganizationsEnvironmentsOptimizedStat:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsOptimizedStatRequest
	497, // 618: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.CreateOrganizationsEnvironmentsQuery:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsQueryRequest
	498, // 619: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetOrganizationsEnvironmentsQuery:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsQueryRequest
	499, // 620: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetResultOrganizationsEnvironmentsQuery:input_type -> mockgcp.cloud.apigee.v1.GetResultOrganizationsEnvironmentsQueryRequest
	500, // 621: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetResulturlOrganizationsEnvironmentsQuery:input_type -> mockgcp.cloud.apigee.v1.GetResulturlOrganizationsEnvironmentsQueryRequest
	501, // 622: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.ListOrganizationsEnvironmentsQueries:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsQueriesRequest
	502, // 623: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.CreateOrganizationsEnvironmentsReference:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsReferenceRequest
	503, // 624: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.DeleteOrganizationsEnvironmentsReference:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsReferenceRequest
	504, // 625: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.GetOrganizationsEnvironmentsReference:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsReferenceRequest
	505, // 626: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.UpdateOrganizationsEnvironmentsReference:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsReferenceRequest
	506, // 627: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.CreateOrganizationsEnvironmentsResourcefile:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsResourcefileRequest
	507, // 628: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.DeleteOrganizationsEnvironmentsResourcefile:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsResourcefileRequest
	508, // 629: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.GetOrganizationsEnvironmentsResourcefile:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsResourcefileRequest
	509, // 630: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.ListOrganizationsEnvironmentsResourcefiles:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsResourcefilesRequest
	510, // 631: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile:input_type -> mockgcp.cloud.apigee.v1.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest
	511, // 632: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.UpdateOrganizationsEnvironmentsResourcefile:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsResourcefileRequest
	512, // 633: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.CreateOrganizationsEnvironmentsSecurityAction:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityActionRequest
	513, // 634: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.DisableOrganizationsEnvironmentsSecurityAction:input_type -> mockgcp.cloud.apigee.v1.DisableOrganizationsEnvironmentsSecurityActionRequest
	514, // 635: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.EnableOrganizationsEnvironmentsSecurityAction:input_type -> mockgcp.cloud.apigee.v1.EnableOrganizationsEnvironmentsSecurityActionRequest
	515, // 636: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.GetOrganizationsEnvironmentsSecurityAction:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityActionRequest
	516, // 637: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.ListOrganizationsEnvironmentsSecurityActions:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityActionsRequest
	517, // 638: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.BatchUpdateOrganizationsEnvironmentsSecurityIncident:input_type -> mockgcp.cloud.apigee.v1.BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest
	518, // 639: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.GetOrganizationsEnvironmentsSecurityIncident:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityIncidentRequest
	519, // 640: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.ListOrganizationsEnvironmentsSecurityIncidents:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityIncidentsRequest
	520, // 641: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.PatchOrganizationsEnvironmentsSecurityIncident:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsSecurityIncidentRequest
	521, // 642: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.CreateOrganizationsEnvironmentsSecurityReport:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsSecurityReportRequest
	522, // 643: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetOrganizationsEnvironmentsSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsSecurityReportRequest
	523, // 644: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetResultOrganizationsEnvironmentsSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetResultOrganizationsEnvironmentsSecurityReportRequest
	524, // 645: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetResultViewOrganizationsEnvironmentsSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetResultViewOrganizationsEnvironmentsSecurityReportRequest
	525, // 646: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.ListOrganizationsEnvironmentsSecurityReports:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSecurityReportsRequest
	526, // 647: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer.QueryTabularStatsOrganizationsEnvironmentsSecurityStat:input_type -> mockgcp.cloud.apigee.v1.QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest
	527, // 648: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat:input_type -> mockgcp.cloud.apigee.v1.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest
	528, // 649: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer.ListOrganizationsEnvironmentsSharedflowsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest
	529, // 650: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.DeployOrganizationsEnvironmentsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.DeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	530, // 651: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest
	531, // 652: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.UndeployOrganizationsEnvironmentsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	532, // 653: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer.GetOrganizationsEnvironmentsStat:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsStatRequest
	533, // 654: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.CreateOrganizationsEnvironmentsTargetserver:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTargetserverRequest
	534, // 655: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.DeleteOrganizationsEnvironmentsTargetserver:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsTargetserverRequest
	535, // 656: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.GetOrganizationsEnvironmentsTargetserver:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsTargetserverRequest
	536, // 657: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.UpdateOrganizationsEnvironmentsTargetserver:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsEnvironmentsTargetserverRequest
	537, // 658: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.CreateOrganizationsEnvironmentsTraceConfigOverride:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsEnvironmentsTraceConfigOverrideRequest
	538, // 659: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.DeleteOrganizationsEnvironmentsTraceConfigOverride:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest
	539, // 660: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.GetOrganizationsEnvironmentsTraceConfigOverride:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsEnvironmentsTraceConfigOverrideRequest
	540, // 661: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.ListOrganizationsEnvironmentsTraceConfigOverrides:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsEnvironmentsTraceConfigOverridesRequest
	541, // 662: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.PatchOrganizationsEnvironmentsTraceConfigOverride:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsEnvironmentsTraceConfigOverrideRequest
	542, // 663: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.CreateOrganizationsHostQuery:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsHostQueryRequest
	543, // 664: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetOrganizationsHostQuery:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsHostQueryRequest
	544, // 665: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetResultOrganizationsHostQuery:input_type -> mockgcp.cloud.apigee.v1.GetResultOrganizationsHostQueryRequest
	545, // 666: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetResultViewOrganizationsHostQuery:input_type -> mockgcp.cloud.apigee.v1.GetResultViewOrganizationsHostQueryRequest
	546, // 667: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.ListOrganizationsHostQueries:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsHostQueriesRequest
	547, // 668: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.CreateOrganizationsHostSecurityReport:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsHostSecurityReportRequest
	548, // 669: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetOrganizationsHostSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsHostSecurityReportRequest
	549, // 670: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetResultOrganizationsHostSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetResultOrganizationsHostSecurityReportRequest
	550, // 671: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetResultViewOrganizationsHostSecurityReport:input_type -> mockgcp.cloud.apigee.v1.GetResultViewOrganizationsHostSecurityReportRequest
	551, // 672: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.ListOrganizationsHostSecurityReports:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsHostSecurityReportsRequest
	552, // 673: mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer.GetOrganizationsHostStat:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsHostStatRequest
	553, // 674: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.CreateOrganizationsInstance:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsInstanceRequest
	554, // 675: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.DeleteOrganizationsInstance:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsInstanceRequest
	555, // 676: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.GetOrganizationsInstance:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsInstanceRequest
	556, // 677: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.ListOrganizationsInstances:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsInstancesRequest
	557, // 678: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.PatchOrganizationsInstance:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsInstanceRequest
	558, // 679: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.ReportStatusOrganizationsInstance:input_type -> mockgcp.cloud.apigee.v1.ReportStatusOrganizationsInstanceRequest
	559, // 680: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.CreateOrganizationsInstancesAttachment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesAttachmentRequest
	560, // 681: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.DeleteOrganizationsInstancesAttachment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsInstancesAttachmentRequest
	561, // 682: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.GetOrganizationsInstancesAttachment:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsInstancesAttachmentRequest
	562, // 683: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.ListOrganizationsInstancesAttachments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsInstancesAttachmentsRequest
	563, // 684: mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer.CreateOrganizationsInstancesCanaryevaluation:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesCanaryevaluationRequest
	564, // 685: mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer.GetOrganizationsInstancesCanaryevaluation:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsInstancesCanaryevaluationRequest
	565, // 686: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.ActivateOrganizationsInstancesNatAddresse:input_type -> mockgcp.cloud.apigee.v1.ActivateOrganizationsInstancesNatAddresseRequest
	566, // 687: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.CreateOrganizationsInstancesNatAddresse:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsInstancesNatAddresseRequest
	567, // 688: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.DeleteOrganizationsInstancesNatAddresse:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsInstancesNatAddresseRequest
	568, // 689: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.GetOrganizationsInstancesNatAddresse:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsInstancesNatAddresseRequest
	569, // 690: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.ListOrganizationsInstancesNatAddresses:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsInstancesNatAddressesRequest
	570, // 691: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer.CreateOrganizationsKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapRequest
	571, // 692: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer.DeleteOrganizationsKeyvaluemap:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsKeyvaluemapRequest
	572, // 693: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.CreateOrganizationsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsKeyvaluemapsEntryRequest
	573, // 694: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.DeleteOrganizationsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsKeyvaluemapsEntryRequest
	574, // 695: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.GetOrganizationsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsKeyvaluemapsEntryRequest
	575, // 696: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.ListOrganizationsKeyvaluemapsEntries:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsKeyvaluemapsEntriesRequest
	576, // 697: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.UpdateOrganizationsKeyvaluemapsEntry:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsKeyvaluemapsEntryRequest
	577, // 698: mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer.GetOrganizationsOptimizedHostStat:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsOptimizedHostStatRequest
	578, // 699: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.CreateOrganizationsReport:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsReportRequest
	579, // 700: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.DeleteOrganizationsReport:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsReportRequest
	580, // 701: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.GetOrganizationsReport:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsReportRequest
	581, // 702: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.ListOrganizationsReports:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsReportsRequest
	582, // 703: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.UpdateOrganizationsReport:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsReportRequest
	583, // 704: mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer.BatchComputeOrganizationsSecurityAssessmentResult:input_type -> mockgcp.cloud.apigee.v1.BatchComputeOrganizationsSecurityAssessmentResultRequest
	584, // 705: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.CreateOrganizationsSecurityProfile:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfileRequest
	585, // 706: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.DeleteOrganizationsSecurityProfile:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfileRequest
	586, // 707: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.GetOrganizationsSecurityProfile:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSecurityProfileRequest
	587, // 708: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.ListOrganizationsSecurityProfiles:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSecurityProfilesRequest
	588, // 709: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.ListRevisionsOrganizationsSecurityProfile:input_type -> mockgcp.cloud.apigee.v1.ListRevisionsOrganizationsSecurityProfileRequest
	589, // 710: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.PatchOrganizationsSecurityProfile:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfileRequest
	590, // 711: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment:input_type -> mockgcp.cloud.apigee.v1.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest
	591, // 712: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.CreateOrganizationsSecurityProfilesEnvironment:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesEnvironmentRequest
	592, // 713: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.DeleteOrganizationsSecurityProfilesEnvironment:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfilesEnvironmentRequest
	593, // 714: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.CreateOrganizationsSecurityProfilesV2:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSecurityProfilesV2Request
	594, // 715: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.DeleteOrganizationsSecurityProfilesV2:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSecurityProfilesV2Request
	595, // 716: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.GetOrganizationsSecurityProfilesV2:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSecurityProfilesV2Request
	596, // 717: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.ListOrganizationsSecurityProfilesV2:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSecurityProfilesV2Request
	597, // 718: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.PatchOrganizationsSecurityProfilesV2:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsSecurityProfilesV2Request
	598, // 719: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.CreateOrganizationsSharedflow:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSharedflowRequest
	599, // 720: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.DeleteOrganizationsSharedflow:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSharedflowRequest
	600, // 721: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.GetOrganizationsSharedflow:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSharedflowRequest
	601, // 722: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.ListOrganizationsSharedflows:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsRequest
	602, // 723: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer.ListOrganizationsSharedflowsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsDeploymentsRequest
	603, // 724: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.DeleteOrganizationsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSharedflowsRevisionRequest
	604, // 725: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.GetOrganizationsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSharedflowsRevisionRequest
	605, // 726: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.UpdateSharedFlowRevisionOrganizationsSharedflowsRevision:input_type -> mockgcp.cloud.apigee.v1.UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest
	606, // 727: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer.ListOrganizationsSharedflowsRevisionsDeployments:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSharedflowsRevisionsDeploymentsRequest
	607, // 728: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.CreateOrganizationsSitesApicategory:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApicategoryRequest
	608, // 729: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.DeleteOrganizationsSitesApicategory:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSitesApicategoryRequest
	609, // 730: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.GetOrganizationsSitesApicategory:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSitesApicategoryRequest
	610, // 731: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.ListOrganizationsSitesApicategories:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSitesApicategoriesRequest
	611, // 732: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.PatchOrganizationsSitesApicategory:input_type -> mockgcp.cloud.apigee.v1.PatchOrganizationsSitesApicategoryRequest
	612, // 733: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.CreateOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.CreateOrganizationsSitesApidocRequest
	613, // 734: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.DeleteOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.DeleteOrganizationsSitesApidocRequest
	614, // 735: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.GetOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.GetOrganizationsSitesApidocRequest
	615, // 736: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.GetDocumentationOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.GetDocumentationOrganizationsSitesApidocRequest
	616, // 737: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.ListOrganizationsSitesApidocs:input_type -> mockgcp.cloud.apigee.v1.ListOrganizationsSitesApidocsRequest
	617, // 738: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.UpdateOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.UpdateOrganizationsSitesApidocRequest
	618, // 739: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.UpdateDocumentationOrganizationsSitesApidoc:input_type -> mockgcp.cloud.apigee.v1.UpdateDocumentationOrganizationsSitesApidocRequest
	619, // 740: mockgcp.cloud.apigee.v1.ProjectsServer.ProvisionOrganizationProject:input_type -> mockgcp.cloud.apigee.v1.ProvisionOrganizationProjectRequest
	151, // 741: mockgcp.cloud.apigee.v1.HybridIssuersServer.ListHybridIssuers:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListHybridIssuersResponse
	636, // 742: mockgcp.cloud.apigee.v1.OrganizationsServer.CreateOrganization:output_type -> google.longrunning.Operation
	636, // 743: mockgcp.cloud.apigee.v1.OrganizationsServer.DeleteOrganization:output_type -> google.longrunning.Operation
	182, // 744: mockgcp.cloud.apigee.v1.OrganizationsServer.GetOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization
	55,  // 745: mockgcp.cloud.apigee.v1.OrganizationsServer.GetControlPlaneAccessOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ControlPlaneAccess
	118, // 746: mockgcp.cloud.apigee.v1.OrganizationsServer.GetDeployedIngressConfigOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1IngressConfig
	183, // 747: mockgcp.cloud.apigee.v1.OrganizationsServer.GetProjectMappingOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OrganizationProjectMapping
	226, // 748: mockgcp.cloud.apigee.v1.OrganizationsServer.GetRuntimeConfigOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RuntimeConfig
	264, // 749: mockgcp.cloud.apigee.v1.OrganizationsServer.GetSecuritySettingsOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecuritySettings
	275, // 750: mockgcp.cloud.apigee.v1.OrganizationsServer.GetSyncAuthorizationOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SyncAuthorization
	157, // 751: mockgcp.cloud.apigee.v1.OrganizationsServer.ListOrganizations:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOrganizationsResponse
	636, // 752: mockgcp.cloud.apigee.v1.OrganizationsServer.SetAddonsOrganization:output_type -> google.longrunning.Operation
	275, // 753: mockgcp.cloud.apigee.v1.OrganizationsServer.SetSyncAuthorizationOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SyncAuthorization
	182, // 754: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Organization
	636, // 755: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateControlPlaneAccessOrganization:output_type -> google.longrunning.Operation
	264, // 756: mockgcp.cloud.apigee.v1.OrganizationsServer.UpdateSecuritySettingsOrganization:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecuritySettings
	62,  // 757: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.CreateOrganizationsAnalyticsDatastore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	296, // 758: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.DeleteOrganizationsAnalyticsDatastore:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	62,  // 759: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.GetOrganizationsAnalyticsDatastore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	141, // 760: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.ListOrganizationsAnalyticsDatastores:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDatastoresResponse
	278, // 761: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.TestOrganizationsAnalyticsDatastore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TestDatastoreResponse
	62,  // 762: mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer.UpdateOrganizationsAnalyticsDatastore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Datastore
	37,  // 763: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.AttributesOrganizationsApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	22,  // 764: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.CreateOrganizationsApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	22,  // 765: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.DeleteOrganizationsApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	22,  // 766: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.GetOrganizationsApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	132, // 767: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.ListOrganizationsApiproducts:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProductsResponse
	22,  // 768: mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer.UpdateOrganizationsApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProduct
	36,  // 769: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.DeleteOrganizationsApiproductsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	36,  // 770: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.GetOrganizationsApiproductsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	37,  // 771: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.ListOrganizationsApiproductsAttributes:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	36,  // 772: mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer.UpdateApiProductAttributeOrganizationsApiproductsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	208, // 773: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.CreateOrganizationsApiproductsRateplan:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	208, // 774: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.DeleteOrganizationsApiproductsRateplan:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	208, // 775: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.GetOrganizationsApiproductsRateplan:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	158, // 776: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.ListOrganizationsApiproductsRateplans:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListRatePlansResponse
	208, // 777: mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer.UpdateOrganizationsApiproductsRateplan:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1RatePlan
	25,  // 778: mockgcp.cloud.apigee.v1.OrganizationsApisServer.CreateOrganizationsApi:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision
	24,  // 779: mockgcp.cloud.apigee.v1.OrganizationsApisServer.DeleteOrganizationsApi:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	24,  // 780: mockgcp.cloud.apigee.v1.OrganizationsApisServer.GetOrganizationsApi:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	133, // 781: mockgcp.cloud.apigee.v1.OrganizationsApisServer.ListOrganizationsApis:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiProxiesResponse
	24,  // 782: mockgcp.cloud.apigee.v1.OrganizationsApisServer.PatchOrganizationsApi:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxy
	143, // 783: mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer.ListOrganizationsApisDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	127, // 784: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer.CreateOrganizationsApisKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	127, // 785: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer.DeleteOrganizationsApisKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 786: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.CreateOrganizationsApisKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 787: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.DeleteOrganizationsApisKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 788: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.GetOrganizationsApisKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	154, // 789: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.ListOrganizationsApisKeyvaluemapsEntries:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListKeyValueEntriesResponse
	126, // 790: mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer.UpdateOrganizationsApisKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	25,  // 791: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.DeleteOrganizationsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision
	2,   // 792: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.GetOrganizationsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	25,  // 793: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer.UpdateApiProxyRevisionOrganizationsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiProxyRevision
	143, // 794: mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer.ListOrganizationsApisRevisionsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	29,  // 795: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.CreateOrganizationsAppgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	29,  // 796: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.DeleteOrganizationsAppgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	29,  // 797: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.GetOrganizationsAppgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	135, // 798: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.ListOrganizationsAppgroups:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupsResponse
	29,  // 799: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer.UpdateOrganizationsAppgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroup
	30,  // 800: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.CreateOrganizationsAppgroupsApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	30,  // 801: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.DeleteOrganizationsAppgroupsApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	30,  // 802: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.GetOrganizationsAppgroupsApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	134, // 803: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.ListOrganizationsAppgroupsApps:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppGroupAppsResponse
	30,  // 804: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer.UpdateOrganizationsAppgroupsApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupApp
	31,  // 805: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.CreateOrganizationsAppgroupsAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	31,  // 806: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.DeleteOrganizationsAppgroupsAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	31,  // 807: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.GetOrganizationsAppgroupsAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	31,  // 808: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	31,  // 809: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer.DeleteOrganizationsAppgroupsAppsKeysApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AppGroupAppKey
	296, // 810: mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	28,  // 811: mockgcp.cloud.apigee.v1.OrganizationsAppsServer.GetOrganizationsApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1App
	136, // 812: mockgcp.cloud.apigee.v1.OrganizationsAppsServer.ListOrganizationsApps:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAppsResponse
	60,  // 813: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.CreateOrganizationsDatacollector:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	296, // 814: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.DeleteOrganizationsDatacollector:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	60,  // 815: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.GetOrganizationsDatacollector:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	140, // 816: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.ListOrganizationsDatacollectors:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDataCollectorsResponse
	60,  // 817: mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer.PatchOrganizationsDatacollector:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DataCollector
	143, // 818: mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer.ListOrganizationsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	37,  // 819: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.AttributesOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	77,  // 820: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.CreateOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	77,  // 821: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.DeleteOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	77,  // 822: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	80,  // 823: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetBalanceOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalance
	82,  // 824: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.GetMonetizationConfigOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperMonetizationConfig
	156, // 825: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.ListOrganizationsDevelopers:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListOfDevelopersResponse
	296, // 826: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.SetDeveloperStatusOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	77,  // 827: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.UpdateOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Developer
	82,  // 828: mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer.UpdateMonetizationConfigOrganizationsDeveloper:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperMonetizationConfig
	37,  // 829: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.AttributesOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	78,  // 830: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.CreateOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	78,  // 831: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.DeleteOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	78,  // 832: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	78,  // 833: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.GetOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	144, // 834: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.ListOrganizationsDevelopersApps:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperAppsResponse
	78,  // 835: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer.UpdateOrganizationsDevelopersApp:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperApp
	36,  // 836: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.DeleteOrganizationsDevelopersAppsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	36,  // 837: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.GetOrganizationsDevelopersAppsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	37,  // 838: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.ListOrganizationsDevelopersAppsAttributes:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	36,  // 839: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	79,  // 840: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.CreateOrganizationsDevelopersAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 841: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.DeleteOrganizationsDevelopersAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 842: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.GetOrganizationsDevelopersAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 843: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 844: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	79,  // 845: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer.DeleteOrganizationsDevelopersAppsKeysApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	296, // 846: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	79,  // 847: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer.CreateOrganizationsDevelopersAppsKeysCreate:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperAppKey
	36,  // 848: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.DeleteOrganizationsDevelopersAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	36,  // 849: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.GetOrganizationsDevelopersAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	37,  // 850: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.ListOrganizationsDevelopersAttributes:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attributes
	36,  // 851: mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer.UpdateDeveloperAttributeOrganizationsDevelopersAttribute:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Attribute
	80,  // 852: mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer.AdjustOrganizationsDevelopersBalance:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalance
	80,  // 853: mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer.CreditOrganizationsDevelopersBalance:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperBalance
	83,  // 854: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.CreateOrganizationsDevelopersSubscription:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	83,  // 855: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.ExpireOrganizationsDevelopersSubscription:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	83,  // 856: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.GetOrganizationsDevelopersSubscription:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeveloperSubscription
	145, // 857: mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer.ListOrganizationsDevelopersSubscriptions:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse
	636, // 858: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.CreateOrganizationsEndpointAttachment:output_type -> google.longrunning.Operation
	636, // 859: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.DeleteOrganizationsEndpointAttachment:output_type -> google.longrunning.Operation
	88,  // 860: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.GetOrganizationsEndpointAttachment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EndpointAttachment
	146, // 861: mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer.ListOrganizationsEndpointAttachments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEndpointAttachmentsResponse
	636, // 862: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.CreateOrganizationsEnvgroup:output_type -> google.longrunning.Operation
	636, // 863: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.DeleteOrganizationsEnvgroup:output_type -> google.longrunning.Operation
	97,  // 864: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.GetOrganizationsEnvgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroup
	99,  // 865: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.GetDeployedIngressConfigOrganizationsEnvgroup:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupConfig
	148, // 866: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.ListOrganizationsEnvgroups:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupsResponse
	636, // 867: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer.PatchOrganizationsEnvgroup:output_type -> google.longrunning.Operation
	636, // 868: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.CreateOrganizationsEnvgroupsAttachment:output_type -> google.longrunning.Operation
	636, // 869: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.DeleteOrganizationsEnvgroupsAttachment:output_type -> google.longrunning.Operation
	98,  // 870: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.GetOrganizationsEnvgroupsAttachment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentGroupAttachment
	147, // 871: mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer.ListOrganizationsEnvgroupsAttachments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse
	636, // 872: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.CreateOrganizationsEnvironment:output_type -> google.longrunning.Operation
	636, // 873: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.DeleteOrganizationsEnvironment:output_type -> google.longrunning.Operation
	91,  // 874: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	10,  // 875: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetAddonsConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AddonsConfig
	27,  // 876: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetApiSecurityRuntimeConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiSecurityRuntimeConfig
	65,  // 877: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetDebugmaskOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask
	94,  // 878: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetDeployedConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1EnvironmentConfig
	244, // 879: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetSecurityActionsConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionsConfig
	282, // 880: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.GetTraceConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfig
	636, // 881: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.ModifyEnvironmentOrganizationsEnvironment:output_type -> google.longrunning.Operation
	274, // 882: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.SubscribeOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Subscription
	296, // 883: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UnsubscribeOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	91,  // 884: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	65,  // 885: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateDebugmaskOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugMask
	91,  // 886: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateEnvironmentOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Environment
	244, // 887: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateSecurityActionsConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityActionsConfig
	282, // 888: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer.UpdateTraceConfigOrganizationsEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfig
	636, // 889: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer.SetAddonEnablementOrganizationsEnvironmentsAddonsConfig:output_type -> google.longrunning.Operation
	230, // 890: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer.GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Schema
	101, // 891: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.CreateOrganizationsEnvironmentsAnalyticsExport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Export
	101, // 892: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.GetOrganizationsEnvironmentsAnalyticsExport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Export
	150, // 893: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer.ListOrganizationsEnvironmentsAnalyticsExports:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListExportsResponse
	143, // 894: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer.ListOrganizationsEnvironmentsApisDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	70,  // 895: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.DeployOrganizationsEnvironmentsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	70,  // 896: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.GetDeploymentsOrganizationsEnvironmentsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	296, // 897: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer.UndeployOrganizationsEnvironmentsApisRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	66,  // 898: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.CreateOrganizationsEnvironmentsApisRevisionsDebugsession:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSession
	296, // 899: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	66,  // 900: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.GetOrganizationsEnvironmentsApisRevisionsDebugsession:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSession
	142, // 901: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer.ListOrganizationsEnvironmentsApisRevisionsDebugsessions:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDebugSessionsResponse
	67,  // 902: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DebugSessionTransaction
	71,  // 903: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport
	71,  // 904: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeploymentChangeReport
	636, // 905: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.CreateOrganizationsEnvironmentsArchiveDeployment:output_type -> google.longrunning.Operation
	296, // 906: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.DeleteOrganizationsEnvironmentsArchiveDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	106, // 907: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateDownloadUrlResponse
	108, // 908: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GenerateUploadUrlResponse
	32,  // 909: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.GetOrganizationsEnvironmentsArchiveDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	137, // 910: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.ListOrganizationsEnvironmentsArchiveDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListArchiveDeploymentsResponse
	32,  // 911: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer.PatchOrganizationsEnvironmentsArchiveDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ArchiveDeployment
	296, // 912: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer.DeleteOrganizationsEnvironmentsCache:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	70,  // 913: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer.GetOrganizationsEnvironmentsDeployment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	143, // 914: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer.ListOrganizationsEnvironmentsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	103, // 915: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHook
	103, // 916: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHook
	103, // 917: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer.GetOrganizationsEnvironmentsFlowhook:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1FlowHook
	128, // 918: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.CreateOrganizationsEnvironmentsKeystore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Keystore
	128, // 919: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.DeleteOrganizationsEnvironmentsKeystore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Keystore
	128, // 920: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer.GetOrganizationsEnvironmentsKeystore:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Keystore
	13,  // 921: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.CreateOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias
	2,   // 922: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.CsrOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	13,  // 923: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.DeleteOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias
	13,  // 924: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.GetOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias
	2,   // 925: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.GetCertificateOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	13,  // 926: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer.UpdateOrganizationsEnvironmentsKeystoresAliase:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Alias
	127, // 927: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer.CreateOrganizationsEnvironmentsKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	127, // 928: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer.DeleteOrganizationsEnvironmentsKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 929: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.CreateOrganizationsEnvironmentsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 930: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.DeleteOrganizationsEnvironmentsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 931: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.GetOrganizationsEnvironmentsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	154, // 932: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.ListOrganizationsEnvironmentsKeyvaluemapsEntries:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListKeyValueEntriesResponse
	126, // 933: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer.UpdateOrganizationsEnvironmentsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	179, // 934: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer.GetOrganizationsEnvironmentsOptimizedStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStats
	33,  // 935: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.CreateOrganizationsEnvironmentsQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	33,  // 936: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetOrganizationsEnvironmentsQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	2,   // 937: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetResultOrganizationsEnvironmentsQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	109, // 938: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.GetResulturlOrganizationsEnvironmentsQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse
	138, // 939: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer.ListOrganizationsEnvironmentsQueries:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAsyncQueriesResponse
	210, // 940: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.CreateOrganizationsEnvironmentsReference:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	210, // 941: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.DeleteOrganizationsEnvironmentsReference:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	210, // 942: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.GetOrganizationsEnvironmentsReference:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	210, // 943: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer.UpdateOrganizationsEnvironmentsReference:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Reference
	216, // 944: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.CreateOrganizationsEnvironmentsResourcefile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	216, // 945: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.DeleteOrganizationsEnvironmentsResourcefile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	2,   // 946: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.GetOrganizationsEnvironmentsResourcefile:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	149, // 947: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.ListOrganizationsEnvironmentsResourcefiles:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentResourcesResponse
	149, // 948: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListEnvironmentResourcesResponse
	216, // 949: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer.UpdateOrganizationsEnvironmentsResourcefile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ResourceFile
	238, // 950: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.CreateOrganizationsEnvironmentsSecurityAction:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	238, // 951: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.DisableOrganizationsEnvironmentsSecurityAction:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	238, // 952: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.EnableOrganizationsEnvironmentsSecurityAction:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	238, // 953: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.GetOrganizationsEnvironmentsSecurityAction:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityAction
	159, // 954: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer.ListOrganizationsEnvironmentsSecurityActions:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityActionsResponse
	44,  // 955: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.BatchUpdateOrganizationsEnvironmentsSecurityIncident:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse
	251, // 956: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.GetOrganizationsEnvironmentsSecurityIncident:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	160, // 957: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.ListOrganizationsEnvironmentsSecurityIncidents:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityIncidentsResponse
	251, // 958: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer.PatchOrganizationsEnvironmentsSecurityIncident:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityIncident
	258, // 959: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.CreateOrganizationsEnvironmentsSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	258, // 960: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetOrganizationsEnvironmentsSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	2,   // 961: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetResultOrganizationsEnvironmentsSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	263, // 962: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.GetResultViewOrganizationsEnvironmentsSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultView
	164, // 963: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer.ListOrganizationsEnvironmentsSecurityReports:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityReportsResponse
	202, // 964: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer.QueryTabularStatsOrganizationsEnvironmentsSecurityStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTabularStatsResponse
	204, // 965: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1QueryTimeSeriesStatsResponse
	143, // 966: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer.ListOrganizationsEnvironmentsSharedflowsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	70,  // 967: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.DeployOrganizationsEnvironmentsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	70,  // 968: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Deployment
	296, // 969: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer.UndeployOrganizationsEnvironmentsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	271, // 970: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer.GetOrganizationsEnvironmentsStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats
	276, // 971: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.CreateOrganizationsEnvironmentsTargetserver:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	276, // 972: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.DeleteOrganizationsEnvironmentsTargetserver:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	276, // 973: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.GetOrganizationsEnvironmentsTargetserver:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	276, // 974: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer.UpdateOrganizationsEnvironmentsTargetserver:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TargetServer
	283, // 975: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.CreateOrganizationsEnvironmentsTraceConfigOverride:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	296, // 976: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.DeleteOrganizationsEnvironmentsTraceConfigOverride:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	283, // 977: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.GetOrganizationsEnvironmentsTraceConfigOverride:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	166, // 978: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.ListOrganizationsEnvironmentsTraceConfigOverrides:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListTraceConfigOverridesResponse
	283, // 979: mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer.PatchOrganizationsEnvironmentsTraceConfigOverride:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1TraceConfigOverride
	33,  // 980: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.CreateOrganizationsHostQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	33,  // 981: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetOrganizationsHostQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQuery
	2,   // 982: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetResultOrganizationsHostQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	35,  // 983: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.GetResultViewOrganizationsHostQuery:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1AsyncQueryResultView
	138, // 984: mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer.ListOrganizationsHostQueries:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListAsyncQueriesResponse
	258, // 985: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.CreateOrganizationsHostSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	258, // 986: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetOrganizationsHostSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReport
	2,   // 987: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetResultOrganizationsHostSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	263, // 988: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.GetResultViewOrganizationsHostSecurityReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityReportResultView
	164, // 989: mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer.ListOrganizationsHostSecurityReports:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityReportsResponse
	271, // 990: mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer.GetOrganizationsHostStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Stats
	636, // 991: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.CreateOrganizationsInstance:output_type -> google.longrunning.Operation
	636, // 992: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.DeleteOrganizationsInstance:output_type -> google.longrunning.Operation
	119, // 993: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.GetOrganizationsInstance:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1Instance
	153, // 994: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.ListOrganizationsInstances:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstancesResponse
	636, // 995: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.PatchOrganizationsInstance:output_type -> google.longrunning.Operation
	213, // 996: mockgcp.cloud.apigee.v1.OrganizationsInstancesServer.ReportStatusOrganizationsInstance:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ReportInstanceStatusResponse
	636, // 997: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.CreateOrganizationsInstancesAttachment:output_type -> google.longrunning.Operation
	636, // 998: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.DeleteOrganizationsInstancesAttachment:output_type -> google.longrunning.Operation
	120, // 999: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.GetOrganizationsInstancesAttachment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1InstanceAttachment
	152, // 1000: mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer.ListOrganizationsInstancesAttachments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListInstanceAttachmentsResponse
	636, // 1001: mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer.CreateOrganizationsInstancesCanaryevaluation:output_type -> google.longrunning.Operation
	45,  // 1002: mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer.GetOrganizationsInstancesCanaryevaluation:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CanaryEvaluation
	636, // 1003: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.ActivateOrganizationsInstancesNatAddresse:output_type -> google.longrunning.Operation
	636, // 1004: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.CreateOrganizationsInstancesNatAddresse:output_type -> google.longrunning.Operation
	636, // 1005: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.DeleteOrganizationsInstancesNatAddresse:output_type -> google.longrunning.Operation
	171, // 1006: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.GetOrganizationsInstancesNatAddresse:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1NatAddress
	155, // 1007: mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer.ListOrganizationsInstancesNatAddresses:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListNatAddressesResponse
	127, // 1008: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer.CreateOrganizationsKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	127, // 1009: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer.DeleteOrganizationsKeyvaluemap:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueMap
	126, // 1010: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.CreateOrganizationsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 1011: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.DeleteOrganizationsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	126, // 1012: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.GetOrganizationsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	154, // 1013: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.ListOrganizationsKeyvaluemapsEntries:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListKeyValueEntriesResponse
	126, // 1014: mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer.UpdateOrganizationsKeyvaluemapsEntry:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1KeyValueEntry
	179, // 1015: mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer.GetOrganizationsOptimizedHostStat:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1OptimizedStats
	58,  // 1016: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.CreateOrganizationsReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	68,  // 1017: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.DeleteOrganizationsReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeleteCustomReportResponse
	58,  // 1018: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.GetOrganizationsReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	139, // 1019: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.ListOrganizationsReports:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListCustomReportsResponse
	58,  // 1020: mockgcp.cloud.apigee.v1.OrganizationsReportsServer.UpdateOrganizationsReport:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1CustomReport
	42,  // 1021: mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer.BatchComputeOrganizationsSecurityAssessmentResult:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse
	252, // 1022: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.CreateOrganizationsSecurityProfile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	296, // 1023: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.DeleteOrganizationsSecurityProfile:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	252, // 1024: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.GetOrganizationsSecurityProfile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	162, // 1025: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.ListOrganizationsSecurityProfiles:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesResponse
	161, // 1026: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.ListRevisionsOrganizationsSecurityProfile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse
	252, // 1027: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer.PatchOrganizationsSecurityProfile:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfile
	52,  // 1028: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ComputeEnvironmentScoresResponse
	254, // 1029: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.CreateOrganizationsSecurityProfilesEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation
	296, // 1030: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer.DeleteOrganizationsSecurityProfilesEnvironment:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	256, // 1031: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.CreateOrganizationsSecurityProfilesV2:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	296, // 1032: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.DeleteOrganizationsSecurityProfilesV2:output_type -> mockgcp.cloud.apigee.v1.GoogleProtobufEmpty
	256, // 1033: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.GetOrganizationsSecurityProfilesV2:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	163, // 1034: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.ListOrganizationsSecurityProfilesV2:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSecurityProfilesV2Response
	256, // 1035: mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server.PatchOrganizationsSecurityProfilesV2:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SecurityProfileV2
	270, // 1036: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.CreateOrganizationsSharedflow:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision
	269, // 1037: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.DeleteOrganizationsSharedflow:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlow
	269, // 1038: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.GetOrganizationsSharedflow:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlow
	165, // 1039: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer.ListOrganizationsSharedflows:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListSharedFlowsResponse
	143, // 1040: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer.ListOrganizationsSharedflowsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	270, // 1041: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.DeleteOrganizationsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision
	2,   // 1042: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.GetOrganizationsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleApiHttpBody
	270, // 1043: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer.UpdateSharedFlowRevisionOrganizationsSharedflowsRevision:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1SharedFlowRevision
	143, // 1044: mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer.ListOrganizationsSharedflowsRevisionsDeployments:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListDeploymentsResponse
	17,  // 1045: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.CreateOrganizationsSitesApicategory:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategoryResponse
	69,  // 1046: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.DeleteOrganizationsSitesApicategory:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeleteResponse
	17,  // 1047: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.GetOrganizationsSitesApicategory:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategoryResponse
	130, // 1048: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.ListOrganizationsSitesApicategories:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiCategoriesResponse
	17,  // 1049: mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer.PatchOrganizationsSitesApicategory:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiCategoryResponse
	21,  // 1050: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.CreateOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocResponse
	69,  // 1051: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.DeleteOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1DeleteResponse
	21,  // 1052: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.GetOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocResponse
	20,  // 1053: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.GetDocumentationOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentationResponse
	131, // 1054: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.ListOrganizationsSitesApidocs:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ListApiDocsResponse
	21,  // 1055: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.UpdateOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocResponse
	20,  // 1056: mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer.UpdateDocumentationOrganizationsSitesApidoc:output_type -> mockgcp.cloud.apigee.v1.GoogleCloudApigeeV1ApiDocDocumentationResponse
	636, // 1057: mockgcp.cloud.apigee.v1.ProjectsServer.ProvisionOrganizationProject:output_type -> google.longrunning.Operation
	741, // [741:1058] is the sub-list for method output_type
	424, // [424:741] is the sub-list for method input_type
	424, // [424:424] is the sub-list for extension type_name
	424, // [424:424] is the sub-list for extension extendee
	0,   // [0:424] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_apigee_v1_service_proto_init() }
func file_mockgcp_cloud_apigee_v1_service_proto_init() {
	if File_mockgcp_cloud_apigee_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeConfigstoreBundleBadBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeConfigstoreBundleBadBundleViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleApiHttpBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1APIProductAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AccessGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AccessLoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AccessRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AccessSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ActivateNatAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AddonsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AdjustDeveloperBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AdvancedApiOpsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AliasRevisionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AnalyticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiCategoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiDocDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiDocDocumentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiDocResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiProductRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiProxyRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiSecurityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ApiSecurityRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AppGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AppGroupApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AppGroupAppKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ArchiveDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AsyncQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AsyncQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1AsyncQueryResultView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestIncludeAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsRequestResourceArrayResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CanaryEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CanaryEvaluationMetricLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CertInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CommonNameConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ComputeEnvironmentScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ComputeEnvironmentScoresRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ConfigVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ConnectorsPlatformConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ControlPlaneAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CreditDeveloperBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CustomReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1CustomReportMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DataCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DataCollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Datastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DatastoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DebugMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DebugSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DebugSessionTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeleteCustomReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentChangeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentChangeReportRoutingChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentChangeReportRoutingConflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentChangeReportRoutingDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeploymentGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Developer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperAppKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperBalanceWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperMonetizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DeveloperSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DimensionMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DisableSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1DocumentationFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnableSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EndpointAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EndpointChainingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EntityMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentClientIPResolutionConfigHeaderIndexAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentConfigClientIPResolutionConfigHeaderIndexAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentGroupAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1EnvironmentGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ExpireDeveloperSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1FlowHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1FlowHookConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GenerateDownloadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GenerateDownloadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GenerateUploadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GenerateUploadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponseURLInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GetSyncAuthorizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GraphQLOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GraphQLOperationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GraphQLOperationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GraphqlDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GrpcOperationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1GrpcOperationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1IngressConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1InstanceAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1InstanceDeploymentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1InstanceDeploymentStatusDeployedRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1IntegrationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1KeyAliasReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1KeyValueEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1KeyValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Keystore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1KeystoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListApiCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListApiDocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListApiProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListApiProxiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListAppGroupAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListAppGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListArchiveDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListAsyncQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListCustomReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDataCollectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDatastoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDebugSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDeveloperAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListEndpointAttachmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListEnvironmentGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListEnvironmentResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListExportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListHybridIssuersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListInstanceAttachmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListKeyValueEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListNatAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListOfDevelopersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListOrganizationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListRatePlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityIncidentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityProfilesV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSecurityReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListSharedFlowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ListTraceConfigOverridesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1MetricAggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1MonetizationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1NatAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OASDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OperationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OperationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OperationMetadataProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OptimizedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OptimizedStatsNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OptimizedStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1OrganizationProjectMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1PodStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigAbuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigCORS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigMTLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigMediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProfileConfigThreat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ProvisionOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTabularStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTabularStatsResponseValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTabularStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTimeSeriesStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequencePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1QueryTimeSeriesStatsResponseSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Quota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ReferenceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ReportInstanceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ReportInstanceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ReportProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ResourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ResourceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ResourceFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RevenueShareRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RevisionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RoutingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeAddonsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeAnalyticsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeApiSecurityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeTraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeTraceConfigOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1RuntimeTraceSamplingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SchemaSchemaElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SchemaSchemaProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Score); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ScoreComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ScoreComponentRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ScoreComponentRecommendationAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ScoreComponentRecommendationActionActionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionAllow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionConditionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionDeny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionHttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityActionsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResultResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityAssessmentResultScoringResultAssessmentRecommendationRecommendationLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityIncident); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfileEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfileScoringConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityProfileV2ProfileAssessmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReportMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReportQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReportQueryMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReportResultMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecurityReportResultView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SecuritySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1ServiceIssuersMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SetAddonEnablementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SetAddonsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SharedFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SharedFlowRevision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1StatsEnvironmentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1StatsHostStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1SyncAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TargetServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TargetServerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TestDatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TlsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TlsInfoCommonName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TlsInfoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TraceConfigOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1TraceSamplingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1UpdateAppGroupAppKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1UpdateError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleCloudApigeeV1UpdateSecurityIncidentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1AuditLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1SetIamPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleIamV1TestIamPermissionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleLongrunningListOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleProtobufEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleRpcPreconditionFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleRpcPreconditionFailureViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleRpcStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleTypeExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleTypeInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoogleTypeMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHybridIssuersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlPlaneAccessOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeployedIngressConfigOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectMappingOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuntimeConfigOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecuritySettingsOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSyncAuthorizationOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAddonsOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSyncAuthorizationOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateControlPlaneAccessOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecuritySettingsOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsAnalyticsDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsAnalyticsDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsAnalyticsDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsAnalyticsDatastoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestOrganizationsAnalyticsDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsAnalyticsDatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributesOrganizationsApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApiproductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApiproductsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApiproductsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApiproductsAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsApiproductsRateplanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApiproductsRateplanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApiproductsRateplanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApiproductsRateplansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsApiproductsRateplanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApisDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsApisKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApisKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsApisKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApisKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApisKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApisKeyvaluemapsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsApisKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApiProxyRevisionOrganizationsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsApisRevisionsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsAppgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsAppgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsAppgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsAppgroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsAppgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsAppgroupsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsAppgroupsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsAppgroupsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsAppgroupsAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsAppgroupsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsAppgroupsAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsAppgroupsAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsAppgroupsAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsAppgroupsAppsKeysApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDatacollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDatacollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDatacollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDatacollectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsDatacollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributesOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMonetizationConfigOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDevelopersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeveloperStatusOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMonetizationConfigOrganizationsDeveloperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributesOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDevelopersAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsDevelopersAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDevelopersAppsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDevelopersAppsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDevelopersAppsAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDevelopersAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDevelopersAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDevelopersAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDevelopersAppsKeysApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDevelopersAppsKeysCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsDevelopersAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDevelopersAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDevelopersAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustOrganizationsDevelopersBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditOrganizationsDevelopersBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsDevelopersSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireOrganizationsDevelopersSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsDevelopersSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsDevelopersSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEndpointAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEndpointAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEndpointAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEndpointAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeployedIngressConfigOrganizationsEnvgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvgroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsEnvgroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvgroupsAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvgroupsAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvgroupsAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvgroupsAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddonsConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugmaskOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeployedConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecurityActionsConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraceConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyEnvironmentOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribeOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDebugmaskOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEnvironmentOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSecurityActionsConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTraceConfigOrganizationsEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsAnalyticsExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsAnalyticsExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsAnalyticsExportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsApisDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployOrganizationsEnvironmentsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeployOrganizationsEnvironmentsApisRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsArchiveDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsEnvironmentsArchiveDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsFlowhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsKeystoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsKeystoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsKeystoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsrOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentsKeystoresAliaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsOptimizedStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultOrganizationsEnvironmentsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResulturlOrganizationsEnvironmentsQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentsReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsResourcefileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsResourcefileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsResourcefileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsResourcefilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentsResourcefileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableOrganizationsEnvironmentsSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableOrganizationsEnvironmentsSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsSecurityActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsSecurityActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsSecurityIncidentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsSecurityIncidentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsEnvironmentsSecurityIncidentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultOrganizationsEnvironmentsSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultViewOrganizationsEnvironmentsSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsSecurityReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployOrganizationsEnvironmentsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsTargetserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsTargetserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsTargetserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsEnvironmentsTargetserverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsEnvironmentsTraceConfigOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsEnvironmentsTraceConfigOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsEnvironmentsTraceConfigOverridesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsEnvironmentsTraceConfigOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsHostQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsHostQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultOrganizationsHostQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultViewOrganizationsHostQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsHostQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsHostSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsHostSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultOrganizationsHostSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultViewOrganizationsHostSecurityReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsHostSecurityReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsHostStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatusOrganizationsInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsInstancesAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsInstancesAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsInstancesAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsInstancesAttachmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsInstancesCanaryevaluationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsInstancesCanaryevaluationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateOrganizationsInstancesNatAddresseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsInstancesNatAddresseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsInstancesNatAddresseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsInstancesNatAddresseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsInstancesNatAddressesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsKeyvaluemapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsKeyvaluemapsEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsKeyvaluemapsEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsOptimizedHostStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchComputeOrganizationsSecurityAssessmentResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSecurityProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRevisionsOrganizationsSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsSecurityProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSecurityProfilesEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSecurityProfilesEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSecurityProfilesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSecurityProfilesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSecurityProfilesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSecurityProfilesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsSecurityProfilesV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSharedflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSharedflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSharedflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSharedflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSharedflowsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSharedflowsRevisionsDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSitesApicategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSitesApicategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[609].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSitesApicategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[610].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSitesApicategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[611].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchOrganizationsSitesApicategoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[612].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[613].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[614].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[615].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocumentationOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[616].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationsSitesApidocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[617].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[618].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDocumentationOrganizationsSitesApidocRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_apigee_v1_service_proto_msgTypes[619].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionOrganizationProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_apigee_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   633,
			NumExtensions: 0,
			NumServices:   90,
		},
		GoTypes:           file_mockgcp_cloud_apigee_v1_service_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_apigee_v1_service_proto_depIdxs,
		MessageInfos:      file_mockgcp_cloud_apigee_v1_service_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_apigee_v1_service_proto = out.File
	file_mockgcp_cloud_apigee_v1_service_proto_rawDesc = nil
	file_mockgcp_cloud_apigee_v1_service_proto_goTypes = nil
	file_mockgcp_cloud_apigee_v1_service_proto_depIdxs = nil
}
