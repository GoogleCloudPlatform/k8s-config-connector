// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/apigee/v1/service.proto

package apigeepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HybridServerClient is the client API for HybridServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HybridServerClient interface {
}

type hybridServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHybridServerClient(cc grpc.ClientConnInterface) HybridServerClient {
	return &hybridServerClient{cc}
}

// HybridServerServer is the server API for HybridServer service.
// All implementations must embed UnimplementedHybridServerServer
// for forward compatibility
type HybridServerServer interface {
	mustEmbedUnimplementedHybridServerServer()
}

// UnimplementedHybridServerServer must be embedded to have forward compatible implementations.
type UnimplementedHybridServerServer struct {
}

func (UnimplementedHybridServerServer) mustEmbedUnimplementedHybridServerServer() {}

// UnsafeHybridServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HybridServerServer will
// result in compilation errors.
type UnsafeHybridServerServer interface {
	mustEmbedUnimplementedHybridServerServer()
}

func RegisterHybridServerServer(s grpc.ServiceRegistrar, srv HybridServerServer) {
	s.RegisterService(&HybridServer_ServiceDesc, srv)
}

// HybridServer_ServiceDesc is the grpc.ServiceDesc for HybridServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HybridServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.HybridServer",
	HandlerType: (*HybridServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// HybridIssuersServerClient is the client API for HybridIssuersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HybridIssuersServerClient interface {
	// Lists hybrid services and its trusted issuers service account ids. This api is authenticated and unauthorized(allow all the users) and used by runtime authn-authz service to query control plane's issuer service account ids.
	ListHybridIssuers(ctx context.Context, in *ListHybridIssuersRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListHybridIssuersResponse, error)
}

type hybridIssuersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHybridIssuersServerClient(cc grpc.ClientConnInterface) HybridIssuersServerClient {
	return &hybridIssuersServerClient{cc}
}

func (c *hybridIssuersServerClient) ListHybridIssuers(ctx context.Context, in *ListHybridIssuersRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListHybridIssuersResponse, error) {
	out := new(GoogleCloudApigeeV1ListHybridIssuersResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.HybridIssuersServer/ListHybridIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HybridIssuersServerServer is the server API for HybridIssuersServer service.
// All implementations must embed UnimplementedHybridIssuersServerServer
// for forward compatibility
type HybridIssuersServerServer interface {
	// Lists hybrid services and its trusted issuers service account ids. This api is authenticated and unauthorized(allow all the users) and used by runtime authn-authz service to query control plane's issuer service account ids.
	ListHybridIssuers(context.Context, *ListHybridIssuersRequest) (*GoogleCloudApigeeV1ListHybridIssuersResponse, error)
	mustEmbedUnimplementedHybridIssuersServerServer()
}

// UnimplementedHybridIssuersServerServer must be embedded to have forward compatible implementations.
type UnimplementedHybridIssuersServerServer struct {
}

func (UnimplementedHybridIssuersServerServer) ListHybridIssuers(context.Context, *ListHybridIssuersRequest) (*GoogleCloudApigeeV1ListHybridIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHybridIssuers not implemented")
}
func (UnimplementedHybridIssuersServerServer) mustEmbedUnimplementedHybridIssuersServerServer() {}

// UnsafeHybridIssuersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HybridIssuersServerServer will
// result in compilation errors.
type UnsafeHybridIssuersServerServer interface {
	mustEmbedUnimplementedHybridIssuersServerServer()
}

func RegisterHybridIssuersServerServer(s grpc.ServiceRegistrar, srv HybridIssuersServerServer) {
	s.RegisterService(&HybridIssuersServer_ServiceDesc, srv)
}

func _HybridIssuersServer_ListHybridIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHybridIssuersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HybridIssuersServerServer).ListHybridIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.HybridIssuersServer/ListHybridIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HybridIssuersServerServer).ListHybridIssuers(ctx, req.(*ListHybridIssuersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HybridIssuersServer_ServiceDesc is the grpc.ServiceDesc for HybridIssuersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HybridIssuersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.HybridIssuersServer",
	HandlerType: (*HybridIssuersServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHybridIssuers",
			Handler:    _HybridIssuersServer_ListHybridIssuers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsServerClient is the client API for OrganizationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsServerClient interface {
	// Creates an Apigee organization. See [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Delete an Apigee organization. For organizations with BillingType EVALUATION, an immediate deletion is performed. For paid organizations (Subscription or Pay-as-you-go), a soft-deletion is performed. The organization can be restored within the soft-deletion period, which is specified using the `retention` field in the request or by filing a support ticket with Apigee. During the data retention period specified in the request, the Apigee organization cannot be recreated in the same Google Cloud project. **IMPORTANT: The default data retention setting for this operation is 7 days. To permanently delete the organization in 24 hours, set the retention parameter to `MINIMUM`.**
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the profile for an Apigee organization. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Organization, error)
	// Lists the service accounts allowed to access Apigee control plane directly for limited functionality. **Note**: Available to Apigee hybrid only.
	GetControlPlaneAccessOrganization(ctx context.Context, in *GetControlPlaneAccessOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ControlPlaneAccess, error)
	// Gets the deployed ingress configuration for an organization.
	GetDeployedIngressConfigOrganization(ctx context.Context, in *GetDeployedIngressConfigOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1IngressConfig, error)
	// Gets the project ID and region for an Apigee organization.
	GetProjectMappingOrganization(ctx context.Context, in *GetProjectMappingOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OrganizationProjectMapping, error)
	// Get runtime config for an organization.
	GetRuntimeConfigOrganization(ctx context.Context, in *GetRuntimeConfigOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RuntimeConfig, error)
	// GetSecuritySettings gets the security settings for API Security.
	GetSecuritySettingsOrganization(ctx context.Context, in *GetSecuritySettingsOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecuritySettings, error)
	// Lists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane. An ETag is returned in the response to `getSyncAuthorization`. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
	GetSyncAuthorizationOrganization(ctx context.Context, in *GetSyncAuthorizationOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SyncAuthorization, error)
	// Lists the Apigee organizations and associated Google Cloud projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListOrganizationsResponse, error)
	// Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.
	SetAddonsOrganization(ctx context.Context, in *SetAddonsOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Sets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid. Pass the ETag when calling `setSyncAuthorization` to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
	SetSyncAuthorizationOrganization(ctx context.Context, in *SetSyncAuthorizationOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SyncAuthorization, error)
	// Updates the properties for an Apigee organization. No other fields in the organization profile will be updated.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Organization, error)
	// Updates the permissions required to allow Apigee runtime-plane components access to the control plane. Currently, the permissions required are to: 1. Allow runtime components to publish analytics data to the control plane. **Note**: Available to Apigee hybrid only.
	UpdateControlPlaneAccessOrganization(ctx context.Context, in *UpdateControlPlaneAccessOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// UpdateSecuritySettings updates the current security settings for API Security.
	UpdateSecuritySettingsOrganization(ctx context.Context, in *UpdateSecuritySettingsOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecuritySettings, error)
}

type organizationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsServerClient(cc grpc.ClientConnInterface) OrganizationsServerClient {
	return &organizationsServerClient{cc}
}

func (c *organizationsServerClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Organization, error) {
	out := new(GoogleCloudApigeeV1Organization)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetControlPlaneAccessOrganization(ctx context.Context, in *GetControlPlaneAccessOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ControlPlaneAccess, error) {
	out := new(GoogleCloudApigeeV1ControlPlaneAccess)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetControlPlaneAccessOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetDeployedIngressConfigOrganization(ctx context.Context, in *GetDeployedIngressConfigOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1IngressConfig, error) {
	out := new(GoogleCloudApigeeV1IngressConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetDeployedIngressConfigOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetProjectMappingOrganization(ctx context.Context, in *GetProjectMappingOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OrganizationProjectMapping, error) {
	out := new(GoogleCloudApigeeV1OrganizationProjectMapping)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetProjectMappingOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetRuntimeConfigOrganization(ctx context.Context, in *GetRuntimeConfigOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RuntimeConfig, error) {
	out := new(GoogleCloudApigeeV1RuntimeConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetRuntimeConfigOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetSecuritySettingsOrganization(ctx context.Context, in *GetSecuritySettingsOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecuritySettings, error) {
	out := new(GoogleCloudApigeeV1SecuritySettings)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSecuritySettingsOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) GetSyncAuthorizationOrganization(ctx context.Context, in *GetSyncAuthorizationOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SyncAuthorization, error) {
	out := new(GoogleCloudApigeeV1SyncAuthorization)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSyncAuthorizationOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListOrganizationsResponse, error) {
	out := new(GoogleCloudApigeeV1ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) SetAddonsOrganization(ctx context.Context, in *SetAddonsOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetAddonsOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) SetSyncAuthorizationOrganization(ctx context.Context, in *SetSyncAuthorizationOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SyncAuthorization, error) {
	out := new(GoogleCloudApigeeV1SyncAuthorization)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetSyncAuthorizationOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Organization, error) {
	out := new(GoogleCloudApigeeV1Organization)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) UpdateControlPlaneAccessOrganization(ctx context.Context, in *UpdateControlPlaneAccessOrganizationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateControlPlaneAccessOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServerClient) UpdateSecuritySettingsOrganization(ctx context.Context, in *UpdateSecuritySettingsOrganizationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecuritySettings, error) {
	out := new(GoogleCloudApigeeV1SecuritySettings)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateSecuritySettingsOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsServerServer is the server API for OrganizationsServer service.
// All implementations must embed UnimplementedOrganizationsServerServer
// for forward compatibility
type OrganizationsServerServer interface {
	// Creates an Apigee organization. See [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*longrunningpb.Operation, error)
	// Delete an Apigee organization. For organizations with BillingType EVALUATION, an immediate deletion is performed. For paid organizations (Subscription or Pay-as-you-go), a soft-deletion is performed. The organization can be restored within the soft-deletion period, which is specified using the `retention` field in the request or by filing a support ticket with Apigee. During the data retention period specified in the request, the Apigee organization cannot be recreated in the same Google Cloud project. **IMPORTANT: The default data retention setting for this operation is 7 days. To permanently delete the organization in 24 hours, set the retention parameter to `MINIMUM`.**
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*longrunningpb.Operation, error)
	// Gets the profile for an Apigee organization. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
	GetOrganization(context.Context, *GetOrganizationRequest) (*GoogleCloudApigeeV1Organization, error)
	// Lists the service accounts allowed to access Apigee control plane directly for limited functionality. **Note**: Available to Apigee hybrid only.
	GetControlPlaneAccessOrganization(context.Context, *GetControlPlaneAccessOrganizationRequest) (*GoogleCloudApigeeV1ControlPlaneAccess, error)
	// Gets the deployed ingress configuration for an organization.
	GetDeployedIngressConfigOrganization(context.Context, *GetDeployedIngressConfigOrganizationRequest) (*GoogleCloudApigeeV1IngressConfig, error)
	// Gets the project ID and region for an Apigee organization.
	GetProjectMappingOrganization(context.Context, *GetProjectMappingOrganizationRequest) (*GoogleCloudApigeeV1OrganizationProjectMapping, error)
	// Get runtime config for an organization.
	GetRuntimeConfigOrganization(context.Context, *GetRuntimeConfigOrganizationRequest) (*GoogleCloudApigeeV1RuntimeConfig, error)
	// GetSecuritySettings gets the security settings for API Security.
	GetSecuritySettingsOrganization(context.Context, *GetSecuritySettingsOrganizationRequest) (*GoogleCloudApigeeV1SecuritySettings, error)
	// Lists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane. An ETag is returned in the response to `getSyncAuthorization`. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
	GetSyncAuthorizationOrganization(context.Context, *GetSyncAuthorizationOrganizationRequest) (*GoogleCloudApigeeV1SyncAuthorization, error)
	// Lists the Apigee organizations and associated Google Cloud projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*GoogleCloudApigeeV1ListOrganizationsResponse, error)
	// Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.
	SetAddonsOrganization(context.Context, *SetAddonsOrganizationRequest) (*longrunningpb.Operation, error)
	// Sets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid. Pass the ETag when calling `setSyncAuthorization` to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.
	SetSyncAuthorizationOrganization(context.Context, *SetSyncAuthorizationOrganizationRequest) (*GoogleCloudApigeeV1SyncAuthorization, error)
	// Updates the properties for an Apigee organization. No other fields in the organization profile will be updated.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*GoogleCloudApigeeV1Organization, error)
	// Updates the permissions required to allow Apigee runtime-plane components access to the control plane. Currently, the permissions required are to: 1. Allow runtime components to publish analytics data to the control plane. **Note**: Available to Apigee hybrid only.
	UpdateControlPlaneAccessOrganization(context.Context, *UpdateControlPlaneAccessOrganizationRequest) (*longrunningpb.Operation, error)
	// UpdateSecuritySettings updates the current security settings for API Security.
	UpdateSecuritySettingsOrganization(context.Context, *UpdateSecuritySettingsOrganizationRequest) (*GoogleCloudApigeeV1SecuritySettings, error)
	mustEmbedUnimplementedOrganizationsServerServer()
}

// UnimplementedOrganizationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsServerServer struct {
}

func (UnimplementedOrganizationsServerServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GoogleCloudApigeeV1Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetControlPlaneAccessOrganization(context.Context, *GetControlPlaneAccessOrganizationRequest) (*GoogleCloudApigeeV1ControlPlaneAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlPlaneAccessOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetDeployedIngressConfigOrganization(context.Context, *GetDeployedIngressConfigOrganizationRequest) (*GoogleCloudApigeeV1IngressConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedIngressConfigOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetProjectMappingOrganization(context.Context, *GetProjectMappingOrganizationRequest) (*GoogleCloudApigeeV1OrganizationProjectMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMappingOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetRuntimeConfigOrganization(context.Context, *GetRuntimeConfigOrganizationRequest) (*GoogleCloudApigeeV1RuntimeConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeConfigOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetSecuritySettingsOrganization(context.Context, *GetSecuritySettingsOrganizationRequest) (*GoogleCloudApigeeV1SecuritySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecuritySettingsOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) GetSyncAuthorizationOrganization(context.Context, *GetSyncAuthorizationOrganizationRequest) (*GoogleCloudApigeeV1SyncAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncAuthorizationOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*GoogleCloudApigeeV1ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedOrganizationsServerServer) SetAddonsOrganization(context.Context, *SetAddonsOrganizationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAddonsOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) SetSyncAuthorizationOrganization(context.Context, *SetSyncAuthorizationOrganizationRequest) (*GoogleCloudApigeeV1SyncAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSyncAuthorizationOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*GoogleCloudApigeeV1Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) UpdateControlPlaneAccessOrganization(context.Context, *UpdateControlPlaneAccessOrganizationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateControlPlaneAccessOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) UpdateSecuritySettingsOrganization(context.Context, *UpdateSecuritySettingsOrganizationRequest) (*GoogleCloudApigeeV1SecuritySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecuritySettingsOrganization not implemented")
}
func (UnimplementedOrganizationsServerServer) mustEmbedUnimplementedOrganizationsServerServer() {}

// UnsafeOrganizationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsServerServer will
// result in compilation errors.
type UnsafeOrganizationsServerServer interface {
	mustEmbedUnimplementedOrganizationsServerServer()
}

func RegisterOrganizationsServerServer(s grpc.ServiceRegistrar, srv OrganizationsServerServer) {
	s.RegisterService(&OrganizationsServer_ServiceDesc, srv)
}

func _OrganizationsServer_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetControlPlaneAccessOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlPlaneAccessOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetControlPlaneAccessOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetControlPlaneAccessOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetControlPlaneAccessOrganization(ctx, req.(*GetControlPlaneAccessOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetDeployedIngressConfigOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployedIngressConfigOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetDeployedIngressConfigOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetDeployedIngressConfigOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetDeployedIngressConfigOrganization(ctx, req.(*GetDeployedIngressConfigOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetProjectMappingOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMappingOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetProjectMappingOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetProjectMappingOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetProjectMappingOrganization(ctx, req.(*GetProjectMappingOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetRuntimeConfigOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuntimeConfigOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetRuntimeConfigOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetRuntimeConfigOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetRuntimeConfigOrganization(ctx, req.(*GetRuntimeConfigOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetSecuritySettingsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecuritySettingsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetSecuritySettingsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSecuritySettingsOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetSecuritySettingsOrganization(ctx, req.(*GetSecuritySettingsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_GetSyncAuthorizationOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncAuthorizationOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).GetSyncAuthorizationOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSyncAuthorizationOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).GetSyncAuthorizationOrganization(ctx, req.(*GetSyncAuthorizationOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_SetAddonsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAddonsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).SetAddonsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetAddonsOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).SetAddonsOrganization(ctx, req.(*SetAddonsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_SetSyncAuthorizationOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSyncAuthorizationOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).SetSyncAuthorizationOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetSyncAuthorizationOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).SetSyncAuthorizationOrganization(ctx, req.(*SetSyncAuthorizationOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_UpdateControlPlaneAccessOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateControlPlaneAccessOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).UpdateControlPlaneAccessOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateControlPlaneAccessOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).UpdateControlPlaneAccessOrganization(ctx, req.(*UpdateControlPlaneAccessOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsServer_UpdateSecuritySettingsOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecuritySettingsOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServerServer).UpdateSecuritySettingsOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateSecuritySettingsOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServerServer).UpdateSecuritySettingsOrganization(ctx, req.(*UpdateSecuritySettingsOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsServer",
	HandlerType: (*OrganizationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationsServer_CreateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationsServer_DeleteOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationsServer_GetOrganization_Handler,
		},
		{
			MethodName: "GetControlPlaneAccessOrganization",
			Handler:    _OrganizationsServer_GetControlPlaneAccessOrganization_Handler,
		},
		{
			MethodName: "GetDeployedIngressConfigOrganization",
			Handler:    _OrganizationsServer_GetDeployedIngressConfigOrganization_Handler,
		},
		{
			MethodName: "GetProjectMappingOrganization",
			Handler:    _OrganizationsServer_GetProjectMappingOrganization_Handler,
		},
		{
			MethodName: "GetRuntimeConfigOrganization",
			Handler:    _OrganizationsServer_GetRuntimeConfigOrganization_Handler,
		},
		{
			MethodName: "GetSecuritySettingsOrganization",
			Handler:    _OrganizationsServer_GetSecuritySettingsOrganization_Handler,
		},
		{
			MethodName: "GetSyncAuthorizationOrganization",
			Handler:    _OrganizationsServer_GetSyncAuthorizationOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _OrganizationsServer_ListOrganizations_Handler,
		},
		{
			MethodName: "SetAddonsOrganization",
			Handler:    _OrganizationsServer_SetAddonsOrganization_Handler,
		},
		{
			MethodName: "SetSyncAuthorizationOrganization",
			Handler:    _OrganizationsServer_SetSyncAuthorizationOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationsServer_UpdateOrganization_Handler,
		},
		{
			MethodName: "UpdateControlPlaneAccessOrganization",
			Handler:    _OrganizationsServer_UpdateControlPlaneAccessOrganization_Handler,
		},
		{
			MethodName: "UpdateSecuritySettingsOrganization",
			Handler:    _OrganizationsServer_UpdateSecuritySettingsOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAnalyticsServerClient is the client API for OrganizationsAnalyticsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAnalyticsServerClient interface {
}

type organizationsAnalyticsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAnalyticsServerClient(cc grpc.ClientConnInterface) OrganizationsAnalyticsServerClient {
	return &organizationsAnalyticsServerClient{cc}
}

// OrganizationsAnalyticsServerServer is the server API for OrganizationsAnalyticsServer service.
// All implementations must embed UnimplementedOrganizationsAnalyticsServerServer
// for forward compatibility
type OrganizationsAnalyticsServerServer interface {
	mustEmbedUnimplementedOrganizationsAnalyticsServerServer()
}

// UnimplementedOrganizationsAnalyticsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAnalyticsServerServer struct {
}

func (UnimplementedOrganizationsAnalyticsServerServer) mustEmbedUnimplementedOrganizationsAnalyticsServerServer() {
}

// UnsafeOrganizationsAnalyticsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAnalyticsServerServer will
// result in compilation errors.
type UnsafeOrganizationsAnalyticsServerServer interface {
	mustEmbedUnimplementedOrganizationsAnalyticsServerServer()
}

func RegisterOrganizationsAnalyticsServerServer(s grpc.ServiceRegistrar, srv OrganizationsAnalyticsServerServer) {
	s.RegisterService(&OrganizationsAnalyticsServer_ServiceDesc, srv)
}

// OrganizationsAnalyticsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAnalyticsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAnalyticsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAnalyticsServer",
	HandlerType: (*OrganizationsAnalyticsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAnalyticsDatastoresServerClient is the client API for OrganizationsAnalyticsDatastoresServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAnalyticsDatastoresServerClient interface {
	// Create a Datastore for an org
	CreateOrganizationsAnalyticsDatastore(ctx context.Context, in *CreateOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error)
	// Delete a Datastore from an org.
	DeleteOrganizationsAnalyticsDatastore(ctx context.Context, in *DeleteOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Get a Datastore
	GetOrganizationsAnalyticsDatastore(ctx context.Context, in *GetOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error)
	// List Datastores
	ListOrganizationsAnalyticsDatastores(ctx context.Context, in *ListOrganizationsAnalyticsDatastoresRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDatastoresResponse, error)
	// Test if Datastore configuration is correct. This includes checking if credentials provided by customer have required permissions in target destination storage
	TestOrganizationsAnalyticsDatastore(ctx context.Context, in *TestOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TestDatastoreResponse, error)
	// Update a Datastore
	UpdateOrganizationsAnalyticsDatastore(ctx context.Context, in *UpdateOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error)
}

type organizationsAnalyticsDatastoresServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAnalyticsDatastoresServerClient(cc grpc.ClientConnInterface) OrganizationsAnalyticsDatastoresServerClient {
	return &organizationsAnalyticsDatastoresServerClient{cc}
}

func (c *organizationsAnalyticsDatastoresServerClient) CreateOrganizationsAnalyticsDatastore(ctx context.Context, in *CreateOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error) {
	out := new(GoogleCloudApigeeV1Datastore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/CreateOrganizationsAnalyticsDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAnalyticsDatastoresServerClient) DeleteOrganizationsAnalyticsDatastore(ctx context.Context, in *DeleteOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/DeleteOrganizationsAnalyticsDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAnalyticsDatastoresServerClient) GetOrganizationsAnalyticsDatastore(ctx context.Context, in *GetOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error) {
	out := new(GoogleCloudApigeeV1Datastore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/GetOrganizationsAnalyticsDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAnalyticsDatastoresServerClient) ListOrganizationsAnalyticsDatastores(ctx context.Context, in *ListOrganizationsAnalyticsDatastoresRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDatastoresResponse, error) {
	out := new(GoogleCloudApigeeV1ListDatastoresResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/ListOrganizationsAnalyticsDatastores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAnalyticsDatastoresServerClient) TestOrganizationsAnalyticsDatastore(ctx context.Context, in *TestOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TestDatastoreResponse, error) {
	out := new(GoogleCloudApigeeV1TestDatastoreResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/TestOrganizationsAnalyticsDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAnalyticsDatastoresServerClient) UpdateOrganizationsAnalyticsDatastore(ctx context.Context, in *UpdateOrganizationsAnalyticsDatastoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Datastore, error) {
	out := new(GoogleCloudApigeeV1Datastore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/UpdateOrganizationsAnalyticsDatastore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAnalyticsDatastoresServerServer is the server API for OrganizationsAnalyticsDatastoresServer service.
// All implementations must embed UnimplementedOrganizationsAnalyticsDatastoresServerServer
// for forward compatibility
type OrganizationsAnalyticsDatastoresServerServer interface {
	// Create a Datastore for an org
	CreateOrganizationsAnalyticsDatastore(context.Context, *CreateOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error)
	// Delete a Datastore from an org.
	DeleteOrganizationsAnalyticsDatastore(context.Context, *DeleteOrganizationsAnalyticsDatastoreRequest) (*GoogleProtobufEmpty, error)
	// Get a Datastore
	GetOrganizationsAnalyticsDatastore(context.Context, *GetOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error)
	// List Datastores
	ListOrganizationsAnalyticsDatastores(context.Context, *ListOrganizationsAnalyticsDatastoresRequest) (*GoogleCloudApigeeV1ListDatastoresResponse, error)
	// Test if Datastore configuration is correct. This includes checking if credentials provided by customer have required permissions in target destination storage
	TestOrganizationsAnalyticsDatastore(context.Context, *TestOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1TestDatastoreResponse, error)
	// Update a Datastore
	UpdateOrganizationsAnalyticsDatastore(context.Context, *UpdateOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error)
	mustEmbedUnimplementedOrganizationsAnalyticsDatastoresServerServer()
}

// UnimplementedOrganizationsAnalyticsDatastoresServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAnalyticsDatastoresServerServer struct {
}

func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) CreateOrganizationsAnalyticsDatastore(context.Context, *CreateOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsAnalyticsDatastore not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) DeleteOrganizationsAnalyticsDatastore(context.Context, *DeleteOrganizationsAnalyticsDatastoreRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsAnalyticsDatastore not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) GetOrganizationsAnalyticsDatastore(context.Context, *GetOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsAnalyticsDatastore not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) ListOrganizationsAnalyticsDatastores(context.Context, *ListOrganizationsAnalyticsDatastoresRequest) (*GoogleCloudApigeeV1ListDatastoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsAnalyticsDatastores not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) TestOrganizationsAnalyticsDatastore(context.Context, *TestOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1TestDatastoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestOrganizationsAnalyticsDatastore not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) UpdateOrganizationsAnalyticsDatastore(context.Context, *UpdateOrganizationsAnalyticsDatastoreRequest) (*GoogleCloudApigeeV1Datastore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsAnalyticsDatastore not implemented")
}
func (UnimplementedOrganizationsAnalyticsDatastoresServerServer) mustEmbedUnimplementedOrganizationsAnalyticsDatastoresServerServer() {
}

// UnsafeOrganizationsAnalyticsDatastoresServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAnalyticsDatastoresServerServer will
// result in compilation errors.
type UnsafeOrganizationsAnalyticsDatastoresServerServer interface {
	mustEmbedUnimplementedOrganizationsAnalyticsDatastoresServerServer()
}

func RegisterOrganizationsAnalyticsDatastoresServerServer(s grpc.ServiceRegistrar, srv OrganizationsAnalyticsDatastoresServerServer) {
	s.RegisterService(&OrganizationsAnalyticsDatastoresServer_ServiceDesc, srv)
}

func _OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsAnalyticsDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).CreateOrganizationsAnalyticsDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/CreateOrganizationsAnalyticsDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).CreateOrganizationsAnalyticsDatastore(ctx, req.(*CreateOrganizationsAnalyticsDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsAnalyticsDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).DeleteOrganizationsAnalyticsDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/DeleteOrganizationsAnalyticsDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).DeleteOrganizationsAnalyticsDatastore(ctx, req.(*DeleteOrganizationsAnalyticsDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsAnalyticsDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).GetOrganizationsAnalyticsDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/GetOrganizationsAnalyticsDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).GetOrganizationsAnalyticsDatastore(ctx, req.(*GetOrganizationsAnalyticsDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsAnalyticsDatastoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).ListOrganizationsAnalyticsDatastores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/ListOrganizationsAnalyticsDatastores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).ListOrganizationsAnalyticsDatastores(ctx, req.(*ListOrganizationsAnalyticsDatastoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestOrganizationsAnalyticsDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).TestOrganizationsAnalyticsDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/TestOrganizationsAnalyticsDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).TestOrganizationsAnalyticsDatastore(ctx, req.(*TestOrganizationsAnalyticsDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsAnalyticsDatastoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).UpdateOrganizationsAnalyticsDatastore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/UpdateOrganizationsAnalyticsDatastore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAnalyticsDatastoresServerServer).UpdateOrganizationsAnalyticsDatastore(ctx, req.(*UpdateOrganizationsAnalyticsDatastoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAnalyticsDatastoresServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAnalyticsDatastoresServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAnalyticsDatastoresServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer",
	HandlerType: (*OrganizationsAnalyticsDatastoresServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsAnalyticsDatastore",
			Handler:    _OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_Handler,
		},
		{
			MethodName: "DeleteOrganizationsAnalyticsDatastore",
			Handler:    _OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_Handler,
		},
		{
			MethodName: "GetOrganizationsAnalyticsDatastore",
			Handler:    _OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_Handler,
		},
		{
			MethodName: "ListOrganizationsAnalyticsDatastores",
			Handler:    _OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_Handler,
		},
		{
			MethodName: "TestOrganizationsAnalyticsDatastore",
			Handler:    _OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_Handler,
		},
		{
			MethodName: "UpdateOrganizationsAnalyticsDatastore",
			Handler:    _OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApiproductsServerClient is the client API for OrganizationsApiproductsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApiproductsServerClient interface {
	// Updates or creates API product attributes. This API **replaces** the current list of attributes with the attributes specified in the request body. In this way, you can update existing attributes, add new attributes, or delete existing attributes by omitting them from the request body. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	AttributesOrganizationsApiproduct(ctx context.Context, in *AttributesOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include: - Scope - Environments - API proxies - Extensible profile API products enable you repackage APIs on the fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs. After you have authentication and authorization working against a simple API product, you can iterate to create finer-grained API products, defining different sets of API resources for each API product. **WARNING:** - If you don't specify an API proxy in the request body, *any* app associated with the product can make calls to *any* API in your entire organization. - If you don't specify an environment in the request body, the product allows access to all environments. For more information, see What is an API product?
	CreateOrganizationsApiproduct(ctx context.Context, in *CreateOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error)
	// Deletes an API product from an organization. Deleting an API product causes app requests to the resource URIs defined in the API product to fail. Ensure that you create a new API product to serve existing apps, unless your intention is to disable access to the resources defined in the API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
	DeleteOrganizationsApiproduct(ctx context.Context, in *DeleteOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error)
	// Gets configuration details for an API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
	GetOrganizationsApiproduct(ctx context.Context, in *GetOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error)
	// Lists all API product names for an organization. Filter the list by passing an `attributename` and `attibutevalue`. The maximum number of API products returned is 1000. You can paginate the list of API products returned using the `startKey` and `count` query parameters.
	ListOrganizationsApiproducts(ctx context.Context, in *ListOrganizationsApiproductsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiProductsResponse, error)
	// Updates an existing API product. You must include all required values, whether or not you are updating them, as well as any optional values that you are updating. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via UI or API. View the list of API products to identify their internal names.
	UpdateOrganizationsApiproduct(ctx context.Context, in *UpdateOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error)
}

type organizationsApiproductsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApiproductsServerClient(cc grpc.ClientConnInterface) OrganizationsApiproductsServerClient {
	return &organizationsApiproductsServerClient{cc}
}

func (c *organizationsApiproductsServerClient) AttributesOrganizationsApiproduct(ctx context.Context, in *AttributesOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/AttributesOrganizationsApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsServerClient) CreateOrganizationsApiproduct(ctx context.Context, in *CreateOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error) {
	out := new(GoogleCloudApigeeV1ApiProduct)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/CreateOrganizationsApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsServerClient) DeleteOrganizationsApiproduct(ctx context.Context, in *DeleteOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error) {
	out := new(GoogleCloudApigeeV1ApiProduct)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/DeleteOrganizationsApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsServerClient) GetOrganizationsApiproduct(ctx context.Context, in *GetOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error) {
	out := new(GoogleCloudApigeeV1ApiProduct)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/GetOrganizationsApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsServerClient) ListOrganizationsApiproducts(ctx context.Context, in *ListOrganizationsApiproductsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiProductsResponse, error) {
	out := new(GoogleCloudApigeeV1ListApiProductsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/ListOrganizationsApiproducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsServerClient) UpdateOrganizationsApiproduct(ctx context.Context, in *UpdateOrganizationsApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProduct, error) {
	out := new(GoogleCloudApigeeV1ApiProduct)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/UpdateOrganizationsApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApiproductsServerServer is the server API for OrganizationsApiproductsServer service.
// All implementations must embed UnimplementedOrganizationsApiproductsServerServer
// for forward compatibility
type OrganizationsApiproductsServerServer interface {
	// Updates or creates API product attributes. This API **replaces** the current list of attributes with the attributes specified in the request body. In this way, you can update existing attributes, add new attributes, or delete existing attributes by omitting them from the request body. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	AttributesOrganizationsApiproduct(context.Context, *AttributesOrganizationsApiproductRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include: - Scope - Environments - API proxies - Extensible profile API products enable you repackage APIs on the fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs. After you have authentication and authorization working against a simple API product, you can iterate to create finer-grained API products, defining different sets of API resources for each API product. **WARNING:** - If you don't specify an API proxy in the request body, *any* app associated with the product can make calls to *any* API in your entire organization. - If you don't specify an environment in the request body, the product allows access to all environments. For more information, see What is an API product?
	CreateOrganizationsApiproduct(context.Context, *CreateOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error)
	// Deletes an API product from an organization. Deleting an API product causes app requests to the resource URIs defined in the API product to fail. Ensure that you create a new API product to serve existing apps, unless your intention is to disable access to the resources defined in the API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
	DeleteOrganizationsApiproduct(context.Context, *DeleteOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error)
	// Gets configuration details for an API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.
	GetOrganizationsApiproduct(context.Context, *GetOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error)
	// Lists all API product names for an organization. Filter the list by passing an `attributename` and `attibutevalue`. The maximum number of API products returned is 1000. You can paginate the list of API products returned using the `startKey` and `count` query parameters.
	ListOrganizationsApiproducts(context.Context, *ListOrganizationsApiproductsRequest) (*GoogleCloudApigeeV1ListApiProductsResponse, error)
	// Updates an existing API product. You must include all required values, whether or not you are updating them, as well as any optional values that you are updating. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via UI or API. View the list of API products to identify their internal names.
	UpdateOrganizationsApiproduct(context.Context, *UpdateOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error)
	mustEmbedUnimplementedOrganizationsApiproductsServerServer()
}

// UnimplementedOrganizationsApiproductsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApiproductsServerServer struct {
}

func (UnimplementedOrganizationsApiproductsServerServer) AttributesOrganizationsApiproduct(context.Context, *AttributesOrganizationsApiproductRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributesOrganizationsApiproduct not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) CreateOrganizationsApiproduct(context.Context, *CreateOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsApiproduct not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) DeleteOrganizationsApiproduct(context.Context, *DeleteOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApiproduct not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) GetOrganizationsApiproduct(context.Context, *GetOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApiproduct not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) ListOrganizationsApiproducts(context.Context, *ListOrganizationsApiproductsRequest) (*GoogleCloudApigeeV1ListApiProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApiproducts not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) UpdateOrganizationsApiproduct(context.Context, *UpdateOrganizationsApiproductRequest) (*GoogleCloudApigeeV1ApiProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsApiproduct not implemented")
}
func (UnimplementedOrganizationsApiproductsServerServer) mustEmbedUnimplementedOrganizationsApiproductsServerServer() {
}

// UnsafeOrganizationsApiproductsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApiproductsServerServer will
// result in compilation errors.
type UnsafeOrganizationsApiproductsServerServer interface {
	mustEmbedUnimplementedOrganizationsApiproductsServerServer()
}

func RegisterOrganizationsApiproductsServerServer(s grpc.ServiceRegistrar, srv OrganizationsApiproductsServerServer) {
	s.RegisterService(&OrganizationsApiproductsServer_ServiceDesc, srv)
}

func _OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributesOrganizationsApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).AttributesOrganizationsApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/AttributesOrganizationsApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).AttributesOrganizationsApiproduct(ctx, req.(*AttributesOrganizationsApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsServer_CreateOrganizationsApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).CreateOrganizationsApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/CreateOrganizationsApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).CreateOrganizationsApiproduct(ctx, req.(*CreateOrganizationsApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).DeleteOrganizationsApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/DeleteOrganizationsApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).DeleteOrganizationsApiproduct(ctx, req.(*DeleteOrganizationsApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsServer_GetOrganizationsApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).GetOrganizationsApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/GetOrganizationsApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).GetOrganizationsApiproduct(ctx, req.(*GetOrganizationsApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsServer_ListOrganizationsApiproducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApiproductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).ListOrganizationsApiproducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/ListOrganizationsApiproducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).ListOrganizationsApiproducts(ctx, req.(*ListOrganizationsApiproductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsServerServer).UpdateOrganizationsApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/UpdateOrganizationsApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsServerServer).UpdateOrganizationsApiproduct(ctx, req.(*UpdateOrganizationsApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApiproductsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApiproductsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApiproductsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer",
	HandlerType: (*OrganizationsApiproductsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttributesOrganizationsApiproduct",
			Handler:    _OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_Handler,
		},
		{
			MethodName: "CreateOrganizationsApiproduct",
			Handler:    _OrganizationsApiproductsServer_CreateOrganizationsApiproduct_Handler,
		},
		{
			MethodName: "DeleteOrganizationsApiproduct",
			Handler:    _OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_Handler,
		},
		{
			MethodName: "GetOrganizationsApiproduct",
			Handler:    _OrganizationsApiproductsServer_GetOrganizationsApiproduct_Handler,
		},
		{
			MethodName: "ListOrganizationsApiproducts",
			Handler:    _OrganizationsApiproductsServer_ListOrganizationsApiproducts_Handler,
		},
		{
			MethodName: "UpdateOrganizationsApiproduct",
			Handler:    _OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApiproductsAttributesServerClient is the client API for OrganizationsApiproductsAttributesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApiproductsAttributesServerClient interface {
	// Deletes an API product attribute.
	DeleteOrganizationsApiproductsAttribute(ctx context.Context, in *DeleteOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Gets the value of an API product attribute.
	GetOrganizationsApiproductsAttribute(ctx context.Context, in *GetOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Lists all API product attributes.
	ListOrganizationsApiproductsAttributes(ctx context.Context, in *ListOrganizationsApiproductsAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Updates the value of an API product attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx context.Context, in *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
}

type organizationsApiproductsAttributesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApiproductsAttributesServerClient(cc grpc.ClientConnInterface) OrganizationsApiproductsAttributesServerClient {
	return &organizationsApiproductsAttributesServerClient{cc}
}

func (c *organizationsApiproductsAttributesServerClient) DeleteOrganizationsApiproductsAttribute(ctx context.Context, in *DeleteOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/DeleteOrganizationsApiproductsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsAttributesServerClient) GetOrganizationsApiproductsAttribute(ctx context.Context, in *GetOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/GetOrganizationsApiproductsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsAttributesServerClient) ListOrganizationsApiproductsAttributes(ctx context.Context, in *ListOrganizationsApiproductsAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/ListOrganizationsApiproductsAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsAttributesServerClient) UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx context.Context, in *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/UpdateApiProductAttributeOrganizationsApiproductsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApiproductsAttributesServerServer is the server API for OrganizationsApiproductsAttributesServer service.
// All implementations must embed UnimplementedOrganizationsApiproductsAttributesServerServer
// for forward compatibility
type OrganizationsApiproductsAttributesServerServer interface {
	// Deletes an API product attribute.
	DeleteOrganizationsApiproductsAttribute(context.Context, *DeleteOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Gets the value of an API product attribute.
	GetOrganizationsApiproductsAttribute(context.Context, *GetOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Lists all API product attributes.
	ListOrganizationsApiproductsAttributes(context.Context, *ListOrganizationsApiproductsAttributesRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Updates the value of an API product attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateApiProductAttributeOrganizationsApiproductsAttribute(context.Context, *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	mustEmbedUnimplementedOrganizationsApiproductsAttributesServerServer()
}

// UnimplementedOrganizationsApiproductsAttributesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApiproductsAttributesServerServer struct {
}

func (UnimplementedOrganizationsApiproductsAttributesServerServer) DeleteOrganizationsApiproductsAttribute(context.Context, *DeleteOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApiproductsAttribute not implemented")
}
func (UnimplementedOrganizationsApiproductsAttributesServerServer) GetOrganizationsApiproductsAttribute(context.Context, *GetOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApiproductsAttribute not implemented")
}
func (UnimplementedOrganizationsApiproductsAttributesServerServer) ListOrganizationsApiproductsAttributes(context.Context, *ListOrganizationsApiproductsAttributesRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApiproductsAttributes not implemented")
}
func (UnimplementedOrganizationsApiproductsAttributesServerServer) UpdateApiProductAttributeOrganizationsApiproductsAttribute(context.Context, *UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiProductAttributeOrganizationsApiproductsAttribute not implemented")
}
func (UnimplementedOrganizationsApiproductsAttributesServerServer) mustEmbedUnimplementedOrganizationsApiproductsAttributesServerServer() {
}

// UnsafeOrganizationsApiproductsAttributesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApiproductsAttributesServerServer will
// result in compilation errors.
type UnsafeOrganizationsApiproductsAttributesServerServer interface {
	mustEmbedUnimplementedOrganizationsApiproductsAttributesServerServer()
}

func RegisterOrganizationsApiproductsAttributesServerServer(s grpc.ServiceRegistrar, srv OrganizationsApiproductsAttributesServerServer) {
	s.RegisterService(&OrganizationsApiproductsAttributesServer_ServiceDesc, srv)
}

func _OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApiproductsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsAttributesServerServer).DeleteOrganizationsApiproductsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/DeleteOrganizationsApiproductsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsAttributesServerServer).DeleteOrganizationsApiproductsAttribute(ctx, req.(*DeleteOrganizationsApiproductsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApiproductsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsAttributesServerServer).GetOrganizationsApiproductsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/GetOrganizationsApiproductsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsAttributesServerServer).GetOrganizationsApiproductsAttribute(ctx, req.(*GetOrganizationsApiproductsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApiproductsAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsAttributesServerServer).ListOrganizationsApiproductsAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/ListOrganizationsApiproductsAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsAttributesServerServer).ListOrganizationsApiproductsAttributes(ctx, req.(*ListOrganizationsApiproductsAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsAttributesServerServer).UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/UpdateApiProductAttributeOrganizationsApiproductsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsAttributesServerServer).UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx, req.(*UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApiproductsAttributesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApiproductsAttributesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApiproductsAttributesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer",
	HandlerType: (*OrganizationsApiproductsAttributesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsApiproductsAttribute",
			Handler:    _OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_Handler,
		},
		{
			MethodName: "GetOrganizationsApiproductsAttribute",
			Handler:    _OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_Handler,
		},
		{
			MethodName: "ListOrganizationsApiproductsAttributes",
			Handler:    _OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_Handler,
		},
		{
			MethodName: "UpdateApiProductAttributeOrganizationsApiproductsAttribute",
			Handler:    _OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApiproductsRateplansServerClient is the client API for OrganizationsApiproductsRateplansServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApiproductsRateplansServerClient interface {
	// Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.
	CreateOrganizationsApiproductsRateplan(ctx context.Context, in *CreateOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error)
	// Deletes a rate plan.
	DeleteOrganizationsApiproductsRateplan(ctx context.Context, in *DeleteOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error)
	// Gets the details of a rate plan.
	GetOrganizationsApiproductsRateplan(ctx context.Context, in *GetOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error)
	// Lists all the rate plans for an API product.
	ListOrganizationsApiproductsRateplans(ctx context.Context, in *ListOrganizationsApiproductsRateplansRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListRatePlansResponse, error)
	// Updates an existing rate plan.
	UpdateOrganizationsApiproductsRateplan(ctx context.Context, in *UpdateOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error)
}

type organizationsApiproductsRateplansServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApiproductsRateplansServerClient(cc grpc.ClientConnInterface) OrganizationsApiproductsRateplansServerClient {
	return &organizationsApiproductsRateplansServerClient{cc}
}

func (c *organizationsApiproductsRateplansServerClient) CreateOrganizationsApiproductsRateplan(ctx context.Context, in *CreateOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error) {
	out := new(GoogleCloudApigeeV1RatePlan)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/CreateOrganizationsApiproductsRateplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsRateplansServerClient) DeleteOrganizationsApiproductsRateplan(ctx context.Context, in *DeleteOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error) {
	out := new(GoogleCloudApigeeV1RatePlan)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/DeleteOrganizationsApiproductsRateplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsRateplansServerClient) GetOrganizationsApiproductsRateplan(ctx context.Context, in *GetOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error) {
	out := new(GoogleCloudApigeeV1RatePlan)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/GetOrganizationsApiproductsRateplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsRateplansServerClient) ListOrganizationsApiproductsRateplans(ctx context.Context, in *ListOrganizationsApiproductsRateplansRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListRatePlansResponse, error) {
	out := new(GoogleCloudApigeeV1ListRatePlansResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/ListOrganizationsApiproductsRateplans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApiproductsRateplansServerClient) UpdateOrganizationsApiproductsRateplan(ctx context.Context, in *UpdateOrganizationsApiproductsRateplanRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1RatePlan, error) {
	out := new(GoogleCloudApigeeV1RatePlan)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/UpdateOrganizationsApiproductsRateplan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApiproductsRateplansServerServer is the server API for OrganizationsApiproductsRateplansServer service.
// All implementations must embed UnimplementedOrganizationsApiproductsRateplansServerServer
// for forward compatibility
type OrganizationsApiproductsRateplansServerServer interface {
	// Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.
	CreateOrganizationsApiproductsRateplan(context.Context, *CreateOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error)
	// Deletes a rate plan.
	DeleteOrganizationsApiproductsRateplan(context.Context, *DeleteOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error)
	// Gets the details of a rate plan.
	GetOrganizationsApiproductsRateplan(context.Context, *GetOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error)
	// Lists all the rate plans for an API product.
	ListOrganizationsApiproductsRateplans(context.Context, *ListOrganizationsApiproductsRateplansRequest) (*GoogleCloudApigeeV1ListRatePlansResponse, error)
	// Updates an existing rate plan.
	UpdateOrganizationsApiproductsRateplan(context.Context, *UpdateOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error)
	mustEmbedUnimplementedOrganizationsApiproductsRateplansServerServer()
}

// UnimplementedOrganizationsApiproductsRateplansServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApiproductsRateplansServerServer struct {
}

func (UnimplementedOrganizationsApiproductsRateplansServerServer) CreateOrganizationsApiproductsRateplan(context.Context, *CreateOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsApiproductsRateplan not implemented")
}
func (UnimplementedOrganizationsApiproductsRateplansServerServer) DeleteOrganizationsApiproductsRateplan(context.Context, *DeleteOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApiproductsRateplan not implemented")
}
func (UnimplementedOrganizationsApiproductsRateplansServerServer) GetOrganizationsApiproductsRateplan(context.Context, *GetOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApiproductsRateplan not implemented")
}
func (UnimplementedOrganizationsApiproductsRateplansServerServer) ListOrganizationsApiproductsRateplans(context.Context, *ListOrganizationsApiproductsRateplansRequest) (*GoogleCloudApigeeV1ListRatePlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApiproductsRateplans not implemented")
}
func (UnimplementedOrganizationsApiproductsRateplansServerServer) UpdateOrganizationsApiproductsRateplan(context.Context, *UpdateOrganizationsApiproductsRateplanRequest) (*GoogleCloudApigeeV1RatePlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsApiproductsRateplan not implemented")
}
func (UnimplementedOrganizationsApiproductsRateplansServerServer) mustEmbedUnimplementedOrganizationsApiproductsRateplansServerServer() {
}

// UnsafeOrganizationsApiproductsRateplansServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApiproductsRateplansServerServer will
// result in compilation errors.
type UnsafeOrganizationsApiproductsRateplansServerServer interface {
	mustEmbedUnimplementedOrganizationsApiproductsRateplansServerServer()
}

func RegisterOrganizationsApiproductsRateplansServerServer(s grpc.ServiceRegistrar, srv OrganizationsApiproductsRateplansServerServer) {
	s.RegisterService(&OrganizationsApiproductsRateplansServer_ServiceDesc, srv)
}

func _OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsApiproductsRateplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsRateplansServerServer).CreateOrganizationsApiproductsRateplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/CreateOrganizationsApiproductsRateplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsRateplansServerServer).CreateOrganizationsApiproductsRateplan(ctx, req.(*CreateOrganizationsApiproductsRateplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApiproductsRateplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsRateplansServerServer).DeleteOrganizationsApiproductsRateplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/DeleteOrganizationsApiproductsRateplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsRateplansServerServer).DeleteOrganizationsApiproductsRateplan(ctx, req.(*DeleteOrganizationsApiproductsRateplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApiproductsRateplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsRateplansServerServer).GetOrganizationsApiproductsRateplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/GetOrganizationsApiproductsRateplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsRateplansServerServer).GetOrganizationsApiproductsRateplan(ctx, req.(*GetOrganizationsApiproductsRateplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApiproductsRateplansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsRateplansServerServer).ListOrganizationsApiproductsRateplans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/ListOrganizationsApiproductsRateplans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsRateplansServerServer).ListOrganizationsApiproductsRateplans(ctx, req.(*ListOrganizationsApiproductsRateplansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsApiproductsRateplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApiproductsRateplansServerServer).UpdateOrganizationsApiproductsRateplan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/UpdateOrganizationsApiproductsRateplan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApiproductsRateplansServerServer).UpdateOrganizationsApiproductsRateplan(ctx, req.(*UpdateOrganizationsApiproductsRateplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApiproductsRateplansServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApiproductsRateplansServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApiproductsRateplansServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer",
	HandlerType: (*OrganizationsApiproductsRateplansServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsApiproductsRateplan",
			Handler:    _OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_Handler,
		},
		{
			MethodName: "DeleteOrganizationsApiproductsRateplan",
			Handler:    _OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_Handler,
		},
		{
			MethodName: "GetOrganizationsApiproductsRateplan",
			Handler:    _OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_Handler,
		},
		{
			MethodName: "ListOrganizationsApiproductsRateplans",
			Handler:    _OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_Handler,
		},
		{
			MethodName: "UpdateOrganizationsApiproductsRateplan",
			Handler:    _OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisServerClient is the client API for OrganizationsApisServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisServerClient interface {
	// Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the `name` query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the `file` form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the `action` query parameter to `validate`. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.
	CreateOrganizationsApi(ctx context.Context, in *CreateOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error)
	// Deletes an API proxy and all associated endpoints, policies, resources, and revisions. The API proxy must be undeployed before you can delete it.
	DeleteOrganizationsApi(ctx context.Context, in *DeleteOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error)
	// Gets an API proxy including a list of existing revisions.
	GetOrganizationsApi(ctx context.Context, in *GetOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error)
	// Lists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.
	ListOrganizationsApis(ctx context.Context, in *ListOrganizationsApisRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiProxiesResponse, error)
	// Updates an existing API proxy.
	PatchOrganizationsApi(ctx context.Context, in *PatchOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error)
}

type organizationsApisServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisServerClient(cc grpc.ClientConnInterface) OrganizationsApisServerClient {
	return &organizationsApisServerClient{cc}
}

func (c *organizationsApisServerClient) CreateOrganizationsApi(ctx context.Context, in *CreateOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	out := new(GoogleCloudApigeeV1ApiProxyRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/CreateOrganizationsApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisServerClient) DeleteOrganizationsApi(ctx context.Context, in *DeleteOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error) {
	out := new(GoogleCloudApigeeV1ApiProxy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/DeleteOrganizationsApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisServerClient) GetOrganizationsApi(ctx context.Context, in *GetOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error) {
	out := new(GoogleCloudApigeeV1ApiProxy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/GetOrganizationsApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisServerClient) ListOrganizationsApis(ctx context.Context, in *ListOrganizationsApisRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiProxiesResponse, error) {
	out := new(GoogleCloudApigeeV1ListApiProxiesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/ListOrganizationsApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisServerClient) PatchOrganizationsApi(ctx context.Context, in *PatchOrganizationsApiRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxy, error) {
	out := new(GoogleCloudApigeeV1ApiProxy)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/PatchOrganizationsApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisServerServer is the server API for OrganizationsApisServer service.
// All implementations must embed UnimplementedOrganizationsApisServerServer
// for forward compatibility
type OrganizationsApisServerServer interface {
	// Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the `name` query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the `file` form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the `action` query parameter to `validate`. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.
	CreateOrganizationsApi(context.Context, *CreateOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error)
	// Deletes an API proxy and all associated endpoints, policies, resources, and revisions. The API proxy must be undeployed before you can delete it.
	DeleteOrganizationsApi(context.Context, *DeleteOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error)
	// Gets an API proxy including a list of existing revisions.
	GetOrganizationsApi(context.Context, *GetOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error)
	// Lists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.
	ListOrganizationsApis(context.Context, *ListOrganizationsApisRequest) (*GoogleCloudApigeeV1ListApiProxiesResponse, error)
	// Updates an existing API proxy.
	PatchOrganizationsApi(context.Context, *PatchOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error)
	mustEmbedUnimplementedOrganizationsApisServerServer()
}

// UnimplementedOrganizationsApisServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisServerServer struct {
}

func (UnimplementedOrganizationsApisServerServer) CreateOrganizationsApi(context.Context, *CreateOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsApi not implemented")
}
func (UnimplementedOrganizationsApisServerServer) DeleteOrganizationsApi(context.Context, *DeleteOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApi not implemented")
}
func (UnimplementedOrganizationsApisServerServer) GetOrganizationsApi(context.Context, *GetOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApi not implemented")
}
func (UnimplementedOrganizationsApisServerServer) ListOrganizationsApis(context.Context, *ListOrganizationsApisRequest) (*GoogleCloudApigeeV1ListApiProxiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApis not implemented")
}
func (UnimplementedOrganizationsApisServerServer) PatchOrganizationsApi(context.Context, *PatchOrganizationsApiRequest) (*GoogleCloudApigeeV1ApiProxy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsApi not implemented")
}
func (UnimplementedOrganizationsApisServerServer) mustEmbedUnimplementedOrganizationsApisServerServer() {
}

// UnsafeOrganizationsApisServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisServerServer interface {
	mustEmbedUnimplementedOrganizationsApisServerServer()
}

func RegisterOrganizationsApisServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisServerServer) {
	s.RegisterService(&OrganizationsApisServer_ServiceDesc, srv)
}

func _OrganizationsApisServer_CreateOrganizationsApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisServerServer).CreateOrganizationsApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/CreateOrganizationsApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisServerServer).CreateOrganizationsApi(ctx, req.(*CreateOrganizationsApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisServer_DeleteOrganizationsApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisServerServer).DeleteOrganizationsApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/DeleteOrganizationsApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisServerServer).DeleteOrganizationsApi(ctx, req.(*DeleteOrganizationsApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisServer_GetOrganizationsApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisServerServer).GetOrganizationsApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/GetOrganizationsApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisServerServer).GetOrganizationsApi(ctx, req.(*GetOrganizationsApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisServer_ListOrganizationsApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisServerServer).ListOrganizationsApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/ListOrganizationsApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisServerServer).ListOrganizationsApis(ctx, req.(*ListOrganizationsApisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisServer_PatchOrganizationsApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisServerServer).PatchOrganizationsApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/PatchOrganizationsApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisServerServer).PatchOrganizationsApi(ctx, req.(*PatchOrganizationsApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisServer",
	HandlerType: (*OrganizationsApisServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsApi",
			Handler:    _OrganizationsApisServer_CreateOrganizationsApi_Handler,
		},
		{
			MethodName: "DeleteOrganizationsApi",
			Handler:    _OrganizationsApisServer_DeleteOrganizationsApi_Handler,
		},
		{
			MethodName: "GetOrganizationsApi",
			Handler:    _OrganizationsApisServer_GetOrganizationsApi_Handler,
		},
		{
			MethodName: "ListOrganizationsApis",
			Handler:    _OrganizationsApisServer_ListOrganizationsApis_Handler,
		},
		{
			MethodName: "PatchOrganizationsApi",
			Handler:    _OrganizationsApisServer_PatchOrganizationsApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisDeploymentsServerClient is the client API for OrganizationsApisDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisDeploymentsServerClient interface {
	// Lists all deployments of an API proxy.
	ListOrganizationsApisDeployments(ctx context.Context, in *ListOrganizationsApisDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsApisDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsApisDeploymentsServerClient {
	return &organizationsApisDeploymentsServerClient{cc}
}

func (c *organizationsApisDeploymentsServerClient) ListOrganizationsApisDeployments(ctx context.Context, in *ListOrganizationsApisDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer/ListOrganizationsApisDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisDeploymentsServerServer is the server API for OrganizationsApisDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsApisDeploymentsServerServer
// for forward compatibility
type OrganizationsApisDeploymentsServerServer interface {
	// Lists all deployments of an API proxy.
	ListOrganizationsApisDeployments(context.Context, *ListOrganizationsApisDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsApisDeploymentsServerServer()
}

// UnimplementedOrganizationsApisDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsApisDeploymentsServerServer) ListOrganizationsApisDeployments(context.Context, *ListOrganizationsApisDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApisDeployments not implemented")
}
func (UnimplementedOrganizationsApisDeploymentsServerServer) mustEmbedUnimplementedOrganizationsApisDeploymentsServerServer() {
}

// UnsafeOrganizationsApisDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsApisDeploymentsServerServer()
}

func RegisterOrganizationsApisDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisDeploymentsServerServer) {
	s.RegisterService(&OrganizationsApisDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApisDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisDeploymentsServerServer).ListOrganizationsApisDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer/ListOrganizationsApisDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisDeploymentsServerServer).ListOrganizationsApisDeployments(ctx, req.(*ListOrganizationsApisDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer",
	HandlerType: (*OrganizationsApisDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsApisDeployments",
			Handler:    _OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisKeyvaluemapsServerClient is the client API for OrganizationsApisKeyvaluemapsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisKeyvaluemapsServerClient interface {
	// Creates a key value map in an API proxy.
	CreateOrganizationsApisKeyvaluemap(ctx context.Context, in *CreateOrganizationsApisKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an API proxy.
	DeleteOrganizationsApisKeyvaluemap(ctx context.Context, in *DeleteOrganizationsApisKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
}

type organizationsApisKeyvaluemapsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisKeyvaluemapsServerClient(cc grpc.ClientConnInterface) OrganizationsApisKeyvaluemapsServerClient {
	return &organizationsApisKeyvaluemapsServerClient{cc}
}

func (c *organizationsApisKeyvaluemapsServerClient) CreateOrganizationsApisKeyvaluemap(ctx context.Context, in *CreateOrganizationsApisKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/CreateOrganizationsApisKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisKeyvaluemapsServerClient) DeleteOrganizationsApisKeyvaluemap(ctx context.Context, in *DeleteOrganizationsApisKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/DeleteOrganizationsApisKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisKeyvaluemapsServerServer is the server API for OrganizationsApisKeyvaluemapsServer service.
// All implementations must embed UnimplementedOrganizationsApisKeyvaluemapsServerServer
// for forward compatibility
type OrganizationsApisKeyvaluemapsServerServer interface {
	// Creates a key value map in an API proxy.
	CreateOrganizationsApisKeyvaluemap(context.Context, *CreateOrganizationsApisKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an API proxy.
	DeleteOrganizationsApisKeyvaluemap(context.Context, *DeleteOrganizationsApisKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	mustEmbedUnimplementedOrganizationsApisKeyvaluemapsServerServer()
}

// UnimplementedOrganizationsApisKeyvaluemapsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisKeyvaluemapsServerServer struct {
}

func (UnimplementedOrganizationsApisKeyvaluemapsServerServer) CreateOrganizationsApisKeyvaluemap(context.Context, *CreateOrganizationsApisKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsApisKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsServerServer) DeleteOrganizationsApisKeyvaluemap(context.Context, *DeleteOrganizationsApisKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApisKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsServerServer) mustEmbedUnimplementedOrganizationsApisKeyvaluemapsServerServer() {
}

// UnsafeOrganizationsApisKeyvaluemapsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisKeyvaluemapsServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisKeyvaluemapsServerServer interface {
	mustEmbedUnimplementedOrganizationsApisKeyvaluemapsServerServer()
}

func RegisterOrganizationsApisKeyvaluemapsServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisKeyvaluemapsServerServer) {
	s.RegisterService(&OrganizationsApisKeyvaluemapsServer_ServiceDesc, srv)
}

func _OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsApisKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsServerServer).CreateOrganizationsApisKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/CreateOrganizationsApisKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsServerServer).CreateOrganizationsApisKeyvaluemap(ctx, req.(*CreateOrganizationsApisKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApisKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsServerServer).DeleteOrganizationsApisKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/DeleteOrganizationsApisKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsServerServer).DeleteOrganizationsApisKeyvaluemap(ctx, req.(*DeleteOrganizationsApisKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisKeyvaluemapsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisKeyvaluemapsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisKeyvaluemapsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer",
	HandlerType: (*OrganizationsApisKeyvaluemapsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsApisKeyvaluemap",
			Handler:    _OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_Handler,
		},
		{
			MethodName: "DeleteOrganizationsApisKeyvaluemap",
			Handler:    _OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisKeyvaluemapsEntriesServerClient is the client API for OrganizationsApisKeyvaluemapsEntriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisKeyvaluemapsEntriesServerClient interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsApisKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsApisKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
}

type organizationsApisKeyvaluemapsEntriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisKeyvaluemapsEntriesServerClient(cc grpc.ClientConnInterface) OrganizationsApisKeyvaluemapsEntriesServerClient {
	return &organizationsApisKeyvaluemapsEntriesServerClient{cc}
}

func (c *organizationsApisKeyvaluemapsEntriesServerClient) CreateOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/CreateOrganizationsApisKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisKeyvaluemapsEntriesServerClient) DeleteOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/DeleteOrganizationsApisKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisKeyvaluemapsEntriesServerClient) GetOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/GetOrganizationsApisKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisKeyvaluemapsEntriesServerClient) ListOrganizationsApisKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsApisKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListKeyValueEntriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/ListOrganizationsApisKeyvaluemapsEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisKeyvaluemapsEntriesServerClient) UpdateOrganizationsApisKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsApisKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/UpdateOrganizationsApisKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisKeyvaluemapsEntriesServerServer is the server API for OrganizationsApisKeyvaluemapsEntriesServer service.
// All implementations must embed UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer
// for forward compatibility
type OrganizationsApisKeyvaluemapsEntriesServerServer interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsApisKeyvaluemapsEntry(context.Context, *CreateOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsApisKeyvaluemapsEntry(context.Context, *DeleteOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsApisKeyvaluemapsEntry(context.Context, *GetOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsApisKeyvaluemapsEntries(context.Context, *ListOrganizationsApisKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsApisKeyvaluemapsEntry(context.Context, *UpdateOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	mustEmbedUnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer()
}

// UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer struct {
}

func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) CreateOrganizationsApisKeyvaluemapsEntry(context.Context, *CreateOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsApisKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) DeleteOrganizationsApisKeyvaluemapsEntry(context.Context, *DeleteOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApisKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) GetOrganizationsApisKeyvaluemapsEntry(context.Context, *GetOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApisKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) ListOrganizationsApisKeyvaluemapsEntries(context.Context, *ListOrganizationsApisKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApisKeyvaluemapsEntries not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) UpdateOrganizationsApisKeyvaluemapsEntry(context.Context, *UpdateOrganizationsApisKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsApisKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer) mustEmbedUnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer() {
}

// UnsafeOrganizationsApisKeyvaluemapsEntriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisKeyvaluemapsEntriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisKeyvaluemapsEntriesServerServer interface {
	mustEmbedUnimplementedOrganizationsApisKeyvaluemapsEntriesServerServer()
}

func RegisterOrganizationsApisKeyvaluemapsEntriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisKeyvaluemapsEntriesServerServer) {
	s.RegisterService(&OrganizationsApisKeyvaluemapsEntriesServer_ServiceDesc, srv)
}

func _OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsApisKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).CreateOrganizationsApisKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/CreateOrganizationsApisKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).CreateOrganizationsApisKeyvaluemapsEntry(ctx, req.(*CreateOrganizationsApisKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApisKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).DeleteOrganizationsApisKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/DeleteOrganizationsApisKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).DeleteOrganizationsApisKeyvaluemapsEntry(ctx, req.(*DeleteOrganizationsApisKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApisKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).GetOrganizationsApisKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/GetOrganizationsApisKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).GetOrganizationsApisKeyvaluemapsEntry(ctx, req.(*GetOrganizationsApisKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApisKeyvaluemapsEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).ListOrganizationsApisKeyvaluemapsEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/ListOrganizationsApisKeyvaluemapsEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).ListOrganizationsApisKeyvaluemapsEntries(ctx, req.(*ListOrganizationsApisKeyvaluemapsEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsApisKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).UpdateOrganizationsApisKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/UpdateOrganizationsApisKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisKeyvaluemapsEntriesServerServer).UpdateOrganizationsApisKeyvaluemapsEntry(ctx, req.(*UpdateOrganizationsApisKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisKeyvaluemapsEntriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisKeyvaluemapsEntriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisKeyvaluemapsEntriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer",
	HandlerType: (*OrganizationsApisKeyvaluemapsEntriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsApisKeyvaluemapsEntry",
			Handler:    _OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "DeleteOrganizationsApisKeyvaluemapsEntry",
			Handler:    _OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "GetOrganizationsApisKeyvaluemapsEntry",
			Handler:    _OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "ListOrganizationsApisKeyvaluemapsEntries",
			Handler:    _OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_Handler,
		},
		{
			MethodName: "UpdateOrganizationsApisKeyvaluemapsEntry",
			Handler:    _OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisRevisionsServerClient is the client API for OrganizationsApisRevisionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisRevisionsServerClient interface {
	// Deletes an API proxy revision and all policies, resources, endpoints, and revisions associated with it. The API proxy revision must be undeployed before you can delete it.
	DeleteOrganizationsApisRevision(ctx context.Context, in *DeleteOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error)
	// Gets an API proxy revision. To download the API proxy configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the API proxy configuration locally and upload the updated API proxy configuration revision, as described in [updateApiProxyRevision](updateApiProxyRevision).
	GetOrganizationsApisRevision(ctx context.Context, in *GetOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// Updates an existing API proxy revision by uploading the API proxy configuration bundle as a zip file from your local machine. You can update only API proxy revisions that have never been deployed. After deployment, an API proxy revision becomes immutable, even if it is undeployed. Set the `Content-Type` header to either `multipart/form-data` or `application/octet-stream`.
	UpdateApiProxyRevisionOrganizationsApisRevision(ctx context.Context, in *UpdateApiProxyRevisionOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error)
}

type organizationsApisRevisionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisRevisionsServerClient(cc grpc.ClientConnInterface) OrganizationsApisRevisionsServerClient {
	return &organizationsApisRevisionsServerClient{cc}
}

func (c *organizationsApisRevisionsServerClient) DeleteOrganizationsApisRevision(ctx context.Context, in *DeleteOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	out := new(GoogleCloudApigeeV1ApiProxyRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/DeleteOrganizationsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisRevisionsServerClient) GetOrganizationsApisRevision(ctx context.Context, in *GetOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/GetOrganizationsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsApisRevisionsServerClient) UpdateApiProxyRevisionOrganizationsApisRevision(ctx context.Context, in *UpdateApiProxyRevisionOrganizationsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	out := new(GoogleCloudApigeeV1ApiProxyRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/UpdateApiProxyRevisionOrganizationsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisRevisionsServerServer is the server API for OrganizationsApisRevisionsServer service.
// All implementations must embed UnimplementedOrganizationsApisRevisionsServerServer
// for forward compatibility
type OrganizationsApisRevisionsServerServer interface {
	// Deletes an API proxy revision and all policies, resources, endpoints, and revisions associated with it. The API proxy revision must be undeployed before you can delete it.
	DeleteOrganizationsApisRevision(context.Context, *DeleteOrganizationsApisRevisionRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error)
	// Gets an API proxy revision. To download the API proxy configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the API proxy configuration locally and upload the updated API proxy configuration revision, as described in [updateApiProxyRevision](updateApiProxyRevision).
	GetOrganizationsApisRevision(context.Context, *GetOrganizationsApisRevisionRequest) (*GoogleApiHttpBody, error)
	// Updates an existing API proxy revision by uploading the API proxy configuration bundle as a zip file from your local machine. You can update only API proxy revisions that have never been deployed. After deployment, an API proxy revision becomes immutable, even if it is undeployed. Set the `Content-Type` header to either `multipart/form-data` or `application/octet-stream`.
	UpdateApiProxyRevisionOrganizationsApisRevision(context.Context, *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error)
	mustEmbedUnimplementedOrganizationsApisRevisionsServerServer()
}

// UnimplementedOrganizationsApisRevisionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisRevisionsServerServer struct {
}

func (UnimplementedOrganizationsApisRevisionsServerServer) DeleteOrganizationsApisRevision(context.Context, *DeleteOrganizationsApisRevisionRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsApisRevision not implemented")
}
func (UnimplementedOrganizationsApisRevisionsServerServer) GetOrganizationsApisRevision(context.Context, *GetOrganizationsApisRevisionRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApisRevision not implemented")
}
func (UnimplementedOrganizationsApisRevisionsServerServer) UpdateApiProxyRevisionOrganizationsApisRevision(context.Context, *UpdateApiProxyRevisionOrganizationsApisRevisionRequest) (*GoogleCloudApigeeV1ApiProxyRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiProxyRevisionOrganizationsApisRevision not implemented")
}
func (UnimplementedOrganizationsApisRevisionsServerServer) mustEmbedUnimplementedOrganizationsApisRevisionsServerServer() {
}

// UnsafeOrganizationsApisRevisionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisRevisionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisRevisionsServerServer interface {
	mustEmbedUnimplementedOrganizationsApisRevisionsServerServer()
}

func RegisterOrganizationsApisRevisionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisRevisionsServerServer) {
	s.RegisterService(&OrganizationsApisRevisionsServer_ServiceDesc, srv)
}

func _OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisRevisionsServerServer).DeleteOrganizationsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/DeleteOrganizationsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisRevisionsServerServer).DeleteOrganizationsApisRevision(ctx, req.(*DeleteOrganizationsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisRevisionsServerServer).GetOrganizationsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/GetOrganizationsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisRevisionsServerServer).GetOrganizationsApisRevision(ctx, req.(*GetOrganizationsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiProxyRevisionOrganizationsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisRevisionsServerServer).UpdateApiProxyRevisionOrganizationsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/UpdateApiProxyRevisionOrganizationsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisRevisionsServerServer).UpdateApiProxyRevisionOrganizationsApisRevision(ctx, req.(*UpdateApiProxyRevisionOrganizationsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisRevisionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisRevisionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisRevisionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer",
	HandlerType: (*OrganizationsApisRevisionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsApisRevision",
			Handler:    _OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_Handler,
		},
		{
			MethodName: "GetOrganizationsApisRevision",
			Handler:    _OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_Handler,
		},
		{
			MethodName: "UpdateApiProxyRevisionOrganizationsApisRevision",
			Handler:    _OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsApisRevisionsDeploymentsServerClient is the client API for OrganizationsApisRevisionsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsApisRevisionsDeploymentsServerClient interface {
	// Lists all deployments of an API proxy revision.
	ListOrganizationsApisRevisionsDeployments(ctx context.Context, in *ListOrganizationsApisRevisionsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsApisRevisionsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsApisRevisionsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsApisRevisionsDeploymentsServerClient {
	return &organizationsApisRevisionsDeploymentsServerClient{cc}
}

func (c *organizationsApisRevisionsDeploymentsServerClient) ListOrganizationsApisRevisionsDeployments(ctx context.Context, in *ListOrganizationsApisRevisionsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer/ListOrganizationsApisRevisionsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsApisRevisionsDeploymentsServerServer is the server API for OrganizationsApisRevisionsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsApisRevisionsDeploymentsServerServer
// for forward compatibility
type OrganizationsApisRevisionsDeploymentsServerServer interface {
	// Lists all deployments of an API proxy revision.
	ListOrganizationsApisRevisionsDeployments(context.Context, *ListOrganizationsApisRevisionsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsApisRevisionsDeploymentsServerServer()
}

// UnimplementedOrganizationsApisRevisionsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsApisRevisionsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsApisRevisionsDeploymentsServerServer) ListOrganizationsApisRevisionsDeployments(context.Context, *ListOrganizationsApisRevisionsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApisRevisionsDeployments not implemented")
}
func (UnimplementedOrganizationsApisRevisionsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsApisRevisionsDeploymentsServerServer() {
}

// UnsafeOrganizationsApisRevisionsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsApisRevisionsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsApisRevisionsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsApisRevisionsDeploymentsServerServer()
}

func RegisterOrganizationsApisRevisionsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsApisRevisionsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsApisRevisionsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsApisRevisionsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsApisRevisionsDeploymentsServerServer).ListOrganizationsApisRevisionsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer/ListOrganizationsApisRevisionsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsApisRevisionsDeploymentsServerServer).ListOrganizationsApisRevisionsDeployments(ctx, req.(*ListOrganizationsApisRevisionsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsApisRevisionsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsApisRevisionsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsApisRevisionsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer",
	HandlerType: (*OrganizationsApisRevisionsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsApisRevisionsDeployments",
			Handler:    _OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAppgroupsServerClient is the client API for OrganizationsAppgroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAppgroupsServerClient interface {
	// Creates an AppGroup. Once created, user can register apps under the AppGroup to obtain secret key and password. At creation time, the AppGroup's state is set as `active`.
	CreateOrganizationsAppgroup(ctx context.Context, in *CreateOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error)
	// Deletes an AppGroup. All app and API keys associations with the AppGroup are also removed. **Warning**: This API will permanently delete the AppGroup and related artifacts. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsAppgroup(ctx context.Context, in *DeleteOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error)
	// Returns the AppGroup details for the provided AppGroup name in the request URI.
	GetOrganizationsAppgroup(ctx context.Context, in *GetOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error)
	// Lists all AppGroups in an organization. A maximum of 1000 AppGroups are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
	ListOrganizationsAppgroups(ctx context.Context, in *ListOrganizationsAppgroupsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppGroupsResponse, error)
	// Updates an AppGroup. This API replaces the existing AppGroup details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. Note that the state of the AppGroup should be updated using `action`, and not via AppGroup.
	UpdateOrganizationsAppgroup(ctx context.Context, in *UpdateOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error)
}

type organizationsAppgroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAppgroupsServerClient(cc grpc.ClientConnInterface) OrganizationsAppgroupsServerClient {
	return &organizationsAppgroupsServerClient{cc}
}

func (c *organizationsAppgroupsServerClient) CreateOrganizationsAppgroup(ctx context.Context, in *CreateOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error) {
	out := new(GoogleCloudApigeeV1AppGroup)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/CreateOrganizationsAppgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsServerClient) DeleteOrganizationsAppgroup(ctx context.Context, in *DeleteOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error) {
	out := new(GoogleCloudApigeeV1AppGroup)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/DeleteOrganizationsAppgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsServerClient) GetOrganizationsAppgroup(ctx context.Context, in *GetOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error) {
	out := new(GoogleCloudApigeeV1AppGroup)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/GetOrganizationsAppgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsServerClient) ListOrganizationsAppgroups(ctx context.Context, in *ListOrganizationsAppgroupsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppGroupsResponse, error) {
	out := new(GoogleCloudApigeeV1ListAppGroupsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/ListOrganizationsAppgroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsServerClient) UpdateOrganizationsAppgroup(ctx context.Context, in *UpdateOrganizationsAppgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroup, error) {
	out := new(GoogleCloudApigeeV1AppGroup)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/UpdateOrganizationsAppgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAppgroupsServerServer is the server API for OrganizationsAppgroupsServer service.
// All implementations must embed UnimplementedOrganizationsAppgroupsServerServer
// for forward compatibility
type OrganizationsAppgroupsServerServer interface {
	// Creates an AppGroup. Once created, user can register apps under the AppGroup to obtain secret key and password. At creation time, the AppGroup's state is set as `active`.
	CreateOrganizationsAppgroup(context.Context, *CreateOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error)
	// Deletes an AppGroup. All app and API keys associations with the AppGroup are also removed. **Warning**: This API will permanently delete the AppGroup and related artifacts. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsAppgroup(context.Context, *DeleteOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error)
	// Returns the AppGroup details for the provided AppGroup name in the request URI.
	GetOrganizationsAppgroup(context.Context, *GetOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error)
	// Lists all AppGroups in an organization. A maximum of 1000 AppGroups are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
	ListOrganizationsAppgroups(context.Context, *ListOrganizationsAppgroupsRequest) (*GoogleCloudApigeeV1ListAppGroupsResponse, error)
	// Updates an AppGroup. This API replaces the existing AppGroup details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. Note that the state of the AppGroup should be updated using `action`, and not via AppGroup.
	UpdateOrganizationsAppgroup(context.Context, *UpdateOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error)
	mustEmbedUnimplementedOrganizationsAppgroupsServerServer()
}

// UnimplementedOrganizationsAppgroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAppgroupsServerServer struct {
}

func (UnimplementedOrganizationsAppgroupsServerServer) CreateOrganizationsAppgroup(context.Context, *CreateOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsAppgroup not implemented")
}
func (UnimplementedOrganizationsAppgroupsServerServer) DeleteOrganizationsAppgroup(context.Context, *DeleteOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsAppgroup not implemented")
}
func (UnimplementedOrganizationsAppgroupsServerServer) GetOrganizationsAppgroup(context.Context, *GetOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsAppgroup not implemented")
}
func (UnimplementedOrganizationsAppgroupsServerServer) ListOrganizationsAppgroups(context.Context, *ListOrganizationsAppgroupsRequest) (*GoogleCloudApigeeV1ListAppGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsAppgroups not implemented")
}
func (UnimplementedOrganizationsAppgroupsServerServer) UpdateOrganizationsAppgroup(context.Context, *UpdateOrganizationsAppgroupRequest) (*GoogleCloudApigeeV1AppGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsAppgroup not implemented")
}
func (UnimplementedOrganizationsAppgroupsServerServer) mustEmbedUnimplementedOrganizationsAppgroupsServerServer() {
}

// UnsafeOrganizationsAppgroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAppgroupsServerServer will
// result in compilation errors.
type UnsafeOrganizationsAppgroupsServerServer interface {
	mustEmbedUnimplementedOrganizationsAppgroupsServerServer()
}

func RegisterOrganizationsAppgroupsServerServer(s grpc.ServiceRegistrar, srv OrganizationsAppgroupsServerServer) {
	s.RegisterService(&OrganizationsAppgroupsServer_ServiceDesc, srv)
}

func _OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsAppgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsServerServer).CreateOrganizationsAppgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/CreateOrganizationsAppgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsServerServer).CreateOrganizationsAppgroup(ctx, req.(*CreateOrganizationsAppgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsAppgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsServerServer).DeleteOrganizationsAppgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/DeleteOrganizationsAppgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsServerServer).DeleteOrganizationsAppgroup(ctx, req.(*DeleteOrganizationsAppgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsServer_GetOrganizationsAppgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsAppgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsServerServer).GetOrganizationsAppgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/GetOrganizationsAppgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsServerServer).GetOrganizationsAppgroup(ctx, req.(*GetOrganizationsAppgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsServer_ListOrganizationsAppgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsAppgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsServerServer).ListOrganizationsAppgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/ListOrganizationsAppgroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsServerServer).ListOrganizationsAppgroups(ctx, req.(*ListOrganizationsAppgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsAppgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsServerServer).UpdateOrganizationsAppgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/UpdateOrganizationsAppgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsServerServer).UpdateOrganizationsAppgroup(ctx, req.(*UpdateOrganizationsAppgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAppgroupsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAppgroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAppgroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer",
	HandlerType: (*OrganizationsAppgroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsAppgroup",
			Handler:    _OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_Handler,
		},
		{
			MethodName: "DeleteOrganizationsAppgroup",
			Handler:    _OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_Handler,
		},
		{
			MethodName: "GetOrganizationsAppgroup",
			Handler:    _OrganizationsAppgroupsServer_GetOrganizationsAppgroup_Handler,
		},
		{
			MethodName: "ListOrganizationsAppgroups",
			Handler:    _OrganizationsAppgroupsServer_ListOrganizationsAppgroups_Handler,
		},
		{
			MethodName: "UpdateOrganizationsAppgroup",
			Handler:    _OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAppgroupsAppsServerClient is the client API for OrganizationsAppgroupsAppsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAppgroupsAppsServerClient interface {
	// Creates an app and associates it with an AppGroup. This API associates the AppGroup app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls.
	CreateOrganizationsAppgroupsApp(ctx context.Context, in *CreateOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Deletes an AppGroup app. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsAppgroupsApp(ctx context.Context, in *DeleteOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Returns the details for an AppGroup app.
	GetOrganizationsAppgroupsApp(ctx context.Context, in *GetOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Lists all apps created by an AppGroup in an Apigee organization. Optionally, you can request an expanded view of the AppGroup apps. Lists all AppGroupApps in an AppGroup. A maximum of 1000 AppGroup apps are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
	ListOrganizationsAppgroupsApps(ctx context.Context, in *ListOrganizationsAppgroupsAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppGroupAppsResponse, error)
	// Updates the details for an AppGroup app. In addition, you can add an API product to an AppGroup app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateAppGroupAppKey API. Using this API, you cannot update the app name, as it is the primary key used to identify the app and cannot be changed. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
	UpdateOrganizationsAppgroupsApp(ctx context.Context, in *UpdateOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error)
}

type organizationsAppgroupsAppsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAppgroupsAppsServerClient(cc grpc.ClientConnInterface) OrganizationsAppgroupsAppsServerClient {
	return &organizationsAppgroupsAppsServerClient{cc}
}

func (c *organizationsAppgroupsAppsServerClient) CreateOrganizationsAppgroupsApp(ctx context.Context, in *CreateOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error) {
	out := new(GoogleCloudApigeeV1AppGroupApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/CreateOrganizationsAppgroupsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsServerClient) DeleteOrganizationsAppgroupsApp(ctx context.Context, in *DeleteOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error) {
	out := new(GoogleCloudApigeeV1AppGroupApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/DeleteOrganizationsAppgroupsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsServerClient) GetOrganizationsAppgroupsApp(ctx context.Context, in *GetOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error) {
	out := new(GoogleCloudApigeeV1AppGroupApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/GetOrganizationsAppgroupsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsServerClient) ListOrganizationsAppgroupsApps(ctx context.Context, in *ListOrganizationsAppgroupsAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppGroupAppsResponse, error) {
	out := new(GoogleCloudApigeeV1ListAppGroupAppsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/ListOrganizationsAppgroupsApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsServerClient) UpdateOrganizationsAppgroupsApp(ctx context.Context, in *UpdateOrganizationsAppgroupsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupApp, error) {
	out := new(GoogleCloudApigeeV1AppGroupApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/UpdateOrganizationsAppgroupsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAppgroupsAppsServerServer is the server API for OrganizationsAppgroupsAppsServer service.
// All implementations must embed UnimplementedOrganizationsAppgroupsAppsServerServer
// for forward compatibility
type OrganizationsAppgroupsAppsServerServer interface {
	// Creates an app and associates it with an AppGroup. This API associates the AppGroup app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls.
	CreateOrganizationsAppgroupsApp(context.Context, *CreateOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Deletes an AppGroup app. **Note**: The delete operation is asynchronous. The AppGroup app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsAppgroupsApp(context.Context, *DeleteOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Returns the details for an AppGroup app.
	GetOrganizationsAppgroupsApp(context.Context, *GetOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error)
	// Lists all apps created by an AppGroup in an Apigee organization. Optionally, you can request an expanded view of the AppGroup apps. Lists all AppGroupApps in an AppGroup. A maximum of 1000 AppGroup apps are returned in the response if PageSize is not specified, or if the PageSize is greater than 1000.
	ListOrganizationsAppgroupsApps(context.Context, *ListOrganizationsAppgroupsAppsRequest) (*GoogleCloudApigeeV1ListAppGroupAppsResponse, error)
	// Updates the details for an AppGroup app. In addition, you can add an API product to an AppGroup app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateAppGroupAppKey API. Using this API, you cannot update the app name, as it is the primary key used to identify the app and cannot be changed. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
	UpdateOrganizationsAppgroupsApp(context.Context, *UpdateOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error)
	mustEmbedUnimplementedOrganizationsAppgroupsAppsServerServer()
}

// UnimplementedOrganizationsAppgroupsAppsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAppgroupsAppsServerServer struct {
}

func (UnimplementedOrganizationsAppgroupsAppsServerServer) CreateOrganizationsAppgroupsApp(context.Context, *CreateOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsAppgroupsApp not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsServerServer) DeleteOrganizationsAppgroupsApp(context.Context, *DeleteOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsAppgroupsApp not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsServerServer) GetOrganizationsAppgroupsApp(context.Context, *GetOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsAppgroupsApp not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsServerServer) ListOrganizationsAppgroupsApps(context.Context, *ListOrganizationsAppgroupsAppsRequest) (*GoogleCloudApigeeV1ListAppGroupAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsAppgroupsApps not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsServerServer) UpdateOrganizationsAppgroupsApp(context.Context, *UpdateOrganizationsAppgroupsAppRequest) (*GoogleCloudApigeeV1AppGroupApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsAppgroupsApp not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsServerServer) mustEmbedUnimplementedOrganizationsAppgroupsAppsServerServer() {
}

// UnsafeOrganizationsAppgroupsAppsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAppgroupsAppsServerServer will
// result in compilation errors.
type UnsafeOrganizationsAppgroupsAppsServerServer interface {
	mustEmbedUnimplementedOrganizationsAppgroupsAppsServerServer()
}

func RegisterOrganizationsAppgroupsAppsServerServer(s grpc.ServiceRegistrar, srv OrganizationsAppgroupsAppsServerServer) {
	s.RegisterService(&OrganizationsAppgroupsAppsServer_ServiceDesc, srv)
}

func _OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsAppgroupsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsServerServer).CreateOrganizationsAppgroupsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/CreateOrganizationsAppgroupsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsServerServer).CreateOrganizationsAppgroupsApp(ctx, req.(*CreateOrganizationsAppgroupsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsAppgroupsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsServerServer).DeleteOrganizationsAppgroupsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/DeleteOrganizationsAppgroupsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsServerServer).DeleteOrganizationsAppgroupsApp(ctx, req.(*DeleteOrganizationsAppgroupsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsAppgroupsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsServerServer).GetOrganizationsAppgroupsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/GetOrganizationsAppgroupsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsServerServer).GetOrganizationsAppgroupsApp(ctx, req.(*GetOrganizationsAppgroupsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsAppgroupsAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsServerServer).ListOrganizationsAppgroupsApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/ListOrganizationsAppgroupsApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsServerServer).ListOrganizationsAppgroupsApps(ctx, req.(*ListOrganizationsAppgroupsAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsAppgroupsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsServerServer).UpdateOrganizationsAppgroupsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/UpdateOrganizationsAppgroupsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsServerServer).UpdateOrganizationsAppgroupsApp(ctx, req.(*UpdateOrganizationsAppgroupsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAppgroupsAppsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAppgroupsAppsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAppgroupsAppsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer",
	HandlerType: (*OrganizationsAppgroupsAppsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsAppgroupsApp",
			Handler:    _OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_Handler,
		},
		{
			MethodName: "DeleteOrganizationsAppgroupsApp",
			Handler:    _OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_Handler,
		},
		{
			MethodName: "GetOrganizationsAppgroupsApp",
			Handler:    _OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_Handler,
		},
		{
			MethodName: "ListOrganizationsAppgroupsApps",
			Handler:    _OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_Handler,
		},
		{
			MethodName: "UpdateOrganizationsAppgroupsApp",
			Handler:    _OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAppgroupsAppsKeysServerClient is the client API for OrganizationsAppgroupsAppsKeysServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAppgroupsAppsKeysServerClient interface {
	// Creates a custom consumer key and secret for a AppGroup app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the ProductizeAppGroupAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteAppGroupAppKey API.
	CreateOrganizationsAppgroupsAppsKey(ctx context.Context, in *CreateOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs.
	DeleteOrganizationsAppgroupsAppsKey(ctx context.Context, in *DeleteOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Gets details for a consumer key for a AppGroup app, including the key and secret value, associated API products, and other information.
	GetOrganizationsAppgroupsAppsKey(ctx context.Context, in *GetOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Adds an API product to an AppGroupAppKey, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to the AppGroupAppKey. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
	UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx context.Context, in *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error)
}

type organizationsAppgroupsAppsKeysServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAppgroupsAppsKeysServerClient(cc grpc.ClientConnInterface) OrganizationsAppgroupsAppsKeysServerClient {
	return &organizationsAppgroupsAppsKeysServerClient{cc}
}

func (c *organizationsAppgroupsAppsKeysServerClient) CreateOrganizationsAppgroupsAppsKey(ctx context.Context, in *CreateOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	out := new(GoogleCloudApigeeV1AppGroupAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/CreateOrganizationsAppgroupsAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsKeysServerClient) DeleteOrganizationsAppgroupsAppsKey(ctx context.Context, in *DeleteOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	out := new(GoogleCloudApigeeV1AppGroupAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/DeleteOrganizationsAppgroupsAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsKeysServerClient) GetOrganizationsAppgroupsAppsKey(ctx context.Context, in *GetOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	out := new(GoogleCloudApigeeV1AppGroupAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/GetOrganizationsAppgroupsAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsKeysServerClient) UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx context.Context, in *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	out := new(GoogleCloudApigeeV1AppGroupAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAppgroupsAppsKeysServerServer is the server API for OrganizationsAppgroupsAppsKeysServer service.
// All implementations must embed UnimplementedOrganizationsAppgroupsAppsKeysServerServer
// for forward compatibility
type OrganizationsAppgroupsAppsKeysServerServer interface {
	// Creates a custom consumer key and secret for a AppGroup app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the ProductizeAppGroupAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteAppGroupAppKey API.
	CreateOrganizationsAppgroupsAppsKey(context.Context, *CreateOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs.
	DeleteOrganizationsAppgroupsAppsKey(context.Context, *DeleteOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Gets details for a consumer key for a AppGroup app, including the key and secret value, associated API products, and other information.
	GetOrganizationsAppgroupsAppsKey(context.Context, *GetOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Adds an API product to an AppGroupAppKey, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to the AppGroupAppKey. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
	UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(context.Context, *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysServerServer()
}

// UnimplementedOrganizationsAppgroupsAppsKeysServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAppgroupsAppsKeysServerServer struct {
}

func (UnimplementedOrganizationsAppgroupsAppsKeysServerServer) CreateOrganizationsAppgroupsAppsKey(context.Context, *CreateOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsAppgroupsAppsKey not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysServerServer) DeleteOrganizationsAppgroupsAppsKey(context.Context, *DeleteOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsAppgroupsAppsKey not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysServerServer) GetOrganizationsAppgroupsAppsKey(context.Context, *GetOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsAppgroupsAppsKey not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysServerServer) UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(context.Context, *UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysServerServer) mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysServerServer() {
}

// UnsafeOrganizationsAppgroupsAppsKeysServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAppgroupsAppsKeysServerServer will
// result in compilation errors.
type UnsafeOrganizationsAppgroupsAppsKeysServerServer interface {
	mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysServerServer()
}

func RegisterOrganizationsAppgroupsAppsKeysServerServer(s grpc.ServiceRegistrar, srv OrganizationsAppgroupsAppsKeysServerServer) {
	s.RegisterService(&OrganizationsAppgroupsAppsKeysServer_ServiceDesc, srv)
}

func _OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsAppgroupsAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).CreateOrganizationsAppgroupsAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/CreateOrganizationsAppgroupsAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).CreateOrganizationsAppgroupsAppsKey(ctx, req.(*CreateOrganizationsAppgroupsAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsAppgroupsAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).DeleteOrganizationsAppgroupsAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/DeleteOrganizationsAppgroupsAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).DeleteOrganizationsAppgroupsAppsKey(ctx, req.(*DeleteOrganizationsAppgroupsAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsAppgroupsAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).GetOrganizationsAppgroupsAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/GetOrganizationsAppgroupsAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).GetOrganizationsAppgroupsAppsKey(ctx, req.(*GetOrganizationsAppgroupsAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysServerServer).UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx, req.(*UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAppgroupsAppsKeysServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAppgroupsAppsKeysServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAppgroupsAppsKeysServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer",
	HandlerType: (*OrganizationsAppgroupsAppsKeysServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsAppgroupsAppsKey",
			Handler:    _OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_Handler,
		},
		{
			MethodName: "DeleteOrganizationsAppgroupsAppsKey",
			Handler:    _OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_Handler,
		},
		{
			MethodName: "GetOrganizationsAppgroupsAppsKey",
			Handler:    _OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_Handler,
		},
		{
			MethodName: "UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey",
			Handler:    _OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAppgroupsAppsKeysApiproductsServerClient is the client API for OrganizationsAppgroupsAppsKeysApiproductsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAppgroupsAppsKeysApiproductsServerClient interface {
	// Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
	DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx context.Context, in *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Approves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
	UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx context.Context, in *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsAppgroupsAppsKeysApiproductsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAppgroupsAppsKeysApiproductsServerClient(cc grpc.ClientConnInterface) OrganizationsAppgroupsAppsKeysApiproductsServerClient {
	return &organizationsAppgroupsAppsKeysApiproductsServerClient{cc}
}

func (c *organizationsAppgroupsAppsKeysApiproductsServerClient) DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx context.Context, in *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	out := new(GoogleCloudApigeeV1AppGroupAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/DeleteOrganizationsAppgroupsAppsKeysApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppgroupsAppsKeysApiproductsServerClient) UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx context.Context, in *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAppgroupsAppsKeysApiproductsServerServer is the server API for OrganizationsAppgroupsAppsKeysApiproductsServer service.
// All implementations must embed UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer
// for forward compatibility
type OrganizationsAppgroupsAppsKeysApiproductsServerServer interface {
	// Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
	DeleteOrganizationsAppgroupsAppsKeysApiproduct(context.Context, *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error)
	// Approves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
	UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(context.Context, *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer()
}

// UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer struct {
}

func (UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer) DeleteOrganizationsAppgroupsAppsKeysApiproduct(context.Context, *DeleteOrganizationsAppgroupsAppsKeysApiproductRequest) (*GoogleCloudApigeeV1AppGroupAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsAppgroupsAppsKeysApiproduct not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer) UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(context.Context, *UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct not implemented")
}
func (UnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer) mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer() {
}

// UnsafeOrganizationsAppgroupsAppsKeysApiproductsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAppgroupsAppsKeysApiproductsServerServer will
// result in compilation errors.
type UnsafeOrganizationsAppgroupsAppsKeysApiproductsServerServer interface {
	mustEmbedUnimplementedOrganizationsAppgroupsAppsKeysApiproductsServerServer()
}

func RegisterOrganizationsAppgroupsAppsKeysApiproductsServerServer(s grpc.ServiceRegistrar, srv OrganizationsAppgroupsAppsKeysApiproductsServerServer) {
	s.RegisterService(&OrganizationsAppgroupsAppsKeysApiproductsServer_ServiceDesc, srv)
}

func _OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsAppgroupsAppsKeysApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysApiproductsServerServer).DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/DeleteOrganizationsAppgroupsAppsKeysApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysApiproductsServerServer).DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx, req.(*DeleteOrganizationsAppgroupsAppsKeysApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppgroupsAppsKeysApiproductsServerServer).UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppgroupsAppsKeysApiproductsServerServer).UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx, req.(*UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAppgroupsAppsKeysApiproductsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAppgroupsAppsKeysApiproductsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAppgroupsAppsKeysApiproductsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer",
	HandlerType: (*OrganizationsAppgroupsAppsKeysApiproductsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsAppgroupsAppsKeysApiproduct",
			Handler:    _OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_Handler,
		},
		{
			MethodName: "UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct",
			Handler:    _OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsAppsServerClient is the client API for OrganizationsAppsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsAppsServerClient interface {
	// Gets the app profile for the specified app ID.
	GetOrganizationsApp(ctx context.Context, in *GetOrganizationsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1App, error)
	// Lists IDs of apps within an organization that have the specified app status (approved or revoked) or are of the specified app type (developer or company).
	ListOrganizationsApps(ctx context.Context, in *ListOrganizationsAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppsResponse, error)
}

type organizationsAppsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsAppsServerClient(cc grpc.ClientConnInterface) OrganizationsAppsServerClient {
	return &organizationsAppsServerClient{cc}
}

func (c *organizationsAppsServerClient) GetOrganizationsApp(ctx context.Context, in *GetOrganizationsAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1App, error) {
	out := new(GoogleCloudApigeeV1App)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/GetOrganizationsApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsAppsServerClient) ListOrganizationsApps(ctx context.Context, in *ListOrganizationsAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAppsResponse, error) {
	out := new(GoogleCloudApigeeV1ListAppsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/ListOrganizationsApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsAppsServerServer is the server API for OrganizationsAppsServer service.
// All implementations must embed UnimplementedOrganizationsAppsServerServer
// for forward compatibility
type OrganizationsAppsServerServer interface {
	// Gets the app profile for the specified app ID.
	GetOrganizationsApp(context.Context, *GetOrganizationsAppRequest) (*GoogleCloudApigeeV1App, error)
	// Lists IDs of apps within an organization that have the specified app status (approved or revoked) or are of the specified app type (developer or company).
	ListOrganizationsApps(context.Context, *ListOrganizationsAppsRequest) (*GoogleCloudApigeeV1ListAppsResponse, error)
	mustEmbedUnimplementedOrganizationsAppsServerServer()
}

// UnimplementedOrganizationsAppsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsAppsServerServer struct {
}

func (UnimplementedOrganizationsAppsServerServer) GetOrganizationsApp(context.Context, *GetOrganizationsAppRequest) (*GoogleCloudApigeeV1App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsApp not implemented")
}
func (UnimplementedOrganizationsAppsServerServer) ListOrganizationsApps(context.Context, *ListOrganizationsAppsRequest) (*GoogleCloudApigeeV1ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsApps not implemented")
}
func (UnimplementedOrganizationsAppsServerServer) mustEmbedUnimplementedOrganizationsAppsServerServer() {
}

// UnsafeOrganizationsAppsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsAppsServerServer will
// result in compilation errors.
type UnsafeOrganizationsAppsServerServer interface {
	mustEmbedUnimplementedOrganizationsAppsServerServer()
}

func RegisterOrganizationsAppsServerServer(s grpc.ServiceRegistrar, srv OrganizationsAppsServerServer) {
	s.RegisterService(&OrganizationsAppsServer_ServiceDesc, srv)
}

func _OrganizationsAppsServer_GetOrganizationsApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppsServerServer).GetOrganizationsApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/GetOrganizationsApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppsServerServer).GetOrganizationsApp(ctx, req.(*GetOrganizationsAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsAppsServer_ListOrganizationsApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsAppsServerServer).ListOrganizationsApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/ListOrganizationsApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsAppsServerServer).ListOrganizationsApps(ctx, req.(*ListOrganizationsAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsAppsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsAppsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsAppsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsAppsServer",
	HandlerType: (*OrganizationsAppsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsApp",
			Handler:    _OrganizationsAppsServer_GetOrganizationsApp_Handler,
		},
		{
			MethodName: "ListOrganizationsApps",
			Handler:    _OrganizationsAppsServer_ListOrganizationsApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDatacollectorsServerClient is the client API for OrganizationsDatacollectorsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDatacollectorsServerClient interface {
	// Creates a new data collector.
	CreateOrganizationsDatacollector(ctx context.Context, in *CreateOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error)
	// Deletes a data collector.
	DeleteOrganizationsDatacollector(ctx context.Context, in *DeleteOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Gets a data collector.
	GetOrganizationsDatacollector(ctx context.Context, in *GetOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error)
	// Lists all data collectors.
	ListOrganizationsDatacollectors(ctx context.Context, in *ListOrganizationsDatacollectorsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDataCollectorsResponse, error)
	// Updates a data collector.
	PatchOrganizationsDatacollector(ctx context.Context, in *PatchOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error)
}

type organizationsDatacollectorsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDatacollectorsServerClient(cc grpc.ClientConnInterface) OrganizationsDatacollectorsServerClient {
	return &organizationsDatacollectorsServerClient{cc}
}

func (c *organizationsDatacollectorsServerClient) CreateOrganizationsDatacollector(ctx context.Context, in *CreateOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error) {
	out := new(GoogleCloudApigeeV1DataCollector)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/CreateOrganizationsDatacollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDatacollectorsServerClient) DeleteOrganizationsDatacollector(ctx context.Context, in *DeleteOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/DeleteOrganizationsDatacollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDatacollectorsServerClient) GetOrganizationsDatacollector(ctx context.Context, in *GetOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error) {
	out := new(GoogleCloudApigeeV1DataCollector)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/GetOrganizationsDatacollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDatacollectorsServerClient) ListOrganizationsDatacollectors(ctx context.Context, in *ListOrganizationsDatacollectorsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDataCollectorsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDataCollectorsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/ListOrganizationsDatacollectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDatacollectorsServerClient) PatchOrganizationsDatacollector(ctx context.Context, in *PatchOrganizationsDatacollectorRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DataCollector, error) {
	out := new(GoogleCloudApigeeV1DataCollector)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/PatchOrganizationsDatacollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDatacollectorsServerServer is the server API for OrganizationsDatacollectorsServer service.
// All implementations must embed UnimplementedOrganizationsDatacollectorsServerServer
// for forward compatibility
type OrganizationsDatacollectorsServerServer interface {
	// Creates a new data collector.
	CreateOrganizationsDatacollector(context.Context, *CreateOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error)
	// Deletes a data collector.
	DeleteOrganizationsDatacollector(context.Context, *DeleteOrganizationsDatacollectorRequest) (*GoogleProtobufEmpty, error)
	// Gets a data collector.
	GetOrganizationsDatacollector(context.Context, *GetOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error)
	// Lists all data collectors.
	ListOrganizationsDatacollectors(context.Context, *ListOrganizationsDatacollectorsRequest) (*GoogleCloudApigeeV1ListDataCollectorsResponse, error)
	// Updates a data collector.
	PatchOrganizationsDatacollector(context.Context, *PatchOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error)
	mustEmbedUnimplementedOrganizationsDatacollectorsServerServer()
}

// UnimplementedOrganizationsDatacollectorsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDatacollectorsServerServer struct {
}

func (UnimplementedOrganizationsDatacollectorsServerServer) CreateOrganizationsDatacollector(context.Context, *CreateOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDatacollector not implemented")
}
func (UnimplementedOrganizationsDatacollectorsServerServer) DeleteOrganizationsDatacollector(context.Context, *DeleteOrganizationsDatacollectorRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDatacollector not implemented")
}
func (UnimplementedOrganizationsDatacollectorsServerServer) GetOrganizationsDatacollector(context.Context, *GetOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDatacollector not implemented")
}
func (UnimplementedOrganizationsDatacollectorsServerServer) ListOrganizationsDatacollectors(context.Context, *ListOrganizationsDatacollectorsRequest) (*GoogleCloudApigeeV1ListDataCollectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDatacollectors not implemented")
}
func (UnimplementedOrganizationsDatacollectorsServerServer) PatchOrganizationsDatacollector(context.Context, *PatchOrganizationsDatacollectorRequest) (*GoogleCloudApigeeV1DataCollector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsDatacollector not implemented")
}
func (UnimplementedOrganizationsDatacollectorsServerServer) mustEmbedUnimplementedOrganizationsDatacollectorsServerServer() {
}

// UnsafeOrganizationsDatacollectorsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDatacollectorsServerServer will
// result in compilation errors.
type UnsafeOrganizationsDatacollectorsServerServer interface {
	mustEmbedUnimplementedOrganizationsDatacollectorsServerServer()
}

func RegisterOrganizationsDatacollectorsServerServer(s grpc.ServiceRegistrar, srv OrganizationsDatacollectorsServerServer) {
	s.RegisterService(&OrganizationsDatacollectorsServer_ServiceDesc, srv)
}

func _OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDatacollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDatacollectorsServerServer).CreateOrganizationsDatacollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/CreateOrganizationsDatacollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDatacollectorsServerServer).CreateOrganizationsDatacollector(ctx, req.(*CreateOrganizationsDatacollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDatacollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDatacollectorsServerServer).DeleteOrganizationsDatacollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/DeleteOrganizationsDatacollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDatacollectorsServerServer).DeleteOrganizationsDatacollector(ctx, req.(*DeleteOrganizationsDatacollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDatacollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDatacollectorsServerServer).GetOrganizationsDatacollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/GetOrganizationsDatacollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDatacollectorsServerServer).GetOrganizationsDatacollector(ctx, req.(*GetOrganizationsDatacollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDatacollectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDatacollectorsServerServer).ListOrganizationsDatacollectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/ListOrganizationsDatacollectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDatacollectorsServerServer).ListOrganizationsDatacollectors(ctx, req.(*ListOrganizationsDatacollectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsDatacollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDatacollectorsServerServer).PatchOrganizationsDatacollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/PatchOrganizationsDatacollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDatacollectorsServerServer).PatchOrganizationsDatacollector(ctx, req.(*PatchOrganizationsDatacollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDatacollectorsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDatacollectorsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDatacollectorsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer",
	HandlerType: (*OrganizationsDatacollectorsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsDatacollector",
			Handler:    _OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_Handler,
		},
		{
			MethodName: "DeleteOrganizationsDatacollector",
			Handler:    _OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_Handler,
		},
		{
			MethodName: "GetOrganizationsDatacollector",
			Handler:    _OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_Handler,
		},
		{
			MethodName: "ListOrganizationsDatacollectors",
			Handler:    _OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_Handler,
		},
		{
			MethodName: "PatchOrganizationsDatacollector",
			Handler:    _OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDeploymentsServerClient is the client API for OrganizationsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDeploymentsServerClient interface {
	// Lists all deployments of API proxies or shared flows.
	ListOrganizationsDeployments(ctx context.Context, in *ListOrganizationsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsDeploymentsServerClient {
	return &organizationsDeploymentsServerClient{cc}
}

func (c *organizationsDeploymentsServerClient) ListOrganizationsDeployments(ctx context.Context, in *ListOrganizationsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer/ListOrganizationsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDeploymentsServerServer is the server API for OrganizationsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsDeploymentsServerServer
// for forward compatibility
type OrganizationsDeploymentsServerServer interface {
	// Lists all deployments of API proxies or shared flows.
	ListOrganizationsDeployments(context.Context, *ListOrganizationsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsDeploymentsServerServer()
}

// UnimplementedOrganizationsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsDeploymentsServerServer) ListOrganizationsDeployments(context.Context, *ListOrganizationsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDeployments not implemented")
}
func (UnimplementedOrganizationsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsDeploymentsServerServer() {
}

// UnsafeOrganizationsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsDeploymentsServerServer()
}

func RegisterOrganizationsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsDeploymentsServer_ListOrganizationsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDeploymentsServerServer).ListOrganizationsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer/ListOrganizationsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDeploymentsServerServer).ListOrganizationsDeployments(ctx, req.(*ListOrganizationsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer",
	HandlerType: (*OrganizationsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsDeployments",
			Handler:    _OrganizationsDeploymentsServer_ListOrganizationsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersServerClient is the client API for OrganizationsDevelopersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersServerClient interface {
	// Updates developer attributes. This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	AttributesOrganizationsDeveloper(ctx context.Context, in *AttributesOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Creates a developer. Once created, the developer can register an app and obtain an API key. At creation time, a developer is set as `active`. To change the developer status, use the SetDeveloperStatus API.
	CreateOrganizationsDeveloper(ctx context.Context, in *CreateOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error)
	// Deletes a developer. All apps and API keys associated with the developer are also removed. **Warning**: This API will permanently delete the developer and related artifacts. To avoid permanently deleting developers and their artifacts, set the developer status to `inactive` using the SetDeveloperStatus API. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsDeveloper(ctx context.Context, in *DeleteOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error)
	// Returns the developer details, including the developer's name, email address, apps, and other information. **Note**: The response includes only the first 100 developer apps.
	GetOrganizationsDeveloper(ctx context.Context, in *GetOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error)
	// Gets the account balance for the developer.
	GetBalanceOrganizationsDeveloper(ctx context.Context, in *GetBalanceOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error)
	// Gets the monetization configuration for the developer.
	GetMonetizationConfigOrganizationsDeveloper(ctx context.Context, in *GetMonetizationConfigOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error)
	// Lists all developers in an organization by email address. By default, the response does not include company developers. Set the `includeCompany` query parameter to `true` to include company developers. **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the `startKey` and `count` query parameters.
	ListOrganizationsDevelopers(ctx context.Context, in *ListOrganizationsDevelopersRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListOfDevelopersResponse, error)
	// Sets the status of a developer. A developer is `active` by default. If you set a developer's status to `inactive`, the API keys assigned to the developer apps are no longer valid even though the API keys are set to `approved`. Inactive developers can still sign in to the developer portal and create apps; however, any new API keys generated during app creation won't work. To set the status of a developer, set the `action` query parameter to `active` or `inactive`, and the `Content-Type` header to `application/octet-stream`. If successful, the API call returns the following HTTP status code: `204 No Content`
	SetDeveloperStatusOrganizationsDeveloper(ctx context.Context, in *SetDeveloperStatusOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Updates a developer. This API replaces the existing developer details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateOrganizationsDeveloper(ctx context.Context, in *UpdateOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error)
	// Updates the monetization configuration for the developer.
	UpdateMonetizationConfigOrganizationsDeveloper(ctx context.Context, in *UpdateMonetizationConfigOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error)
}

type organizationsDevelopersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersServerClient {
	return &organizationsDevelopersServerClient{cc}
}

func (c *organizationsDevelopersServerClient) AttributesOrganizationsDeveloper(ctx context.Context, in *AttributesOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/AttributesOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) CreateOrganizationsDeveloper(ctx context.Context, in *CreateOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error) {
	out := new(GoogleCloudApigeeV1Developer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/CreateOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) DeleteOrganizationsDeveloper(ctx context.Context, in *DeleteOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error) {
	out := new(GoogleCloudApigeeV1Developer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/DeleteOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) GetOrganizationsDeveloper(ctx context.Context, in *GetOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error) {
	out := new(GoogleCloudApigeeV1Developer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) GetBalanceOrganizationsDeveloper(ctx context.Context, in *GetBalanceOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	out := new(GoogleCloudApigeeV1DeveloperBalance)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetBalanceOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) GetMonetizationConfigOrganizationsDeveloper(ctx context.Context, in *GetMonetizationConfigOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error) {
	out := new(GoogleCloudApigeeV1DeveloperMonetizationConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetMonetizationConfigOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) ListOrganizationsDevelopers(ctx context.Context, in *ListOrganizationsDevelopersRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListOfDevelopersResponse, error) {
	out := new(GoogleCloudApigeeV1ListOfDevelopersResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/ListOrganizationsDevelopers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) SetDeveloperStatusOrganizationsDeveloper(ctx context.Context, in *SetDeveloperStatusOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/SetDeveloperStatusOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) UpdateOrganizationsDeveloper(ctx context.Context, in *UpdateOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Developer, error) {
	out := new(GoogleCloudApigeeV1Developer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersServerClient) UpdateMonetizationConfigOrganizationsDeveloper(ctx context.Context, in *UpdateMonetizationConfigOrganizationsDeveloperRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error) {
	out := new(GoogleCloudApigeeV1DeveloperMonetizationConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateMonetizationConfigOrganizationsDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersServerServer is the server API for OrganizationsDevelopersServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersServerServer
// for forward compatibility
type OrganizationsDevelopersServerServer interface {
	// Updates developer attributes. This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	AttributesOrganizationsDeveloper(context.Context, *AttributesOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Creates a developer. Once created, the developer can register an app and obtain an API key. At creation time, a developer is set as `active`. To change the developer status, use the SetDeveloperStatus API.
	CreateOrganizationsDeveloper(context.Context, *CreateOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error)
	// Deletes a developer. All apps and API keys associated with the developer are also removed. **Warning**: This API will permanently delete the developer and related artifacts. To avoid permanently deleting developers and their artifacts, set the developer status to `inactive` using the SetDeveloperStatus API. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsDeveloper(context.Context, *DeleteOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error)
	// Returns the developer details, including the developer's name, email address, apps, and other information. **Note**: The response includes only the first 100 developer apps.
	GetOrganizationsDeveloper(context.Context, *GetOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error)
	// Gets the account balance for the developer.
	GetBalanceOrganizationsDeveloper(context.Context, *GetBalanceOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperBalance, error)
	// Gets the monetization configuration for the developer.
	GetMonetizationConfigOrganizationsDeveloper(context.Context, *GetMonetizationConfigOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error)
	// Lists all developers in an organization by email address. By default, the response does not include company developers. Set the `includeCompany` query parameter to `true` to include company developers. **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the `startKey` and `count` query parameters.
	ListOrganizationsDevelopers(context.Context, *ListOrganizationsDevelopersRequest) (*GoogleCloudApigeeV1ListOfDevelopersResponse, error)
	// Sets the status of a developer. A developer is `active` by default. If you set a developer's status to `inactive`, the API keys assigned to the developer apps are no longer valid even though the API keys are set to `approved`. Inactive developers can still sign in to the developer portal and create apps; however, any new API keys generated during app creation won't work. To set the status of a developer, set the `action` query parameter to `active` or `inactive`, and the `Content-Type` header to `application/octet-stream`. If successful, the API call returns the following HTTP status code: `204 No Content`
	SetDeveloperStatusOrganizationsDeveloper(context.Context, *SetDeveloperStatusOrganizationsDeveloperRequest) (*GoogleProtobufEmpty, error)
	// Updates a developer. This API replaces the existing developer details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateOrganizationsDeveloper(context.Context, *UpdateOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error)
	// Updates the monetization configuration for the developer.
	UpdateMonetizationConfigOrganizationsDeveloper(context.Context, *UpdateMonetizationConfigOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error)
	mustEmbedUnimplementedOrganizationsDevelopersServerServer()
}

// UnimplementedOrganizationsDevelopersServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersServerServer struct {
}

func (UnimplementedOrganizationsDevelopersServerServer) AttributesOrganizationsDeveloper(context.Context, *AttributesOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributesOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) CreateOrganizationsDeveloper(context.Context, *CreateOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) DeleteOrganizationsDeveloper(context.Context, *DeleteOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) GetOrganizationsDeveloper(context.Context, *GetOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) GetBalanceOrganizationsDeveloper(context.Context, *GetBalanceOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) GetMonetizationConfigOrganizationsDeveloper(context.Context, *GetMonetizationConfigOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonetizationConfigOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) ListOrganizationsDevelopers(context.Context, *ListOrganizationsDevelopersRequest) (*GoogleCloudApigeeV1ListOfDevelopersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDevelopers not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) SetDeveloperStatusOrganizationsDeveloper(context.Context, *SetDeveloperStatusOrganizationsDeveloperRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeveloperStatusOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) UpdateOrganizationsDeveloper(context.Context, *UpdateOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) UpdateMonetizationConfigOrganizationsDeveloper(context.Context, *UpdateMonetizationConfigOrganizationsDeveloperRequest) (*GoogleCloudApigeeV1DeveloperMonetizationConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonetizationConfigOrganizationsDeveloper not implemented")
}
func (UnimplementedOrganizationsDevelopersServerServer) mustEmbedUnimplementedOrganizationsDevelopersServerServer() {
}

// UnsafeOrganizationsDevelopersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersServerServer()
}

func RegisterOrganizationsDevelopersServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersServerServer) {
	s.RegisterService(&OrganizationsDevelopersServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributesOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).AttributesOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/AttributesOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).AttributesOrganizationsDeveloper(ctx, req.(*AttributesOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_CreateOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).CreateOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/CreateOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).CreateOrganizationsDeveloper(ctx, req.(*CreateOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).DeleteOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/DeleteOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).DeleteOrganizationsDeveloper(ctx, req.(*DeleteOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_GetOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).GetOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).GetOrganizationsDeveloper(ctx, req.(*GetOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).GetBalanceOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetBalanceOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).GetBalanceOrganizationsDeveloper(ctx, req.(*GetBalanceOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonetizationConfigOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).GetMonetizationConfigOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetMonetizationConfigOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).GetMonetizationConfigOrganizationsDeveloper(ctx, req.(*GetMonetizationConfigOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_ListOrganizationsDevelopers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDevelopersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).ListOrganizationsDevelopers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/ListOrganizationsDevelopers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).ListOrganizationsDevelopers(ctx, req.(*ListOrganizationsDevelopersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeveloperStatusOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).SetDeveloperStatusOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/SetDeveloperStatusOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).SetDeveloperStatusOrganizationsDeveloper(ctx, req.(*SetDeveloperStatusOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).UpdateOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).UpdateOrganizationsDeveloper(ctx, req.(*UpdateOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonetizationConfigOrganizationsDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersServerServer).UpdateMonetizationConfigOrganizationsDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateMonetizationConfigOrganizationsDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersServerServer).UpdateMonetizationConfigOrganizationsDeveloper(ctx, req.(*UpdateMonetizationConfigOrganizationsDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer",
	HandlerType: (*OrganizationsDevelopersServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttributesOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "CreateOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_CreateOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "DeleteOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "GetOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_GetOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "GetBalanceOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "GetMonetizationConfigOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "ListOrganizationsDevelopers",
			Handler:    _OrganizationsDevelopersServer_ListOrganizationsDevelopers_Handler,
		},
		{
			MethodName: "SetDeveloperStatusOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "UpdateOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_Handler,
		},
		{
			MethodName: "UpdateMonetizationConfigOrganizationsDeveloper",
			Handler:    _OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAppsServerClient is the client API for OrganizationsDevelopersAppsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAppsServerClient interface {
	// Updates attributes for a developer app. This API replaces the current attributes with those specified in the request.
	AttributesOrganizationsDevelopersApp(ctx context.Context, in *AttributesOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Creates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls. The `DisplayName` (set as an attribute) appears in the UI. If you don't set the `DisplayName` attribute, the `name` appears in the UI.
	CreateOrganizationsDevelopersApp(ctx context.Context, in *CreateOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Deletes a developer app. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsDevelopersApp(ctx context.Context, in *DeleteOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Manages access to a developer app by enabling you to: * Approve or revoke a developer app * Generate a new consumer key and secret for a developer app To approve or revoke a developer app, set the `action` query parameter to `approve` or `revoke`, respectively, and the `Content-Type` header to `application/octet-stream`. If a developer app is revoked, none of its API keys are valid for API calls even though the keys are still approved. If successful, the API call returns the following HTTP status code: `204 No Content` To generate a new consumer key and secret for a developer app, pass the new key/secret details. Rather than replace an existing key, this API generates a new key. In this case, multiple key pairs may be associated with a single developer app. Each key pair has an independent status (`approve` or `revoke`) and expiration time. Any approved, non-expired key can be used in an API call. For example, if you're using API key rotation, you can generate new keys with expiration times that overlap keys that are going to expire. You might also generate a new consumer key/secret if the security of the original key/secret is compromised. The `keyExpiresIn` property defines the expiration time for the API key in milliseconds. If you don't set this property or set it to `-1`, the API key never expires. **Notes**: * When generating a new key/secret, this API replaces the existing attributes, notes, and callback URLs with those specified in the request. Include or exclude any existing information that you want to retain or delete, respectively. * To migrate existing consumer keys and secrets to hybrid from another system, see the CreateDeveloperAppKey API.
	GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx context.Context, in *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Returns the details for a developer app.
	GetOrganizationsDevelopersApp(ctx context.Context, in *GetOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Lists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps. A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the `startKey` and `count` query parameters.
	ListOrganizationsDevelopersApps(ctx context.Context, in *ListOrganizationsDevelopersAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeveloperAppsResponse, error)
	// Updates the details for a developer app. In addition, you can add an API product to a developer app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateDeveloperAppKey API. Using this API, you cannot update the following: * App name as it is the primary key used to identify the app and cannot be changed. * Scopes associated with the app. Instead, use the ReplaceDeveloperAppKey API. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
	UpdateOrganizationsDevelopersApp(ctx context.Context, in *UpdateOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error)
}

type organizationsDevelopersAppsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAppsServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAppsServerClient {
	return &organizationsDevelopersAppsServerClient{cc}
}

func (c *organizationsDevelopersAppsServerClient) AttributesOrganizationsDevelopersApp(ctx context.Context, in *AttributesOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/AttributesOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) CreateOrganizationsDevelopersApp(ctx context.Context, in *CreateOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error) {
	out := new(GoogleCloudApigeeV1DeveloperApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/CreateOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) DeleteOrganizationsDevelopersApp(ctx context.Context, in *DeleteOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error) {
	out := new(GoogleCloudApigeeV1DeveloperApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/DeleteOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx context.Context, in *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error) {
	out := new(GoogleCloudApigeeV1DeveloperApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) GetOrganizationsDevelopersApp(ctx context.Context, in *GetOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error) {
	out := new(GoogleCloudApigeeV1DeveloperApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GetOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) ListOrganizationsDevelopersApps(ctx context.Context, in *ListOrganizationsDevelopersAppsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeveloperAppsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeveloperAppsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/ListOrganizationsDevelopersApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsServerClient) UpdateOrganizationsDevelopersApp(ctx context.Context, in *UpdateOrganizationsDevelopersAppRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperApp, error) {
	out := new(GoogleCloudApigeeV1DeveloperApp)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/UpdateOrganizationsDevelopersApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAppsServerServer is the server API for OrganizationsDevelopersAppsServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAppsServerServer
// for forward compatibility
type OrganizationsDevelopersAppsServerServer interface {
	// Updates attributes for a developer app. This API replaces the current attributes with those specified in the request.
	AttributesOrganizationsDevelopersApp(context.Context, *AttributesOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Creates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls. The `DisplayName` (set as an attribute) appears in the UI. If you don't set the `DisplayName` attribute, the `name` appears in the UI.
	CreateOrganizationsDevelopersApp(context.Context, *CreateOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Deletes a developer app. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.
	DeleteOrganizationsDevelopersApp(context.Context, *DeleteOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Manages access to a developer app by enabling you to: * Approve or revoke a developer app * Generate a new consumer key and secret for a developer app To approve or revoke a developer app, set the `action` query parameter to `approve` or `revoke`, respectively, and the `Content-Type` header to `application/octet-stream`. If a developer app is revoked, none of its API keys are valid for API calls even though the keys are still approved. If successful, the API call returns the following HTTP status code: `204 No Content` To generate a new consumer key and secret for a developer app, pass the new key/secret details. Rather than replace an existing key, this API generates a new key. In this case, multiple key pairs may be associated with a single developer app. Each key pair has an independent status (`approve` or `revoke`) and expiration time. Any approved, non-expired key can be used in an API call. For example, if you're using API key rotation, you can generate new keys with expiration times that overlap keys that are going to expire. You might also generate a new consumer key/secret if the security of the original key/secret is compromised. The `keyExpiresIn` property defines the expiration time for the API key in milliseconds. If you don't set this property or set it to `-1`, the API key never expires. **Notes**: * When generating a new key/secret, this API replaces the existing attributes, notes, and callback URLs with those specified in the request. Include or exclude any existing information that you want to retain or delete, respectively. * To migrate existing consumer keys and secrets to hybrid from another system, see the CreateDeveloperAppKey API.
	GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(context.Context, *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Returns the details for a developer app.
	GetOrganizationsDevelopersApp(context.Context, *GetOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error)
	// Lists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps. A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the `startKey` and `count` query parameters.
	ListOrganizationsDevelopersApps(context.Context, *ListOrganizationsDevelopersAppsRequest) (*GoogleCloudApigeeV1ListDeveloperAppsResponse, error)
	// Updates the details for a developer app. In addition, you can add an API product to a developer app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateDeveloperAppKey API. Using this API, you cannot update the following: * App name as it is the primary key used to identify the app and cannot be changed. * Scopes associated with the app. Instead, use the ReplaceDeveloperAppKey API. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.
	UpdateOrganizationsDevelopersApp(context.Context, *UpdateOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error)
	mustEmbedUnimplementedOrganizationsDevelopersAppsServerServer()
}

// UnimplementedOrganizationsDevelopersAppsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAppsServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAppsServerServer) AttributesOrganizationsDevelopersApp(context.Context, *AttributesOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributesOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) CreateOrganizationsDevelopersApp(context.Context, *CreateOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) DeleteOrganizationsDevelopersApp(context.Context, *DeleteOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(context.Context, *GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) GetOrganizationsDevelopersApp(context.Context, *GetOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) ListOrganizationsDevelopersApps(context.Context, *ListOrganizationsDevelopersAppsRequest) (*GoogleCloudApigeeV1ListDeveloperAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDevelopersApps not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) UpdateOrganizationsDevelopersApp(context.Context, *UpdateOrganizationsDevelopersAppRequest) (*GoogleCloudApigeeV1DeveloperApp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsDevelopersApp not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsServerServer) mustEmbedUnimplementedOrganizationsDevelopersAppsServerServer() {
}

// UnsafeOrganizationsDevelopersAppsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAppsServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAppsServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAppsServerServer()
}

func RegisterOrganizationsDevelopersAppsServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAppsServerServer) {
	s.RegisterService(&OrganizationsDevelopersAppsServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributesOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).AttributesOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/AttributesOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).AttributesOrganizationsDevelopersApp(ctx, req.(*AttributesOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).CreateOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/CreateOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).CreateOrganizationsDevelopersApp(ctx, req.(*CreateOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).DeleteOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/DeleteOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).DeleteOrganizationsDevelopersApp(ctx, req.(*DeleteOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx, req.(*GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).GetOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GetOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).GetOrganizationsDevelopersApp(ctx, req.(*GetOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDevelopersAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).ListOrganizationsDevelopersApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/ListOrganizationsDevelopersApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).ListOrganizationsDevelopersApps(ctx, req.(*ListOrganizationsDevelopersAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsDevelopersAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsServerServer).UpdateOrganizationsDevelopersApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/UpdateOrganizationsDevelopersApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsServerServer).UpdateOrganizationsDevelopersApp(ctx, req.(*UpdateOrganizationsDevelopersAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAppsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAppsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAppsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer",
	HandlerType: (*OrganizationsDevelopersAppsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttributesOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_Handler,
		},
		{
			MethodName: "CreateOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_Handler,
		},
		{
			MethodName: "DeleteOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_Handler,
		},
		{
			MethodName: "GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_Handler,
		},
		{
			MethodName: "GetOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_Handler,
		},
		{
			MethodName: "ListOrganizationsDevelopersApps",
			Handler:    _OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_Handler,
		},
		{
			MethodName: "UpdateOrganizationsDevelopersApp",
			Handler:    _OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAppsAttributesServerClient is the client API for OrganizationsDevelopersAppsAttributesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAppsAttributesServerClient interface {
	// Deletes a developer app attribute.
	DeleteOrganizationsDevelopersAppsAttribute(ctx context.Context, in *DeleteOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a developer app attribute.
	GetOrganizationsDevelopersAppsAttribute(ctx context.Context, in *GetOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a list of all developer app attributes.
	ListOrganizationsDevelopersAppsAttributes(ctx context.Context, in *ListOrganizationsDevelopersAppsAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Updates a developer app attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx context.Context, in *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
}

type organizationsDevelopersAppsAttributesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAppsAttributesServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAppsAttributesServerClient {
	return &organizationsDevelopersAppsAttributesServerClient{cc}
}

func (c *organizationsDevelopersAppsAttributesServerClient) DeleteOrganizationsDevelopersAppsAttribute(ctx context.Context, in *DeleteOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/DeleteOrganizationsDevelopersAppsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsAttributesServerClient) GetOrganizationsDevelopersAppsAttribute(ctx context.Context, in *GetOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/GetOrganizationsDevelopersAppsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsAttributesServerClient) ListOrganizationsDevelopersAppsAttributes(ctx context.Context, in *ListOrganizationsDevelopersAppsAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/ListOrganizationsDevelopersAppsAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsAttributesServerClient) UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx context.Context, in *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAppsAttributesServerServer is the server API for OrganizationsDevelopersAppsAttributesServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAppsAttributesServerServer
// for forward compatibility
type OrganizationsDevelopersAppsAttributesServerServer interface {
	// Deletes a developer app attribute.
	DeleteOrganizationsDevelopersAppsAttribute(context.Context, *DeleteOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a developer app attribute.
	GetOrganizationsDevelopersAppsAttribute(context.Context, *GetOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a list of all developer app attributes.
	ListOrganizationsDevelopersAppsAttributes(context.Context, *ListOrganizationsDevelopersAppsAttributesRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Updates a developer app attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(context.Context, *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	mustEmbedUnimplementedOrganizationsDevelopersAppsAttributesServerServer()
}

// UnimplementedOrganizationsDevelopersAppsAttributesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAppsAttributesServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAppsAttributesServerServer) DeleteOrganizationsDevelopersAppsAttribute(context.Context, *DeleteOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDevelopersAppsAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsAttributesServerServer) GetOrganizationsDevelopersAppsAttribute(context.Context, *GetOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDevelopersAppsAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsAttributesServerServer) ListOrganizationsDevelopersAppsAttributes(context.Context, *ListOrganizationsDevelopersAppsAttributesRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDevelopersAppsAttributes not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsAttributesServerServer) UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(context.Context, *UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsAttributesServerServer) mustEmbedUnimplementedOrganizationsDevelopersAppsAttributesServerServer() {
}

// UnsafeOrganizationsDevelopersAppsAttributesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAppsAttributesServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAppsAttributesServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAppsAttributesServerServer()
}

func RegisterOrganizationsDevelopersAppsAttributesServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAppsAttributesServerServer) {
	s.RegisterService(&OrganizationsDevelopersAppsAttributesServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDevelopersAppsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).DeleteOrganizationsDevelopersAppsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/DeleteOrganizationsDevelopersAppsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).DeleteOrganizationsDevelopersAppsAttribute(ctx, req.(*DeleteOrganizationsDevelopersAppsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDevelopersAppsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).GetOrganizationsDevelopersAppsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/GetOrganizationsDevelopersAppsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).GetOrganizationsDevelopersAppsAttribute(ctx, req.(*GetOrganizationsDevelopersAppsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDevelopersAppsAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).ListOrganizationsDevelopersAppsAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/ListOrganizationsDevelopersAppsAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).ListOrganizationsDevelopersAppsAttributes(ctx, req.(*ListOrganizationsDevelopersAppsAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsAttributesServerServer).UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx, req.(*UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAppsAttributesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAppsAttributesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAppsAttributesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer",
	HandlerType: (*OrganizationsDevelopersAppsAttributesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsDevelopersAppsAttribute",
			Handler:    _OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_Handler,
		},
		{
			MethodName: "GetOrganizationsDevelopersAppsAttribute",
			Handler:    _OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_Handler,
		},
		{
			MethodName: "ListOrganizationsDevelopersAppsAttributes",
			Handler:    _OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_Handler,
		},
		{
			MethodName: "UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute",
			Handler:    _OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAppsKeysServerClient is the client API for OrganizationsDevelopersAppsKeysServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAppsKeysServerClient interface {
	// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
	CreateOrganizationsDevelopersAppsKey(ctx context.Context, in *CreateOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs. **Note**: After you delete a consumer key, you may want to: 1. Create a new consumer key and secret for the developer app using the CreateDeveloperAppKey API, and subsequently add an API product to the key using the UpdateDeveloperAppKey API. 2. Delete the developer app, if it is no longer required.
	DeleteOrganizationsDevelopersAppsKey(ctx context.Context, in *DeleteOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Gets details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.
	GetOrganizationsDevelopersAppsKey(ctx context.Context, in *GetOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Updates the scope of an app. This API replaces the existing scopes with those specified in the request. Include or exclude any existing scopes that you want to retain or delete, respectively. The specified scopes must already be defined for the API products associated with the app. This API sets the `scopes` element under the `apiProducts` element in the attributes of the app.
	ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx context.Context, in *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Adds an API product to a developer app key, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to a developer app key. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
	UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx context.Context, in *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
}

type organizationsDevelopersAppsKeysServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAppsKeysServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAppsKeysServerClient {
	return &organizationsDevelopersAppsKeysServerClient{cc}
}

func (c *organizationsDevelopersAppsKeysServerClient) CreateOrganizationsDevelopersAppsKey(ctx context.Context, in *CreateOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/CreateOrganizationsDevelopersAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsKeysServerClient) DeleteOrganizationsDevelopersAppsKey(ctx context.Context, in *DeleteOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/DeleteOrganizationsDevelopersAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsKeysServerClient) GetOrganizationsDevelopersAppsKey(ctx context.Context, in *GetOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/GetOrganizationsDevelopersAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsKeysServerClient) ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx context.Context, in *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsKeysServerClient) UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx context.Context, in *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAppsKeysServerServer is the server API for OrganizationsDevelopersAppsKeysServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAppsKeysServerServer
// for forward compatibility
type OrganizationsDevelopersAppsKeysServerServer interface {
	// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
	CreateOrganizationsDevelopersAppsKey(context.Context, *CreateOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs. **Note**: After you delete a consumer key, you may want to: 1. Create a new consumer key and secret for the developer app using the CreateDeveloperAppKey API, and subsequently add an API product to the key using the UpdateDeveloperAppKey API. 2. Delete the developer app, if it is no longer required.
	DeleteOrganizationsDevelopersAppsKey(context.Context, *DeleteOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Gets details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.
	GetOrganizationsDevelopersAppsKey(context.Context, *GetOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Updates the scope of an app. This API replaces the existing scopes with those specified in the request. Include or exclude any existing scopes that you want to retain or delete, respectively. The specified scopes must already be defined for the API products associated with the app. This API sets the `scopes` element under the `apiProducts` element in the attributes of the app.
	ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(context.Context, *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Adds an API product to a developer app key, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to a developer app key. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.
	UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(context.Context, *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysServerServer()
}

// UnimplementedOrganizationsDevelopersAppsKeysServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAppsKeysServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) CreateOrganizationsDevelopersAppsKey(context.Context, *CreateOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDevelopersAppsKey not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) DeleteOrganizationsDevelopersAppsKey(context.Context, *DeleteOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDevelopersAppsKey not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) GetOrganizationsDevelopersAppsKey(context.Context, *GetOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDevelopersAppsKey not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(context.Context, *ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(context.Context, *UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysServerServer) mustEmbedUnimplementedOrganizationsDevelopersAppsKeysServerServer() {
}

// UnsafeOrganizationsDevelopersAppsKeysServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAppsKeysServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAppsKeysServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysServerServer()
}

func RegisterOrganizationsDevelopersAppsKeysServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAppsKeysServerServer) {
	s.RegisterService(&OrganizationsDevelopersAppsKeysServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDevelopersAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).CreateOrganizationsDevelopersAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/CreateOrganizationsDevelopersAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).CreateOrganizationsDevelopersAppsKey(ctx, req.(*CreateOrganizationsDevelopersAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDevelopersAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).DeleteOrganizationsDevelopersAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/DeleteOrganizationsDevelopersAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).DeleteOrganizationsDevelopersAppsKey(ctx, req.(*DeleteOrganizationsDevelopersAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDevelopersAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).GetOrganizationsDevelopersAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/GetOrganizationsDevelopersAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).GetOrganizationsDevelopersAppsKey(ctx, req.(*GetOrganizationsDevelopersAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, req.(*ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysServerServer).UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, req.(*UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAppsKeysServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAppsKeysServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAppsKeysServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer",
	HandlerType: (*OrganizationsDevelopersAppsKeysServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsDevelopersAppsKey",
			Handler:    _OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_Handler,
		},
		{
			MethodName: "DeleteOrganizationsDevelopersAppsKey",
			Handler:    _OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_Handler,
		},
		{
			MethodName: "GetOrganizationsDevelopersAppsKey",
			Handler:    _OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_Handler,
		},
		{
			MethodName: "ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey",
			Handler:    _OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_Handler,
		},
		{
			MethodName: "UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey",
			Handler:    _OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAppsKeysApiproductsServerClient is the client API for OrganizationsDevelopersAppsKeysApiproductsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAppsKeysApiproductsServerClient interface {
	// Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
	DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx context.Context, in *DeleteOrganizationsDevelopersAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Approves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
	UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx context.Context, in *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsDevelopersAppsKeysApiproductsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAppsKeysApiproductsServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAppsKeysApiproductsServerClient {
	return &organizationsDevelopersAppsKeysApiproductsServerClient{cc}
}

func (c *organizationsDevelopersAppsKeysApiproductsServerClient) DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx context.Context, in *DeleteOrganizationsDevelopersAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/DeleteOrganizationsDevelopersAppsKeysApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAppsKeysApiproductsServerClient) UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx context.Context, in *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAppsKeysApiproductsServerServer is the server API for OrganizationsDevelopersAppsKeysApiproductsServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer
// for forward compatibility
type OrganizationsDevelopersAppsKeysApiproductsServerServer interface {
	// Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.
	DeleteOrganizationsDevelopersAppsKeysApiproduct(context.Context, *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	// Approves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.
	UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(context.Context, *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer()
}

// UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer) DeleteOrganizationsDevelopersAppsKeysApiproduct(context.Context, *DeleteOrganizationsDevelopersAppsKeysApiproductRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDevelopersAppsKeysApiproduct not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer) UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(context.Context, *UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer) mustEmbedUnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer() {
}

// UnsafeOrganizationsDevelopersAppsKeysApiproductsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAppsKeysApiproductsServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAppsKeysApiproductsServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysApiproductsServerServer()
}

func RegisterOrganizationsDevelopersAppsKeysApiproductsServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAppsKeysApiproductsServerServer) {
	s.RegisterService(&OrganizationsDevelopersAppsKeysApiproductsServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDevelopersAppsKeysApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysApiproductsServerServer).DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/DeleteOrganizationsDevelopersAppsKeysApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysApiproductsServerServer).DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx, req.(*DeleteOrganizationsDevelopersAppsKeysApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysApiproductsServerServer).UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysApiproductsServerServer).UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx, req.(*UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAppsKeysApiproductsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAppsKeysApiproductsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAppsKeysApiproductsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer",
	HandlerType: (*OrganizationsDevelopersAppsKeysApiproductsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsDevelopersAppsKeysApiproduct",
			Handler:    _OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_Handler,
		},
		{
			MethodName: "UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct",
			Handler:    _OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAppsKeysCreateServerClient is the client API for OrganizationsDevelopersAppsKeysCreateServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAppsKeysCreateServerClient interface {
	// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
	CreateOrganizationsDevelopersAppsKeysCreate(ctx context.Context, in *CreateOrganizationsDevelopersAppsKeysCreateRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error)
}

type organizationsDevelopersAppsKeysCreateServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAppsKeysCreateServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAppsKeysCreateServerClient {
	return &organizationsDevelopersAppsKeysCreateServerClient{cc}
}

func (c *organizationsDevelopersAppsKeysCreateServerClient) CreateOrganizationsDevelopersAppsKeysCreate(ctx context.Context, in *CreateOrganizationsDevelopersAppsKeysCreateRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	out := new(GoogleCloudApigeeV1DeveloperAppKey)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer/CreateOrganizationsDevelopersAppsKeysCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAppsKeysCreateServerServer is the server API for OrganizationsDevelopersAppsKeysCreateServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAppsKeysCreateServerServer
// for forward compatibility
type OrganizationsDevelopersAppsKeysCreateServerServer interface {
	// Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API. **Note**: All keys start out with status=approved, even if status=revoked is passed when the key is created. To revoke a key, use the UpdateDeveloperAppKey API.
	CreateOrganizationsDevelopersAppsKeysCreate(context.Context, *CreateOrganizationsDevelopersAppsKeysCreateRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error)
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysCreateServerServer()
}

// UnimplementedOrganizationsDevelopersAppsKeysCreateServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAppsKeysCreateServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAppsKeysCreateServerServer) CreateOrganizationsDevelopersAppsKeysCreate(context.Context, *CreateOrganizationsDevelopersAppsKeysCreateRequest) (*GoogleCloudApigeeV1DeveloperAppKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDevelopersAppsKeysCreate not implemented")
}
func (UnimplementedOrganizationsDevelopersAppsKeysCreateServerServer) mustEmbedUnimplementedOrganizationsDevelopersAppsKeysCreateServerServer() {
}

// UnsafeOrganizationsDevelopersAppsKeysCreateServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAppsKeysCreateServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAppsKeysCreateServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAppsKeysCreateServerServer()
}

func RegisterOrganizationsDevelopersAppsKeysCreateServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAppsKeysCreateServerServer) {
	s.RegisterService(&OrganizationsDevelopersAppsKeysCreateServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDevelopersAppsKeysCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAppsKeysCreateServerServer).CreateOrganizationsDevelopersAppsKeysCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer/CreateOrganizationsDevelopersAppsKeysCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAppsKeysCreateServerServer).CreateOrganizationsDevelopersAppsKeysCreate(ctx, req.(*CreateOrganizationsDevelopersAppsKeysCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAppsKeysCreateServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAppsKeysCreateServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAppsKeysCreateServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer",
	HandlerType: (*OrganizationsDevelopersAppsKeysCreateServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsDevelopersAppsKeysCreate",
			Handler:    _OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersAttributesServerClient is the client API for OrganizationsDevelopersAttributesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersAttributesServerClient interface {
	// Deletes a developer attribute.
	DeleteOrganizationsDevelopersAttribute(ctx context.Context, in *DeleteOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Returns the value of the specified developer attribute.
	GetOrganizationsDevelopersAttribute(ctx context.Context, in *GetOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a list of all developer attributes.
	ListOrganizationsDevelopersAttributes(ctx context.Context, in *ListOrganizationsDevelopersAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error)
	// Updates a developer attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx context.Context, in *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error)
}

type organizationsDevelopersAttributesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersAttributesServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersAttributesServerClient {
	return &organizationsDevelopersAttributesServerClient{cc}
}

func (c *organizationsDevelopersAttributesServerClient) DeleteOrganizationsDevelopersAttribute(ctx context.Context, in *DeleteOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/DeleteOrganizationsDevelopersAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAttributesServerClient) GetOrganizationsDevelopersAttribute(ctx context.Context, in *GetOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/GetOrganizationsDevelopersAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAttributesServerClient) ListOrganizationsDevelopersAttributes(ctx context.Context, in *ListOrganizationsDevelopersAttributesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attributes, error) {
	out := new(GoogleCloudApigeeV1Attributes)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/ListOrganizationsDevelopersAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersAttributesServerClient) UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx context.Context, in *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Attribute, error) {
	out := new(GoogleCloudApigeeV1Attribute)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/UpdateDeveloperAttributeOrganizationsDevelopersAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersAttributesServerServer is the server API for OrganizationsDevelopersAttributesServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersAttributesServerServer
// for forward compatibility
type OrganizationsDevelopersAttributesServerServer interface {
	// Deletes a developer attribute.
	DeleteOrganizationsDevelopersAttribute(context.Context, *DeleteOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Returns the value of the specified developer attribute.
	GetOrganizationsDevelopersAttribute(context.Context, *GetOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	// Returns a list of all developer attributes.
	ListOrganizationsDevelopersAttributes(context.Context, *ListOrganizationsDevelopersAttributesRequest) (*GoogleCloudApigeeV1Attributes, error)
	// Updates a developer attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.
	UpdateDeveloperAttributeOrganizationsDevelopersAttribute(context.Context, *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error)
	mustEmbedUnimplementedOrganizationsDevelopersAttributesServerServer()
}

// UnimplementedOrganizationsDevelopersAttributesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersAttributesServerServer struct {
}

func (UnimplementedOrganizationsDevelopersAttributesServerServer) DeleteOrganizationsDevelopersAttribute(context.Context, *DeleteOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsDevelopersAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAttributesServerServer) GetOrganizationsDevelopersAttribute(context.Context, *GetOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDevelopersAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAttributesServerServer) ListOrganizationsDevelopersAttributes(context.Context, *ListOrganizationsDevelopersAttributesRequest) (*GoogleCloudApigeeV1Attributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDevelopersAttributes not implemented")
}
func (UnimplementedOrganizationsDevelopersAttributesServerServer) UpdateDeveloperAttributeOrganizationsDevelopersAttribute(context.Context, *UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest) (*GoogleCloudApigeeV1Attribute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeveloperAttributeOrganizationsDevelopersAttribute not implemented")
}
func (UnimplementedOrganizationsDevelopersAttributesServerServer) mustEmbedUnimplementedOrganizationsDevelopersAttributesServerServer() {
}

// UnsafeOrganizationsDevelopersAttributesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersAttributesServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersAttributesServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersAttributesServerServer()
}

func RegisterOrganizationsDevelopersAttributesServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersAttributesServerServer) {
	s.RegisterService(&OrganizationsDevelopersAttributesServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsDevelopersAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAttributesServerServer).DeleteOrganizationsDevelopersAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/DeleteOrganizationsDevelopersAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAttributesServerServer).DeleteOrganizationsDevelopersAttribute(ctx, req.(*DeleteOrganizationsDevelopersAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDevelopersAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAttributesServerServer).GetOrganizationsDevelopersAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/GetOrganizationsDevelopersAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAttributesServerServer).GetOrganizationsDevelopersAttribute(ctx, req.(*GetOrganizationsDevelopersAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDevelopersAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAttributesServerServer).ListOrganizationsDevelopersAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/ListOrganizationsDevelopersAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAttributesServerServer).ListOrganizationsDevelopersAttributes(ctx, req.(*ListOrganizationsDevelopersAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersAttributesServerServer).UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/UpdateDeveloperAttributeOrganizationsDevelopersAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersAttributesServerServer).UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx, req.(*UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersAttributesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersAttributesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersAttributesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer",
	HandlerType: (*OrganizationsDevelopersAttributesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsDevelopersAttribute",
			Handler:    _OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_Handler,
		},
		{
			MethodName: "GetOrganizationsDevelopersAttribute",
			Handler:    _OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_Handler,
		},
		{
			MethodName: "ListOrganizationsDevelopersAttributes",
			Handler:    _OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_Handler,
		},
		{
			MethodName: "UpdateDeveloperAttributeOrganizationsDevelopersAttribute",
			Handler:    _OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersBalanceServerClient is the client API for OrganizationsDevelopersBalanceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersBalanceServerClient interface {
	// Adjust the prepaid balance for the developer. This API will be used in scenarios where the developer has been under-charged or over-charged.
	AdjustOrganizationsDevelopersBalance(ctx context.Context, in *AdjustOrganizationsDevelopersBalanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error)
	// Credits the account balance for the developer.
	CreditOrganizationsDevelopersBalance(ctx context.Context, in *CreditOrganizationsDevelopersBalanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error)
}

type organizationsDevelopersBalanceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersBalanceServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersBalanceServerClient {
	return &organizationsDevelopersBalanceServerClient{cc}
}

func (c *organizationsDevelopersBalanceServerClient) AdjustOrganizationsDevelopersBalance(ctx context.Context, in *AdjustOrganizationsDevelopersBalanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	out := new(GoogleCloudApigeeV1DeveloperBalance)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/AdjustOrganizationsDevelopersBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersBalanceServerClient) CreditOrganizationsDevelopersBalance(ctx context.Context, in *CreditOrganizationsDevelopersBalanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	out := new(GoogleCloudApigeeV1DeveloperBalance)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/CreditOrganizationsDevelopersBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersBalanceServerServer is the server API for OrganizationsDevelopersBalanceServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersBalanceServerServer
// for forward compatibility
type OrganizationsDevelopersBalanceServerServer interface {
	// Adjust the prepaid balance for the developer. This API will be used in scenarios where the developer has been under-charged or over-charged.
	AdjustOrganizationsDevelopersBalance(context.Context, *AdjustOrganizationsDevelopersBalanceRequest) (*GoogleCloudApigeeV1DeveloperBalance, error)
	// Credits the account balance for the developer.
	CreditOrganizationsDevelopersBalance(context.Context, *CreditOrganizationsDevelopersBalanceRequest) (*GoogleCloudApigeeV1DeveloperBalance, error)
	mustEmbedUnimplementedOrganizationsDevelopersBalanceServerServer()
}

// UnimplementedOrganizationsDevelopersBalanceServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersBalanceServerServer struct {
}

func (UnimplementedOrganizationsDevelopersBalanceServerServer) AdjustOrganizationsDevelopersBalance(context.Context, *AdjustOrganizationsDevelopersBalanceRequest) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustOrganizationsDevelopersBalance not implemented")
}
func (UnimplementedOrganizationsDevelopersBalanceServerServer) CreditOrganizationsDevelopersBalance(context.Context, *CreditOrganizationsDevelopersBalanceRequest) (*GoogleCloudApigeeV1DeveloperBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditOrganizationsDevelopersBalance not implemented")
}
func (UnimplementedOrganizationsDevelopersBalanceServerServer) mustEmbedUnimplementedOrganizationsDevelopersBalanceServerServer() {
}

// UnsafeOrganizationsDevelopersBalanceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersBalanceServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersBalanceServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersBalanceServerServer()
}

func RegisterOrganizationsDevelopersBalanceServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersBalanceServerServer) {
	s.RegisterService(&OrganizationsDevelopersBalanceServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustOrganizationsDevelopersBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersBalanceServerServer).AdjustOrganizationsDevelopersBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/AdjustOrganizationsDevelopersBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersBalanceServerServer).AdjustOrganizationsDevelopersBalance(ctx, req.(*AdjustOrganizationsDevelopersBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditOrganizationsDevelopersBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersBalanceServerServer).CreditOrganizationsDevelopersBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/CreditOrganizationsDevelopersBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersBalanceServerServer).CreditOrganizationsDevelopersBalance(ctx, req.(*CreditOrganizationsDevelopersBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersBalanceServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersBalanceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersBalanceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer",
	HandlerType: (*OrganizationsDevelopersBalanceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdjustOrganizationsDevelopersBalance",
			Handler:    _OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_Handler,
		},
		{
			MethodName: "CreditOrganizationsDevelopersBalance",
			Handler:    _OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsDevelopersSubscriptionsServerClient is the client API for OrganizationsDevelopersSubscriptionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsDevelopersSubscriptionsServerClient interface {
	// Creates a subscription to an API product.
	CreateOrganizationsDevelopersSubscription(ctx context.Context, in *CreateOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Expires an API product subscription immediately.
	ExpireOrganizationsDevelopersSubscription(ctx context.Context, in *ExpireOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Gets details for an API product subscription.
	GetOrganizationsDevelopersSubscription(ctx context.Context, in *GetOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Lists all API product subscriptions for a developer.
	ListOrganizationsDevelopersSubscriptions(ctx context.Context, in *ListOrganizationsDevelopersSubscriptionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse, error)
}

type organizationsDevelopersSubscriptionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsDevelopersSubscriptionsServerClient(cc grpc.ClientConnInterface) OrganizationsDevelopersSubscriptionsServerClient {
	return &organizationsDevelopersSubscriptionsServerClient{cc}
}

func (c *organizationsDevelopersSubscriptionsServerClient) CreateOrganizationsDevelopersSubscription(ctx context.Context, in *CreateOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	out := new(GoogleCloudApigeeV1DeveloperSubscription)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/CreateOrganizationsDevelopersSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersSubscriptionsServerClient) ExpireOrganizationsDevelopersSubscription(ctx context.Context, in *ExpireOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	out := new(GoogleCloudApigeeV1DeveloperSubscription)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ExpireOrganizationsDevelopersSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersSubscriptionsServerClient) GetOrganizationsDevelopersSubscription(ctx context.Context, in *GetOrganizationsDevelopersSubscriptionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	out := new(GoogleCloudApigeeV1DeveloperSubscription)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/GetOrganizationsDevelopersSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsDevelopersSubscriptionsServerClient) ListOrganizationsDevelopersSubscriptions(ctx context.Context, in *ListOrganizationsDevelopersSubscriptionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ListOrganizationsDevelopersSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsDevelopersSubscriptionsServerServer is the server API for OrganizationsDevelopersSubscriptionsServer service.
// All implementations must embed UnimplementedOrganizationsDevelopersSubscriptionsServerServer
// for forward compatibility
type OrganizationsDevelopersSubscriptionsServerServer interface {
	// Creates a subscription to an API product.
	CreateOrganizationsDevelopersSubscription(context.Context, *CreateOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Expires an API product subscription immediately.
	ExpireOrganizationsDevelopersSubscription(context.Context, *ExpireOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Gets details for an API product subscription.
	GetOrganizationsDevelopersSubscription(context.Context, *GetOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error)
	// Lists all API product subscriptions for a developer.
	ListOrganizationsDevelopersSubscriptions(context.Context, *ListOrganizationsDevelopersSubscriptionsRequest) (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse, error)
	mustEmbedUnimplementedOrganizationsDevelopersSubscriptionsServerServer()
}

// UnimplementedOrganizationsDevelopersSubscriptionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsDevelopersSubscriptionsServerServer struct {
}

func (UnimplementedOrganizationsDevelopersSubscriptionsServerServer) CreateOrganizationsDevelopersSubscription(context.Context, *CreateOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsDevelopersSubscription not implemented")
}
func (UnimplementedOrganizationsDevelopersSubscriptionsServerServer) ExpireOrganizationsDevelopersSubscription(context.Context, *ExpireOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireOrganizationsDevelopersSubscription not implemented")
}
func (UnimplementedOrganizationsDevelopersSubscriptionsServerServer) GetOrganizationsDevelopersSubscription(context.Context, *GetOrganizationsDevelopersSubscriptionRequest) (*GoogleCloudApigeeV1DeveloperSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsDevelopersSubscription not implemented")
}
func (UnimplementedOrganizationsDevelopersSubscriptionsServerServer) ListOrganizationsDevelopersSubscriptions(context.Context, *ListOrganizationsDevelopersSubscriptionsRequest) (*GoogleCloudApigeeV1ListDeveloperSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsDevelopersSubscriptions not implemented")
}
func (UnimplementedOrganizationsDevelopersSubscriptionsServerServer) mustEmbedUnimplementedOrganizationsDevelopersSubscriptionsServerServer() {
}

// UnsafeOrganizationsDevelopersSubscriptionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsDevelopersSubscriptionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsDevelopersSubscriptionsServerServer interface {
	mustEmbedUnimplementedOrganizationsDevelopersSubscriptionsServerServer()
}

func RegisterOrganizationsDevelopersSubscriptionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsDevelopersSubscriptionsServerServer) {
	s.RegisterService(&OrganizationsDevelopersSubscriptionsServer_ServiceDesc, srv)
}

func _OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsDevelopersSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).CreateOrganizationsDevelopersSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/CreateOrganizationsDevelopersSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).CreateOrganizationsDevelopersSubscription(ctx, req.(*CreateOrganizationsDevelopersSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireOrganizationsDevelopersSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).ExpireOrganizationsDevelopersSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ExpireOrganizationsDevelopersSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).ExpireOrganizationsDevelopersSubscription(ctx, req.(*ExpireOrganizationsDevelopersSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsDevelopersSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).GetOrganizationsDevelopersSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/GetOrganizationsDevelopersSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).GetOrganizationsDevelopersSubscription(ctx, req.(*GetOrganizationsDevelopersSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsDevelopersSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).ListOrganizationsDevelopersSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ListOrganizationsDevelopersSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsDevelopersSubscriptionsServerServer).ListOrganizationsDevelopersSubscriptions(ctx, req.(*ListOrganizationsDevelopersSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsDevelopersSubscriptionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsDevelopersSubscriptionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsDevelopersSubscriptionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer",
	HandlerType: (*OrganizationsDevelopersSubscriptionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsDevelopersSubscription",
			Handler:    _OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_Handler,
		},
		{
			MethodName: "ExpireOrganizationsDevelopersSubscription",
			Handler:    _OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_Handler,
		},
		{
			MethodName: "GetOrganizationsDevelopersSubscription",
			Handler:    _OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_Handler,
		},
		{
			MethodName: "ListOrganizationsDevelopersSubscriptions",
			Handler:    _OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEndpointAttachmentsServerClient is the client API for OrganizationsEndpointAttachmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEndpointAttachmentsServerClient interface {
	// Creates an endpoint attachment. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsEndpointAttachment(ctx context.Context, in *CreateOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an endpoint attachment.
	DeleteOrganizationsEndpointAttachment(ctx context.Context, in *DeleteOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the endpoint attachment.
	GetOrganizationsEndpointAttachment(ctx context.Context, in *GetOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EndpointAttachment, error)
	// Lists the endpoint attachments in an organization.
	ListOrganizationsEndpointAttachments(ctx context.Context, in *ListOrganizationsEndpointAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse, error)
}

type organizationsEndpointAttachmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEndpointAttachmentsServerClient(cc grpc.ClientConnInterface) OrganizationsEndpointAttachmentsServerClient {
	return &organizationsEndpointAttachmentsServerClient{cc}
}

func (c *organizationsEndpointAttachmentsServerClient) CreateOrganizationsEndpointAttachment(ctx context.Context, in *CreateOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/CreateOrganizationsEndpointAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEndpointAttachmentsServerClient) DeleteOrganizationsEndpointAttachment(ctx context.Context, in *DeleteOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/DeleteOrganizationsEndpointAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEndpointAttachmentsServerClient) GetOrganizationsEndpointAttachment(ctx context.Context, in *GetOrganizationsEndpointAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EndpointAttachment, error) {
	out := new(GoogleCloudApigeeV1EndpointAttachment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/GetOrganizationsEndpointAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEndpointAttachmentsServerClient) ListOrganizationsEndpointAttachments(ctx context.Context, in *ListOrganizationsEndpointAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListEndpointAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/ListOrganizationsEndpointAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEndpointAttachmentsServerServer is the server API for OrganizationsEndpointAttachmentsServer service.
// All implementations must embed UnimplementedOrganizationsEndpointAttachmentsServerServer
// for forward compatibility
type OrganizationsEndpointAttachmentsServerServer interface {
	// Creates an endpoint attachment. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsEndpointAttachment(context.Context, *CreateOrganizationsEndpointAttachmentRequest) (*longrunningpb.Operation, error)
	// Deletes an endpoint attachment.
	DeleteOrganizationsEndpointAttachment(context.Context, *DeleteOrganizationsEndpointAttachmentRequest) (*longrunningpb.Operation, error)
	// Gets the endpoint attachment.
	GetOrganizationsEndpointAttachment(context.Context, *GetOrganizationsEndpointAttachmentRequest) (*GoogleCloudApigeeV1EndpointAttachment, error)
	// Lists the endpoint attachments in an organization.
	ListOrganizationsEndpointAttachments(context.Context, *ListOrganizationsEndpointAttachmentsRequest) (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse, error)
	mustEmbedUnimplementedOrganizationsEndpointAttachmentsServerServer()
}

// UnimplementedOrganizationsEndpointAttachmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEndpointAttachmentsServerServer struct {
}

func (UnimplementedOrganizationsEndpointAttachmentsServerServer) CreateOrganizationsEndpointAttachment(context.Context, *CreateOrganizationsEndpointAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEndpointAttachment not implemented")
}
func (UnimplementedOrganizationsEndpointAttachmentsServerServer) DeleteOrganizationsEndpointAttachment(context.Context, *DeleteOrganizationsEndpointAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEndpointAttachment not implemented")
}
func (UnimplementedOrganizationsEndpointAttachmentsServerServer) GetOrganizationsEndpointAttachment(context.Context, *GetOrganizationsEndpointAttachmentRequest) (*GoogleCloudApigeeV1EndpointAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEndpointAttachment not implemented")
}
func (UnimplementedOrganizationsEndpointAttachmentsServerServer) ListOrganizationsEndpointAttachments(context.Context, *ListOrganizationsEndpointAttachmentsRequest) (*GoogleCloudApigeeV1ListEndpointAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEndpointAttachments not implemented")
}
func (UnimplementedOrganizationsEndpointAttachmentsServerServer) mustEmbedUnimplementedOrganizationsEndpointAttachmentsServerServer() {
}

// UnsafeOrganizationsEndpointAttachmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEndpointAttachmentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEndpointAttachmentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEndpointAttachmentsServerServer()
}

func RegisterOrganizationsEndpointAttachmentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEndpointAttachmentsServerServer) {
	s.RegisterService(&OrganizationsEndpointAttachmentsServer_ServiceDesc, srv)
}

func _OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEndpointAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEndpointAttachmentsServerServer).CreateOrganizationsEndpointAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/CreateOrganizationsEndpointAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEndpointAttachmentsServerServer).CreateOrganizationsEndpointAttachment(ctx, req.(*CreateOrganizationsEndpointAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEndpointAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEndpointAttachmentsServerServer).DeleteOrganizationsEndpointAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/DeleteOrganizationsEndpointAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEndpointAttachmentsServerServer).DeleteOrganizationsEndpointAttachment(ctx, req.(*DeleteOrganizationsEndpointAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEndpointAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEndpointAttachmentsServerServer).GetOrganizationsEndpointAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/GetOrganizationsEndpointAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEndpointAttachmentsServerServer).GetOrganizationsEndpointAttachment(ctx, req.(*GetOrganizationsEndpointAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEndpointAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEndpointAttachmentsServerServer).ListOrganizationsEndpointAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/ListOrganizationsEndpointAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEndpointAttachmentsServerServer).ListOrganizationsEndpointAttachments(ctx, req.(*ListOrganizationsEndpointAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEndpointAttachmentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEndpointAttachmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEndpointAttachmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer",
	HandlerType: (*OrganizationsEndpointAttachmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEndpointAttachment",
			Handler:    _OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEndpointAttachment",
			Handler:    _OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_Handler,
		},
		{
			MethodName: "GetOrganizationsEndpointAttachment",
			Handler:    _OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_Handler,
		},
		{
			MethodName: "ListOrganizationsEndpointAttachments",
			Handler:    _OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvgroupsServerClient is the client API for OrganizationsEnvgroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvgroupsServerClient interface {
	// Creates a new environment group.
	CreateOrganizationsEnvgroup(ctx context.Context, in *CreateOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an environment group.
	DeleteOrganizationsEnvgroup(ctx context.Context, in *DeleteOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an environment group.
	GetOrganizationsEnvgroup(ctx context.Context, in *GetOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroup, error)
	// Gets the deployed ingress configuration for an environment group.
	GetDeployedIngressConfigOrganizationsEnvgroup(ctx context.Context, in *GetDeployedIngressConfigOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroupConfig, error)
	// Lists all environment groups.
	ListOrganizationsEnvgroups(ctx context.Context, in *ListOrganizationsEnvgroupsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse, error)
	// Updates an environment group.
	PatchOrganizationsEnvgroup(ctx context.Context, in *PatchOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsEnvgroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvgroupsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvgroupsServerClient {
	return &organizationsEnvgroupsServerClient{cc}
}

func (c *organizationsEnvgroupsServerClient) CreateOrganizationsEnvgroup(ctx context.Context, in *CreateOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/CreateOrganizationsEnvgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsServerClient) DeleteOrganizationsEnvgroup(ctx context.Context, in *DeleteOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/DeleteOrganizationsEnvgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsServerClient) GetOrganizationsEnvgroup(ctx context.Context, in *GetOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroup, error) {
	out := new(GoogleCloudApigeeV1EnvironmentGroup)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetOrganizationsEnvgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsServerClient) GetDeployedIngressConfigOrganizationsEnvgroup(ctx context.Context, in *GetDeployedIngressConfigOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroupConfig, error) {
	out := new(GoogleCloudApigeeV1EnvironmentGroupConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetDeployedIngressConfigOrganizationsEnvgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsServerClient) ListOrganizationsEnvgroups(ctx context.Context, in *ListOrganizationsEnvgroupsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse, error) {
	out := new(GoogleCloudApigeeV1ListEnvironmentGroupsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/ListOrganizationsEnvgroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsServerClient) PatchOrganizationsEnvgroup(ctx context.Context, in *PatchOrganizationsEnvgroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/PatchOrganizationsEnvgroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvgroupsServerServer is the server API for OrganizationsEnvgroupsServer service.
// All implementations must embed UnimplementedOrganizationsEnvgroupsServerServer
// for forward compatibility
type OrganizationsEnvgroupsServerServer interface {
	// Creates a new environment group.
	CreateOrganizationsEnvgroup(context.Context, *CreateOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error)
	// Deletes an environment group.
	DeleteOrganizationsEnvgroup(context.Context, *DeleteOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error)
	// Gets an environment group.
	GetOrganizationsEnvgroup(context.Context, *GetOrganizationsEnvgroupRequest) (*GoogleCloudApigeeV1EnvironmentGroup, error)
	// Gets the deployed ingress configuration for an environment group.
	GetDeployedIngressConfigOrganizationsEnvgroup(context.Context, *GetDeployedIngressConfigOrganizationsEnvgroupRequest) (*GoogleCloudApigeeV1EnvironmentGroupConfig, error)
	// Lists all environment groups.
	ListOrganizationsEnvgroups(context.Context, *ListOrganizationsEnvgroupsRequest) (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse, error)
	// Updates an environment group.
	PatchOrganizationsEnvgroup(context.Context, *PatchOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsEnvgroupsServerServer()
}

// UnimplementedOrganizationsEnvgroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvgroupsServerServer struct {
}

func (UnimplementedOrganizationsEnvgroupsServerServer) CreateOrganizationsEnvgroup(context.Context, *CreateOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvgroup not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) DeleteOrganizationsEnvgroup(context.Context, *DeleteOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvgroup not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) GetOrganizationsEnvgroup(context.Context, *GetOrganizationsEnvgroupRequest) (*GoogleCloudApigeeV1EnvironmentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvgroup not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) GetDeployedIngressConfigOrganizationsEnvgroup(context.Context, *GetDeployedIngressConfigOrganizationsEnvgroupRequest) (*GoogleCloudApigeeV1EnvironmentGroupConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedIngressConfigOrganizationsEnvgroup not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) ListOrganizationsEnvgroups(context.Context, *ListOrganizationsEnvgroupsRequest) (*GoogleCloudApigeeV1ListEnvironmentGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvgroups not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) PatchOrganizationsEnvgroup(context.Context, *PatchOrganizationsEnvgroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsEnvgroup not implemented")
}
func (UnimplementedOrganizationsEnvgroupsServerServer) mustEmbedUnimplementedOrganizationsEnvgroupsServerServer() {
}

// UnsafeOrganizationsEnvgroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvgroupsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvgroupsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvgroupsServerServer()
}

func RegisterOrganizationsEnvgroupsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvgroupsServerServer) {
	s.RegisterService(&OrganizationsEnvgroupsServer_ServiceDesc, srv)
}

func _OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).CreateOrganizationsEnvgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/CreateOrganizationsEnvgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).CreateOrganizationsEnvgroup(ctx, req.(*CreateOrganizationsEnvgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).DeleteOrganizationsEnvgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/DeleteOrganizationsEnvgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).DeleteOrganizationsEnvgroup(ctx, req.(*DeleteOrganizationsEnvgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).GetOrganizationsEnvgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetOrganizationsEnvgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).GetOrganizationsEnvgroup(ctx, req.(*GetOrganizationsEnvgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployedIngressConfigOrganizationsEnvgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).GetDeployedIngressConfigOrganizationsEnvgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetDeployedIngressConfigOrganizationsEnvgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).GetDeployedIngressConfigOrganizationsEnvgroup(ctx, req.(*GetDeployedIngressConfigOrganizationsEnvgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).ListOrganizationsEnvgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/ListOrganizationsEnvgroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).ListOrganizationsEnvgroups(ctx, req.(*ListOrganizationsEnvgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsEnvgroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsServerServer).PatchOrganizationsEnvgroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/PatchOrganizationsEnvgroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsServerServer).PatchOrganizationsEnvgroup(ctx, req.(*PatchOrganizationsEnvgroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvgroupsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvgroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvgroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer",
	HandlerType: (*OrganizationsEnvgroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvgroup",
			Handler:    _OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvgroup",
			Handler:    _OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvgroup",
			Handler:    _OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_Handler,
		},
		{
			MethodName: "GetDeployedIngressConfigOrganizationsEnvgroup",
			Handler:    _OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvgroups",
			Handler:    _OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_Handler,
		},
		{
			MethodName: "PatchOrganizationsEnvgroup",
			Handler:    _OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvgroupsAttachmentsServerClient is the client API for OrganizationsEnvgroupsAttachmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvgroupsAttachmentsServerClient interface {
	// Creates a new attachment of an environment to an environment group.
	CreateOrganizationsEnvgroupsAttachment(ctx context.Context, in *CreateOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an environment group attachment.
	DeleteOrganizationsEnvgroupsAttachment(ctx context.Context, in *DeleteOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an environment group attachment.
	GetOrganizationsEnvgroupsAttachment(ctx context.Context, in *GetOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroupAttachment, error)
	// Lists all attachments of an environment group.
	ListOrganizationsEnvgroupsAttachments(ctx context.Context, in *ListOrganizationsEnvgroupsAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse, error)
}

type organizationsEnvgroupsAttachmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvgroupsAttachmentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvgroupsAttachmentsServerClient {
	return &organizationsEnvgroupsAttachmentsServerClient{cc}
}

func (c *organizationsEnvgroupsAttachmentsServerClient) CreateOrganizationsEnvgroupsAttachment(ctx context.Context, in *CreateOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/CreateOrganizationsEnvgroupsAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsAttachmentsServerClient) DeleteOrganizationsEnvgroupsAttachment(ctx context.Context, in *DeleteOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/DeleteOrganizationsEnvgroupsAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsAttachmentsServerClient) GetOrganizationsEnvgroupsAttachment(ctx context.Context, in *GetOrganizationsEnvgroupsAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentGroupAttachment, error) {
	out := new(GoogleCloudApigeeV1EnvironmentGroupAttachment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/GetOrganizationsEnvgroupsAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvgroupsAttachmentsServerClient) ListOrganizationsEnvgroupsAttachments(ctx context.Context, in *ListOrganizationsEnvgroupsAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/ListOrganizationsEnvgroupsAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvgroupsAttachmentsServerServer is the server API for OrganizationsEnvgroupsAttachmentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvgroupsAttachmentsServerServer
// for forward compatibility
type OrganizationsEnvgroupsAttachmentsServerServer interface {
	// Creates a new attachment of an environment to an environment group.
	CreateOrganizationsEnvgroupsAttachment(context.Context, *CreateOrganizationsEnvgroupsAttachmentRequest) (*longrunningpb.Operation, error)
	// Deletes an environment group attachment.
	DeleteOrganizationsEnvgroupsAttachment(context.Context, *DeleteOrganizationsEnvgroupsAttachmentRequest) (*longrunningpb.Operation, error)
	// Gets an environment group attachment.
	GetOrganizationsEnvgroupsAttachment(context.Context, *GetOrganizationsEnvgroupsAttachmentRequest) (*GoogleCloudApigeeV1EnvironmentGroupAttachment, error)
	// Lists all attachments of an environment group.
	ListOrganizationsEnvgroupsAttachments(context.Context, *ListOrganizationsEnvgroupsAttachmentsRequest) (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvgroupsAttachmentsServerServer()
}

// UnimplementedOrganizationsEnvgroupsAttachmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvgroupsAttachmentsServerServer struct {
}

func (UnimplementedOrganizationsEnvgroupsAttachmentsServerServer) CreateOrganizationsEnvgroupsAttachment(context.Context, *CreateOrganizationsEnvgroupsAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvgroupsAttachment not implemented")
}
func (UnimplementedOrganizationsEnvgroupsAttachmentsServerServer) DeleteOrganizationsEnvgroupsAttachment(context.Context, *DeleteOrganizationsEnvgroupsAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvgroupsAttachment not implemented")
}
func (UnimplementedOrganizationsEnvgroupsAttachmentsServerServer) GetOrganizationsEnvgroupsAttachment(context.Context, *GetOrganizationsEnvgroupsAttachmentRequest) (*GoogleCloudApigeeV1EnvironmentGroupAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvgroupsAttachment not implemented")
}
func (UnimplementedOrganizationsEnvgroupsAttachmentsServerServer) ListOrganizationsEnvgroupsAttachments(context.Context, *ListOrganizationsEnvgroupsAttachmentsRequest) (*GoogleCloudApigeeV1ListEnvironmentGroupAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvgroupsAttachments not implemented")
}
func (UnimplementedOrganizationsEnvgroupsAttachmentsServerServer) mustEmbedUnimplementedOrganizationsEnvgroupsAttachmentsServerServer() {
}

// UnsafeOrganizationsEnvgroupsAttachmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvgroupsAttachmentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvgroupsAttachmentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvgroupsAttachmentsServerServer()
}

func RegisterOrganizationsEnvgroupsAttachmentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvgroupsAttachmentsServerServer) {
	s.RegisterService(&OrganizationsEnvgroupsAttachmentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvgroupsAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).CreateOrganizationsEnvgroupsAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/CreateOrganizationsEnvgroupsAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).CreateOrganizationsEnvgroupsAttachment(ctx, req.(*CreateOrganizationsEnvgroupsAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvgroupsAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).DeleteOrganizationsEnvgroupsAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/DeleteOrganizationsEnvgroupsAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).DeleteOrganizationsEnvgroupsAttachment(ctx, req.(*DeleteOrganizationsEnvgroupsAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvgroupsAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).GetOrganizationsEnvgroupsAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/GetOrganizationsEnvgroupsAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).GetOrganizationsEnvgroupsAttachment(ctx, req.(*GetOrganizationsEnvgroupsAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvgroupsAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).ListOrganizationsEnvgroupsAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/ListOrganizationsEnvgroupsAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvgroupsAttachmentsServerServer).ListOrganizationsEnvgroupsAttachments(ctx, req.(*ListOrganizationsEnvgroupsAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvgroupsAttachmentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvgroupsAttachmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvgroupsAttachmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer",
	HandlerType: (*OrganizationsEnvgroupsAttachmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvgroupsAttachment",
			Handler:    _OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvgroupsAttachment",
			Handler:    _OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvgroupsAttachment",
			Handler:    _OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvgroupsAttachments",
			Handler:    _OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsServerClient is the client API for OrganizationsEnvironmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsServerClient interface {
	// Creates an environment in an organization.
	CreateOrganizationsEnvironment(ctx context.Context, in *CreateOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an environment from an organization. **Warning: You must delete all key value maps and key value entries before you delete an environment.** Otherwise, if you re-create the environment the key value map entry operations will encounter encryption/decryption discrepancies.
	DeleteOrganizationsEnvironment(ctx context.Context, in *DeleteOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets environment details.
	GetOrganizationsEnvironment(ctx context.Context, in *GetOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error)
	// Gets the add-ons config of an environment.
	GetAddonsConfigOrganizationsEnvironment(ctx context.Context, in *GetAddonsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AddonsConfig, error)
	// Gets the API Security runtime configuration for an environment. This named ApiSecurityRuntimeConfig to prevent conflicts with ApiSecurityConfig from addon config.
	GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx context.Context, in *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig, error)
	// Gets the debug mask singleton resource for an environment.
	GetDebugmaskOrganizationsEnvironment(ctx context.Context, in *GetDebugmaskOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugMask, error)
	// Gets the deployed configuration for an environment.
	GetDeployedConfigOrganizationsEnvironment(ctx context.Context, in *GetDeployedConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentConfig, error)
	// GetSecurityActionConfig returns the current SecurityActions configuration.
	GetSecurityActionsConfigOrganizationsEnvironment(ctx context.Context, in *GetSecurityActionsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityActionsConfig, error)
	// Get distributed trace configuration in an environment.
	GetTraceConfigOrganizationsEnvironment(ctx context.Context, in *GetTraceConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfig, error)
	// Updates properties for an Apigee environment with patch semantics using a field mask. **Note:** Not supported for Apigee hybrid.
	ModifyEnvironmentOrganizationsEnvironment(ctx context.Context, in *ModifyEnvironmentOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a subscription for the environment's Pub/Sub topic. The server will assign a random name for this subscription. The "name" and "push_config" must *not* be specified.
	SubscribeOrganizationsEnvironment(ctx context.Context, in *SubscribeOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Subscription, error)
	// Deletes a subscription for the environment's Pub/Sub topic.
	UnsubscribeOrganizationsEnvironment(ctx context.Context, in *UnsubscribeOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
	UpdateOrganizationsEnvironment(ctx context.Context, in *UpdateOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error)
	// Updates the debug mask singleton resource for an environment.
	UpdateDebugmaskOrganizationsEnvironment(ctx context.Context, in *UpdateDebugmaskOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugMask, error)
	// Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
	UpdateEnvironmentOrganizationsEnvironment(ctx context.Context, in *UpdateEnvironmentOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error)
	// UpdateSecurityActionConfig updates the current SecurityActions configuration. This method is used to enable/disable the feature at the environment level.
	UpdateSecurityActionsConfigOrganizationsEnvironment(ctx context.Context, in *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityActionsConfig, error)
	// Updates the trace configurations in an environment. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
	UpdateTraceConfigOrganizationsEnvironment(ctx context.Context, in *UpdateTraceConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfig, error)
}

type organizationsEnvironmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsServerClient {
	return &organizationsEnvironmentsServerClient{cc}
}

func (c *organizationsEnvironmentsServerClient) CreateOrganizationsEnvironment(ctx context.Context, in *CreateOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/CreateOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) DeleteOrganizationsEnvironment(ctx context.Context, in *DeleteOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/DeleteOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetOrganizationsEnvironment(ctx context.Context, in *GetOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error) {
	out := new(GoogleCloudApigeeV1Environment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetAddonsConfigOrganizationsEnvironment(ctx context.Context, in *GetAddonsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AddonsConfig, error) {
	out := new(GoogleCloudApigeeV1AddonsConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetAddonsConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx context.Context, in *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig, error) {
	out := new(GoogleCloudApigeeV1ApiSecurityRuntimeConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetApiSecurityRuntimeConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetDebugmaskOrganizationsEnvironment(ctx context.Context, in *GetDebugmaskOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugMask, error) {
	out := new(GoogleCloudApigeeV1DebugMask)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDebugmaskOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetDeployedConfigOrganizationsEnvironment(ctx context.Context, in *GetDeployedConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1EnvironmentConfig, error) {
	out := new(GoogleCloudApigeeV1EnvironmentConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDeployedConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetSecurityActionsConfigOrganizationsEnvironment(ctx context.Context, in *GetSecurityActionsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityActionsConfig, error) {
	out := new(GoogleCloudApigeeV1SecurityActionsConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetSecurityActionsConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) GetTraceConfigOrganizationsEnvironment(ctx context.Context, in *GetTraceConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfig, error) {
	out := new(GoogleCloudApigeeV1TraceConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetTraceConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) ModifyEnvironmentOrganizationsEnvironment(ctx context.Context, in *ModifyEnvironmentOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/ModifyEnvironmentOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) SubscribeOrganizationsEnvironment(ctx context.Context, in *SubscribeOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Subscription, error) {
	out := new(GoogleCloudApigeeV1Subscription)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/SubscribeOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UnsubscribeOrganizationsEnvironment(ctx context.Context, in *UnsubscribeOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UnsubscribeOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UpdateOrganizationsEnvironment(ctx context.Context, in *UpdateOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error) {
	out := new(GoogleCloudApigeeV1Environment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UpdateDebugmaskOrganizationsEnvironment(ctx context.Context, in *UpdateDebugmaskOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugMask, error) {
	out := new(GoogleCloudApigeeV1DebugMask)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateDebugmaskOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UpdateEnvironmentOrganizationsEnvironment(ctx context.Context, in *UpdateEnvironmentOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Environment, error) {
	out := new(GoogleCloudApigeeV1Environment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateEnvironmentOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UpdateSecurityActionsConfigOrganizationsEnvironment(ctx context.Context, in *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityActionsConfig, error) {
	out := new(GoogleCloudApigeeV1SecurityActionsConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateSecurityActionsConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsServerClient) UpdateTraceConfigOrganizationsEnvironment(ctx context.Context, in *UpdateTraceConfigOrganizationsEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfig, error) {
	out := new(GoogleCloudApigeeV1TraceConfig)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateTraceConfigOrganizationsEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsServerServer is the server API for OrganizationsEnvironmentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsServerServer interface {
	// Creates an environment in an organization.
	CreateOrganizationsEnvironment(context.Context, *CreateOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error)
	// Deletes an environment from an organization. **Warning: You must delete all key value maps and key value entries before you delete an environment.** Otherwise, if you re-create the environment the key value map entry operations will encounter encryption/decryption discrepancies.
	DeleteOrganizationsEnvironment(context.Context, *DeleteOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error)
	// Gets environment details.
	GetOrganizationsEnvironment(context.Context, *GetOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error)
	// Gets the add-ons config of an environment.
	GetAddonsConfigOrganizationsEnvironment(context.Context, *GetAddonsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1AddonsConfig, error)
	// Gets the API Security runtime configuration for an environment. This named ApiSecurityRuntimeConfig to prevent conflicts with ApiSecurityConfig from addon config.
	GetApiSecurityRuntimeConfigOrganizationsEnvironment(context.Context, *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig, error)
	// Gets the debug mask singleton resource for an environment.
	GetDebugmaskOrganizationsEnvironment(context.Context, *GetDebugmaskOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1DebugMask, error)
	// Gets the deployed configuration for an environment.
	GetDeployedConfigOrganizationsEnvironment(context.Context, *GetDeployedConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1EnvironmentConfig, error)
	// GetSecurityActionConfig returns the current SecurityActions configuration.
	GetSecurityActionsConfigOrganizationsEnvironment(context.Context, *GetSecurityActionsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1SecurityActionsConfig, error)
	// Get distributed trace configuration in an environment.
	GetTraceConfigOrganizationsEnvironment(context.Context, *GetTraceConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1TraceConfig, error)
	// Updates properties for an Apigee environment with patch semantics using a field mask. **Note:** Not supported for Apigee hybrid.
	ModifyEnvironmentOrganizationsEnvironment(context.Context, *ModifyEnvironmentOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error)
	// Creates a subscription for the environment's Pub/Sub topic. The server will assign a random name for this subscription. The "name" and "push_config" must *not* be specified.
	SubscribeOrganizationsEnvironment(context.Context, *SubscribeOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Subscription, error)
	// Deletes a subscription for the environment's Pub/Sub topic.
	UnsubscribeOrganizationsEnvironment(context.Context, *UnsubscribeOrganizationsEnvironmentRequest) (*GoogleProtobufEmpty, error)
	// Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
	UpdateOrganizationsEnvironment(context.Context, *UpdateOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error)
	// Updates the debug mask singleton resource for an environment.
	UpdateDebugmaskOrganizationsEnvironment(context.Context, *UpdateDebugmaskOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1DebugMask, error)
	// Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get). **Note**: Both `PUT` and `POST` methods are supported for updating an existing environment.
	UpdateEnvironmentOrganizationsEnvironment(context.Context, *UpdateEnvironmentOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error)
	// UpdateSecurityActionConfig updates the current SecurityActions configuration. This method is used to enable/disable the feature at the environment level.
	UpdateSecurityActionsConfigOrganizationsEnvironment(context.Context, *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1SecurityActionsConfig, error)
	// Updates the trace configurations in an environment. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
	UpdateTraceConfigOrganizationsEnvironment(context.Context, *UpdateTraceConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1TraceConfig, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsServerServer) CreateOrganizationsEnvironment(context.Context, *CreateOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) DeleteOrganizationsEnvironment(context.Context, *DeleteOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetOrganizationsEnvironment(context.Context, *GetOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetAddonsConfigOrganizationsEnvironment(context.Context, *GetAddonsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1AddonsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddonsConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetApiSecurityRuntimeConfigOrganizationsEnvironment(context.Context, *GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1ApiSecurityRuntimeConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiSecurityRuntimeConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetDebugmaskOrganizationsEnvironment(context.Context, *GetDebugmaskOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1DebugMask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugmaskOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetDeployedConfigOrganizationsEnvironment(context.Context, *GetDeployedConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1EnvironmentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetSecurityActionsConfigOrganizationsEnvironment(context.Context, *GetSecurityActionsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1SecurityActionsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityActionsConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) GetTraceConfigOrganizationsEnvironment(context.Context, *GetTraceConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1TraceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraceConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) ModifyEnvironmentOrganizationsEnvironment(context.Context, *ModifyEnvironmentOrganizationsEnvironmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyEnvironmentOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) SubscribeOrganizationsEnvironment(context.Context, *SubscribeOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UnsubscribeOrganizationsEnvironment(context.Context, *UnsubscribeOrganizationsEnvironmentRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UpdateOrganizationsEnvironment(context.Context, *UpdateOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UpdateDebugmaskOrganizationsEnvironment(context.Context, *UpdateDebugmaskOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1DebugMask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDebugmaskOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UpdateEnvironmentOrganizationsEnvironment(context.Context, *UpdateEnvironmentOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironmentOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UpdateSecurityActionsConfigOrganizationsEnvironment(context.Context, *UpdateSecurityActionsConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1SecurityActionsConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityActionsConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) UpdateTraceConfigOrganizationsEnvironment(context.Context, *UpdateTraceConfigOrganizationsEnvironmentRequest) (*GoogleCloudApigeeV1TraceConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTraceConfigOrganizationsEnvironment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsServerServer()
}

func RegisterOrganizationsEnvironmentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).CreateOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/CreateOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).CreateOrganizationsEnvironment(ctx, req.(*CreateOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).DeleteOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/DeleteOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).DeleteOrganizationsEnvironment(ctx, req.(*DeleteOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetOrganizationsEnvironment(ctx, req.(*GetOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddonsConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetAddonsConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetAddonsConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetAddonsConfigOrganizationsEnvironment(ctx, req.(*GetAddonsConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetApiSecurityRuntimeConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx, req.(*GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebugmaskOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetDebugmaskOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDebugmaskOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetDebugmaskOrganizationsEnvironment(ctx, req.(*GetDebugmaskOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployedConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetDeployedConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDeployedConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetDeployedConfigOrganizationsEnvironment(ctx, req.(*GetDeployedConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityActionsConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetSecurityActionsConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetSecurityActionsConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetSecurityActionsConfigOrganizationsEnvironment(ctx, req.(*GetSecurityActionsConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).GetTraceConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetTraceConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).GetTraceConfigOrganizationsEnvironment(ctx, req.(*GetTraceConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyEnvironmentOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).ModifyEnvironmentOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/ModifyEnvironmentOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).ModifyEnvironmentOrganizationsEnvironment(ctx, req.(*ModifyEnvironmentOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).SubscribeOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/SubscribeOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).SubscribeOrganizationsEnvironment(ctx, req.(*SubscribeOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UnsubscribeOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UnsubscribeOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UnsubscribeOrganizationsEnvironment(ctx, req.(*UnsubscribeOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateOrganizationsEnvironment(ctx, req.(*UpdateOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDebugmaskOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateDebugmaskOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateDebugmaskOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateDebugmaskOrganizationsEnvironment(ctx, req.(*UpdateDebugmaskOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateEnvironmentOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateEnvironmentOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateEnvironmentOrganizationsEnvironment(ctx, req.(*UpdateEnvironmentOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityActionsConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateSecurityActionsConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateSecurityActionsConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateSecurityActionsConfigOrganizationsEnvironment(ctx, req.(*UpdateSecurityActionsConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTraceConfigOrganizationsEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateTraceConfigOrganizationsEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateTraceConfigOrganizationsEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsServerServer).UpdateTraceConfigOrganizationsEnvironment(ctx, req.(*UpdateTraceConfigOrganizationsEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer",
	HandlerType: (*OrganizationsEnvironmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetAddonsConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetApiSecurityRuntimeConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetDebugmaskOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetDeployedConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetSecurityActionsConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "GetTraceConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "ModifyEnvironmentOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "SubscribeOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UnsubscribeOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UpdateDebugmaskOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironmentOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UpdateSecurityActionsConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_Handler,
		},
		{
			MethodName: "UpdateTraceConfigOrganizationsEnvironment",
			Handler:    _OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsAddonsConfigServerClient is the client API for OrganizationsEnvironmentsAddonsConfigServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsAddonsConfigServerClient interface {
	// Updates an add-on enablement status of an environment.
	SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx context.Context, in *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsEnvironmentsAddonsConfigServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsAddonsConfigServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsAddonsConfigServerClient {
	return &organizationsEnvironmentsAddonsConfigServerClient{cc}
}

func (c *organizationsEnvironmentsAddonsConfigServerClient) SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx context.Context, in *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer/SetAddonEnablementOrganizationsEnvironmentsAddonsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsAddonsConfigServerServer is the server API for OrganizationsEnvironmentsAddonsConfigServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsAddonsConfigServerServer
// for forward compatibility
type OrganizationsEnvironmentsAddonsConfigServerServer interface {
	// Updates an add-on enablement status of an environment.
	SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(context.Context, *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsAddonsConfigServerServer()
}

// UnimplementedOrganizationsEnvironmentsAddonsConfigServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsAddonsConfigServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsAddonsConfigServerServer) SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(context.Context, *SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAddonEnablementOrganizationsEnvironmentsAddonsConfig not implemented")
}
func (UnimplementedOrganizationsEnvironmentsAddonsConfigServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsAddonsConfigServerServer() {
}

// UnsafeOrganizationsEnvironmentsAddonsConfigServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsAddonsConfigServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsAddonsConfigServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsAddonsConfigServerServer()
}

func RegisterOrganizationsEnvironmentsAddonsConfigServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsAddonsConfigServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsAddonsConfigServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsAddonsConfigServerServer).SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer/SetAddonEnablementOrganizationsEnvironmentsAddonsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsAddonsConfigServerServer).SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx, req.(*SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsAddonsConfigServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsAddonsConfigServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsAddonsConfigServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer",
	HandlerType: (*OrganizationsEnvironmentsAddonsConfigServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAddonEnablementOrganizationsEnvironmentsAddonsConfig",
			Handler:    _OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsAnalyticsServerClient is the client API for OrganizationsEnvironmentsAnalyticsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsAnalyticsServerClient interface {
}

type organizationsEnvironmentsAnalyticsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsAnalyticsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsAnalyticsServerClient {
	return &organizationsEnvironmentsAnalyticsServerClient{cc}
}

// OrganizationsEnvironmentsAnalyticsServerServer is the server API for OrganizationsEnvironmentsAnalyticsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsAnalyticsServerServer
// for forward compatibility
type OrganizationsEnvironmentsAnalyticsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsServerServer()
}

// UnimplementedOrganizationsEnvironmentsAnalyticsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsAnalyticsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsAnalyticsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsServerServer() {
}

// UnsafeOrganizationsEnvironmentsAnalyticsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsAnalyticsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsAnalyticsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsServerServer()
}

func RegisterOrganizationsEnvironmentsAnalyticsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsAnalyticsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsAnalyticsServer_ServiceDesc, srv)
}

// OrganizationsEnvironmentsAnalyticsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsAnalyticsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsAnalyticsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsServer",
	HandlerType: (*OrganizationsEnvironmentsAnalyticsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsAnalyticsAdminServerClient is the client API for OrganizationsEnvironmentsAnalyticsAdminServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsAnalyticsAdminServerClient interface {
	// Gets a list of metrics and dimensions that can be used to create analytics queries and reports. Each schema element contains the name of the field, its associated type, and a flag indicating whether it is a standard or custom field.
	GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx context.Context, in *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Schema, error)
}

type organizationsEnvironmentsAnalyticsAdminServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsAnalyticsAdminServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsAnalyticsAdminServerClient {
	return &organizationsEnvironmentsAnalyticsAdminServerClient{cc}
}

func (c *organizationsEnvironmentsAnalyticsAdminServerClient) GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx context.Context, in *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Schema, error) {
	out := new(GoogleCloudApigeeV1Schema)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer/GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsAnalyticsAdminServerServer is the server API for OrganizationsEnvironmentsAnalyticsAdminServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer
// for forward compatibility
type OrganizationsEnvironmentsAnalyticsAdminServerServer interface {
	// Gets a list of metrics and dimensions that can be used to create analytics queries and reports. Each schema element contains the name of the field, its associated type, and a flag indicating whether it is a standard or custom field.
	GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(context.Context, *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) (*GoogleCloudApigeeV1Schema, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer()
}

// UnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer) GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(context.Context, *GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest) (*GoogleCloudApigeeV1Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin not implemented")
}
func (UnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer() {
}

// UnsafeOrganizationsEnvironmentsAnalyticsAdminServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsAnalyticsAdminServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsAnalyticsAdminServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsAdminServerServer()
}

func RegisterOrganizationsEnvironmentsAnalyticsAdminServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsAnalyticsAdminServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsAnalyticsAdminServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsAnalyticsAdminServerServer).GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer/GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsAnalyticsAdminServerServer).GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx, req.(*GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsAnalyticsAdminServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsAnalyticsAdminServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsAnalyticsAdminServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer",
	HandlerType: (*OrganizationsEnvironmentsAnalyticsAdminServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin",
			Handler:    _OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsAnalyticsExportsServerClient is the client API for OrganizationsEnvironmentsAnalyticsExportsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsAnalyticsExportsServerClient interface {
	// Submit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the `state` value of "enqueued".
	CreateOrganizationsEnvironmentsAnalyticsExport(ctx context.Context, in *CreateOrganizationsEnvironmentsAnalyticsExportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Export, error)
	// Gets the details and status of an analytics export job. If the export job is still in progress, its `state` is set to "running". After the export job has completed successfully, its `state` is set to "completed". If the export job fails, its `state` is set to `failed`.
	GetOrganizationsEnvironmentsAnalyticsExport(ctx context.Context, in *GetOrganizationsEnvironmentsAnalyticsExportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Export, error)
	// Lists the details and status of all analytics export jobs belonging to the parent organization and environment.
	ListOrganizationsEnvironmentsAnalyticsExports(ctx context.Context, in *ListOrganizationsEnvironmentsAnalyticsExportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListExportsResponse, error)
}

type organizationsEnvironmentsAnalyticsExportsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsAnalyticsExportsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsAnalyticsExportsServerClient {
	return &organizationsEnvironmentsAnalyticsExportsServerClient{cc}
}

func (c *organizationsEnvironmentsAnalyticsExportsServerClient) CreateOrganizationsEnvironmentsAnalyticsExport(ctx context.Context, in *CreateOrganizationsEnvironmentsAnalyticsExportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Export, error) {
	out := new(GoogleCloudApigeeV1Export)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/CreateOrganizationsEnvironmentsAnalyticsExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsAnalyticsExportsServerClient) GetOrganizationsEnvironmentsAnalyticsExport(ctx context.Context, in *GetOrganizationsEnvironmentsAnalyticsExportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Export, error) {
	out := new(GoogleCloudApigeeV1Export)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/GetOrganizationsEnvironmentsAnalyticsExport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsAnalyticsExportsServerClient) ListOrganizationsEnvironmentsAnalyticsExports(ctx context.Context, in *ListOrganizationsEnvironmentsAnalyticsExportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListExportsResponse, error) {
	out := new(GoogleCloudApigeeV1ListExportsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/ListOrganizationsEnvironmentsAnalyticsExports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsAnalyticsExportsServerServer is the server API for OrganizationsEnvironmentsAnalyticsExportsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer
// for forward compatibility
type OrganizationsEnvironmentsAnalyticsExportsServerServer interface {
	// Submit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the `state` value of "enqueued".
	CreateOrganizationsEnvironmentsAnalyticsExport(context.Context, *CreateOrganizationsEnvironmentsAnalyticsExportRequest) (*GoogleCloudApigeeV1Export, error)
	// Gets the details and status of an analytics export job. If the export job is still in progress, its `state` is set to "running". After the export job has completed successfully, its `state` is set to "completed". If the export job fails, its `state` is set to `failed`.
	GetOrganizationsEnvironmentsAnalyticsExport(context.Context, *GetOrganizationsEnvironmentsAnalyticsExportRequest) (*GoogleCloudApigeeV1Export, error)
	// Lists the details and status of all analytics export jobs belonging to the parent organization and environment.
	ListOrganizationsEnvironmentsAnalyticsExports(context.Context, *ListOrganizationsEnvironmentsAnalyticsExportsRequest) (*GoogleCloudApigeeV1ListExportsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer()
}

// UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer) CreateOrganizationsEnvironmentsAnalyticsExport(context.Context, *CreateOrganizationsEnvironmentsAnalyticsExportRequest) (*GoogleCloudApigeeV1Export, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsAnalyticsExport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer) GetOrganizationsEnvironmentsAnalyticsExport(context.Context, *GetOrganizationsEnvironmentsAnalyticsExportRequest) (*GoogleCloudApigeeV1Export, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsAnalyticsExport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer) ListOrganizationsEnvironmentsAnalyticsExports(context.Context, *ListOrganizationsEnvironmentsAnalyticsExportsRequest) (*GoogleCloudApigeeV1ListExportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsAnalyticsExports not implemented")
}
func (UnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer() {
}

// UnsafeOrganizationsEnvironmentsAnalyticsExportsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsAnalyticsExportsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsAnalyticsExportsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsAnalyticsExportsServerServer()
}

func RegisterOrganizationsEnvironmentsAnalyticsExportsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsAnalyticsExportsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsAnalyticsExportsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsAnalyticsExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).CreateOrganizationsEnvironmentsAnalyticsExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/CreateOrganizationsEnvironmentsAnalyticsExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).CreateOrganizationsEnvironmentsAnalyticsExport(ctx, req.(*CreateOrganizationsEnvironmentsAnalyticsExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsAnalyticsExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).GetOrganizationsEnvironmentsAnalyticsExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/GetOrganizationsEnvironmentsAnalyticsExport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).GetOrganizationsEnvironmentsAnalyticsExport(ctx, req.(*GetOrganizationsEnvironmentsAnalyticsExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsAnalyticsExportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).ListOrganizationsEnvironmentsAnalyticsExports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/ListOrganizationsEnvironmentsAnalyticsExports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsAnalyticsExportsServerServer).ListOrganizationsEnvironmentsAnalyticsExports(ctx, req.(*ListOrganizationsEnvironmentsAnalyticsExportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsAnalyticsExportsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsAnalyticsExportsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsAnalyticsExportsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer",
	HandlerType: (*OrganizationsEnvironmentsAnalyticsExportsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsAnalyticsExport",
			Handler:    _OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsAnalyticsExport",
			Handler:    _OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsAnalyticsExports",
			Handler:    _OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisServerClient is the client API for OrganizationsEnvironmentsApisServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisServerClient interface {
}

type organizationsEnvironmentsApisServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisServerClient {
	return &organizationsEnvironmentsApisServerClient{cc}
}

// OrganizationsEnvironmentsApisServerServer is the server API for OrganizationsEnvironmentsApisServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisServerServer()
}

func RegisterOrganizationsEnvironmentsApisServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisServer_ServiceDesc, srv)
}

// OrganizationsEnvironmentsApisServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisServer",
	HandlerType: (*OrganizationsEnvironmentsApisServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisDeploymentsServerClient is the client API for OrganizationsEnvironmentsApisDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisDeploymentsServerClient interface {
	// Lists all deployments of an API proxy in an environment.
	ListOrganizationsEnvironmentsApisDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsApisDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsEnvironmentsApisDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisDeploymentsServerClient {
	return &organizationsEnvironmentsApisDeploymentsServerClient{cc}
}

func (c *organizationsEnvironmentsApisDeploymentsServerClient) ListOrganizationsEnvironmentsApisDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsApisDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer/ListOrganizationsEnvironmentsApisDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsApisDeploymentsServerServer is the server API for OrganizationsEnvironmentsApisDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisDeploymentsServerServer interface {
	// Lists all deployments of an API proxy in an environment.
	ListOrganizationsEnvironmentsApisDeployments(context.Context, *ListOrganizationsEnvironmentsApisDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer) ListOrganizationsEnvironmentsApisDeployments(context.Context, *ListOrganizationsEnvironmentsApisDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsApisDeployments not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisDeploymentsServerServer()
}

func RegisterOrganizationsEnvironmentsApisDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisDeploymentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsApisDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisDeploymentsServerServer).ListOrganizationsEnvironmentsApisDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer/ListOrganizationsEnvironmentsApisDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisDeploymentsServerServer).ListOrganizationsEnvironmentsApisDeployments(ctx, req.(*ListOrganizationsEnvironmentsApisDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsApisDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer",
	HandlerType: (*OrganizationsEnvironmentsApisDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsEnvironmentsApisDeployments",
			Handler:    _OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisRevisionsServerClient is the client API for OrganizationsEnvironmentsApisRevisionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisRevisionsServerClient interface {
	// Deploys a revision of an API proxy. If another revision of the same API proxy revision is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot invoke an API proxy until it has been deployed to an environment. After you deploy an API proxy revision, you cannot edit it. To edit the API proxy, you must create and deploy a new revision. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	DeployOrganizationsEnvironmentsApisRevision(ctx context.Context, in *DeployOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error)
	// Gets the deployment of an API proxy revision and actual state reported by runtime pods.
	GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx context.Context, in *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error)
	// Undeploys an API proxy revision from an environment. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	UndeployOrganizationsEnvironmentsApisRevision(ctx context.Context, in *UndeployOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsEnvironmentsApisRevisionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisRevisionsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisRevisionsServerClient {
	return &organizationsEnvironmentsApisRevisionsServerClient{cc}
}

func (c *organizationsEnvironmentsApisRevisionsServerClient) DeployOrganizationsEnvironmentsApisRevision(ctx context.Context, in *DeployOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error) {
	out := new(GoogleCloudApigeeV1Deployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/DeployOrganizationsEnvironmentsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsServerClient) GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx context.Context, in *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error) {
	out := new(GoogleCloudApigeeV1Deployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/GetDeploymentsOrganizationsEnvironmentsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsServerClient) UndeployOrganizationsEnvironmentsApisRevision(ctx context.Context, in *UndeployOrganizationsEnvironmentsApisRevisionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/UndeployOrganizationsEnvironmentsApisRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsApisRevisionsServerServer is the server API for OrganizationsEnvironmentsApisRevisionsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisRevisionsServerServer interface {
	// Deploys a revision of an API proxy. If another revision of the same API proxy revision is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot invoke an API proxy until it has been deployed to an environment. After you deploy an API proxy revision, you cannot edit it. To edit the API proxy, you must create and deploy a new revision. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	DeployOrganizationsEnvironmentsApisRevision(context.Context, *DeployOrganizationsEnvironmentsApisRevisionRequest) (*GoogleCloudApigeeV1Deployment, error)
	// Gets the deployment of an API proxy revision and actual state reported by runtime pods.
	GetDeploymentsOrganizationsEnvironmentsApisRevision(context.Context, *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) (*GoogleCloudApigeeV1Deployment, error)
	// Undeploys an API proxy revision from an environment. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	UndeployOrganizationsEnvironmentsApisRevision(context.Context, *UndeployOrganizationsEnvironmentsApisRevisionRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer) DeployOrganizationsEnvironmentsApisRevision(context.Context, *DeployOrganizationsEnvironmentsApisRevisionRequest) (*GoogleCloudApigeeV1Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployOrganizationsEnvironmentsApisRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer) GetDeploymentsOrganizationsEnvironmentsApisRevision(context.Context, *GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest) (*GoogleCloudApigeeV1Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentsOrganizationsEnvironmentsApisRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer) UndeployOrganizationsEnvironmentsApisRevision(context.Context, *UndeployOrganizationsEnvironmentsApisRevisionRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployOrganizationsEnvironmentsApisRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisRevisionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisRevisionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisRevisionsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsServerServer()
}

func RegisterOrganizationsEnvironmentsApisRevisionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisRevisionsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisRevisionsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployOrganizationsEnvironmentsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).DeployOrganizationsEnvironmentsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/DeployOrganizationsEnvironmentsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).DeployOrganizationsEnvironmentsApisRevision(ctx, req.(*DeployOrganizationsEnvironmentsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/GetDeploymentsOrganizationsEnvironmentsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx, req.(*GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployOrganizationsEnvironmentsApisRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).UndeployOrganizationsEnvironmentsApisRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/UndeployOrganizationsEnvironmentsApisRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsServerServer).UndeployOrganizationsEnvironmentsApisRevision(ctx, req.(*UndeployOrganizationsEnvironmentsApisRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsApisRevisionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisRevisionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisRevisionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer",
	HandlerType: (*OrganizationsEnvironmentsApisRevisionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployOrganizationsEnvironmentsApisRevision",
			Handler:    _OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_Handler,
		},
		{
			MethodName: "GetDeploymentsOrganizationsEnvironmentsApisRevision",
			Handler:    _OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_Handler,
		},
		{
			MethodName: "UndeployOrganizationsEnvironmentsApisRevision",
			Handler:    _OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient is the client API for OrganizationsEnvironmentsApisRevisionsDebugsessionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient interface {
	// Creates a debug session for a deployed API Proxy revision.
	CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSession, error)
	// Deletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.
	DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Retrieves a debug session.
	GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSession, error)
	// Lists debug sessions that are currently active in the given API Proxy revision.
	ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx context.Context, in *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDebugSessionsResponse, error)
}

type organizationsEnvironmentsApisRevisionsDebugsessionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient {
	return &organizationsEnvironmentsApisRevisionsDebugsessionsServerClient{cc}
}

func (c *organizationsEnvironmentsApisRevisionsDebugsessionsServerClient) CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSession, error) {
	out := new(GoogleCloudApigeeV1DebugSession)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/CreateOrganizationsEnvironmentsApisRevisionsDebugsession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsDebugsessionsServerClient) DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsDebugsessionsServerClient) GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx context.Context, in *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSession, error) {
	out := new(GoogleCloudApigeeV1DebugSession)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/GetOrganizationsEnvironmentsApisRevisionsDebugsession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsDebugsessionsServerClient) ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx context.Context, in *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDebugSessionsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDebugSessionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/ListOrganizationsEnvironmentsApisRevisionsDebugsessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer is the server API for OrganizationsEnvironmentsApisRevisionsDebugsessionsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer interface {
	// Creates a debug session for a deployed API Proxy revision.
	CreateOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleCloudApigeeV1DebugSession, error)
	// Deletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.
	DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleProtobufEmpty, error)
	// Retrieves a debug session.
	GetOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleCloudApigeeV1DebugSession, error)
	// Lists debug sessions that are currently active in the given API Proxy revision.
	ListOrganizationsEnvironmentsApisRevisionsDebugsessions(context.Context, *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) (*GoogleCloudApigeeV1ListDebugSessionsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) CreateOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleCloudApigeeV1DebugSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsApisRevisionsDebugsession not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) GetOrganizationsEnvironmentsApisRevisionsDebugsession(context.Context, *GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest) (*GoogleCloudApigeeV1DebugSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsApisRevisionsDebugsession not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) ListOrganizationsEnvironmentsApisRevisionsDebugsessions(context.Context, *ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest) (*GoogleCloudApigeeV1ListDebugSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsApisRevisionsDebugsessions not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer()
}

func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/CreateOrganizationsEnvironmentsApisRevisionsDebugsession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, req.(*CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, req.(*DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/GetOrganizationsEnvironmentsApisRevisionsDebugsession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, req.(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/ListOrganizationsEnvironmentsApisRevisionsDebugsessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer).ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx, req.(*ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisRevisionsDebugsessionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer",
	HandlerType: (*OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsApisRevisionsDebugsession",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_Handler,
		},
		{
			MethodName: "DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsApisRevisionsDebugsession",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsApisRevisionsDebugsessions",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient is the client API for OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient interface {
	// Gets the debug data from a transaction.
	GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx context.Context, in *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSessionTransaction, error)
}

type organizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient {
	return &organizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient{cc}
}

func (c *organizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient) GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx context.Context, in *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DebugSessionTransaction, error) {
	out := new(GoogleCloudApigeeV1DebugSessionTransaction)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer/GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer is the server API for OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer interface {
	// Gets the debug data from a transaction.
	GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(context.Context, *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) (*GoogleCloudApigeeV1DebugSessionTransaction, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer) GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(context.Context, *GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest) (*GoogleCloudApigeeV1DebugSessionTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer()
}

func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer).GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer/GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer).GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx, req.(*GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer",
	HandlerType: (*OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient is the client API for OrganizationsEnvironmentsApisRevisionsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient interface {
	// Generates a report for a dry run analysis of a DeployApiProxy request without committing the deployment. In addition to the standard validations performed when adding deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being created. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run DeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateDeployChangeReport`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx context.Context, in *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeploymentChangeReport, error)
	// Generates a report for a dry run analysis of an UndeployApiProxy request without committing the undeploy. In addition to the standard validations performed when removing deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being removed. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run UndeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateUndeployChangeReport`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx context.Context, in *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeploymentChangeReport, error)
}

type organizationsEnvironmentsApisRevisionsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsApisRevisionsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient {
	return &organizationsEnvironmentsApisRevisionsDeploymentsServerClient{cc}
}

func (c *organizationsEnvironmentsApisRevisionsDeploymentsServerClient) GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx context.Context, in *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeploymentChangeReport, error) {
	out := new(GoogleCloudApigeeV1DeploymentChangeReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsApisRevisionsDeploymentsServerClient) GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx context.Context, in *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeploymentChangeReport, error) {
	out := new(GoogleCloudApigeeV1DeploymentChangeReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer is the server API for OrganizationsEnvironmentsApisRevisionsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer interface {
	// Generates a report for a dry run analysis of a DeployApiProxy request without committing the deployment. In addition to the standard validations performed when adding deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being created. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run DeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateDeployChangeReport`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(context.Context, *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) (*GoogleCloudApigeeV1DeploymentChangeReport, error)
	// Generates a report for a dry run analysis of an UndeployApiProxy request without committing the undeploy. In addition to the standard validations performed when removing deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being removed. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run UndeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateUndeployChangeReport`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`
	GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(context.Context, *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) (*GoogleCloudApigeeV1DeploymentChangeReport, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer) GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(context.Context, *GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) (*GoogleCloudApigeeV1DeploymentChangeReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer) GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(context.Context, *GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest) (*GoogleCloudApigeeV1DeploymentChangeReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer()
}

func RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsApisRevisionsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer).GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer).GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, req.(*GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer).GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer).GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, req.(*GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsApisRevisionsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsApisRevisionsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsApisRevisionsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer",
	HandlerType: (*OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_Handler,
		},
		{
			MethodName: "GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment",
			Handler:    _OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsArchiveDeploymentsServerClient is the client API for OrganizationsEnvironmentsArchiveDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsArchiveDeploymentsServerClient interface {
	// Creates a new ArchiveDeployment.
	CreateOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *CreateOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an archive deployment.
	DeleteOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Generates a signed URL for downloading the original zip file used to create an Archive Deployment. The URL is only valid for a limited period and should be used within minutes after generation. Each call returns a new upload URL.
	GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GenerateDownloadUrlResponse, error)
	// Generates a signed URL for uploading an Archive zip file to Google Cloud Storage. Once the upload is complete, the signed URL should be passed to CreateArchiveDeployment. When uploading to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 1GB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,1073741824` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`
	GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GenerateUploadUrlResponse, error)
	// Gets the specified ArchiveDeployment.
	GetOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GetOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ArchiveDeployment, error)
	// Lists the ArchiveDeployments in the specified Environment.
	ListOrganizationsEnvironmentsArchiveDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsArchiveDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse, error)
	// Updates an existing ArchiveDeployment. Labels can modified but most of the other fields are not modifiable.
	PatchOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *PatchOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ArchiveDeployment, error)
}

type organizationsEnvironmentsArchiveDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsArchiveDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsArchiveDeploymentsServerClient {
	return &organizationsEnvironmentsArchiveDeploymentsServerClient{cc}
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) CreateOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *CreateOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/CreateOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) DeleteOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/DeleteOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GenerateDownloadUrlResponse, error) {
	out := new(GoogleCloudApigeeV1GenerateDownloadUrlResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GenerateUploadUrlResponse, error) {
	out := new(GoogleCloudApigeeV1GenerateUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) GetOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *GetOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ArchiveDeployment, error) {
	out := new(GoogleCloudApigeeV1ArchiveDeployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GetOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) ListOrganizationsEnvironmentsArchiveDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsArchiveDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListArchiveDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/ListOrganizationsEnvironmentsArchiveDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsArchiveDeploymentsServerClient) PatchOrganizationsEnvironmentsArchiveDeployment(ctx context.Context, in *PatchOrganizationsEnvironmentsArchiveDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ArchiveDeployment, error) {
	out := new(GoogleCloudApigeeV1ArchiveDeployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/PatchOrganizationsEnvironmentsArchiveDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsArchiveDeploymentsServerServer is the server API for OrganizationsEnvironmentsArchiveDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsArchiveDeploymentsServerServer interface {
	// Creates a new ArchiveDeployment.
	CreateOrganizationsEnvironmentsArchiveDeployment(context.Context, *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) (*longrunningpb.Operation, error)
	// Deletes an archive deployment.
	DeleteOrganizationsEnvironmentsArchiveDeployment(context.Context, *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleProtobufEmpty, error)
	// Generates a signed URL for downloading the original zip file used to create an Archive Deployment. The URL is only valid for a limited period and should be used within minutes after generation. Each call returns a new upload URL.
	GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(context.Context, *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1GenerateDownloadUrlResponse, error)
	// Generates a signed URL for uploading an Archive zip file to Google Cloud Storage. Once the upload is complete, the signed URL should be passed to CreateArchiveDeployment. When uploading to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 1GB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,1073741824` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`
	GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(context.Context, *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1GenerateUploadUrlResponse, error)
	// Gets the specified ArchiveDeployment.
	GetOrganizationsEnvironmentsArchiveDeployment(context.Context, *GetOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1ArchiveDeployment, error)
	// Lists the ArchiveDeployments in the specified Environment.
	ListOrganizationsEnvironmentsArchiveDeployments(context.Context, *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse, error)
	// Updates an existing ArchiveDeployment. Labels can modified but most of the other fields are not modifiable.
	PatchOrganizationsEnvironmentsArchiveDeployment(context.Context, *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1ArchiveDeployment, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) CreateOrganizationsEnvironmentsArchiveDeployment(context.Context, *CreateOrganizationsEnvironmentsArchiveDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) DeleteOrganizationsEnvironmentsArchiveDeployment(context.Context, *DeleteOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(context.Context, *GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1GenerateDownloadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(context.Context, *GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1GenerateUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) GetOrganizationsEnvironmentsArchiveDeployment(context.Context, *GetOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1ArchiveDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) ListOrganizationsEnvironmentsArchiveDeployments(context.Context, *ListOrganizationsEnvironmentsArchiveDeploymentsRequest) (*GoogleCloudApigeeV1ListArchiveDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsArchiveDeployments not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) PatchOrganizationsEnvironmentsArchiveDeployment(context.Context, *PatchOrganizationsEnvironmentsArchiveDeploymentRequest) (*GoogleCloudApigeeV1ArchiveDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsEnvironmentsArchiveDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsArchiveDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsArchiveDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsArchiveDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsArchiveDeploymentsServerServer()
}

func RegisterOrganizationsEnvironmentsArchiveDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsArchiveDeploymentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsArchiveDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).CreateOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/CreateOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).CreateOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*CreateOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).DeleteOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/DeleteOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).DeleteOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*DeleteOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GetOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GetOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).GetOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*GetOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsArchiveDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).ListOrganizationsEnvironmentsArchiveDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/ListOrganizationsEnvironmentsArchiveDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).ListOrganizationsEnvironmentsArchiveDeployments(ctx, req.(*ListOrganizationsEnvironmentsArchiveDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsEnvironmentsArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).PatchOrganizationsEnvironmentsArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/PatchOrganizationsEnvironmentsArchiveDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsArchiveDeploymentsServerServer).PatchOrganizationsEnvironmentsArchiveDeployment(ctx, req.(*PatchOrganizationsEnvironmentsArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsArchiveDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsArchiveDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsArchiveDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer",
	HandlerType: (*OrganizationsEnvironmentsArchiveDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
		{
			MethodName: "GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
		{
			MethodName: "GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsArchiveDeployments",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_Handler,
		},
		{
			MethodName: "PatchOrganizationsEnvironmentsArchiveDeployment",
			Handler:    _OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsCachesServerClient is the client API for OrganizationsEnvironmentsCachesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsCachesServerClient interface {
	// Deletes a cache.
	DeleteOrganizationsEnvironmentsCache(ctx context.Context, in *DeleteOrganizationsEnvironmentsCacheRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsEnvironmentsCachesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsCachesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsCachesServerClient {
	return &organizationsEnvironmentsCachesServerClient{cc}
}

func (c *organizationsEnvironmentsCachesServerClient) DeleteOrganizationsEnvironmentsCache(ctx context.Context, in *DeleteOrganizationsEnvironmentsCacheRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer/DeleteOrganizationsEnvironmentsCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsCachesServerServer is the server API for OrganizationsEnvironmentsCachesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsCachesServerServer
// for forward compatibility
type OrganizationsEnvironmentsCachesServerServer interface {
	// Deletes a cache.
	DeleteOrganizationsEnvironmentsCache(context.Context, *DeleteOrganizationsEnvironmentsCacheRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsCachesServerServer()
}

// UnimplementedOrganizationsEnvironmentsCachesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsCachesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsCachesServerServer) DeleteOrganizationsEnvironmentsCache(context.Context, *DeleteOrganizationsEnvironmentsCacheRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsCache not implemented")
}
func (UnimplementedOrganizationsEnvironmentsCachesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsCachesServerServer() {
}

// UnsafeOrganizationsEnvironmentsCachesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsCachesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsCachesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsCachesServerServer()
}

func RegisterOrganizationsEnvironmentsCachesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsCachesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsCachesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsCachesServerServer).DeleteOrganizationsEnvironmentsCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer/DeleteOrganizationsEnvironmentsCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsCachesServerServer).DeleteOrganizationsEnvironmentsCache(ctx, req.(*DeleteOrganizationsEnvironmentsCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsCachesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsCachesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsCachesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer",
	HandlerType: (*OrganizationsEnvironmentsCachesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsEnvironmentsCache",
			Handler:    _OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsDeploymentsServerClient is the client API for OrganizationsEnvironmentsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsDeploymentsServerClient interface {
	// Gets a particular deployment of Api proxy or a shared flow in an environment
	GetOrganizationsEnvironmentsDeployment(ctx context.Context, in *GetOrganizationsEnvironmentsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error)
	// Lists all deployments of API proxies or shared flows in an environment.
	ListOrganizationsEnvironmentsDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsEnvironmentsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsDeploymentsServerClient {
	return &organizationsEnvironmentsDeploymentsServerClient{cc}
}

func (c *organizationsEnvironmentsDeploymentsServerClient) GetOrganizationsEnvironmentsDeployment(ctx context.Context, in *GetOrganizationsEnvironmentsDeploymentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error) {
	out := new(GoogleCloudApigeeV1Deployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/GetOrganizationsEnvironmentsDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsDeploymentsServerClient) ListOrganizationsEnvironmentsDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/ListOrganizationsEnvironmentsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsDeploymentsServerServer is the server API for OrganizationsEnvironmentsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsDeploymentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsDeploymentsServerServer interface {
	// Gets a particular deployment of Api proxy or a shared flow in an environment
	GetOrganizationsEnvironmentsDeployment(context.Context, *GetOrganizationsEnvironmentsDeploymentRequest) (*GoogleCloudApigeeV1Deployment, error)
	// Lists all deployments of API proxies or shared flows in an environment.
	ListOrganizationsEnvironmentsDeployments(context.Context, *ListOrganizationsEnvironmentsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsDeploymentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsDeploymentsServerServer) GetOrganizationsEnvironmentsDeployment(context.Context, *GetOrganizationsEnvironmentsDeploymentRequest) (*GoogleCloudApigeeV1Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsDeployment not implemented")
}
func (UnimplementedOrganizationsEnvironmentsDeploymentsServerServer) ListOrganizationsEnvironmentsDeployments(context.Context, *ListOrganizationsEnvironmentsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsDeployments not implemented")
}
func (UnimplementedOrganizationsEnvironmentsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsDeploymentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsDeploymentsServerServer()
}

func RegisterOrganizationsEnvironmentsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsDeploymentsServerServer).GetOrganizationsEnvironmentsDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/GetOrganizationsEnvironmentsDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsDeploymentsServerServer).GetOrganizationsEnvironmentsDeployment(ctx, req.(*GetOrganizationsEnvironmentsDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsDeploymentsServerServer).ListOrganizationsEnvironmentsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/ListOrganizationsEnvironmentsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsDeploymentsServerServer).ListOrganizationsEnvironmentsDeployments(ctx, req.(*ListOrganizationsEnvironmentsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer",
	HandlerType: (*OrganizationsEnvironmentsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsEnvironmentsDeployment",
			Handler:    _OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsDeployments",
			Handler:    _OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsFlowhooksServerClient is the client API for OrganizationsEnvironmentsFlowhooksServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsFlowhooksServerClient interface {
	// Attaches a shared flow to a flow hook.
	AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx context.Context, in *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error)
	// Detaches a shared flow from a flow hook.
	DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx context.Context, in *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error)
	// Returns the name of the shared flow attached to the specified flow hook. If there's no shared flow attached to the flow hook, the API does not return an error; it simply does not return a name in the response.
	GetOrganizationsEnvironmentsFlowhook(ctx context.Context, in *GetOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error)
}

type organizationsEnvironmentsFlowhooksServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsFlowhooksServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsFlowhooksServerClient {
	return &organizationsEnvironmentsFlowhooksServerClient{cc}
}

func (c *organizationsEnvironmentsFlowhooksServerClient) AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx context.Context, in *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error) {
	out := new(GoogleCloudApigeeV1FlowHook)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsFlowhooksServerClient) DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx context.Context, in *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error) {
	out := new(GoogleCloudApigeeV1FlowHook)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsFlowhooksServerClient) GetOrganizationsEnvironmentsFlowhook(ctx context.Context, in *GetOrganizationsEnvironmentsFlowhookRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1FlowHook, error) {
	out := new(GoogleCloudApigeeV1FlowHook)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/GetOrganizationsEnvironmentsFlowhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsFlowhooksServerServer is the server API for OrganizationsEnvironmentsFlowhooksServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsFlowhooksServerServer
// for forward compatibility
type OrganizationsEnvironmentsFlowhooksServerServer interface {
	// Attaches a shared flow to a flow hook.
	AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(context.Context, *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error)
	// Detaches a shared flow from a flow hook.
	DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(context.Context, *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error)
	// Returns the name of the shared flow attached to the specified flow hook. If there's no shared flow attached to the flow hook, the API does not return an error; it simply does not return a name in the response.
	GetOrganizationsEnvironmentsFlowhook(context.Context, *GetOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsFlowhooksServerServer()
}

// UnimplementedOrganizationsEnvironmentsFlowhooksServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsFlowhooksServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsFlowhooksServerServer) AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(context.Context, *AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook not implemented")
}
func (UnimplementedOrganizationsEnvironmentsFlowhooksServerServer) DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(context.Context, *DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook not implemented")
}
func (UnimplementedOrganizationsEnvironmentsFlowhooksServerServer) GetOrganizationsEnvironmentsFlowhook(context.Context, *GetOrganizationsEnvironmentsFlowhookRequest) (*GoogleCloudApigeeV1FlowHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsFlowhook not implemented")
}
func (UnimplementedOrganizationsEnvironmentsFlowhooksServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsFlowhooksServerServer() {
}

// UnsafeOrganizationsEnvironmentsFlowhooksServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsFlowhooksServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsFlowhooksServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsFlowhooksServerServer()
}

func RegisterOrganizationsEnvironmentsFlowhooksServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsFlowhooksServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsFlowhooksServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx, req.(*AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx, req.(*DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsFlowhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).GetOrganizationsEnvironmentsFlowhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/GetOrganizationsEnvironmentsFlowhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsFlowhooksServerServer).GetOrganizationsEnvironmentsFlowhook(ctx, req.(*GetOrganizationsEnvironmentsFlowhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsFlowhooksServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsFlowhooksServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsFlowhooksServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer",
	HandlerType: (*OrganizationsEnvironmentsFlowhooksServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook",
			Handler:    _OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_Handler,
		},
		{
			MethodName: "DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook",
			Handler:    _OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsFlowhook",
			Handler:    _OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsKeystoresServerClient is the client API for OrganizationsEnvironmentsKeystoresServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsKeystoresServerClient interface {
	// Creates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server's certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.
	CreateOrganizationsEnvironmentsKeystore(ctx context.Context, in *CreateOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error)
	// Deletes a keystore or truststore.
	DeleteOrganizationsEnvironmentsKeystore(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error)
	// Gets a keystore or truststore.
	GetOrganizationsEnvironmentsKeystore(ctx context.Context, in *GetOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error)
}

type organizationsEnvironmentsKeystoresServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsKeystoresServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsKeystoresServerClient {
	return &organizationsEnvironmentsKeystoresServerClient{cc}
}

func (c *organizationsEnvironmentsKeystoresServerClient) CreateOrganizationsEnvironmentsKeystore(ctx context.Context, in *CreateOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error) {
	out := new(GoogleCloudApigeeV1Keystore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/CreateOrganizationsEnvironmentsKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresServerClient) DeleteOrganizationsEnvironmentsKeystore(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error) {
	out := new(GoogleCloudApigeeV1Keystore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/DeleteOrganizationsEnvironmentsKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresServerClient) GetOrganizationsEnvironmentsKeystore(ctx context.Context, in *GetOrganizationsEnvironmentsKeystoreRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Keystore, error) {
	out := new(GoogleCloudApigeeV1Keystore)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/GetOrganizationsEnvironmentsKeystore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsKeystoresServerServer is the server API for OrganizationsEnvironmentsKeystoresServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsKeystoresServerServer
// for forward compatibility
type OrganizationsEnvironmentsKeystoresServerServer interface {
	// Creates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server's certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.
	CreateOrganizationsEnvironmentsKeystore(context.Context, *CreateOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error)
	// Deletes a keystore or truststore.
	DeleteOrganizationsEnvironmentsKeystore(context.Context, *DeleteOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error)
	// Gets a keystore or truststore.
	GetOrganizationsEnvironmentsKeystore(context.Context, *GetOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresServerServer()
}

// UnimplementedOrganizationsEnvironmentsKeystoresServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsKeystoresServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsKeystoresServerServer) CreateOrganizationsEnvironmentsKeystore(context.Context, *CreateOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsKeystore not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresServerServer) DeleteOrganizationsEnvironmentsKeystore(context.Context, *DeleteOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsKeystore not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresServerServer) GetOrganizationsEnvironmentsKeystore(context.Context, *GetOrganizationsEnvironmentsKeystoreRequest) (*GoogleCloudApigeeV1Keystore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsKeystore not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresServerServer() {
}

// UnsafeOrganizationsEnvironmentsKeystoresServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsKeystoresServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsKeystoresServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresServerServer()
}

func RegisterOrganizationsEnvironmentsKeystoresServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsKeystoresServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsKeystoresServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).CreateOrganizationsEnvironmentsKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/CreateOrganizationsEnvironmentsKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).CreateOrganizationsEnvironmentsKeystore(ctx, req.(*CreateOrganizationsEnvironmentsKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).DeleteOrganizationsEnvironmentsKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/DeleteOrganizationsEnvironmentsKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).DeleteOrganizationsEnvironmentsKeystore(ctx, req.(*DeleteOrganizationsEnvironmentsKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsKeystoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).GetOrganizationsEnvironmentsKeystore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/GetOrganizationsEnvironmentsKeystore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresServerServer).GetOrganizationsEnvironmentsKeystore(ctx, req.(*GetOrganizationsEnvironmentsKeystoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsKeystoresServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsKeystoresServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsKeystoresServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer",
	HandlerType: (*OrganizationsEnvironmentsKeystoresServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsKeystore",
			Handler:    _OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsKeystore",
			Handler:    _OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsKeystore",
			Handler:    _OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsKeystoresAliasesServerClient is the client API for OrganizationsEnvironmentsKeystoresAliasesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsKeystoresAliasesServerClient interface {
	// Creates an alias from a key/certificate pair. The structure of the request is controlled by the `format` query parameter: - `keycertfile` - Separate PEM-encoded key and certificate files are uploaded. Set `Content-Type: multipart/form-data` and include the `keyFile`, `certFile`, and `password` (if keys are encrypted) fields in the request body. If uploading to a truststore, omit `keyFile`. - `pkcs12` - A PKCS12 file is uploaded. Set `Content-Type: multipart/form-data`, provide the file in the `file` field, and include the `password` field if the file is encrypted in the request body. - `selfsignedcert` - A new private key and certificate are generated. Set `Content-Type: application/json` and include CertificateGenerationSpec in the request body.
	CreateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *CreateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error)
	// Generates a PKCS #10 Certificate Signing Request for the private key in an alias.
	CsrOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *CsrOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// Deletes an alias.
	DeleteOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error)
	// Gets an alias.
	GetOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *GetOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error)
	// Gets the certificate from an alias in PEM-encoded form.
	GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// Updates the certificate in an alias.
	UpdateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error)
}

type organizationsEnvironmentsKeystoresAliasesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsKeystoresAliasesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsKeystoresAliasesServerClient {
	return &organizationsEnvironmentsKeystoresAliasesServerClient{cc}
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) CreateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *CreateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error) {
	out := new(GoogleCloudApigeeV1Alias)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CreateOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) CsrOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *CsrOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CsrOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) DeleteOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error) {
	out := new(GoogleCloudApigeeV1Alias)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/DeleteOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) GetOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *GetOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error) {
	out := new(GoogleCloudApigeeV1Alias)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetCertificateOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeystoresAliasesServerClient) UpdateOrganizationsEnvironmentsKeystoresAliase(ctx context.Context, in *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Alias, error) {
	out := new(GoogleCloudApigeeV1Alias)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/UpdateOrganizationsEnvironmentsKeystoresAliase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsKeystoresAliasesServerServer is the server API for OrganizationsEnvironmentsKeystoresAliasesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer
// for forward compatibility
type OrganizationsEnvironmentsKeystoresAliasesServerServer interface {
	// Creates an alias from a key/certificate pair. The structure of the request is controlled by the `format` query parameter: - `keycertfile` - Separate PEM-encoded key and certificate files are uploaded. Set `Content-Type: multipart/form-data` and include the `keyFile`, `certFile`, and `password` (if keys are encrypted) fields in the request body. If uploading to a truststore, omit `keyFile`. - `pkcs12` - A PKCS12 file is uploaded. Set `Content-Type: multipart/form-data`, provide the file in the `file` field, and include the `password` field if the file is encrypted in the request body. - `selfsignedcert` - A new private key and certificate are generated. Set `Content-Type: application/json` and include CertificateGenerationSpec in the request body.
	CreateOrganizationsEnvironmentsKeystoresAliase(context.Context, *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error)
	// Generates a PKCS #10 Certificate Signing Request for the private key in an alias.
	CsrOrganizationsEnvironmentsKeystoresAliase(context.Context, *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleApiHttpBody, error)
	// Deletes an alias.
	DeleteOrganizationsEnvironmentsKeystoresAliase(context.Context, *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error)
	// Gets an alias.
	GetOrganizationsEnvironmentsKeystoresAliase(context.Context, *GetOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error)
	// Gets the certificate from an alias in PEM-encoded form.
	GetCertificateOrganizationsEnvironmentsKeystoresAliase(context.Context, *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleApiHttpBody, error)
	// Updates the certificate in an alias.
	UpdateOrganizationsEnvironmentsKeystoresAliase(context.Context, *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer()
}

// UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) CreateOrganizationsEnvironmentsKeystoresAliase(context.Context, *CreateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) CsrOrganizationsEnvironmentsKeystoresAliase(context.Context, *CsrOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CsrOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) DeleteOrganizationsEnvironmentsKeystoresAliase(context.Context, *DeleteOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) GetOrganizationsEnvironmentsKeystoresAliase(context.Context, *GetOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) GetCertificateOrganizationsEnvironmentsKeystoresAliase(context.Context, *GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) UpdateOrganizationsEnvironmentsKeystoresAliase(context.Context, *UpdateOrganizationsEnvironmentsKeystoresAliaseRequest) (*GoogleCloudApigeeV1Alias, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironmentsKeystoresAliase not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer() {
}

// UnsafeOrganizationsEnvironmentsKeystoresAliasesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsKeystoresAliasesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsKeystoresAliasesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsKeystoresAliasesServerServer()
}

func RegisterOrganizationsEnvironmentsKeystoresAliasesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsKeystoresAliasesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsKeystoresAliasesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).CreateOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CreateOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).CreateOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*CreateOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CsrOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).CsrOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CsrOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).CsrOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*CsrOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).DeleteOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/DeleteOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).DeleteOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*DeleteOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).GetOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).GetOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*GetOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetCertificateOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentsKeystoresAliaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).UpdateOrganizationsEnvironmentsKeystoresAliase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/UpdateOrganizationsEnvironmentsKeystoresAliase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeystoresAliasesServerServer).UpdateOrganizationsEnvironmentsKeystoresAliase(ctx, req.(*UpdateOrganizationsEnvironmentsKeystoresAliaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsKeystoresAliasesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsKeystoresAliasesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsKeystoresAliasesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer",
	HandlerType: (*OrganizationsEnvironmentsKeystoresAliasesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
		{
			MethodName: "CsrOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
		{
			MethodName: "GetCertificateOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironmentsKeystoresAliase",
			Handler:    _OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsKeyvaluemapsServerClient is the client API for OrganizationsEnvironmentsKeyvaluemapsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsKeyvaluemapsServerClient interface {
	// Creates a key value map in an environment.
	CreateOrganizationsEnvironmentsKeyvaluemap(ctx context.Context, in *CreateOrganizationsEnvironmentsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an environment.
	DeleteOrganizationsEnvironmentsKeyvaluemap(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
}

type organizationsEnvironmentsKeyvaluemapsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsKeyvaluemapsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsKeyvaluemapsServerClient {
	return &organizationsEnvironmentsKeyvaluemapsServerClient{cc}
}

func (c *organizationsEnvironmentsKeyvaluemapsServerClient) CreateOrganizationsEnvironmentsKeyvaluemap(ctx context.Context, in *CreateOrganizationsEnvironmentsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/CreateOrganizationsEnvironmentsKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeyvaluemapsServerClient) DeleteOrganizationsEnvironmentsKeyvaluemap(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/DeleteOrganizationsEnvironmentsKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsKeyvaluemapsServerServer is the server API for OrganizationsEnvironmentsKeyvaluemapsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer
// for forward compatibility
type OrganizationsEnvironmentsKeyvaluemapsServerServer interface {
	// Creates a key value map in an environment.
	CreateOrganizationsEnvironmentsKeyvaluemap(context.Context, *CreateOrganizationsEnvironmentsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an environment.
	DeleteOrganizationsEnvironmentsKeyvaluemap(context.Context, *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer()
}

// UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer) CreateOrganizationsEnvironmentsKeyvaluemap(context.Context, *CreateOrganizationsEnvironmentsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer) DeleteOrganizationsEnvironmentsKeyvaluemap(context.Context, *DeleteOrganizationsEnvironmentsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer() {
}

// UnsafeOrganizationsEnvironmentsKeyvaluemapsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsKeyvaluemapsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsKeyvaluemapsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsServerServer()
}

func RegisterOrganizationsEnvironmentsKeyvaluemapsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsKeyvaluemapsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsKeyvaluemapsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsServerServer).CreateOrganizationsEnvironmentsKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/CreateOrganizationsEnvironmentsKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsServerServer).CreateOrganizationsEnvironmentsKeyvaluemap(ctx, req.(*CreateOrganizationsEnvironmentsKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsServerServer).DeleteOrganizationsEnvironmentsKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/DeleteOrganizationsEnvironmentsKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsServerServer).DeleteOrganizationsEnvironmentsKeyvaluemap(ctx, req.(*DeleteOrganizationsEnvironmentsKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsKeyvaluemapsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsKeyvaluemapsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsKeyvaluemapsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer",
	HandlerType: (*OrganizationsEnvironmentsKeyvaluemapsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsKeyvaluemap",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsKeyvaluemap",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient is the client API for OrganizationsEnvironmentsKeyvaluemapsEntriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
}

type organizationsEnvironmentsKeyvaluemapsEntriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsKeyvaluemapsEntriesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient {
	return &organizationsEnvironmentsKeyvaluemapsEntriesServerClient{cc}
}

func (c *organizationsEnvironmentsKeyvaluemapsEntriesServerClient) CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/CreateOrganizationsEnvironmentsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeyvaluemapsEntriesServerClient) DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/DeleteOrganizationsEnvironmentsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeyvaluemapsEntriesServerClient) GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/GetOrganizationsEnvironmentsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeyvaluemapsEntriesServerClient) ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListKeyValueEntriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/ListOrganizationsEnvironmentsKeyvaluemapsEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsKeyvaluemapsEntriesServerClient) UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/UpdateOrganizationsEnvironmentsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer is the server API for OrganizationsEnvironmentsKeyvaluemapsEntriesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer
// for forward compatibility
type OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsEnvironmentsKeyvaluemapsEntries(context.Context, *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer()
}

// UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) CreateOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) GetOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) ListOrganizationsEnvironmentsKeyvaluemapsEntries(context.Context, *ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsKeyvaluemapsEntries not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(context.Context, *UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironmentsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer() {
}

// UnsafeOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer()
}

func RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/CreateOrganizationsEnvironmentsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, req.(*CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/DeleteOrganizationsEnvironmentsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, req.(*DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/GetOrganizationsEnvironmentsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, req.(*GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/ListOrganizationsEnvironmentsKeyvaluemapsEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx, req.(*ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/UpdateOrganizationsEnvironmentsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer).UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, req.(*UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsKeyvaluemapsEntriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer",
	HandlerType: (*OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsKeyvaluemapsEntry",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsKeyvaluemapsEntry",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsKeyvaluemapsEntry",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsKeyvaluemapsEntries",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironmentsKeyvaluemapsEntry",
			Handler:    _OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsOptimizedStatsServerClient is the client API for OrganizationsEnvironmentsOptimizedStatsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsOptimizedStatsServerClient interface {
	// Similar to GetStats except that the response is less verbose.
	GetOrganizationsEnvironmentsOptimizedStat(ctx context.Context, in *GetOrganizationsEnvironmentsOptimizedStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OptimizedStats, error)
}

type organizationsEnvironmentsOptimizedStatsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsOptimizedStatsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsOptimizedStatsServerClient {
	return &organizationsEnvironmentsOptimizedStatsServerClient{cc}
}

func (c *organizationsEnvironmentsOptimizedStatsServerClient) GetOrganizationsEnvironmentsOptimizedStat(ctx context.Context, in *GetOrganizationsEnvironmentsOptimizedStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OptimizedStats, error) {
	out := new(GoogleCloudApigeeV1OptimizedStats)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer/GetOrganizationsEnvironmentsOptimizedStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsOptimizedStatsServerServer is the server API for OrganizationsEnvironmentsOptimizedStatsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer
// for forward compatibility
type OrganizationsEnvironmentsOptimizedStatsServerServer interface {
	// Similar to GetStats except that the response is less verbose.
	GetOrganizationsEnvironmentsOptimizedStat(context.Context, *GetOrganizationsEnvironmentsOptimizedStatRequest) (*GoogleCloudApigeeV1OptimizedStats, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer()
}

// UnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer) GetOrganizationsEnvironmentsOptimizedStat(context.Context, *GetOrganizationsEnvironmentsOptimizedStatRequest) (*GoogleCloudApigeeV1OptimizedStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsOptimizedStat not implemented")
}
func (UnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer() {
}

// UnsafeOrganizationsEnvironmentsOptimizedStatsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsOptimizedStatsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsOptimizedStatsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsOptimizedStatsServerServer()
}

func RegisterOrganizationsEnvironmentsOptimizedStatsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsOptimizedStatsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsOptimizedStatsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsOptimizedStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsOptimizedStatsServerServer).GetOrganizationsEnvironmentsOptimizedStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer/GetOrganizationsEnvironmentsOptimizedStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsOptimizedStatsServerServer).GetOrganizationsEnvironmentsOptimizedStat(ctx, req.(*GetOrganizationsEnvironmentsOptimizedStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsOptimizedStatsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsOptimizedStatsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsOptimizedStatsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer",
	HandlerType: (*OrganizationsEnvironmentsOptimizedStatsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsEnvironmentsOptimizedStat",
			Handler:    _OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsQueriesServerClient is the client API for OrganizationsEnvironmentsQueriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsQueriesServerClient interface {
	// Submit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsEnvironmentsQuery(ctx context.Context, in *CreateOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error)
	// Get query status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsEnvironmentsQuery(ctx context.Context, in *GetOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsEnvironmentsQuery(ctx context.Context, in *GetResultOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is sent to the client as a list of urls to JSON files.
	GetResulturlOrganizationsEnvironmentsQuery(ctx context.Context, in *GetResulturlOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse, error)
	// Return a list of Asynchronous Queries
	ListOrganizationsEnvironmentsQueries(ctx context.Context, in *ListOrganizationsEnvironmentsQueriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error)
}

type organizationsEnvironmentsQueriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsQueriesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsQueriesServerClient {
	return &organizationsEnvironmentsQueriesServerClient{cc}
}

func (c *organizationsEnvironmentsQueriesServerClient) CreateOrganizationsEnvironmentsQuery(ctx context.Context, in *CreateOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error) {
	out := new(GoogleCloudApigeeV1AsyncQuery)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/CreateOrganizationsEnvironmentsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsQueriesServerClient) GetOrganizationsEnvironmentsQuery(ctx context.Context, in *GetOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error) {
	out := new(GoogleCloudApigeeV1AsyncQuery)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetOrganizationsEnvironmentsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsQueriesServerClient) GetResultOrganizationsEnvironmentsQuery(ctx context.Context, in *GetResultOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResultOrganizationsEnvironmentsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsQueriesServerClient) GetResulturlOrganizationsEnvironmentsQuery(ctx context.Context, in *GetResulturlOrganizationsEnvironmentsQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse, error) {
	out := new(GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResulturlOrganizationsEnvironmentsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsQueriesServerClient) ListOrganizationsEnvironmentsQueries(ctx context.Context, in *ListOrganizationsEnvironmentsQueriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListAsyncQueriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/ListOrganizationsEnvironmentsQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsQueriesServerServer is the server API for OrganizationsEnvironmentsQueriesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsQueriesServerServer
// for forward compatibility
type OrganizationsEnvironmentsQueriesServerServer interface {
	// Submit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsEnvironmentsQuery(context.Context, *CreateOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error)
	// Get query status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsEnvironmentsQuery(context.Context, *GetOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsEnvironmentsQuery(context.Context, *GetResultOrganizationsEnvironmentsQueryRequest) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is sent to the client as a list of urls to JSON files.
	GetResulturlOrganizationsEnvironmentsQuery(context.Context, *GetResulturlOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse, error)
	// Return a list of Asynchronous Queries
	ListOrganizationsEnvironmentsQueries(context.Context, *ListOrganizationsEnvironmentsQueriesRequest) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsQueriesServerServer()
}

// UnimplementedOrganizationsEnvironmentsQueriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsQueriesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) CreateOrganizationsEnvironmentsQuery(context.Context, *CreateOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsQuery not implemented")
}
func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) GetOrganizationsEnvironmentsQuery(context.Context, *GetOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsQuery not implemented")
}
func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) GetResultOrganizationsEnvironmentsQuery(context.Context, *GetResultOrganizationsEnvironmentsQueryRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOrganizationsEnvironmentsQuery not implemented")
}
func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) GetResulturlOrganizationsEnvironmentsQuery(context.Context, *GetResulturlOrganizationsEnvironmentsQueryRequest) (*GoogleCloudApigeeV1GetAsyncQueryResultUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResulturlOrganizationsEnvironmentsQuery not implemented")
}
func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) ListOrganizationsEnvironmentsQueries(context.Context, *ListOrganizationsEnvironmentsQueriesRequest) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsQueries not implemented")
}
func (UnimplementedOrganizationsEnvironmentsQueriesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsQueriesServerServer() {
}

// UnsafeOrganizationsEnvironmentsQueriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsQueriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsQueriesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsQueriesServerServer()
}

func RegisterOrganizationsEnvironmentsQueriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsQueriesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsQueriesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).CreateOrganizationsEnvironmentsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/CreateOrganizationsEnvironmentsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).CreateOrganizationsEnvironmentsQuery(ctx, req.(*CreateOrganizationsEnvironmentsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetOrganizationsEnvironmentsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetOrganizationsEnvironmentsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetOrganizationsEnvironmentsQuery(ctx, req.(*GetOrganizationsEnvironmentsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOrganizationsEnvironmentsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetResultOrganizationsEnvironmentsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResultOrganizationsEnvironmentsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetResultOrganizationsEnvironmentsQuery(ctx, req.(*GetResultOrganizationsEnvironmentsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResulturlOrganizationsEnvironmentsQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetResulturlOrganizationsEnvironmentsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResulturlOrganizationsEnvironmentsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).GetResulturlOrganizationsEnvironmentsQuery(ctx, req.(*GetResulturlOrganizationsEnvironmentsQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).ListOrganizationsEnvironmentsQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/ListOrganizationsEnvironmentsQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsQueriesServerServer).ListOrganizationsEnvironmentsQueries(ctx, req.(*ListOrganizationsEnvironmentsQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsQueriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsQueriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsQueriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer",
	HandlerType: (*OrganizationsEnvironmentsQueriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsQuery",
			Handler:    _OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsQuery",
			Handler:    _OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_Handler,
		},
		{
			MethodName: "GetResultOrganizationsEnvironmentsQuery",
			Handler:    _OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_Handler,
		},
		{
			MethodName: "GetResulturlOrganizationsEnvironmentsQuery",
			Handler:    _OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsQueries",
			Handler:    _OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsReferencesServerClient is the client API for OrganizationsEnvironmentsReferencesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsReferencesServerClient interface {
	// Creates a Reference in the specified environment.
	CreateOrganizationsEnvironmentsReference(ctx context.Context, in *CreateOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error)
	// Deletes a Reference from an environment. Returns the deleted Reference resource.
	DeleteOrganizationsEnvironmentsReference(ctx context.Context, in *DeleteOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error)
	// Gets a Reference resource.
	GetOrganizationsEnvironmentsReference(ctx context.Context, in *GetOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error)
	// Updates an existing Reference. Note that this operation has PUT semantics; it will replace the entirety of the existing Reference with the resource in the request body.
	UpdateOrganizationsEnvironmentsReference(ctx context.Context, in *UpdateOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error)
}

type organizationsEnvironmentsReferencesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsReferencesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsReferencesServerClient {
	return &organizationsEnvironmentsReferencesServerClient{cc}
}

func (c *organizationsEnvironmentsReferencesServerClient) CreateOrganizationsEnvironmentsReference(ctx context.Context, in *CreateOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error) {
	out := new(GoogleCloudApigeeV1Reference)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/CreateOrganizationsEnvironmentsReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsReferencesServerClient) DeleteOrganizationsEnvironmentsReference(ctx context.Context, in *DeleteOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error) {
	out := new(GoogleCloudApigeeV1Reference)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/DeleteOrganizationsEnvironmentsReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsReferencesServerClient) GetOrganizationsEnvironmentsReference(ctx context.Context, in *GetOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error) {
	out := new(GoogleCloudApigeeV1Reference)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/GetOrganizationsEnvironmentsReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsReferencesServerClient) UpdateOrganizationsEnvironmentsReference(ctx context.Context, in *UpdateOrganizationsEnvironmentsReferenceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Reference, error) {
	out := new(GoogleCloudApigeeV1Reference)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/UpdateOrganizationsEnvironmentsReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsReferencesServerServer is the server API for OrganizationsEnvironmentsReferencesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsReferencesServerServer
// for forward compatibility
type OrganizationsEnvironmentsReferencesServerServer interface {
	// Creates a Reference in the specified environment.
	CreateOrganizationsEnvironmentsReference(context.Context, *CreateOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error)
	// Deletes a Reference from an environment. Returns the deleted Reference resource.
	DeleteOrganizationsEnvironmentsReference(context.Context, *DeleteOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error)
	// Gets a Reference resource.
	GetOrganizationsEnvironmentsReference(context.Context, *GetOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error)
	// Updates an existing Reference. Note that this operation has PUT semantics; it will replace the entirety of the existing Reference with the resource in the request body.
	UpdateOrganizationsEnvironmentsReference(context.Context, *UpdateOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsReferencesServerServer()
}

// UnimplementedOrganizationsEnvironmentsReferencesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsReferencesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsReferencesServerServer) CreateOrganizationsEnvironmentsReference(context.Context, *CreateOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsReference not implemented")
}
func (UnimplementedOrganizationsEnvironmentsReferencesServerServer) DeleteOrganizationsEnvironmentsReference(context.Context, *DeleteOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsReference not implemented")
}
func (UnimplementedOrganizationsEnvironmentsReferencesServerServer) GetOrganizationsEnvironmentsReference(context.Context, *GetOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsReference not implemented")
}
func (UnimplementedOrganizationsEnvironmentsReferencesServerServer) UpdateOrganizationsEnvironmentsReference(context.Context, *UpdateOrganizationsEnvironmentsReferenceRequest) (*GoogleCloudApigeeV1Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironmentsReference not implemented")
}
func (UnimplementedOrganizationsEnvironmentsReferencesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsReferencesServerServer() {
}

// UnsafeOrganizationsEnvironmentsReferencesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsReferencesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsReferencesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsReferencesServerServer()
}

func RegisterOrganizationsEnvironmentsReferencesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsReferencesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsReferencesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).CreateOrganizationsEnvironmentsReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/CreateOrganizationsEnvironmentsReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).CreateOrganizationsEnvironmentsReference(ctx, req.(*CreateOrganizationsEnvironmentsReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).DeleteOrganizationsEnvironmentsReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/DeleteOrganizationsEnvironmentsReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).DeleteOrganizationsEnvironmentsReference(ctx, req.(*DeleteOrganizationsEnvironmentsReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).GetOrganizationsEnvironmentsReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/GetOrganizationsEnvironmentsReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).GetOrganizationsEnvironmentsReference(ctx, req.(*GetOrganizationsEnvironmentsReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentsReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).UpdateOrganizationsEnvironmentsReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/UpdateOrganizationsEnvironmentsReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsReferencesServerServer).UpdateOrganizationsEnvironmentsReference(ctx, req.(*UpdateOrganizationsEnvironmentsReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsReferencesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsReferencesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsReferencesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer",
	HandlerType: (*OrganizationsEnvironmentsReferencesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsReference",
			Handler:    _OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsReference",
			Handler:    _OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsReference",
			Handler:    _OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironmentsReference",
			Handler:    _OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsResourcefilesServerClient is the client API for OrganizationsEnvironmentsResourcefilesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsResourcefilesServerClient interface {
	// Creates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	CreateOrganizationsEnvironmentsResourcefile(ctx context.Context, in *CreateOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error)
	// Deletes a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	DeleteOrganizationsEnvironmentsResourcefile(ctx context.Context, in *DeleteOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error)
	// Gets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	GetOrganizationsEnvironmentsResourcefile(ctx context.Context, in *GetOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	ListOrganizationsEnvironmentsResourcefiles(ctx context.Context, in *ListOrganizationsEnvironmentsResourcefilesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error)
	// Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx context.Context, in *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error)
	// Updates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	UpdateOrganizationsEnvironmentsResourcefile(ctx context.Context, in *UpdateOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error)
}

type organizationsEnvironmentsResourcefilesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsResourcefilesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsResourcefilesServerClient {
	return &organizationsEnvironmentsResourcefilesServerClient{cc}
}

func (c *organizationsEnvironmentsResourcefilesServerClient) CreateOrganizationsEnvironmentsResourcefile(ctx context.Context, in *CreateOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error) {
	out := new(GoogleCloudApigeeV1ResourceFile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/CreateOrganizationsEnvironmentsResourcefile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsResourcefilesServerClient) DeleteOrganizationsEnvironmentsResourcefile(ctx context.Context, in *DeleteOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error) {
	out := new(GoogleCloudApigeeV1ResourceFile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/DeleteOrganizationsEnvironmentsResourcefile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsResourcefilesServerClient) GetOrganizationsEnvironmentsResourcefile(ctx context.Context, in *GetOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/GetOrganizationsEnvironmentsResourcefile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsResourcefilesServerClient) ListOrganizationsEnvironmentsResourcefiles(ctx context.Context, in *ListOrganizationsEnvironmentsResourcefilesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error) {
	out := new(GoogleCloudApigeeV1ListEnvironmentResourcesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListOrganizationsEnvironmentsResourcefiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsResourcefilesServerClient) ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx context.Context, in *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error) {
	out := new(GoogleCloudApigeeV1ListEnvironmentResourcesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsResourcefilesServerClient) UpdateOrganizationsEnvironmentsResourcefile(ctx context.Context, in *UpdateOrganizationsEnvironmentsResourcefileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ResourceFile, error) {
	out := new(GoogleCloudApigeeV1ResourceFile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/UpdateOrganizationsEnvironmentsResourcefile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsResourcefilesServerServer is the server API for OrganizationsEnvironmentsResourcefilesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsResourcefilesServerServer
// for forward compatibility
type OrganizationsEnvironmentsResourcefilesServerServer interface {
	// Creates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	CreateOrganizationsEnvironmentsResourcefile(context.Context, *CreateOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error)
	// Deletes a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	DeleteOrganizationsEnvironmentsResourcefile(context.Context, *DeleteOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error)
	// Gets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	GetOrganizationsEnvironmentsResourcefile(context.Context, *GetOrganizationsEnvironmentsResourcefileRequest) (*GoogleApiHttpBody, error)
	// Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	ListOrganizationsEnvironmentsResourcefiles(context.Context, *ListOrganizationsEnvironmentsResourcefilesRequest) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error)
	// Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(context.Context, *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error)
	// Updates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).
	UpdateOrganizationsEnvironmentsResourcefile(context.Context, *UpdateOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsResourcefilesServerServer()
}

// UnimplementedOrganizationsEnvironmentsResourcefilesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsResourcefilesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) CreateOrganizationsEnvironmentsResourcefile(context.Context, *CreateOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsResourcefile not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) DeleteOrganizationsEnvironmentsResourcefile(context.Context, *DeleteOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsResourcefile not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) GetOrganizationsEnvironmentsResourcefile(context.Context, *GetOrganizationsEnvironmentsResourcefileRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsResourcefile not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) ListOrganizationsEnvironmentsResourcefiles(context.Context, *ListOrganizationsEnvironmentsResourcefilesRequest) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsResourcefiles not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(context.Context, *ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ListEnvironmentResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) UpdateOrganizationsEnvironmentsResourcefile(context.Context, *UpdateOrganizationsEnvironmentsResourcefileRequest) (*GoogleCloudApigeeV1ResourceFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironmentsResourcefile not implemented")
}
func (UnimplementedOrganizationsEnvironmentsResourcefilesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsResourcefilesServerServer() {
}

// UnsafeOrganizationsEnvironmentsResourcefilesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsResourcefilesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsResourcefilesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsResourcefilesServerServer()
}

func RegisterOrganizationsEnvironmentsResourcefilesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsResourcefilesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsResourcefilesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsResourcefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).CreateOrganizationsEnvironmentsResourcefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/CreateOrganizationsEnvironmentsResourcefile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).CreateOrganizationsEnvironmentsResourcefile(ctx, req.(*CreateOrganizationsEnvironmentsResourcefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsResourcefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).DeleteOrganizationsEnvironmentsResourcefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/DeleteOrganizationsEnvironmentsResourcefile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).DeleteOrganizationsEnvironmentsResourcefile(ctx, req.(*DeleteOrganizationsEnvironmentsResourcefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsResourcefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).GetOrganizationsEnvironmentsResourcefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/GetOrganizationsEnvironmentsResourcefile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).GetOrganizationsEnvironmentsResourcefile(ctx, req.(*GetOrganizationsEnvironmentsResourcefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsResourcefilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).ListOrganizationsEnvironmentsResourcefiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListOrganizationsEnvironmentsResourcefiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).ListOrganizationsEnvironmentsResourcefiles(ctx, req.(*ListOrganizationsEnvironmentsResourcefilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx, req.(*ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentsResourcefileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).UpdateOrganizationsEnvironmentsResourcefile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/UpdateOrganizationsEnvironmentsResourcefile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsResourcefilesServerServer).UpdateOrganizationsEnvironmentsResourcefile(ctx, req.(*UpdateOrganizationsEnvironmentsResourcefileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsResourcefilesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsResourcefilesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsResourcefilesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer",
	HandlerType: (*OrganizationsEnvironmentsResourcefilesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsResourcefile",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsResourcefile",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsResourcefile",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsResourcefiles",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_Handler,
		},
		{
			MethodName: "ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironmentsResourcefile",
			Handler:    _OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSecurityActionsServerClient is the client API for OrganizationsEnvironmentsSecurityActionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSecurityActionsServerClient interface {
	// CreateSecurityAction creates a SecurityAction.
	CreateOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *CreateOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error)
	// Disable a SecurityAction. The `state` of the SecurityAction after disabling is `DISABLED`. `DisableSecurityAction` can be called on SecurityActions in the state `ENABLED`; SecurityActions in a different state (including `DISABLED`) return an error.
	DisableOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *DisableOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error)
	// Enable a SecurityAction. The `state` of the SecurityAction after enabling is `ENABLED`. `EnableSecurityAction` can be called on SecurityActions in the state `DISABLED`; SecurityActions in a different state (including `ENABLED) return an error.
	EnableOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *EnableOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error)
	// Get a SecurityAction by name.
	GetOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error)
	// Returns a list of SecurityActions. This returns both enabled and disabled actions.
	ListOrganizationsEnvironmentsSecurityActions(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityActionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityActionsResponse, error)
}

type organizationsEnvironmentsSecurityActionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSecurityActionsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSecurityActionsServerClient {
	return &organizationsEnvironmentsSecurityActionsServerClient{cc}
}

func (c *organizationsEnvironmentsSecurityActionsServerClient) CreateOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *CreateOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error) {
	out := new(GoogleCloudApigeeV1SecurityAction)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/CreateOrganizationsEnvironmentsSecurityAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityActionsServerClient) DisableOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *DisableOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error) {
	out := new(GoogleCloudApigeeV1SecurityAction)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/DisableOrganizationsEnvironmentsSecurityAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityActionsServerClient) EnableOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *EnableOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error) {
	out := new(GoogleCloudApigeeV1SecurityAction)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/EnableOrganizationsEnvironmentsSecurityAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityActionsServerClient) GetOrganizationsEnvironmentsSecurityAction(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityActionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityAction, error) {
	out := new(GoogleCloudApigeeV1SecurityAction)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/GetOrganizationsEnvironmentsSecurityAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityActionsServerClient) ListOrganizationsEnvironmentsSecurityActions(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityActionsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityActionsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityActionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/ListOrganizationsEnvironmentsSecurityActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSecurityActionsServerServer is the server API for OrganizationsEnvironmentsSecurityActionsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSecurityActionsServerServer interface {
	// CreateSecurityAction creates a SecurityAction.
	CreateOrganizationsEnvironmentsSecurityAction(context.Context, *CreateOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error)
	// Disable a SecurityAction. The `state` of the SecurityAction after disabling is `DISABLED`. `DisableSecurityAction` can be called on SecurityActions in the state `ENABLED`; SecurityActions in a different state (including `DISABLED`) return an error.
	DisableOrganizationsEnvironmentsSecurityAction(context.Context, *DisableOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error)
	// Enable a SecurityAction. The `state` of the SecurityAction after enabling is `ENABLED`. `EnableSecurityAction` can be called on SecurityActions in the state `DISABLED`; SecurityActions in a different state (including `ENABLED) return an error.
	EnableOrganizationsEnvironmentsSecurityAction(context.Context, *EnableOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error)
	// Get a SecurityAction by name.
	GetOrganizationsEnvironmentsSecurityAction(context.Context, *GetOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error)
	// Returns a list of SecurityActions. This returns both enabled and disabled actions.
	ListOrganizationsEnvironmentsSecurityActions(context.Context, *ListOrganizationsEnvironmentsSecurityActionsRequest) (*GoogleCloudApigeeV1ListSecurityActionsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityActionsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) CreateOrganizationsEnvironmentsSecurityAction(context.Context, *CreateOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsSecurityAction not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) DisableOrganizationsEnvironmentsSecurityAction(context.Context, *DisableOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableOrganizationsEnvironmentsSecurityAction not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) EnableOrganizationsEnvironmentsSecurityAction(context.Context, *EnableOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableOrganizationsEnvironmentsSecurityAction not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) GetOrganizationsEnvironmentsSecurityAction(context.Context, *GetOrganizationsEnvironmentsSecurityActionRequest) (*GoogleCloudApigeeV1SecurityAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsSecurityAction not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) ListOrganizationsEnvironmentsSecurityActions(context.Context, *ListOrganizationsEnvironmentsSecurityActionsRequest) (*GoogleCloudApigeeV1ListSecurityActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsSecurityActions not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityActionsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSecurityActionsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSecurityActionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSecurityActionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSecurityActionsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityActionsServerServer()
}

func RegisterOrganizationsEnvironmentsSecurityActionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSecurityActionsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSecurityActionsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsSecurityActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).CreateOrganizationsEnvironmentsSecurityAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/CreateOrganizationsEnvironmentsSecurityAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).CreateOrganizationsEnvironmentsSecurityAction(ctx, req.(*CreateOrganizationsEnvironmentsSecurityActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableOrganizationsEnvironmentsSecurityActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).DisableOrganizationsEnvironmentsSecurityAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/DisableOrganizationsEnvironmentsSecurityAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).DisableOrganizationsEnvironmentsSecurityAction(ctx, req.(*DisableOrganizationsEnvironmentsSecurityActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableOrganizationsEnvironmentsSecurityActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).EnableOrganizationsEnvironmentsSecurityAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/EnableOrganizationsEnvironmentsSecurityAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).EnableOrganizationsEnvironmentsSecurityAction(ctx, req.(*EnableOrganizationsEnvironmentsSecurityActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsSecurityActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).GetOrganizationsEnvironmentsSecurityAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/GetOrganizationsEnvironmentsSecurityAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).GetOrganizationsEnvironmentsSecurityAction(ctx, req.(*GetOrganizationsEnvironmentsSecurityActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsSecurityActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).ListOrganizationsEnvironmentsSecurityActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/ListOrganizationsEnvironmentsSecurityActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityActionsServerServer).ListOrganizationsEnvironmentsSecurityActions(ctx, req.(*ListOrganizationsEnvironmentsSecurityActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSecurityActionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSecurityActionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSecurityActionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer",
	HandlerType: (*OrganizationsEnvironmentsSecurityActionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsSecurityAction",
			Handler:    _OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_Handler,
		},
		{
			MethodName: "DisableOrganizationsEnvironmentsSecurityAction",
			Handler:    _OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_Handler,
		},
		{
			MethodName: "EnableOrganizationsEnvironmentsSecurityAction",
			Handler:    _OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsSecurityAction",
			Handler:    _OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsSecurityActions",
			Handler:    _OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSecurityIncidentsServerClient is the client API for OrganizationsEnvironmentsSecurityIncidentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSecurityIncidentsServerClient interface {
	// BatchUpdateSecurityIncident updates multiple existing security incidents.
	BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse, error)
	// GetSecurityIncident gets the specified security incident. Returns NOT_FOUND if security incident is not present for the specified organization and environment.
	GetOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityIncident, error)
	// ListSecurityIncidents lists all the security incident associated with the environment.
	ListOrganizationsEnvironmentsSecurityIncidents(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityIncidentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityIncidentsResponse, error)
	// UpdateSecurityIncidents updates an existing security incident.
	PatchOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *PatchOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityIncident, error)
}

type organizationsEnvironmentsSecurityIncidentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSecurityIncidentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSecurityIncidentsServerClient {
	return &organizationsEnvironmentsSecurityIncidentsServerClient{cc}
}

func (c *organizationsEnvironmentsSecurityIncidentsServerClient) BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse, error) {
	out := new(GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/BatchUpdateOrganizationsEnvironmentsSecurityIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityIncidentsServerClient) GetOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityIncident, error) {
	out := new(GoogleCloudApigeeV1SecurityIncident)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/GetOrganizationsEnvironmentsSecurityIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityIncidentsServerClient) ListOrganizationsEnvironmentsSecurityIncidents(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityIncidentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityIncidentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityIncidentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/ListOrganizationsEnvironmentsSecurityIncidents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityIncidentsServerClient) PatchOrganizationsEnvironmentsSecurityIncident(ctx context.Context, in *PatchOrganizationsEnvironmentsSecurityIncidentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityIncident, error) {
	out := new(GoogleCloudApigeeV1SecurityIncident)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/PatchOrganizationsEnvironmentsSecurityIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSecurityIncidentsServerServer is the server API for OrganizationsEnvironmentsSecurityIncidentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSecurityIncidentsServerServer interface {
	// BatchUpdateSecurityIncident updates multiple existing security incidents.
	BatchUpdateOrganizationsEnvironmentsSecurityIncident(context.Context, *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse, error)
	// GetSecurityIncident gets the specified security incident. Returns NOT_FOUND if security incident is not present for the specified organization and environment.
	GetOrganizationsEnvironmentsSecurityIncident(context.Context, *GetOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1SecurityIncident, error)
	// ListSecurityIncidents lists all the security incident associated with the environment.
	ListOrganizationsEnvironmentsSecurityIncidents(context.Context, *ListOrganizationsEnvironmentsSecurityIncidentsRequest) (*GoogleCloudApigeeV1ListSecurityIncidentsResponse, error)
	// UpdateSecurityIncidents updates an existing security incident.
	PatchOrganizationsEnvironmentsSecurityIncident(context.Context, *PatchOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1SecurityIncident, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer) BatchUpdateOrganizationsEnvironmentsSecurityIncident(context.Context, *BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1BatchUpdateSecurityIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateOrganizationsEnvironmentsSecurityIncident not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer) GetOrganizationsEnvironmentsSecurityIncident(context.Context, *GetOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1SecurityIncident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsSecurityIncident not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer) ListOrganizationsEnvironmentsSecurityIncidents(context.Context, *ListOrganizationsEnvironmentsSecurityIncidentsRequest) (*GoogleCloudApigeeV1ListSecurityIncidentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsSecurityIncidents not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer) PatchOrganizationsEnvironmentsSecurityIncident(context.Context, *PatchOrganizationsEnvironmentsSecurityIncidentRequest) (*GoogleCloudApigeeV1SecurityIncident, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsEnvironmentsSecurityIncident not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSecurityIncidentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSecurityIncidentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSecurityIncidentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityIncidentsServerServer()
}

func RegisterOrganizationsEnvironmentsSecurityIncidentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSecurityIncidentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSecurityIncidentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/BatchUpdateOrganizationsEnvironmentsSecurityIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx, req.(*BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsSecurityIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).GetOrganizationsEnvironmentsSecurityIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/GetOrganizationsEnvironmentsSecurityIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).GetOrganizationsEnvironmentsSecurityIncident(ctx, req.(*GetOrganizationsEnvironmentsSecurityIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsSecurityIncidentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).ListOrganizationsEnvironmentsSecurityIncidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/ListOrganizationsEnvironmentsSecurityIncidents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).ListOrganizationsEnvironmentsSecurityIncidents(ctx, req.(*ListOrganizationsEnvironmentsSecurityIncidentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsEnvironmentsSecurityIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).PatchOrganizationsEnvironmentsSecurityIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/PatchOrganizationsEnvironmentsSecurityIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityIncidentsServerServer).PatchOrganizationsEnvironmentsSecurityIncident(ctx, req.(*PatchOrganizationsEnvironmentsSecurityIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSecurityIncidentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSecurityIncidentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSecurityIncidentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer",
	HandlerType: (*OrganizationsEnvironmentsSecurityIncidentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchUpdateOrganizationsEnvironmentsSecurityIncident",
			Handler:    _OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsSecurityIncident",
			Handler:    _OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsSecurityIncidents",
			Handler:    _OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_Handler,
		},
		{
			MethodName: "PatchOrganizationsEnvironmentsSecurityIncident",
			Handler:    _OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSecurityReportsServerClient is the client API for OrganizationsEnvironmentsSecurityReportsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSecurityReportsServerClient interface {
	// Submit a report request to be processed in the background. If the submission succeeds, the API returns a 200 status and an ID that refer to the report request. In addition to the HTTP status 200, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *CreateOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error)
	// Get security report status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error)
	// After the query is completed, use this API to retrieve the results as file. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetResultOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to view the query result when result size is small.
	GetResultViewOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetResultViewOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReportResultView, error)
	// Return a list of Security Reports
	ListOrganizationsEnvironmentsSecurityReports(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error)
}

type organizationsEnvironmentsSecurityReportsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSecurityReportsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSecurityReportsServerClient {
	return &organizationsEnvironmentsSecurityReportsServerClient{cc}
}

func (c *organizationsEnvironmentsSecurityReportsServerClient) CreateOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *CreateOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error) {
	out := new(GoogleCloudApigeeV1SecurityReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/CreateOrganizationsEnvironmentsSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityReportsServerClient) GetOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error) {
	out := new(GoogleCloudApigeeV1SecurityReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetOrganizationsEnvironmentsSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityReportsServerClient) GetResultOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetResultOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultOrganizationsEnvironmentsSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityReportsServerClient) GetResultViewOrganizationsEnvironmentsSecurityReport(ctx context.Context, in *GetResultViewOrganizationsEnvironmentsSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReportResultView, error) {
	out := new(GoogleCloudApigeeV1SecurityReportResultView)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultViewOrganizationsEnvironmentsSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityReportsServerClient) ListOrganizationsEnvironmentsSecurityReports(ctx context.Context, in *ListOrganizationsEnvironmentsSecurityReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityReportsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/ListOrganizationsEnvironmentsSecurityReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSecurityReportsServerServer is the server API for OrganizationsEnvironmentsSecurityReportsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSecurityReportsServerServer interface {
	// Submit a report request to be processed in the background. If the submission succeeds, the API returns a 200 status and an ID that refer to the report request. In addition to the HTTP status 200, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsEnvironmentsSecurityReport(context.Context, *CreateOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error)
	// Get security report status If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsEnvironmentsSecurityReport(context.Context, *GetOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error)
	// After the query is completed, use this API to retrieve the results as file. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsEnvironmentsSecurityReport(context.Context, *GetResultOrganizationsEnvironmentsSecurityReportRequest) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to view the query result when result size is small.
	GetResultViewOrganizationsEnvironmentsSecurityReport(context.Context, *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReportResultView, error)
	// Return a list of Security Reports
	ListOrganizationsEnvironmentsSecurityReports(context.Context, *ListOrganizationsEnvironmentsSecurityReportsRequest) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityReportsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) CreateOrganizationsEnvironmentsSecurityReport(context.Context, *CreateOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsSecurityReport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) GetOrganizationsEnvironmentsSecurityReport(context.Context, *GetOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsSecurityReport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) GetResultOrganizationsEnvironmentsSecurityReport(context.Context, *GetResultOrganizationsEnvironmentsSecurityReportRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOrganizationsEnvironmentsSecurityReport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) GetResultViewOrganizationsEnvironmentsSecurityReport(context.Context, *GetResultViewOrganizationsEnvironmentsSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReportResultView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultViewOrganizationsEnvironmentsSecurityReport not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) ListOrganizationsEnvironmentsSecurityReports(context.Context, *ListOrganizationsEnvironmentsSecurityReportsRequest) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsSecurityReports not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityReportsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSecurityReportsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSecurityReportsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSecurityReportsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSecurityReportsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityReportsServerServer()
}

func RegisterOrganizationsEnvironmentsSecurityReportsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSecurityReportsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSecurityReportsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).CreateOrganizationsEnvironmentsSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/CreateOrganizationsEnvironmentsSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).CreateOrganizationsEnvironmentsSecurityReport(ctx, req.(*CreateOrganizationsEnvironmentsSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetOrganizationsEnvironmentsSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetOrganizationsEnvironmentsSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetOrganizationsEnvironmentsSecurityReport(ctx, req.(*GetOrganizationsEnvironmentsSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOrganizationsEnvironmentsSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetResultOrganizationsEnvironmentsSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultOrganizationsEnvironmentsSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetResultOrganizationsEnvironmentsSecurityReport(ctx, req.(*GetResultOrganizationsEnvironmentsSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultViewOrganizationsEnvironmentsSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetResultViewOrganizationsEnvironmentsSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultViewOrganizationsEnvironmentsSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).GetResultViewOrganizationsEnvironmentsSecurityReport(ctx, req.(*GetResultViewOrganizationsEnvironmentsSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsSecurityReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).ListOrganizationsEnvironmentsSecurityReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/ListOrganizationsEnvironmentsSecurityReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityReportsServerServer).ListOrganizationsEnvironmentsSecurityReports(ctx, req.(*ListOrganizationsEnvironmentsSecurityReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSecurityReportsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSecurityReportsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSecurityReportsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer",
	HandlerType: (*OrganizationsEnvironmentsSecurityReportsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsSecurityReport",
			Handler:    _OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsSecurityReport",
			Handler:    _OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_Handler,
		},
		{
			MethodName: "GetResultOrganizationsEnvironmentsSecurityReport",
			Handler:    _OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_Handler,
		},
		{
			MethodName: "GetResultViewOrganizationsEnvironmentsSecurityReport",
			Handler:    _OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsSecurityReports",
			Handler:    _OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSecurityStatsServerClient is the client API for OrganizationsEnvironmentsSecurityStatsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSecurityStatsServerClient interface {
	// Retrieve security statistics as tabular rows.
	QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx context.Context, in *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1QueryTabularStatsResponse, error)
	// Retrieve security statistics as a collection of time series.
	QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx context.Context, in *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse, error)
}

type organizationsEnvironmentsSecurityStatsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSecurityStatsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSecurityStatsServerClient {
	return &organizationsEnvironmentsSecurityStatsServerClient{cc}
}

func (c *organizationsEnvironmentsSecurityStatsServerClient) QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx context.Context, in *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1QueryTabularStatsResponse, error) {
	out := new(GoogleCloudApigeeV1QueryTabularStatsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTabularStatsOrganizationsEnvironmentsSecurityStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSecurityStatsServerClient) QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx context.Context, in *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse, error) {
	out := new(GoogleCloudApigeeV1QueryTimeSeriesStatsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSecurityStatsServerServer is the server API for OrganizationsEnvironmentsSecurityStatsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSecurityStatsServerServer interface {
	// Retrieve security statistics as tabular rows.
	QueryTabularStatsOrganizationsEnvironmentsSecurityStat(context.Context, *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) (*GoogleCloudApigeeV1QueryTabularStatsResponse, error)
	// Retrieve security statistics as a collection of time series.
	QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(context.Context, *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityStatsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer) QueryTabularStatsOrganizationsEnvironmentsSecurityStat(context.Context, *QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest) (*GoogleCloudApigeeV1QueryTabularStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTabularStatsOrganizationsEnvironmentsSecurityStat not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer) QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(context.Context, *QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest) (*GoogleCloudApigeeV1QueryTimeSeriesStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSecurityStatsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSecurityStatsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSecurityStatsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSecurityStatsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSecurityStatsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSecurityStatsServerServer()
}

func RegisterOrganizationsEnvironmentsSecurityStatsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSecurityStatsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSecurityStatsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityStatsServerServer).QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTabularStatsOrganizationsEnvironmentsSecurityStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityStatsServerServer).QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx, req.(*QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSecurityStatsServerServer).QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSecurityStatsServerServer).QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx, req.(*QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSecurityStatsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSecurityStatsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSecurityStatsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer",
	HandlerType: (*OrganizationsEnvironmentsSecurityStatsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTabularStatsOrganizationsEnvironmentsSecurityStat",
			Handler:    _OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_Handler,
		},
		{
			MethodName: "QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat",
			Handler:    _OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSharedflowsServerClient is the client API for OrganizationsEnvironmentsSharedflowsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSharedflowsServerClient interface {
}

type organizationsEnvironmentsSharedflowsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSharedflowsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSharedflowsServerClient {
	return &organizationsEnvironmentsSharedflowsServerClient{cc}
}

// OrganizationsEnvironmentsSharedflowsServerServer is the server API for OrganizationsEnvironmentsSharedflowsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSharedflowsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSharedflowsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSharedflowsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSharedflowsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSharedflowsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSharedflowsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSharedflowsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSharedflowsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsServerServer()
}

func RegisterOrganizationsEnvironmentsSharedflowsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSharedflowsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSharedflowsServer_ServiceDesc, srv)
}

// OrganizationsEnvironmentsSharedflowsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSharedflowsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSharedflowsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsServer",
	HandlerType: (*OrganizationsEnvironmentsSharedflowsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSharedflowsDeploymentsServerClient is the client API for OrganizationsEnvironmentsSharedflowsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSharedflowsDeploymentsServerClient interface {
	// Lists all deployments of a shared flow in an environment.
	ListOrganizationsEnvironmentsSharedflowsDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsEnvironmentsSharedflowsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSharedflowsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSharedflowsDeploymentsServerClient {
	return &organizationsEnvironmentsSharedflowsDeploymentsServerClient{cc}
}

func (c *organizationsEnvironmentsSharedflowsDeploymentsServerClient) ListOrganizationsEnvironmentsSharedflowsDeployments(ctx context.Context, in *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer/ListOrganizationsEnvironmentsSharedflowsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSharedflowsDeploymentsServerServer is the server API for OrganizationsEnvironmentsSharedflowsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSharedflowsDeploymentsServerServer interface {
	// Lists all deployments of a shared flow in an environment.
	ListOrganizationsEnvironmentsSharedflowsDeployments(context.Context, *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer) ListOrganizationsEnvironmentsSharedflowsDeployments(context.Context, *ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsSharedflowsDeployments not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSharedflowsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSharedflowsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSharedflowsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsDeploymentsServerServer()
}

func RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSharedflowsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSharedflowsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSharedflowsDeploymentsServerServer).ListOrganizationsEnvironmentsSharedflowsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer/ListOrganizationsEnvironmentsSharedflowsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSharedflowsDeploymentsServerServer).ListOrganizationsEnvironmentsSharedflowsDeployments(ctx, req.(*ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSharedflowsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSharedflowsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSharedflowsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer",
	HandlerType: (*OrganizationsEnvironmentsSharedflowsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsEnvironmentsSharedflowsDeployments",
			Handler:    _OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsSharedflowsRevisionsServerClient is the client API for OrganizationsEnvironmentsSharedflowsRevisionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsSharedflowsRevisionsServerClient interface {
	// Deploys a revision of a shared flow. If another revision of the same shared flow is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot use a shared flow until it has been deployed to an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.deploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
	DeployOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error)
	// Gets the deployment of a shared flow revision and actual state reported by runtime pods.
	GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error)
	// Undeploys a shared flow revision from an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.undeploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
	UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsEnvironmentsSharedflowsRevisionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsSharedflowsRevisionsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsSharedflowsRevisionsServerClient {
	return &organizationsEnvironmentsSharedflowsRevisionsServerClient{cc}
}

func (c *organizationsEnvironmentsSharedflowsRevisionsServerClient) DeployOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error) {
	out := new(GoogleCloudApigeeV1Deployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/DeployOrganizationsEnvironmentsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSharedflowsRevisionsServerClient) GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Deployment, error) {
	out := new(GoogleCloudApigeeV1Deployment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsSharedflowsRevisionsServerClient) UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx context.Context, in *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/UndeployOrganizationsEnvironmentsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsSharedflowsRevisionsServerServer is the server API for OrganizationsEnvironmentsSharedflowsRevisionsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer
// for forward compatibility
type OrganizationsEnvironmentsSharedflowsRevisionsServerServer interface {
	// Deploys a revision of a shared flow. If another revision of the same shared flow is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot use a shared flow until it has been deployed to an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.deploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
	DeployOrganizationsEnvironmentsSharedflowsRevision(context.Context, *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1Deployment, error)
	// Gets the deployment of a shared flow revision and actual state reported by runtime pods.
	GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(context.Context, *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1Deployment, error)
	// Undeploys a shared flow revision from an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.undeploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`
	UndeployOrganizationsEnvironmentsSharedflowsRevision(context.Context, *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer()
}

// UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer) DeployOrganizationsEnvironmentsSharedflowsRevision(context.Context, *DeployOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployOrganizationsEnvironmentsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer) GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(context.Context, *GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer) UndeployOrganizationsEnvironmentsSharedflowsRevision(context.Context, *UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployOrganizationsEnvironmentsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer() {
}

// UnsafeOrganizationsEnvironmentsSharedflowsRevisionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsSharedflowsRevisionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsSharedflowsRevisionsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsSharedflowsRevisionsServerServer()
}

func RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsSharedflowsRevisionsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsSharedflowsRevisionsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployOrganizationsEnvironmentsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).DeployOrganizationsEnvironmentsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/DeployOrganizationsEnvironmentsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).DeployOrganizationsEnvironmentsSharedflowsRevision(ctx, req.(*DeployOrganizationsEnvironmentsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx, req.(*GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/UndeployOrganizationsEnvironmentsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsSharedflowsRevisionsServerServer).UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx, req.(*UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsSharedflowsRevisionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsSharedflowsRevisionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsSharedflowsRevisionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer",
	HandlerType: (*OrganizationsEnvironmentsSharedflowsRevisionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployOrganizationsEnvironmentsSharedflowsRevision",
			Handler:    _OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_Handler,
		},
		{
			MethodName: "GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision",
			Handler:    _OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_Handler,
		},
		{
			MethodName: "UndeployOrganizationsEnvironmentsSharedflowsRevision",
			Handler:    _OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsStatsServerClient is the client API for OrganizationsEnvironmentsStatsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsStatsServerClient interface {
	// Retrieve metrics grouped by dimensions. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
	GetOrganizationsEnvironmentsStat(ctx context.Context, in *GetOrganizationsEnvironmentsStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Stats, error)
}

type organizationsEnvironmentsStatsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsStatsServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsStatsServerClient {
	return &organizationsEnvironmentsStatsServerClient{cc}
}

func (c *organizationsEnvironmentsStatsServerClient) GetOrganizationsEnvironmentsStat(ctx context.Context, in *GetOrganizationsEnvironmentsStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Stats, error) {
	out := new(GoogleCloudApigeeV1Stats)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer/GetOrganizationsEnvironmentsStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsStatsServerServer is the server API for OrganizationsEnvironmentsStatsServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsStatsServerServer
// for forward compatibility
type OrganizationsEnvironmentsStatsServerServer interface {
	// Retrieve metrics grouped by dimensions. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
	GetOrganizationsEnvironmentsStat(context.Context, *GetOrganizationsEnvironmentsStatRequest) (*GoogleCloudApigeeV1Stats, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsStatsServerServer()
}

// UnimplementedOrganizationsEnvironmentsStatsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsStatsServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsStatsServerServer) GetOrganizationsEnvironmentsStat(context.Context, *GetOrganizationsEnvironmentsStatRequest) (*GoogleCloudApigeeV1Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsStat not implemented")
}
func (UnimplementedOrganizationsEnvironmentsStatsServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsStatsServerServer() {
}

// UnsafeOrganizationsEnvironmentsStatsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsStatsServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsStatsServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsStatsServerServer()
}

func RegisterOrganizationsEnvironmentsStatsServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsStatsServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsStatsServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsStatsServerServer).GetOrganizationsEnvironmentsStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer/GetOrganizationsEnvironmentsStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsStatsServerServer).GetOrganizationsEnvironmentsStat(ctx, req.(*GetOrganizationsEnvironmentsStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsStatsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsStatsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsStatsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer",
	HandlerType: (*OrganizationsEnvironmentsStatsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsEnvironmentsStat",
			Handler:    _OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsTargetserversServerClient is the client API for OrganizationsEnvironmentsTargetserversServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsTargetserversServerClient interface {
	// Creates a TargetServer in the specified environment.
	CreateOrganizationsEnvironmentsTargetserver(ctx context.Context, in *CreateOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error)
	// Deletes a TargetServer from an environment. Returns the deleted TargetServer resource.
	DeleteOrganizationsEnvironmentsTargetserver(ctx context.Context, in *DeleteOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error)
	// Gets a TargetServer resource.
	GetOrganizationsEnvironmentsTargetserver(ctx context.Context, in *GetOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error)
	// Updates an existing TargetServer. Note that this operation has PUT semantics; it will replace the entirety of the existing TargetServer with the resource in the request body.
	UpdateOrganizationsEnvironmentsTargetserver(ctx context.Context, in *UpdateOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error)
}

type organizationsEnvironmentsTargetserversServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsTargetserversServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsTargetserversServerClient {
	return &organizationsEnvironmentsTargetserversServerClient{cc}
}

func (c *organizationsEnvironmentsTargetserversServerClient) CreateOrganizationsEnvironmentsTargetserver(ctx context.Context, in *CreateOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error) {
	out := new(GoogleCloudApigeeV1TargetServer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/CreateOrganizationsEnvironmentsTargetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTargetserversServerClient) DeleteOrganizationsEnvironmentsTargetserver(ctx context.Context, in *DeleteOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error) {
	out := new(GoogleCloudApigeeV1TargetServer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/DeleteOrganizationsEnvironmentsTargetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTargetserversServerClient) GetOrganizationsEnvironmentsTargetserver(ctx context.Context, in *GetOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error) {
	out := new(GoogleCloudApigeeV1TargetServer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/GetOrganizationsEnvironmentsTargetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTargetserversServerClient) UpdateOrganizationsEnvironmentsTargetserver(ctx context.Context, in *UpdateOrganizationsEnvironmentsTargetserverRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TargetServer, error) {
	out := new(GoogleCloudApigeeV1TargetServer)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/UpdateOrganizationsEnvironmentsTargetserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsTargetserversServerServer is the server API for OrganizationsEnvironmentsTargetserversServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsTargetserversServerServer
// for forward compatibility
type OrganizationsEnvironmentsTargetserversServerServer interface {
	// Creates a TargetServer in the specified environment.
	CreateOrganizationsEnvironmentsTargetserver(context.Context, *CreateOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error)
	// Deletes a TargetServer from an environment. Returns the deleted TargetServer resource.
	DeleteOrganizationsEnvironmentsTargetserver(context.Context, *DeleteOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error)
	// Gets a TargetServer resource.
	GetOrganizationsEnvironmentsTargetserver(context.Context, *GetOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error)
	// Updates an existing TargetServer. Note that this operation has PUT semantics; it will replace the entirety of the existing TargetServer with the resource in the request body.
	UpdateOrganizationsEnvironmentsTargetserver(context.Context, *UpdateOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsTargetserversServerServer()
}

// UnimplementedOrganizationsEnvironmentsTargetserversServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsTargetserversServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsTargetserversServerServer) CreateOrganizationsEnvironmentsTargetserver(context.Context, *CreateOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsTargetserver not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTargetserversServerServer) DeleteOrganizationsEnvironmentsTargetserver(context.Context, *DeleteOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsTargetserver not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTargetserversServerServer) GetOrganizationsEnvironmentsTargetserver(context.Context, *GetOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsTargetserver not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTargetserversServerServer) UpdateOrganizationsEnvironmentsTargetserver(context.Context, *UpdateOrganizationsEnvironmentsTargetserverRequest) (*GoogleCloudApigeeV1TargetServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsEnvironmentsTargetserver not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTargetserversServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsTargetserversServerServer() {
}

// UnsafeOrganizationsEnvironmentsTargetserversServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsTargetserversServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsTargetserversServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsTargetserversServerServer()
}

func RegisterOrganizationsEnvironmentsTargetserversServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsTargetserversServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsTargetserversServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsTargetserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).CreateOrganizationsEnvironmentsTargetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/CreateOrganizationsEnvironmentsTargetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).CreateOrganizationsEnvironmentsTargetserver(ctx, req.(*CreateOrganizationsEnvironmentsTargetserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsTargetserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).DeleteOrganizationsEnvironmentsTargetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/DeleteOrganizationsEnvironmentsTargetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).DeleteOrganizationsEnvironmentsTargetserver(ctx, req.(*DeleteOrganizationsEnvironmentsTargetserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsTargetserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).GetOrganizationsEnvironmentsTargetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/GetOrganizationsEnvironmentsTargetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).GetOrganizationsEnvironmentsTargetserver(ctx, req.(*GetOrganizationsEnvironmentsTargetserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsEnvironmentsTargetserverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).UpdateOrganizationsEnvironmentsTargetserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/UpdateOrganizationsEnvironmentsTargetserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTargetserversServerServer).UpdateOrganizationsEnvironmentsTargetserver(ctx, req.(*UpdateOrganizationsEnvironmentsTargetserverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsTargetserversServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsTargetserversServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsTargetserversServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer",
	HandlerType: (*OrganizationsEnvironmentsTargetserversServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsTargetserver",
			Handler:    _OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsTargetserver",
			Handler:    _OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsTargetserver",
			Handler:    _OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_Handler,
		},
		{
			MethodName: "UpdateOrganizationsEnvironmentsTargetserver",
			Handler:    _OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsTraceConfigServerClient is the client API for OrganizationsEnvironmentsTraceConfigServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsTraceConfigServerClient interface {
}

type organizationsEnvironmentsTraceConfigServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsTraceConfigServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsTraceConfigServerClient {
	return &organizationsEnvironmentsTraceConfigServerClient{cc}
}

// OrganizationsEnvironmentsTraceConfigServerServer is the server API for OrganizationsEnvironmentsTraceConfigServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsTraceConfigServerServer
// for forward compatibility
type OrganizationsEnvironmentsTraceConfigServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigServerServer()
}

// UnimplementedOrganizationsEnvironmentsTraceConfigServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsTraceConfigServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsTraceConfigServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigServerServer() {
}

// UnsafeOrganizationsEnvironmentsTraceConfigServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsTraceConfigServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsTraceConfigServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigServerServer()
}

func RegisterOrganizationsEnvironmentsTraceConfigServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsTraceConfigServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsTraceConfigServer_ServiceDesc, srv)
}

// OrganizationsEnvironmentsTraceConfigServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsTraceConfigServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsTraceConfigServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigServer",
	HandlerType: (*OrganizationsEnvironmentsTraceConfigServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsEnvironmentsTraceConfigOverridesServerClient is the client API for OrganizationsEnvironmentsTraceConfigOverridesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsEnvironmentsTraceConfigOverridesServerClient interface {
	// Creates a trace configuration override. The response contains a system-generated UUID, that can be used to view, update, or delete the configuration override. Use the List API to view the existing trace configuration overrides.
	CreateOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error)
	// Deletes a distributed trace configuration override.
	DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Gets a trace configuration override.
	GetOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *GetOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error)
	// Lists all of the distributed trace configuration overrides in an environment.
	ListOrganizationsEnvironmentsTraceConfigOverrides(ctx context.Context, in *ListOrganizationsEnvironmentsTraceConfigOverridesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse, error)
	// Updates a distributed trace configuration override. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
	PatchOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error)
}

type organizationsEnvironmentsTraceConfigOverridesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsEnvironmentsTraceConfigOverridesServerClient(cc grpc.ClientConnInterface) OrganizationsEnvironmentsTraceConfigOverridesServerClient {
	return &organizationsEnvironmentsTraceConfigOverridesServerClient{cc}
}

func (c *organizationsEnvironmentsTraceConfigOverridesServerClient) CreateOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	out := new(GoogleCloudApigeeV1TraceConfigOverride)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/CreateOrganizationsEnvironmentsTraceConfigOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTraceConfigOverridesServerClient) DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/DeleteOrganizationsEnvironmentsTraceConfigOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTraceConfigOverridesServerClient) GetOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *GetOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	out := new(GoogleCloudApigeeV1TraceConfigOverride)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/GetOrganizationsEnvironmentsTraceConfigOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTraceConfigOverridesServerClient) ListOrganizationsEnvironmentsTraceConfigOverrides(ctx context.Context, in *ListOrganizationsEnvironmentsTraceConfigOverridesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse, error) {
	out := new(GoogleCloudApigeeV1ListTraceConfigOverridesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/ListOrganizationsEnvironmentsTraceConfigOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsEnvironmentsTraceConfigOverridesServerClient) PatchOrganizationsEnvironmentsTraceConfigOverride(ctx context.Context, in *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	out := new(GoogleCloudApigeeV1TraceConfigOverride)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/PatchOrganizationsEnvironmentsTraceConfigOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsEnvironmentsTraceConfigOverridesServerServer is the server API for OrganizationsEnvironmentsTraceConfigOverridesServer service.
// All implementations must embed UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer
// for forward compatibility
type OrganizationsEnvironmentsTraceConfigOverridesServerServer interface {
	// Creates a trace configuration override. The response contains a system-generated UUID, that can be used to view, update, or delete the configuration override. Use the List API to view the existing trace configuration overrides.
	CreateOrganizationsEnvironmentsTraceConfigOverride(context.Context, *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error)
	// Deletes a distributed trace configuration override.
	DeleteOrganizationsEnvironmentsTraceConfigOverride(context.Context, *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleProtobufEmpty, error)
	// Gets a trace configuration override.
	GetOrganizationsEnvironmentsTraceConfigOverride(context.Context, *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error)
	// Lists all of the distributed trace configuration overrides in an environment.
	ListOrganizationsEnvironmentsTraceConfigOverrides(context.Context, *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse, error)
	// Updates a distributed trace configuration override. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.
	PatchOrganizationsEnvironmentsTraceConfigOverride(context.Context, *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error)
	mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer()
}

// UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer struct {
}

func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) CreateOrganizationsEnvironmentsTraceConfigOverride(context.Context, *CreateOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsEnvironmentsTraceConfigOverride not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) DeleteOrganizationsEnvironmentsTraceConfigOverride(context.Context, *DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsEnvironmentsTraceConfigOverride not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) GetOrganizationsEnvironmentsTraceConfigOverride(context.Context, *GetOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsEnvironmentsTraceConfigOverride not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) ListOrganizationsEnvironmentsTraceConfigOverrides(context.Context, *ListOrganizationsEnvironmentsTraceConfigOverridesRequest) (*GoogleCloudApigeeV1ListTraceConfigOverridesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsEnvironmentsTraceConfigOverrides not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) PatchOrganizationsEnvironmentsTraceConfigOverride(context.Context, *PatchOrganizationsEnvironmentsTraceConfigOverrideRequest) (*GoogleCloudApigeeV1TraceConfigOverride, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsEnvironmentsTraceConfigOverride not implemented")
}
func (UnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer) mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer() {
}

// UnsafeOrganizationsEnvironmentsTraceConfigOverridesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsEnvironmentsTraceConfigOverridesServerServer will
// result in compilation errors.
type UnsafeOrganizationsEnvironmentsTraceConfigOverridesServerServer interface {
	mustEmbedUnimplementedOrganizationsEnvironmentsTraceConfigOverridesServerServer()
}

func RegisterOrganizationsEnvironmentsTraceConfigOverridesServerServer(s grpc.ServiceRegistrar, srv OrganizationsEnvironmentsTraceConfigOverridesServerServer) {
	s.RegisterService(&OrganizationsEnvironmentsTraceConfigOverridesServer_ServiceDesc, srv)
}

func _OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsEnvironmentsTraceConfigOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).CreateOrganizationsEnvironmentsTraceConfigOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/CreateOrganizationsEnvironmentsTraceConfigOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).CreateOrganizationsEnvironmentsTraceConfigOverride(ctx, req.(*CreateOrganizationsEnvironmentsTraceConfigOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/DeleteOrganizationsEnvironmentsTraceConfigOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx, req.(*DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsEnvironmentsTraceConfigOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).GetOrganizationsEnvironmentsTraceConfigOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/GetOrganizationsEnvironmentsTraceConfigOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).GetOrganizationsEnvironmentsTraceConfigOverride(ctx, req.(*GetOrganizationsEnvironmentsTraceConfigOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsEnvironmentsTraceConfigOverridesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).ListOrganizationsEnvironmentsTraceConfigOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/ListOrganizationsEnvironmentsTraceConfigOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).ListOrganizationsEnvironmentsTraceConfigOverrides(ctx, req.(*ListOrganizationsEnvironmentsTraceConfigOverridesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsEnvironmentsTraceConfigOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).PatchOrganizationsEnvironmentsTraceConfigOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/PatchOrganizationsEnvironmentsTraceConfigOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsEnvironmentsTraceConfigOverridesServerServer).PatchOrganizationsEnvironmentsTraceConfigOverride(ctx, req.(*PatchOrganizationsEnvironmentsTraceConfigOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsEnvironmentsTraceConfigOverridesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsEnvironmentsTraceConfigOverridesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsEnvironmentsTraceConfigOverridesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer",
	HandlerType: (*OrganizationsEnvironmentsTraceConfigOverridesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsEnvironmentsTraceConfigOverride",
			Handler:    _OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_Handler,
		},
		{
			MethodName: "DeleteOrganizationsEnvironmentsTraceConfigOverride",
			Handler:    _OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_Handler,
		},
		{
			MethodName: "GetOrganizationsEnvironmentsTraceConfigOverride",
			Handler:    _OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_Handler,
		},
		{
			MethodName: "ListOrganizationsEnvironmentsTraceConfigOverrides",
			Handler:    _OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_Handler,
		},
		{
			MethodName: "PatchOrganizationsEnvironmentsTraceConfigOverride",
			Handler:    _OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsHostQueriesServerClient is the client API for OrganizationsHostQueriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsHostQueriesServerClient interface {
	// Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsHostQuery(ctx context.Context, in *CreateOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error)
	// Get status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsHostQuery(ctx context.Context, in *GetOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsHostQuery(ctx context.Context, in *GetResultOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	GetResultViewOrganizationsHostQuery(ctx context.Context, in *GetResultViewOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQueryResultView, error)
	// Return a list of Asynchronous Queries at host level.
	ListOrganizationsHostQueries(ctx context.Context, in *ListOrganizationsHostQueriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error)
}

type organizationsHostQueriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsHostQueriesServerClient(cc grpc.ClientConnInterface) OrganizationsHostQueriesServerClient {
	return &organizationsHostQueriesServerClient{cc}
}

func (c *organizationsHostQueriesServerClient) CreateOrganizationsHostQuery(ctx context.Context, in *CreateOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error) {
	out := new(GoogleCloudApigeeV1AsyncQuery)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/CreateOrganizationsHostQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostQueriesServerClient) GetOrganizationsHostQuery(ctx context.Context, in *GetOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQuery, error) {
	out := new(GoogleCloudApigeeV1AsyncQuery)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetOrganizationsHostQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostQueriesServerClient) GetResultOrganizationsHostQuery(ctx context.Context, in *GetResultOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultOrganizationsHostQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostQueriesServerClient) GetResultViewOrganizationsHostQuery(ctx context.Context, in *GetResultViewOrganizationsHostQueryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1AsyncQueryResultView, error) {
	out := new(GoogleCloudApigeeV1AsyncQueryResultView)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultViewOrganizationsHostQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostQueriesServerClient) ListOrganizationsHostQueries(ctx context.Context, in *ListOrganizationsHostQueriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListAsyncQueriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/ListOrganizationsHostQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsHostQueriesServerServer is the server API for OrganizationsHostQueriesServer service.
// All implementations must embed UnimplementedOrganizationsHostQueriesServerServer
// for forward compatibility
type OrganizationsHostQueriesServerServer interface {
	// Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsHostQuery(context.Context, *CreateOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error)
	// Get status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsHostQuery(context.Context, *GetOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsHostQuery(context.Context, *GetResultOrganizationsHostQueryRequest) (*GoogleApiHttpBody, error)
	GetResultViewOrganizationsHostQuery(context.Context, *GetResultViewOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQueryResultView, error)
	// Return a list of Asynchronous Queries at host level.
	ListOrganizationsHostQueries(context.Context, *ListOrganizationsHostQueriesRequest) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error)
	mustEmbedUnimplementedOrganizationsHostQueriesServerServer()
}

// UnimplementedOrganizationsHostQueriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsHostQueriesServerServer struct {
}

func (UnimplementedOrganizationsHostQueriesServerServer) CreateOrganizationsHostQuery(context.Context, *CreateOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsHostQuery not implemented")
}
func (UnimplementedOrganizationsHostQueriesServerServer) GetOrganizationsHostQuery(context.Context, *GetOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsHostQuery not implemented")
}
func (UnimplementedOrganizationsHostQueriesServerServer) GetResultOrganizationsHostQuery(context.Context, *GetResultOrganizationsHostQueryRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOrganizationsHostQuery not implemented")
}
func (UnimplementedOrganizationsHostQueriesServerServer) GetResultViewOrganizationsHostQuery(context.Context, *GetResultViewOrganizationsHostQueryRequest) (*GoogleCloudApigeeV1AsyncQueryResultView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultViewOrganizationsHostQuery not implemented")
}
func (UnimplementedOrganizationsHostQueriesServerServer) ListOrganizationsHostQueries(context.Context, *ListOrganizationsHostQueriesRequest) (*GoogleCloudApigeeV1ListAsyncQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsHostQueries not implemented")
}
func (UnimplementedOrganizationsHostQueriesServerServer) mustEmbedUnimplementedOrganizationsHostQueriesServerServer() {
}

// UnsafeOrganizationsHostQueriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsHostQueriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsHostQueriesServerServer interface {
	mustEmbedUnimplementedOrganizationsHostQueriesServerServer()
}

func RegisterOrganizationsHostQueriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsHostQueriesServerServer) {
	s.RegisterService(&OrganizationsHostQueriesServer_ServiceDesc, srv)
}

func _OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsHostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostQueriesServerServer).CreateOrganizationsHostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/CreateOrganizationsHostQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostQueriesServerServer).CreateOrganizationsHostQuery(ctx, req.(*CreateOrganizationsHostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostQueriesServer_GetOrganizationsHostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsHostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostQueriesServerServer).GetOrganizationsHostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetOrganizationsHostQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostQueriesServerServer).GetOrganizationsHostQuery(ctx, req.(*GetOrganizationsHostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOrganizationsHostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostQueriesServerServer).GetResultOrganizationsHostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultOrganizationsHostQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostQueriesServerServer).GetResultOrganizationsHostQuery(ctx, req.(*GetResultOrganizationsHostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultViewOrganizationsHostQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostQueriesServerServer).GetResultViewOrganizationsHostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultViewOrganizationsHostQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostQueriesServerServer).GetResultViewOrganizationsHostQuery(ctx, req.(*GetResultViewOrganizationsHostQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostQueriesServer_ListOrganizationsHostQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsHostQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostQueriesServerServer).ListOrganizationsHostQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/ListOrganizationsHostQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostQueriesServerServer).ListOrganizationsHostQueries(ctx, req.(*ListOrganizationsHostQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsHostQueriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsHostQueriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsHostQueriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer",
	HandlerType: (*OrganizationsHostQueriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsHostQuery",
			Handler:    _OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_Handler,
		},
		{
			MethodName: "GetOrganizationsHostQuery",
			Handler:    _OrganizationsHostQueriesServer_GetOrganizationsHostQuery_Handler,
		},
		{
			MethodName: "GetResultOrganizationsHostQuery",
			Handler:    _OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_Handler,
		},
		{
			MethodName: "GetResultViewOrganizationsHostQuery",
			Handler:    _OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_Handler,
		},
		{
			MethodName: "ListOrganizationsHostQueries",
			Handler:    _OrganizationsHostQueriesServer_ListOrganizationsHostQueries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsHostSecurityReportsServerClient is the client API for OrganizationsHostSecurityReportsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsHostSecurityReportsServerClient interface {
	// Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsHostSecurityReport(ctx context.Context, in *CreateOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error)
	// Get status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsHostSecurityReport(ctx context.Context, in *GetOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsHostSecurityReport(ctx context.Context, in *GetResultOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to view the query result when result size is small.
	GetResultViewOrganizationsHostSecurityReport(ctx context.Context, in *GetResultViewOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReportResultView, error)
	// Return a list of Security Reports at host level.
	ListOrganizationsHostSecurityReports(ctx context.Context, in *ListOrganizationsHostSecurityReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error)
}

type organizationsHostSecurityReportsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsHostSecurityReportsServerClient(cc grpc.ClientConnInterface) OrganizationsHostSecurityReportsServerClient {
	return &organizationsHostSecurityReportsServerClient{cc}
}

func (c *organizationsHostSecurityReportsServerClient) CreateOrganizationsHostSecurityReport(ctx context.Context, in *CreateOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error) {
	out := new(GoogleCloudApigeeV1SecurityReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/CreateOrganizationsHostSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostSecurityReportsServerClient) GetOrganizationsHostSecurityReport(ctx context.Context, in *GetOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReport, error) {
	out := new(GoogleCloudApigeeV1SecurityReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetOrganizationsHostSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostSecurityReportsServerClient) GetResultOrganizationsHostSecurityReport(ctx context.Context, in *GetResultOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultOrganizationsHostSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostSecurityReportsServerClient) GetResultViewOrganizationsHostSecurityReport(ctx context.Context, in *GetResultViewOrganizationsHostSecurityReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityReportResultView, error) {
	out := new(GoogleCloudApigeeV1SecurityReportResultView)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultViewOrganizationsHostSecurityReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsHostSecurityReportsServerClient) ListOrganizationsHostSecurityReports(ctx context.Context, in *ListOrganizationsHostSecurityReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityReportsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/ListOrganizationsHostSecurityReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsHostSecurityReportsServerServer is the server API for OrganizationsHostSecurityReportsServer service.
// All implementations must embed UnimplementedOrganizationsHostSecurityReportsServerServer
// for forward compatibility
type OrganizationsHostSecurityReportsServerServer interface {
	// Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of "enqueued" means that the request succeeded.
	CreateOrganizationsHostSecurityReport(context.Context, *CreateOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error)
	// Get status of a query submitted at host level. If the query is still in progress, the `state` is set to "running" After the query has completed successfully, `state` is set to "completed"
	GetOrganizationsHostSecurityReport(context.Context, *GetOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error)
	// After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`
	GetResultOrganizationsHostSecurityReport(context.Context, *GetResultOrganizationsHostSecurityReportRequest) (*GoogleApiHttpBody, error)
	// After the query is completed, use this API to view the query result when result size is small.
	GetResultViewOrganizationsHostSecurityReport(context.Context, *GetResultViewOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReportResultView, error)
	// Return a list of Security Reports at host level.
	ListOrganizationsHostSecurityReports(context.Context, *ListOrganizationsHostSecurityReportsRequest) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error)
	mustEmbedUnimplementedOrganizationsHostSecurityReportsServerServer()
}

// UnimplementedOrganizationsHostSecurityReportsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsHostSecurityReportsServerServer struct {
}

func (UnimplementedOrganizationsHostSecurityReportsServerServer) CreateOrganizationsHostSecurityReport(context.Context, *CreateOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsHostSecurityReport not implemented")
}
func (UnimplementedOrganizationsHostSecurityReportsServerServer) GetOrganizationsHostSecurityReport(context.Context, *GetOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsHostSecurityReport not implemented")
}
func (UnimplementedOrganizationsHostSecurityReportsServerServer) GetResultOrganizationsHostSecurityReport(context.Context, *GetResultOrganizationsHostSecurityReportRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultOrganizationsHostSecurityReport not implemented")
}
func (UnimplementedOrganizationsHostSecurityReportsServerServer) GetResultViewOrganizationsHostSecurityReport(context.Context, *GetResultViewOrganizationsHostSecurityReportRequest) (*GoogleCloudApigeeV1SecurityReportResultView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultViewOrganizationsHostSecurityReport not implemented")
}
func (UnimplementedOrganizationsHostSecurityReportsServerServer) ListOrganizationsHostSecurityReports(context.Context, *ListOrganizationsHostSecurityReportsRequest) (*GoogleCloudApigeeV1ListSecurityReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsHostSecurityReports not implemented")
}
func (UnimplementedOrganizationsHostSecurityReportsServerServer) mustEmbedUnimplementedOrganizationsHostSecurityReportsServerServer() {
}

// UnsafeOrganizationsHostSecurityReportsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsHostSecurityReportsServerServer will
// result in compilation errors.
type UnsafeOrganizationsHostSecurityReportsServerServer interface {
	mustEmbedUnimplementedOrganizationsHostSecurityReportsServerServer()
}

func RegisterOrganizationsHostSecurityReportsServerServer(s grpc.ServiceRegistrar, srv OrganizationsHostSecurityReportsServerServer) {
	s.RegisterService(&OrganizationsHostSecurityReportsServer_ServiceDesc, srv)
}

func _OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsHostSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostSecurityReportsServerServer).CreateOrganizationsHostSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/CreateOrganizationsHostSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostSecurityReportsServerServer).CreateOrganizationsHostSecurityReport(ctx, req.(*CreateOrganizationsHostSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsHostSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetOrganizationsHostSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetOrganizationsHostSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetOrganizationsHostSecurityReport(ctx, req.(*GetOrganizationsHostSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultOrganizationsHostSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetResultOrganizationsHostSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultOrganizationsHostSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetResultOrganizationsHostSecurityReport(ctx, req.(*GetResultOrganizationsHostSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultViewOrganizationsHostSecurityReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetResultViewOrganizationsHostSecurityReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultViewOrganizationsHostSecurityReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostSecurityReportsServerServer).GetResultViewOrganizationsHostSecurityReport(ctx, req.(*GetResultViewOrganizationsHostSecurityReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsHostSecurityReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostSecurityReportsServerServer).ListOrganizationsHostSecurityReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/ListOrganizationsHostSecurityReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostSecurityReportsServerServer).ListOrganizationsHostSecurityReports(ctx, req.(*ListOrganizationsHostSecurityReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsHostSecurityReportsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsHostSecurityReportsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsHostSecurityReportsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer",
	HandlerType: (*OrganizationsHostSecurityReportsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsHostSecurityReport",
			Handler:    _OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_Handler,
		},
		{
			MethodName: "GetOrganizationsHostSecurityReport",
			Handler:    _OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_Handler,
		},
		{
			MethodName: "GetResultOrganizationsHostSecurityReport",
			Handler:    _OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_Handler,
		},
		{
			MethodName: "GetResultViewOrganizationsHostSecurityReport",
			Handler:    _OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_Handler,
		},
		{
			MethodName: "ListOrganizationsHostSecurityReports",
			Handler:    _OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsHostStatsServerClient is the client API for OrganizationsHostStatsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsHostStatsServerClient interface {
	// Retrieve metrics grouped by dimensions in host level. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
	GetOrganizationsHostStat(ctx context.Context, in *GetOrganizationsHostStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Stats, error)
}

type organizationsHostStatsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsHostStatsServerClient(cc grpc.ClientConnInterface) OrganizationsHostStatsServerClient {
	return &organizationsHostStatsServerClient{cc}
}

func (c *organizationsHostStatsServerClient) GetOrganizationsHostStat(ctx context.Context, in *GetOrganizationsHostStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Stats, error) {
	out := new(GoogleCloudApigeeV1Stats)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer/GetOrganizationsHostStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsHostStatsServerServer is the server API for OrganizationsHostStatsServer service.
// All implementations must embed UnimplementedOrganizationsHostStatsServerServer
// for forward compatibility
type OrganizationsHostStatsServerServer interface {
	// Retrieve metrics grouped by dimensions in host level. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.
	GetOrganizationsHostStat(context.Context, *GetOrganizationsHostStatRequest) (*GoogleCloudApigeeV1Stats, error)
	mustEmbedUnimplementedOrganizationsHostStatsServerServer()
}

// UnimplementedOrganizationsHostStatsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsHostStatsServerServer struct {
}

func (UnimplementedOrganizationsHostStatsServerServer) GetOrganizationsHostStat(context.Context, *GetOrganizationsHostStatRequest) (*GoogleCloudApigeeV1Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsHostStat not implemented")
}
func (UnimplementedOrganizationsHostStatsServerServer) mustEmbedUnimplementedOrganizationsHostStatsServerServer() {
}

// UnsafeOrganizationsHostStatsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsHostStatsServerServer will
// result in compilation errors.
type UnsafeOrganizationsHostStatsServerServer interface {
	mustEmbedUnimplementedOrganizationsHostStatsServerServer()
}

func RegisterOrganizationsHostStatsServerServer(s grpc.ServiceRegistrar, srv OrganizationsHostStatsServerServer) {
	s.RegisterService(&OrganizationsHostStatsServer_ServiceDesc, srv)
}

func _OrganizationsHostStatsServer_GetOrganizationsHostStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsHostStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsHostStatsServerServer).GetOrganizationsHostStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer/GetOrganizationsHostStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsHostStatsServerServer).GetOrganizationsHostStat(ctx, req.(*GetOrganizationsHostStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsHostStatsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsHostStatsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsHostStatsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer",
	HandlerType: (*OrganizationsHostStatsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsHostStat",
			Handler:    _OrganizationsHostStatsServer_GetOrganizationsHostStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsInstancesServerClient is the client API for OrganizationsInstancesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsInstancesServerClient interface {
	// Creates an Apigee runtime instance. The instance is accessible from the authorized network configured on the organization. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstance(ctx context.Context, in *CreateOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an Apigee runtime instance. The instance stops serving requests and the runtime data is deleted. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstance(ctx context.Context, in *DeleteOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstance(ctx context.Context, in *GetOrganizationsInstanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Instance, error)
	// Lists all Apigee runtime instances for the organization. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstances(ctx context.Context, in *ListOrganizationsInstancesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListInstancesResponse, error)
	// Updates an Apigee runtime instance. You can update the fields described in NodeConfig. No other fields will be updated. **Note:** Not supported for Apigee hybrid.
	PatchOrganizationsInstance(ctx context.Context, in *PatchOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Reports the latest status for a runtime instance.
	ReportStatusOrganizationsInstance(ctx context.Context, in *ReportStatusOrganizationsInstanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ReportInstanceStatusResponse, error)
}

type organizationsInstancesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsInstancesServerClient(cc grpc.ClientConnInterface) OrganizationsInstancesServerClient {
	return &organizationsInstancesServerClient{cc}
}

func (c *organizationsInstancesServerClient) CreateOrganizationsInstance(ctx context.Context, in *CreateOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/CreateOrganizationsInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesServerClient) DeleteOrganizationsInstance(ctx context.Context, in *DeleteOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/DeleteOrganizationsInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesServerClient) GetOrganizationsInstance(ctx context.Context, in *GetOrganizationsInstanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1Instance, error) {
	out := new(GoogleCloudApigeeV1Instance)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/GetOrganizationsInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesServerClient) ListOrganizationsInstances(ctx context.Context, in *ListOrganizationsInstancesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListInstancesResponse, error) {
	out := new(GoogleCloudApigeeV1ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ListOrganizationsInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesServerClient) PatchOrganizationsInstance(ctx context.Context, in *PatchOrganizationsInstanceRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/PatchOrganizationsInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesServerClient) ReportStatusOrganizationsInstance(ctx context.Context, in *ReportStatusOrganizationsInstanceRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ReportInstanceStatusResponse, error) {
	out := new(GoogleCloudApigeeV1ReportInstanceStatusResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ReportStatusOrganizationsInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsInstancesServerServer is the server API for OrganizationsInstancesServer service.
// All implementations must embed UnimplementedOrganizationsInstancesServerServer
// for forward compatibility
type OrganizationsInstancesServerServer interface {
	// Creates an Apigee runtime instance. The instance is accessible from the authorized network configured on the organization. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstance(context.Context, *CreateOrganizationsInstanceRequest) (*longrunningpb.Operation, error)
	// Deletes an Apigee runtime instance. The instance stops serving requests and the runtime data is deleted. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstance(context.Context, *DeleteOrganizationsInstanceRequest) (*longrunningpb.Operation, error)
	// Gets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstance(context.Context, *GetOrganizationsInstanceRequest) (*GoogleCloudApigeeV1Instance, error)
	// Lists all Apigee runtime instances for the organization. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstances(context.Context, *ListOrganizationsInstancesRequest) (*GoogleCloudApigeeV1ListInstancesResponse, error)
	// Updates an Apigee runtime instance. You can update the fields described in NodeConfig. No other fields will be updated. **Note:** Not supported for Apigee hybrid.
	PatchOrganizationsInstance(context.Context, *PatchOrganizationsInstanceRequest) (*longrunningpb.Operation, error)
	// Reports the latest status for a runtime instance.
	ReportStatusOrganizationsInstance(context.Context, *ReportStatusOrganizationsInstanceRequest) (*GoogleCloudApigeeV1ReportInstanceStatusResponse, error)
	mustEmbedUnimplementedOrganizationsInstancesServerServer()
}

// UnimplementedOrganizationsInstancesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsInstancesServerServer struct {
}

func (UnimplementedOrganizationsInstancesServerServer) CreateOrganizationsInstance(context.Context, *CreateOrganizationsInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsInstance not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) DeleteOrganizationsInstance(context.Context, *DeleteOrganizationsInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsInstance not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) GetOrganizationsInstance(context.Context, *GetOrganizationsInstanceRequest) (*GoogleCloudApigeeV1Instance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsInstance not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) ListOrganizationsInstances(context.Context, *ListOrganizationsInstancesRequest) (*GoogleCloudApigeeV1ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsInstances not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) PatchOrganizationsInstance(context.Context, *PatchOrganizationsInstanceRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsInstance not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) ReportStatusOrganizationsInstance(context.Context, *ReportStatusOrganizationsInstanceRequest) (*GoogleCloudApigeeV1ReportInstanceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStatusOrganizationsInstance not implemented")
}
func (UnimplementedOrganizationsInstancesServerServer) mustEmbedUnimplementedOrganizationsInstancesServerServer() {
}

// UnsafeOrganizationsInstancesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsInstancesServerServer will
// result in compilation errors.
type UnsafeOrganizationsInstancesServerServer interface {
	mustEmbedUnimplementedOrganizationsInstancesServerServer()
}

func RegisterOrganizationsInstancesServerServer(s grpc.ServiceRegistrar, srv OrganizationsInstancesServerServer) {
	s.RegisterService(&OrganizationsInstancesServer_ServiceDesc, srv)
}

func _OrganizationsInstancesServer_CreateOrganizationsInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).CreateOrganizationsInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/CreateOrganizationsInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).CreateOrganizationsInstance(ctx, req.(*CreateOrganizationsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesServer_DeleteOrganizationsInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).DeleteOrganizationsInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/DeleteOrganizationsInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).DeleteOrganizationsInstance(ctx, req.(*DeleteOrganizationsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesServer_GetOrganizationsInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).GetOrganizationsInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/GetOrganizationsInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).GetOrganizationsInstance(ctx, req.(*GetOrganizationsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesServer_ListOrganizationsInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).ListOrganizationsInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ListOrganizationsInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).ListOrganizationsInstances(ctx, req.(*ListOrganizationsInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesServer_PatchOrganizationsInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).PatchOrganizationsInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/PatchOrganizationsInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).PatchOrganizationsInstance(ctx, req.(*PatchOrganizationsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesServer_ReportStatusOrganizationsInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStatusOrganizationsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesServerServer).ReportStatusOrganizationsInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ReportStatusOrganizationsInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesServerServer).ReportStatusOrganizationsInstance(ctx, req.(*ReportStatusOrganizationsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsInstancesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsInstancesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsInstancesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsInstancesServer",
	HandlerType: (*OrganizationsInstancesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsInstance",
			Handler:    _OrganizationsInstancesServer_CreateOrganizationsInstance_Handler,
		},
		{
			MethodName: "DeleteOrganizationsInstance",
			Handler:    _OrganizationsInstancesServer_DeleteOrganizationsInstance_Handler,
		},
		{
			MethodName: "GetOrganizationsInstance",
			Handler:    _OrganizationsInstancesServer_GetOrganizationsInstance_Handler,
		},
		{
			MethodName: "ListOrganizationsInstances",
			Handler:    _OrganizationsInstancesServer_ListOrganizationsInstances_Handler,
		},
		{
			MethodName: "PatchOrganizationsInstance",
			Handler:    _OrganizationsInstancesServer_PatchOrganizationsInstance_Handler,
		},
		{
			MethodName: "ReportStatusOrganizationsInstance",
			Handler:    _OrganizationsInstancesServer_ReportStatusOrganizationsInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsInstancesAttachmentsServerClient is the client API for OrganizationsInstancesAttachmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsInstancesAttachmentsServerClient interface {
	// Creates a new attachment of an environment to an instance. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstancesAttachment(ctx context.Context, in *CreateOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an attachment. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstancesAttachment(ctx context.Context, in *DeleteOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets an attachment. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstancesAttachment(ctx context.Context, in *GetOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1InstanceAttachment, error)
	// Lists all attachments to an instance. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstancesAttachments(ctx context.Context, in *ListOrganizationsInstancesAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse, error)
}

type organizationsInstancesAttachmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsInstancesAttachmentsServerClient(cc grpc.ClientConnInterface) OrganizationsInstancesAttachmentsServerClient {
	return &organizationsInstancesAttachmentsServerClient{cc}
}

func (c *organizationsInstancesAttachmentsServerClient) CreateOrganizationsInstancesAttachment(ctx context.Context, in *CreateOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/CreateOrganizationsInstancesAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesAttachmentsServerClient) DeleteOrganizationsInstancesAttachment(ctx context.Context, in *DeleteOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/DeleteOrganizationsInstancesAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesAttachmentsServerClient) GetOrganizationsInstancesAttachment(ctx context.Context, in *GetOrganizationsInstancesAttachmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1InstanceAttachment, error) {
	out := new(GoogleCloudApigeeV1InstanceAttachment)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/GetOrganizationsInstancesAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesAttachmentsServerClient) ListOrganizationsInstancesAttachments(ctx context.Context, in *ListOrganizationsInstancesAttachmentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListInstanceAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/ListOrganizationsInstancesAttachments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsInstancesAttachmentsServerServer is the server API for OrganizationsInstancesAttachmentsServer service.
// All implementations must embed UnimplementedOrganizationsInstancesAttachmentsServerServer
// for forward compatibility
type OrganizationsInstancesAttachmentsServerServer interface {
	// Creates a new attachment of an environment to an instance. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstancesAttachment(context.Context, *CreateOrganizationsInstancesAttachmentRequest) (*longrunningpb.Operation, error)
	// Deletes an attachment. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstancesAttachment(context.Context, *DeleteOrganizationsInstancesAttachmentRequest) (*longrunningpb.Operation, error)
	// Gets an attachment. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstancesAttachment(context.Context, *GetOrganizationsInstancesAttachmentRequest) (*GoogleCloudApigeeV1InstanceAttachment, error)
	// Lists all attachments to an instance. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstancesAttachments(context.Context, *ListOrganizationsInstancesAttachmentsRequest) (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse, error)
	mustEmbedUnimplementedOrganizationsInstancesAttachmentsServerServer()
}

// UnimplementedOrganizationsInstancesAttachmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsInstancesAttachmentsServerServer struct {
}

func (UnimplementedOrganizationsInstancesAttachmentsServerServer) CreateOrganizationsInstancesAttachment(context.Context, *CreateOrganizationsInstancesAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsInstancesAttachment not implemented")
}
func (UnimplementedOrganizationsInstancesAttachmentsServerServer) DeleteOrganizationsInstancesAttachment(context.Context, *DeleteOrganizationsInstancesAttachmentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsInstancesAttachment not implemented")
}
func (UnimplementedOrganizationsInstancesAttachmentsServerServer) GetOrganizationsInstancesAttachment(context.Context, *GetOrganizationsInstancesAttachmentRequest) (*GoogleCloudApigeeV1InstanceAttachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsInstancesAttachment not implemented")
}
func (UnimplementedOrganizationsInstancesAttachmentsServerServer) ListOrganizationsInstancesAttachments(context.Context, *ListOrganizationsInstancesAttachmentsRequest) (*GoogleCloudApigeeV1ListInstanceAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsInstancesAttachments not implemented")
}
func (UnimplementedOrganizationsInstancesAttachmentsServerServer) mustEmbedUnimplementedOrganizationsInstancesAttachmentsServerServer() {
}

// UnsafeOrganizationsInstancesAttachmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsInstancesAttachmentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsInstancesAttachmentsServerServer interface {
	mustEmbedUnimplementedOrganizationsInstancesAttachmentsServerServer()
}

func RegisterOrganizationsInstancesAttachmentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsInstancesAttachmentsServerServer) {
	s.RegisterService(&OrganizationsInstancesAttachmentsServer_ServiceDesc, srv)
}

func _OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsInstancesAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesAttachmentsServerServer).CreateOrganizationsInstancesAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/CreateOrganizationsInstancesAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesAttachmentsServerServer).CreateOrganizationsInstancesAttachment(ctx, req.(*CreateOrganizationsInstancesAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsInstancesAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesAttachmentsServerServer).DeleteOrganizationsInstancesAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/DeleteOrganizationsInstancesAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesAttachmentsServerServer).DeleteOrganizationsInstancesAttachment(ctx, req.(*DeleteOrganizationsInstancesAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsInstancesAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesAttachmentsServerServer).GetOrganizationsInstancesAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/GetOrganizationsInstancesAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesAttachmentsServerServer).GetOrganizationsInstancesAttachment(ctx, req.(*GetOrganizationsInstancesAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsInstancesAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesAttachmentsServerServer).ListOrganizationsInstancesAttachments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/ListOrganizationsInstancesAttachments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesAttachmentsServerServer).ListOrganizationsInstancesAttachments(ctx, req.(*ListOrganizationsInstancesAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsInstancesAttachmentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsInstancesAttachmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsInstancesAttachmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer",
	HandlerType: (*OrganizationsInstancesAttachmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsInstancesAttachment",
			Handler:    _OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsInstancesAttachment",
			Handler:    _OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_Handler,
		},
		{
			MethodName: "GetOrganizationsInstancesAttachment",
			Handler:    _OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_Handler,
		},
		{
			MethodName: "ListOrganizationsInstancesAttachments",
			Handler:    _OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsInstancesCanaryevaluationsServerClient is the client API for OrganizationsInstancesCanaryevaluationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsInstancesCanaryevaluationsServerClient interface {
	// Creates a new canary evaluation for an organization.
	CreateOrganizationsInstancesCanaryevaluation(ctx context.Context, in *CreateOrganizationsInstancesCanaryevaluationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a CanaryEvaluation for an organization.
	GetOrganizationsInstancesCanaryevaluation(ctx context.Context, in *GetOrganizationsInstancesCanaryevaluationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CanaryEvaluation, error)
}

type organizationsInstancesCanaryevaluationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsInstancesCanaryevaluationsServerClient(cc grpc.ClientConnInterface) OrganizationsInstancesCanaryevaluationsServerClient {
	return &organizationsInstancesCanaryevaluationsServerClient{cc}
}

func (c *organizationsInstancesCanaryevaluationsServerClient) CreateOrganizationsInstancesCanaryevaluation(ctx context.Context, in *CreateOrganizationsInstancesCanaryevaluationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/CreateOrganizationsInstancesCanaryevaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesCanaryevaluationsServerClient) GetOrganizationsInstancesCanaryevaluation(ctx context.Context, in *GetOrganizationsInstancesCanaryevaluationRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CanaryEvaluation, error) {
	out := new(GoogleCloudApigeeV1CanaryEvaluation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/GetOrganizationsInstancesCanaryevaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsInstancesCanaryevaluationsServerServer is the server API for OrganizationsInstancesCanaryevaluationsServer service.
// All implementations must embed UnimplementedOrganizationsInstancesCanaryevaluationsServerServer
// for forward compatibility
type OrganizationsInstancesCanaryevaluationsServerServer interface {
	// Creates a new canary evaluation for an organization.
	CreateOrganizationsInstancesCanaryevaluation(context.Context, *CreateOrganizationsInstancesCanaryevaluationRequest) (*longrunningpb.Operation, error)
	// Gets a CanaryEvaluation for an organization.
	GetOrganizationsInstancesCanaryevaluation(context.Context, *GetOrganizationsInstancesCanaryevaluationRequest) (*GoogleCloudApigeeV1CanaryEvaluation, error)
	mustEmbedUnimplementedOrganizationsInstancesCanaryevaluationsServerServer()
}

// UnimplementedOrganizationsInstancesCanaryevaluationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsInstancesCanaryevaluationsServerServer struct {
}

func (UnimplementedOrganizationsInstancesCanaryevaluationsServerServer) CreateOrganizationsInstancesCanaryevaluation(context.Context, *CreateOrganizationsInstancesCanaryevaluationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsInstancesCanaryevaluation not implemented")
}
func (UnimplementedOrganizationsInstancesCanaryevaluationsServerServer) GetOrganizationsInstancesCanaryevaluation(context.Context, *GetOrganizationsInstancesCanaryevaluationRequest) (*GoogleCloudApigeeV1CanaryEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsInstancesCanaryevaluation not implemented")
}
func (UnimplementedOrganizationsInstancesCanaryevaluationsServerServer) mustEmbedUnimplementedOrganizationsInstancesCanaryevaluationsServerServer() {
}

// UnsafeOrganizationsInstancesCanaryevaluationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsInstancesCanaryevaluationsServerServer will
// result in compilation errors.
type UnsafeOrganizationsInstancesCanaryevaluationsServerServer interface {
	mustEmbedUnimplementedOrganizationsInstancesCanaryevaluationsServerServer()
}

func RegisterOrganizationsInstancesCanaryevaluationsServerServer(s grpc.ServiceRegistrar, srv OrganizationsInstancesCanaryevaluationsServerServer) {
	s.RegisterService(&OrganizationsInstancesCanaryevaluationsServer_ServiceDesc, srv)
}

func _OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsInstancesCanaryevaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesCanaryevaluationsServerServer).CreateOrganizationsInstancesCanaryevaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/CreateOrganizationsInstancesCanaryevaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesCanaryevaluationsServerServer).CreateOrganizationsInstancesCanaryevaluation(ctx, req.(*CreateOrganizationsInstancesCanaryevaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsInstancesCanaryevaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesCanaryevaluationsServerServer).GetOrganizationsInstancesCanaryevaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/GetOrganizationsInstancesCanaryevaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesCanaryevaluationsServerServer).GetOrganizationsInstancesCanaryevaluation(ctx, req.(*GetOrganizationsInstancesCanaryevaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsInstancesCanaryevaluationsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsInstancesCanaryevaluationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsInstancesCanaryevaluationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer",
	HandlerType: (*OrganizationsInstancesCanaryevaluationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsInstancesCanaryevaluation",
			Handler:    _OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_Handler,
		},
		{
			MethodName: "GetOrganizationsInstancesCanaryevaluation",
			Handler:    _OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsInstancesNatAddressesServerClient is the client API for OrganizationsInstancesNatAddressesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsInstancesNatAddressesServerClient interface {
	// Activates the NAT address. The Apigee instance can now use this for Internet egress traffic. **Note:** Not supported for Apigee hybrid.
	ActivateOrganizationsInstancesNatAddresse(ctx context.Context, in *ActivateOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstancesNatAddresse(ctx context.Context, in *CreateOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes the NAT address. Connections that are actively using the address are drained before it is removed. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstancesNatAddresse(ctx context.Context, in *DeleteOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets the details of a NAT address. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstancesNatAddresse(ctx context.Context, in *GetOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1NatAddress, error)
	// Lists the NAT addresses for an Apigee instance. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstancesNatAddresses(ctx context.Context, in *ListOrganizationsInstancesNatAddressesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListNatAddressesResponse, error)
}

type organizationsInstancesNatAddressesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsInstancesNatAddressesServerClient(cc grpc.ClientConnInterface) OrganizationsInstancesNatAddressesServerClient {
	return &organizationsInstancesNatAddressesServerClient{cc}
}

func (c *organizationsInstancesNatAddressesServerClient) ActivateOrganizationsInstancesNatAddresse(ctx context.Context, in *ActivateOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ActivateOrganizationsInstancesNatAddresse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesNatAddressesServerClient) CreateOrganizationsInstancesNatAddresse(ctx context.Context, in *CreateOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/CreateOrganizationsInstancesNatAddresse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesNatAddressesServerClient) DeleteOrganizationsInstancesNatAddresse(ctx context.Context, in *DeleteOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/DeleteOrganizationsInstancesNatAddresse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesNatAddressesServerClient) GetOrganizationsInstancesNatAddresse(ctx context.Context, in *GetOrganizationsInstancesNatAddresseRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1NatAddress, error) {
	out := new(GoogleCloudApigeeV1NatAddress)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/GetOrganizationsInstancesNatAddresse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsInstancesNatAddressesServerClient) ListOrganizationsInstancesNatAddresses(ctx context.Context, in *ListOrganizationsInstancesNatAddressesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListNatAddressesResponse, error) {
	out := new(GoogleCloudApigeeV1ListNatAddressesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ListOrganizationsInstancesNatAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsInstancesNatAddressesServerServer is the server API for OrganizationsInstancesNatAddressesServer service.
// All implementations must embed UnimplementedOrganizationsInstancesNatAddressesServerServer
// for forward compatibility
type OrganizationsInstancesNatAddressesServerServer interface {
	// Activates the NAT address. The Apigee instance can now use this for Internet egress traffic. **Note:** Not supported for Apigee hybrid.
	ActivateOrganizationsInstancesNatAddresse(context.Context, *ActivateOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error)
	// Creates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.
	CreateOrganizationsInstancesNatAddresse(context.Context, *CreateOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error)
	// Deletes the NAT address. Connections that are actively using the address are drained before it is removed. **Note:** Not supported for Apigee hybrid.
	DeleteOrganizationsInstancesNatAddresse(context.Context, *DeleteOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error)
	// Gets the details of a NAT address. **Note:** Not supported for Apigee hybrid.
	GetOrganizationsInstancesNatAddresse(context.Context, *GetOrganizationsInstancesNatAddresseRequest) (*GoogleCloudApigeeV1NatAddress, error)
	// Lists the NAT addresses for an Apigee instance. **Note:** Not supported for Apigee hybrid.
	ListOrganizationsInstancesNatAddresses(context.Context, *ListOrganizationsInstancesNatAddressesRequest) (*GoogleCloudApigeeV1ListNatAddressesResponse, error)
	mustEmbedUnimplementedOrganizationsInstancesNatAddressesServerServer()
}

// UnimplementedOrganizationsInstancesNatAddressesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsInstancesNatAddressesServerServer struct {
}

func (UnimplementedOrganizationsInstancesNatAddressesServerServer) ActivateOrganizationsInstancesNatAddresse(context.Context, *ActivateOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateOrganizationsInstancesNatAddresse not implemented")
}
func (UnimplementedOrganizationsInstancesNatAddressesServerServer) CreateOrganizationsInstancesNatAddresse(context.Context, *CreateOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsInstancesNatAddresse not implemented")
}
func (UnimplementedOrganizationsInstancesNatAddressesServerServer) DeleteOrganizationsInstancesNatAddresse(context.Context, *DeleteOrganizationsInstancesNatAddresseRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsInstancesNatAddresse not implemented")
}
func (UnimplementedOrganizationsInstancesNatAddressesServerServer) GetOrganizationsInstancesNatAddresse(context.Context, *GetOrganizationsInstancesNatAddresseRequest) (*GoogleCloudApigeeV1NatAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsInstancesNatAddresse not implemented")
}
func (UnimplementedOrganizationsInstancesNatAddressesServerServer) ListOrganizationsInstancesNatAddresses(context.Context, *ListOrganizationsInstancesNatAddressesRequest) (*GoogleCloudApigeeV1ListNatAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsInstancesNatAddresses not implemented")
}
func (UnimplementedOrganizationsInstancesNatAddressesServerServer) mustEmbedUnimplementedOrganizationsInstancesNatAddressesServerServer() {
}

// UnsafeOrganizationsInstancesNatAddressesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsInstancesNatAddressesServerServer will
// result in compilation errors.
type UnsafeOrganizationsInstancesNatAddressesServerServer interface {
	mustEmbedUnimplementedOrganizationsInstancesNatAddressesServerServer()
}

func RegisterOrganizationsInstancesNatAddressesServerServer(s grpc.ServiceRegistrar, srv OrganizationsInstancesNatAddressesServerServer) {
	s.RegisterService(&OrganizationsInstancesNatAddressesServer_ServiceDesc, srv)
}

func _OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateOrganizationsInstancesNatAddresseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesNatAddressesServerServer).ActivateOrganizationsInstancesNatAddresse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ActivateOrganizationsInstancesNatAddresse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesNatAddressesServerServer).ActivateOrganizationsInstancesNatAddresse(ctx, req.(*ActivateOrganizationsInstancesNatAddresseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsInstancesNatAddresseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesNatAddressesServerServer).CreateOrganizationsInstancesNatAddresse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/CreateOrganizationsInstancesNatAddresse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesNatAddressesServerServer).CreateOrganizationsInstancesNatAddresse(ctx, req.(*CreateOrganizationsInstancesNatAddresseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsInstancesNatAddresseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesNatAddressesServerServer).DeleteOrganizationsInstancesNatAddresse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/DeleteOrganizationsInstancesNatAddresse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesNatAddressesServerServer).DeleteOrganizationsInstancesNatAddresse(ctx, req.(*DeleteOrganizationsInstancesNatAddresseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsInstancesNatAddresseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesNatAddressesServerServer).GetOrganizationsInstancesNatAddresse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/GetOrganizationsInstancesNatAddresse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesNatAddressesServerServer).GetOrganizationsInstancesNatAddresse(ctx, req.(*GetOrganizationsInstancesNatAddresseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsInstancesNatAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsInstancesNatAddressesServerServer).ListOrganizationsInstancesNatAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ListOrganizationsInstancesNatAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsInstancesNatAddressesServerServer).ListOrganizationsInstancesNatAddresses(ctx, req.(*ListOrganizationsInstancesNatAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsInstancesNatAddressesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsInstancesNatAddressesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsInstancesNatAddressesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer",
	HandlerType: (*OrganizationsInstancesNatAddressesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateOrganizationsInstancesNatAddresse",
			Handler:    _OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_Handler,
		},
		{
			MethodName: "CreateOrganizationsInstancesNatAddresse",
			Handler:    _OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_Handler,
		},
		{
			MethodName: "DeleteOrganizationsInstancesNatAddresse",
			Handler:    _OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_Handler,
		},
		{
			MethodName: "GetOrganizationsInstancesNatAddresse",
			Handler:    _OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_Handler,
		},
		{
			MethodName: "ListOrganizationsInstancesNatAddresses",
			Handler:    _OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsKeyvaluemapsServerClient is the client API for OrganizationsKeyvaluemapsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsKeyvaluemapsServerClient interface {
	// Creates a key value map in an organization.
	CreateOrganizationsKeyvaluemap(ctx context.Context, in *CreateOrganizationsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an organization.
	DeleteOrganizationsKeyvaluemap(ctx context.Context, in *DeleteOrganizationsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error)
}

type organizationsKeyvaluemapsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsKeyvaluemapsServerClient(cc grpc.ClientConnInterface) OrganizationsKeyvaluemapsServerClient {
	return &organizationsKeyvaluemapsServerClient{cc}
}

func (c *organizationsKeyvaluemapsServerClient) CreateOrganizationsKeyvaluemap(ctx context.Context, in *CreateOrganizationsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/CreateOrganizationsKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsKeyvaluemapsServerClient) DeleteOrganizationsKeyvaluemap(ctx context.Context, in *DeleteOrganizationsKeyvaluemapRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueMap, error) {
	out := new(GoogleCloudApigeeV1KeyValueMap)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/DeleteOrganizationsKeyvaluemap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsKeyvaluemapsServerServer is the server API for OrganizationsKeyvaluemapsServer service.
// All implementations must embed UnimplementedOrganizationsKeyvaluemapsServerServer
// for forward compatibility
type OrganizationsKeyvaluemapsServerServer interface {
	// Creates a key value map in an organization.
	CreateOrganizationsKeyvaluemap(context.Context, *CreateOrganizationsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	// Deletes a key value map from an organization.
	DeleteOrganizationsKeyvaluemap(context.Context, *DeleteOrganizationsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error)
	mustEmbedUnimplementedOrganizationsKeyvaluemapsServerServer()
}

// UnimplementedOrganizationsKeyvaluemapsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsKeyvaluemapsServerServer struct {
}

func (UnimplementedOrganizationsKeyvaluemapsServerServer) CreateOrganizationsKeyvaluemap(context.Context, *CreateOrganizationsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsServerServer) DeleteOrganizationsKeyvaluemap(context.Context, *DeleteOrganizationsKeyvaluemapRequest) (*GoogleCloudApigeeV1KeyValueMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsKeyvaluemap not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsServerServer) mustEmbedUnimplementedOrganizationsKeyvaluemapsServerServer() {
}

// UnsafeOrganizationsKeyvaluemapsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsKeyvaluemapsServerServer will
// result in compilation errors.
type UnsafeOrganizationsKeyvaluemapsServerServer interface {
	mustEmbedUnimplementedOrganizationsKeyvaluemapsServerServer()
}

func RegisterOrganizationsKeyvaluemapsServerServer(s grpc.ServiceRegistrar, srv OrganizationsKeyvaluemapsServerServer) {
	s.RegisterService(&OrganizationsKeyvaluemapsServer_ServiceDesc, srv)
}

func _OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsServerServer).CreateOrganizationsKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/CreateOrganizationsKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsServerServer).CreateOrganizationsKeyvaluemap(ctx, req.(*CreateOrganizationsKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsKeyvaluemapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsServerServer).DeleteOrganizationsKeyvaluemap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/DeleteOrganizationsKeyvaluemap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsServerServer).DeleteOrganizationsKeyvaluemap(ctx, req.(*DeleteOrganizationsKeyvaluemapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsKeyvaluemapsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsKeyvaluemapsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsKeyvaluemapsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer",
	HandlerType: (*OrganizationsKeyvaluemapsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsKeyvaluemap",
			Handler:    _OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_Handler,
		},
		{
			MethodName: "DeleteOrganizationsKeyvaluemap",
			Handler:    _OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsKeyvaluemapsEntriesServerClient is the client API for OrganizationsKeyvaluemapsEntriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsKeyvaluemapsEntriesServerClient interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error)
}

type organizationsKeyvaluemapsEntriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsKeyvaluemapsEntriesServerClient(cc grpc.ClientConnInterface) OrganizationsKeyvaluemapsEntriesServerClient {
	return &organizationsKeyvaluemapsEntriesServerClient{cc}
}

func (c *organizationsKeyvaluemapsEntriesServerClient) CreateOrganizationsKeyvaluemapsEntry(ctx context.Context, in *CreateOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/CreateOrganizationsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsKeyvaluemapsEntriesServerClient) DeleteOrganizationsKeyvaluemapsEntry(ctx context.Context, in *DeleteOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/DeleteOrganizationsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsKeyvaluemapsEntriesServerClient) GetOrganizationsKeyvaluemapsEntry(ctx context.Context, in *GetOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/GetOrganizationsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsKeyvaluemapsEntriesServerClient) ListOrganizationsKeyvaluemapsEntries(ctx context.Context, in *ListOrganizationsKeyvaluemapsEntriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListKeyValueEntriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/ListOrganizationsKeyvaluemapsEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsKeyvaluemapsEntriesServerClient) UpdateOrganizationsKeyvaluemapsEntry(ctx context.Context, in *UpdateOrganizationsKeyvaluemapsEntryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	out := new(GoogleCloudApigeeV1KeyValueEntry)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/UpdateOrganizationsKeyvaluemapsEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsKeyvaluemapsEntriesServerServer is the server API for OrganizationsKeyvaluemapsEntriesServer service.
// All implementations must embed UnimplementedOrganizationsKeyvaluemapsEntriesServerServer
// for forward compatibility
type OrganizationsKeyvaluemapsEntriesServerServer interface {
	// Creates key value entries in a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	CreateOrganizationsKeyvaluemapsEntry(context.Context, *CreateOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Deletes a key value entry from a key value map scoped to an organization, environment, or API proxy. **Notes:** * After you delete the key value entry, the policy consuming the entry will continue to function with its cached values for a few minutes. This is expected behavior. * Supported for Apigee hybrid 1.8.x and higher.
	DeleteOrganizationsKeyvaluemapsEntry(context.Context, *DeleteOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Get the key value entry value for a key value map scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	GetOrganizationsKeyvaluemapsEntry(context.Context, *GetOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	// Lists key value entries for key values maps scoped to an organization, environment, or API proxy. **Note**: Supported for Apigee hybrid 1.8.x and higher.
	ListOrganizationsKeyvaluemapsEntries(context.Context, *ListOrganizationsKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error)
	// Update key value entry scoped to an organization, environment, or API proxy for an existing key.
	UpdateOrganizationsKeyvaluemapsEntry(context.Context, *UpdateOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error)
	mustEmbedUnimplementedOrganizationsKeyvaluemapsEntriesServerServer()
}

// UnimplementedOrganizationsKeyvaluemapsEntriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsKeyvaluemapsEntriesServerServer struct {
}

func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) CreateOrganizationsKeyvaluemapsEntry(context.Context, *CreateOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) DeleteOrganizationsKeyvaluemapsEntry(context.Context, *DeleteOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) GetOrganizationsKeyvaluemapsEntry(context.Context, *GetOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) ListOrganizationsKeyvaluemapsEntries(context.Context, *ListOrganizationsKeyvaluemapsEntriesRequest) (*GoogleCloudApigeeV1ListKeyValueEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsKeyvaluemapsEntries not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) UpdateOrganizationsKeyvaluemapsEntry(context.Context, *UpdateOrganizationsKeyvaluemapsEntryRequest) (*GoogleCloudApigeeV1KeyValueEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsKeyvaluemapsEntry not implemented")
}
func (UnimplementedOrganizationsKeyvaluemapsEntriesServerServer) mustEmbedUnimplementedOrganizationsKeyvaluemapsEntriesServerServer() {
}

// UnsafeOrganizationsKeyvaluemapsEntriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsKeyvaluemapsEntriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsKeyvaluemapsEntriesServerServer interface {
	mustEmbedUnimplementedOrganizationsKeyvaluemapsEntriesServerServer()
}

func RegisterOrganizationsKeyvaluemapsEntriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsKeyvaluemapsEntriesServerServer) {
	s.RegisterService(&OrganizationsKeyvaluemapsEntriesServer_ServiceDesc, srv)
}

func _OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).CreateOrganizationsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/CreateOrganizationsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).CreateOrganizationsKeyvaluemapsEntry(ctx, req.(*CreateOrganizationsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).DeleteOrganizationsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/DeleteOrganizationsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).DeleteOrganizationsKeyvaluemapsEntry(ctx, req.(*DeleteOrganizationsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).GetOrganizationsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/GetOrganizationsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).GetOrganizationsKeyvaluemapsEntry(ctx, req.(*GetOrganizationsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsKeyvaluemapsEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).ListOrganizationsKeyvaluemapsEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/ListOrganizationsKeyvaluemapsEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).ListOrganizationsKeyvaluemapsEntries(ctx, req.(*ListOrganizationsKeyvaluemapsEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsKeyvaluemapsEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).UpdateOrganizationsKeyvaluemapsEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/UpdateOrganizationsKeyvaluemapsEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsKeyvaluemapsEntriesServerServer).UpdateOrganizationsKeyvaluemapsEntry(ctx, req.(*UpdateOrganizationsKeyvaluemapsEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsKeyvaluemapsEntriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsKeyvaluemapsEntriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsKeyvaluemapsEntriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer",
	HandlerType: (*OrganizationsKeyvaluemapsEntriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsKeyvaluemapsEntry",
			Handler:    _OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "DeleteOrganizationsKeyvaluemapsEntry",
			Handler:    _OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "GetOrganizationsKeyvaluemapsEntry",
			Handler:    _OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_Handler,
		},
		{
			MethodName: "ListOrganizationsKeyvaluemapsEntries",
			Handler:    _OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_Handler,
		},
		{
			MethodName: "UpdateOrganizationsKeyvaluemapsEntry",
			Handler:    _OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsOptimizedHostStatsServerClient is the client API for OrganizationsOptimizedHostStatsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsOptimizedHostStatsServerClient interface {
	// Similar to GetHostStats except that the response is less verbose.
	GetOrganizationsOptimizedHostStat(ctx context.Context, in *GetOrganizationsOptimizedHostStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OptimizedStats, error)
}

type organizationsOptimizedHostStatsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsOptimizedHostStatsServerClient(cc grpc.ClientConnInterface) OrganizationsOptimizedHostStatsServerClient {
	return &organizationsOptimizedHostStatsServerClient{cc}
}

func (c *organizationsOptimizedHostStatsServerClient) GetOrganizationsOptimizedHostStat(ctx context.Context, in *GetOrganizationsOptimizedHostStatRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1OptimizedStats, error) {
	out := new(GoogleCloudApigeeV1OptimizedStats)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer/GetOrganizationsOptimizedHostStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsOptimizedHostStatsServerServer is the server API for OrganizationsOptimizedHostStatsServer service.
// All implementations must embed UnimplementedOrganizationsOptimizedHostStatsServerServer
// for forward compatibility
type OrganizationsOptimizedHostStatsServerServer interface {
	// Similar to GetHostStats except that the response is less verbose.
	GetOrganizationsOptimizedHostStat(context.Context, *GetOrganizationsOptimizedHostStatRequest) (*GoogleCloudApigeeV1OptimizedStats, error)
	mustEmbedUnimplementedOrganizationsOptimizedHostStatsServerServer()
}

// UnimplementedOrganizationsOptimizedHostStatsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsOptimizedHostStatsServerServer struct {
}

func (UnimplementedOrganizationsOptimizedHostStatsServerServer) GetOrganizationsOptimizedHostStat(context.Context, *GetOrganizationsOptimizedHostStatRequest) (*GoogleCloudApigeeV1OptimizedStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsOptimizedHostStat not implemented")
}
func (UnimplementedOrganizationsOptimizedHostStatsServerServer) mustEmbedUnimplementedOrganizationsOptimizedHostStatsServerServer() {
}

// UnsafeOrganizationsOptimizedHostStatsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsOptimizedHostStatsServerServer will
// result in compilation errors.
type UnsafeOrganizationsOptimizedHostStatsServerServer interface {
	mustEmbedUnimplementedOrganizationsOptimizedHostStatsServerServer()
}

func RegisterOrganizationsOptimizedHostStatsServerServer(s grpc.ServiceRegistrar, srv OrganizationsOptimizedHostStatsServerServer) {
	s.RegisterService(&OrganizationsOptimizedHostStatsServer_ServiceDesc, srv)
}

func _OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsOptimizedHostStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsOptimizedHostStatsServerServer).GetOrganizationsOptimizedHostStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer/GetOrganizationsOptimizedHostStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsOptimizedHostStatsServerServer).GetOrganizationsOptimizedHostStat(ctx, req.(*GetOrganizationsOptimizedHostStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsOptimizedHostStatsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsOptimizedHostStatsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsOptimizedHostStatsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer",
	HandlerType: (*OrganizationsOptimizedHostStatsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganizationsOptimizedHostStat",
			Handler:    _OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsReportsServerClient is the client API for OrganizationsReportsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsReportsServerClient interface {
	// Creates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.
	CreateOrganizationsReport(ctx context.Context, in *CreateOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error)
	// Deletes an existing custom report definition
	DeleteOrganizationsReport(ctx context.Context, in *DeleteOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteCustomReportResponse, error)
	// Retrieve a custom report definition.
	GetOrganizationsReport(ctx context.Context, in *GetOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error)
	// Return a list of Custom Reports
	ListOrganizationsReports(ctx context.Context, in *ListOrganizationsReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListCustomReportsResponse, error)
	// Update an existing custom report definition
	UpdateOrganizationsReport(ctx context.Context, in *UpdateOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error)
}

type organizationsReportsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsReportsServerClient(cc grpc.ClientConnInterface) OrganizationsReportsServerClient {
	return &organizationsReportsServerClient{cc}
}

func (c *organizationsReportsServerClient) CreateOrganizationsReport(ctx context.Context, in *CreateOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error) {
	out := new(GoogleCloudApigeeV1CustomReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/CreateOrganizationsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsReportsServerClient) DeleteOrganizationsReport(ctx context.Context, in *DeleteOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteCustomReportResponse, error) {
	out := new(GoogleCloudApigeeV1DeleteCustomReportResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/DeleteOrganizationsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsReportsServerClient) GetOrganizationsReport(ctx context.Context, in *GetOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error) {
	out := new(GoogleCloudApigeeV1CustomReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/GetOrganizationsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsReportsServerClient) ListOrganizationsReports(ctx context.Context, in *ListOrganizationsReportsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListCustomReportsResponse, error) {
	out := new(GoogleCloudApigeeV1ListCustomReportsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/ListOrganizationsReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsReportsServerClient) UpdateOrganizationsReport(ctx context.Context, in *UpdateOrganizationsReportRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1CustomReport, error) {
	out := new(GoogleCloudApigeeV1CustomReport)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/UpdateOrganizationsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsReportsServerServer is the server API for OrganizationsReportsServer service.
// All implementations must embed UnimplementedOrganizationsReportsServerServer
// for forward compatibility
type OrganizationsReportsServerServer interface {
	// Creates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.
	CreateOrganizationsReport(context.Context, *CreateOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error)
	// Deletes an existing custom report definition
	DeleteOrganizationsReport(context.Context, *DeleteOrganizationsReportRequest) (*GoogleCloudApigeeV1DeleteCustomReportResponse, error)
	// Retrieve a custom report definition.
	GetOrganizationsReport(context.Context, *GetOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error)
	// Return a list of Custom Reports
	ListOrganizationsReports(context.Context, *ListOrganizationsReportsRequest) (*GoogleCloudApigeeV1ListCustomReportsResponse, error)
	// Update an existing custom report definition
	UpdateOrganizationsReport(context.Context, *UpdateOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error)
	mustEmbedUnimplementedOrganizationsReportsServerServer()
}

// UnimplementedOrganizationsReportsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsReportsServerServer struct {
}

func (UnimplementedOrganizationsReportsServerServer) CreateOrganizationsReport(context.Context, *CreateOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsReport not implemented")
}
func (UnimplementedOrganizationsReportsServerServer) DeleteOrganizationsReport(context.Context, *DeleteOrganizationsReportRequest) (*GoogleCloudApigeeV1DeleteCustomReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsReport not implemented")
}
func (UnimplementedOrganizationsReportsServerServer) GetOrganizationsReport(context.Context, *GetOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsReport not implemented")
}
func (UnimplementedOrganizationsReportsServerServer) ListOrganizationsReports(context.Context, *ListOrganizationsReportsRequest) (*GoogleCloudApigeeV1ListCustomReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsReports not implemented")
}
func (UnimplementedOrganizationsReportsServerServer) UpdateOrganizationsReport(context.Context, *UpdateOrganizationsReportRequest) (*GoogleCloudApigeeV1CustomReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsReport not implemented")
}
func (UnimplementedOrganizationsReportsServerServer) mustEmbedUnimplementedOrganizationsReportsServerServer() {
}

// UnsafeOrganizationsReportsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsReportsServerServer will
// result in compilation errors.
type UnsafeOrganizationsReportsServerServer interface {
	mustEmbedUnimplementedOrganizationsReportsServerServer()
}

func RegisterOrganizationsReportsServerServer(s grpc.ServiceRegistrar, srv OrganizationsReportsServerServer) {
	s.RegisterService(&OrganizationsReportsServer_ServiceDesc, srv)
}

func _OrganizationsReportsServer_CreateOrganizationsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsReportsServerServer).CreateOrganizationsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/CreateOrganizationsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsReportsServerServer).CreateOrganizationsReport(ctx, req.(*CreateOrganizationsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsReportsServer_DeleteOrganizationsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsReportsServerServer).DeleteOrganizationsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/DeleteOrganizationsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsReportsServerServer).DeleteOrganizationsReport(ctx, req.(*DeleteOrganizationsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsReportsServer_GetOrganizationsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsReportsServerServer).GetOrganizationsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/GetOrganizationsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsReportsServerServer).GetOrganizationsReport(ctx, req.(*GetOrganizationsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsReportsServer_ListOrganizationsReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsReportsServerServer).ListOrganizationsReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/ListOrganizationsReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsReportsServerServer).ListOrganizationsReports(ctx, req.(*ListOrganizationsReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsReportsServer_UpdateOrganizationsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsReportsServerServer).UpdateOrganizationsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/UpdateOrganizationsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsReportsServerServer).UpdateOrganizationsReport(ctx, req.(*UpdateOrganizationsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsReportsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsReportsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsReportsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsReportsServer",
	HandlerType: (*OrganizationsReportsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsReport",
			Handler:    _OrganizationsReportsServer_CreateOrganizationsReport_Handler,
		},
		{
			MethodName: "DeleteOrganizationsReport",
			Handler:    _OrganizationsReportsServer_DeleteOrganizationsReport_Handler,
		},
		{
			MethodName: "GetOrganizationsReport",
			Handler:    _OrganizationsReportsServer_GetOrganizationsReport_Handler,
		},
		{
			MethodName: "ListOrganizationsReports",
			Handler:    _OrganizationsReportsServer_ListOrganizationsReports_Handler,
		},
		{
			MethodName: "UpdateOrganizationsReport",
			Handler:    _OrganizationsReportsServer_UpdateOrganizationsReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSecurityAssessmentResultsServerClient is the client API for OrganizationsSecurityAssessmentResultsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSecurityAssessmentResultsServerClient interface {
	// Compute RAV2 security scores for a set of resources.
	BatchComputeOrganizationsSecurityAssessmentResult(ctx context.Context, in *BatchComputeOrganizationsSecurityAssessmentResultRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse, error)
}

type organizationsSecurityAssessmentResultsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSecurityAssessmentResultsServerClient(cc grpc.ClientConnInterface) OrganizationsSecurityAssessmentResultsServerClient {
	return &organizationsSecurityAssessmentResultsServerClient{cc}
}

func (c *organizationsSecurityAssessmentResultsServerClient) BatchComputeOrganizationsSecurityAssessmentResult(ctx context.Context, in *BatchComputeOrganizationsSecurityAssessmentResultRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse, error) {
	out := new(GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer/BatchComputeOrganizationsSecurityAssessmentResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSecurityAssessmentResultsServerServer is the server API for OrganizationsSecurityAssessmentResultsServer service.
// All implementations must embed UnimplementedOrganizationsSecurityAssessmentResultsServerServer
// for forward compatibility
type OrganizationsSecurityAssessmentResultsServerServer interface {
	// Compute RAV2 security scores for a set of resources.
	BatchComputeOrganizationsSecurityAssessmentResult(context.Context, *BatchComputeOrganizationsSecurityAssessmentResultRequest) (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse, error)
	mustEmbedUnimplementedOrganizationsSecurityAssessmentResultsServerServer()
}

// UnimplementedOrganizationsSecurityAssessmentResultsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSecurityAssessmentResultsServerServer struct {
}

func (UnimplementedOrganizationsSecurityAssessmentResultsServerServer) BatchComputeOrganizationsSecurityAssessmentResult(context.Context, *BatchComputeOrganizationsSecurityAssessmentResultRequest) (*GoogleCloudApigeeV1BatchComputeSecurityAssessmentResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchComputeOrganizationsSecurityAssessmentResult not implemented")
}
func (UnimplementedOrganizationsSecurityAssessmentResultsServerServer) mustEmbedUnimplementedOrganizationsSecurityAssessmentResultsServerServer() {
}

// UnsafeOrganizationsSecurityAssessmentResultsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSecurityAssessmentResultsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSecurityAssessmentResultsServerServer interface {
	mustEmbedUnimplementedOrganizationsSecurityAssessmentResultsServerServer()
}

func RegisterOrganizationsSecurityAssessmentResultsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSecurityAssessmentResultsServerServer) {
	s.RegisterService(&OrganizationsSecurityAssessmentResultsServer_ServiceDesc, srv)
}

func _OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchComputeOrganizationsSecurityAssessmentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityAssessmentResultsServerServer).BatchComputeOrganizationsSecurityAssessmentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer/BatchComputeOrganizationsSecurityAssessmentResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityAssessmentResultsServerServer).BatchComputeOrganizationsSecurityAssessmentResult(ctx, req.(*BatchComputeOrganizationsSecurityAssessmentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSecurityAssessmentResultsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSecurityAssessmentResultsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSecurityAssessmentResultsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer",
	HandlerType: (*OrganizationsSecurityAssessmentResultsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchComputeOrganizationsSecurityAssessmentResult",
			Handler:    _OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSecurityProfilesServerClient is the client API for OrganizationsSecurityProfilesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSecurityProfilesServerClient interface {
	// CreateSecurityProfile create a new custom security profile.
	CreateOrganizationsSecurityProfile(ctx context.Context, in *CreateOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error)
	// DeleteSecurityProfile delete a profile with all its revisions.
	DeleteOrganizationsSecurityProfile(ctx context.Context, in *DeleteOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// GetSecurityProfile gets the specified security profile. Returns NOT_FOUND if security profile is not present for the specified organization.
	GetOrganizationsSecurityProfile(ctx context.Context, in *GetOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error)
	// ListSecurityProfiles lists all the security profiles associated with the org including attached and unattached profiles.
	ListOrganizationsSecurityProfiles(ctx context.Context, in *ListOrganizationsSecurityProfilesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfilesResponse, error)
	// ListSecurityProfileRevisions lists all the revisions of the security profile.
	ListRevisionsOrganizationsSecurityProfile(ctx context.Context, in *ListRevisionsOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse, error)
	// UpdateSecurityProfile update the metadata of security profile.
	PatchOrganizationsSecurityProfile(ctx context.Context, in *PatchOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error)
}

type organizationsSecurityProfilesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSecurityProfilesServerClient(cc grpc.ClientConnInterface) OrganizationsSecurityProfilesServerClient {
	return &organizationsSecurityProfilesServerClient{cc}
}

func (c *organizationsSecurityProfilesServerClient) CreateOrganizationsSecurityProfile(ctx context.Context, in *CreateOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error) {
	out := new(GoogleCloudApigeeV1SecurityProfile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/CreateOrganizationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesServerClient) DeleteOrganizationsSecurityProfile(ctx context.Context, in *DeleteOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/DeleteOrganizationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesServerClient) GetOrganizationsSecurityProfile(ctx context.Context, in *GetOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error) {
	out := new(GoogleCloudApigeeV1SecurityProfile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/GetOrganizationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesServerClient) ListOrganizationsSecurityProfiles(ctx context.Context, in *ListOrganizationsSecurityProfilesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfilesResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityProfilesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListOrganizationsSecurityProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesServerClient) ListRevisionsOrganizationsSecurityProfile(ctx context.Context, in *ListRevisionsOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListRevisionsOrganizationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesServerClient) PatchOrganizationsSecurityProfile(ctx context.Context, in *PatchOrganizationsSecurityProfileRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfile, error) {
	out := new(GoogleCloudApigeeV1SecurityProfile)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/PatchOrganizationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSecurityProfilesServerServer is the server API for OrganizationsSecurityProfilesServer service.
// All implementations must embed UnimplementedOrganizationsSecurityProfilesServerServer
// for forward compatibility
type OrganizationsSecurityProfilesServerServer interface {
	// CreateSecurityProfile create a new custom security profile.
	CreateOrganizationsSecurityProfile(context.Context, *CreateOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error)
	// DeleteSecurityProfile delete a profile with all its revisions.
	DeleteOrganizationsSecurityProfile(context.Context, *DeleteOrganizationsSecurityProfileRequest) (*GoogleProtobufEmpty, error)
	// GetSecurityProfile gets the specified security profile. Returns NOT_FOUND if security profile is not present for the specified organization.
	GetOrganizationsSecurityProfile(context.Context, *GetOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error)
	// ListSecurityProfiles lists all the security profiles associated with the org including attached and unattached profiles.
	ListOrganizationsSecurityProfiles(context.Context, *ListOrganizationsSecurityProfilesRequest) (*GoogleCloudApigeeV1ListSecurityProfilesResponse, error)
	// ListSecurityProfileRevisions lists all the revisions of the security profile.
	ListRevisionsOrganizationsSecurityProfile(context.Context, *ListRevisionsOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse, error)
	// UpdateSecurityProfile update the metadata of security profile.
	PatchOrganizationsSecurityProfile(context.Context, *PatchOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error)
	mustEmbedUnimplementedOrganizationsSecurityProfilesServerServer()
}

// UnimplementedOrganizationsSecurityProfilesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSecurityProfilesServerServer struct {
}

func (UnimplementedOrganizationsSecurityProfilesServerServer) CreateOrganizationsSecurityProfile(context.Context, *CreateOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) DeleteOrganizationsSecurityProfile(context.Context, *DeleteOrganizationsSecurityProfileRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) GetOrganizationsSecurityProfile(context.Context, *GetOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) ListOrganizationsSecurityProfiles(context.Context, *ListOrganizationsSecurityProfilesRequest) (*GoogleCloudApigeeV1ListSecurityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSecurityProfiles not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) ListRevisionsOrganizationsSecurityProfile(context.Context, *ListRevisionsOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1ListSecurityProfileRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRevisionsOrganizationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) PatchOrganizationsSecurityProfile(context.Context, *PatchOrganizationsSecurityProfileRequest) (*GoogleCloudApigeeV1SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesServerServer) mustEmbedUnimplementedOrganizationsSecurityProfilesServerServer() {
}

// UnsafeOrganizationsSecurityProfilesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSecurityProfilesServerServer will
// result in compilation errors.
type UnsafeOrganizationsSecurityProfilesServerServer interface {
	mustEmbedUnimplementedOrganizationsSecurityProfilesServerServer()
}

func RegisterOrganizationsSecurityProfilesServerServer(s grpc.ServiceRegistrar, srv OrganizationsSecurityProfilesServerServer) {
	s.RegisterService(&OrganizationsSecurityProfilesServer_ServiceDesc, srv)
}

func _OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).CreateOrganizationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/CreateOrganizationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).CreateOrganizationsSecurityProfile(ctx, req.(*CreateOrganizationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).DeleteOrganizationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/DeleteOrganizationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).DeleteOrganizationsSecurityProfile(ctx, req.(*DeleteOrganizationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).GetOrganizationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/GetOrganizationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).GetOrganizationsSecurityProfile(ctx, req.(*GetOrganizationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSecurityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).ListOrganizationsSecurityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListOrganizationsSecurityProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).ListOrganizationsSecurityProfiles(ctx, req.(*ListOrganizationsSecurityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRevisionsOrganizationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).ListRevisionsOrganizationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListRevisionsOrganizationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).ListRevisionsOrganizationsSecurityProfile(ctx, req.(*ListRevisionsOrganizationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesServerServer).PatchOrganizationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/PatchOrganizationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesServerServer).PatchOrganizationsSecurityProfile(ctx, req.(*PatchOrganizationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSecurityProfilesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSecurityProfilesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSecurityProfilesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer",
	HandlerType: (*OrganizationsSecurityProfilesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsSecurityProfile",
			Handler:    _OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSecurityProfile",
			Handler:    _OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_Handler,
		},
		{
			MethodName: "GetOrganizationsSecurityProfile",
			Handler:    _OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_Handler,
		},
		{
			MethodName: "ListOrganizationsSecurityProfiles",
			Handler:    _OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_Handler,
		},
		{
			MethodName: "ListRevisionsOrganizationsSecurityProfile",
			Handler:    _OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_Handler,
		},
		{
			MethodName: "PatchOrganizationsSecurityProfile",
			Handler:    _OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSecurityProfilesEnvironmentsServerClient is the client API for OrganizationsSecurityProfilesEnvironmentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSecurityProfilesEnvironmentsServerClient interface {
	// ComputeEnvironmentScores calculates scores for requested time range for the specified security profile and environment.
	ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse, error)
	// CreateSecurityProfileEnvironmentAssociation creates profile environment association i.e. attaches environment to security profile.
	CreateOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *CreateOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation, error)
	// DeleteSecurityProfileEnvironmentAssociation removes profile environment association i.e. detaches environment from security profile.
	DeleteOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *DeleteOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
}

type organizationsSecurityProfilesEnvironmentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSecurityProfilesEnvironmentsServerClient(cc grpc.ClientConnInterface) OrganizationsSecurityProfilesEnvironmentsServerClient {
	return &organizationsSecurityProfilesEnvironmentsServerClient{cc}
}

func (c *organizationsSecurityProfilesEnvironmentsServerClient) ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse, error) {
	out := new(GoogleCloudApigeeV1ComputeEnvironmentScoresResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesEnvironmentsServerClient) CreateOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *CreateOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation, error) {
	out := new(GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/CreateOrganizationsSecurityProfilesEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesEnvironmentsServerClient) DeleteOrganizationsSecurityProfilesEnvironment(ctx context.Context, in *DeleteOrganizationsSecurityProfilesEnvironmentRequest, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/DeleteOrganizationsSecurityProfilesEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSecurityProfilesEnvironmentsServerServer is the server API for OrganizationsSecurityProfilesEnvironmentsServer service.
// All implementations must embed UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer
// for forward compatibility
type OrganizationsSecurityProfilesEnvironmentsServerServer interface {
	// ComputeEnvironmentScores calculates scores for requested time range for the specified security profile and environment.
	ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(context.Context, *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse, error)
	// CreateSecurityProfileEnvironmentAssociation creates profile environment association i.e. attaches environment to security profile.
	CreateOrganizationsSecurityProfilesEnvironment(context.Context, *CreateOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation, error)
	// DeleteSecurityProfileEnvironmentAssociation removes profile environment association i.e. detaches environment from security profile.
	DeleteOrganizationsSecurityProfilesEnvironment(context.Context, *DeleteOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleProtobufEmpty, error)
	mustEmbedUnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer()
}

// UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer struct {
}

func (UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer) ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(context.Context, *ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleCloudApigeeV1ComputeEnvironmentScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer) CreateOrganizationsSecurityProfilesEnvironment(context.Context, *CreateOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleCloudApigeeV1SecurityProfileEnvironmentAssociation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSecurityProfilesEnvironment not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer) DeleteOrganizationsSecurityProfilesEnvironment(context.Context, *DeleteOrganizationsSecurityProfilesEnvironmentRequest) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSecurityProfilesEnvironment not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer) mustEmbedUnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer() {
}

// UnsafeOrganizationsSecurityProfilesEnvironmentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSecurityProfilesEnvironmentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSecurityProfilesEnvironmentsServerServer interface {
	mustEmbedUnimplementedOrganizationsSecurityProfilesEnvironmentsServerServer()
}

func RegisterOrganizationsSecurityProfilesEnvironmentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSecurityProfilesEnvironmentsServerServer) {
	s.RegisterService(&OrganizationsSecurityProfilesEnvironmentsServer_ServiceDesc, srv)
}

func _OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx, req.(*ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSecurityProfilesEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).CreateOrganizationsSecurityProfilesEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/CreateOrganizationsSecurityProfilesEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).CreateOrganizationsSecurityProfilesEnvironment(ctx, req.(*CreateOrganizationsSecurityProfilesEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSecurityProfilesEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).DeleteOrganizationsSecurityProfilesEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/DeleteOrganizationsSecurityProfilesEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesEnvironmentsServerServer).DeleteOrganizationsSecurityProfilesEnvironment(ctx, req.(*DeleteOrganizationsSecurityProfilesEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSecurityProfilesEnvironmentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSecurityProfilesEnvironmentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSecurityProfilesEnvironmentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer",
	HandlerType: (*OrganizationsSecurityProfilesEnvironmentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment",
			Handler:    _OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_Handler,
		},
		{
			MethodName: "CreateOrganizationsSecurityProfilesEnvironment",
			Handler:    _OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSecurityProfilesEnvironment",
			Handler:    _OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSecurityProfilesV2ServerClient is the client API for OrganizationsSecurityProfilesV2Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSecurityProfilesV2ServerClient interface {
	// Create a security profile v2.
	CreateOrganizationsSecurityProfilesV2(ctx context.Context, in *CreateOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error)
	// Delete a security profile v2.
	DeleteOrganizationsSecurityProfilesV2(ctx context.Context, in *DeleteOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error)
	// Get a security profile v2.
	GetOrganizationsSecurityProfilesV2(ctx context.Context, in *GetOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error)
	// List security profiles v2.
	ListOrganizationsSecurityProfilesV2(ctx context.Context, in *ListOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfilesV2Response, error)
	// Update a security profile V2.
	PatchOrganizationsSecurityProfilesV2(ctx context.Context, in *PatchOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error)
}

type organizationsSecurityProfilesV2ServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSecurityProfilesV2ServerClient(cc grpc.ClientConnInterface) OrganizationsSecurityProfilesV2ServerClient {
	return &organizationsSecurityProfilesV2ServerClient{cc}
}

func (c *organizationsSecurityProfilesV2ServerClient) CreateOrganizationsSecurityProfilesV2(ctx context.Context, in *CreateOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	out := new(GoogleCloudApigeeV1SecurityProfileV2)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/CreateOrganizationsSecurityProfilesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesV2ServerClient) DeleteOrganizationsSecurityProfilesV2(ctx context.Context, in *DeleteOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleProtobufEmpty, error) {
	out := new(GoogleProtobufEmpty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/DeleteOrganizationsSecurityProfilesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesV2ServerClient) GetOrganizationsSecurityProfilesV2(ctx context.Context, in *GetOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	out := new(GoogleCloudApigeeV1SecurityProfileV2)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/GetOrganizationsSecurityProfilesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesV2ServerClient) ListOrganizationsSecurityProfilesV2(ctx context.Context, in *ListOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSecurityProfilesV2Response, error) {
	out := new(GoogleCloudApigeeV1ListSecurityProfilesV2Response)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/ListOrganizationsSecurityProfilesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSecurityProfilesV2ServerClient) PatchOrganizationsSecurityProfilesV2(ctx context.Context, in *PatchOrganizationsSecurityProfilesV2Request, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	out := new(GoogleCloudApigeeV1SecurityProfileV2)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/PatchOrganizationsSecurityProfilesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSecurityProfilesV2ServerServer is the server API for OrganizationsSecurityProfilesV2Server service.
// All implementations must embed UnimplementedOrganizationsSecurityProfilesV2ServerServer
// for forward compatibility
type OrganizationsSecurityProfilesV2ServerServer interface {
	// Create a security profile v2.
	CreateOrganizationsSecurityProfilesV2(context.Context, *CreateOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error)
	// Delete a security profile v2.
	DeleteOrganizationsSecurityProfilesV2(context.Context, *DeleteOrganizationsSecurityProfilesV2Request) (*GoogleProtobufEmpty, error)
	// Get a security profile v2.
	GetOrganizationsSecurityProfilesV2(context.Context, *GetOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error)
	// List security profiles v2.
	ListOrganizationsSecurityProfilesV2(context.Context, *ListOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1ListSecurityProfilesV2Response, error)
	// Update a security profile V2.
	PatchOrganizationsSecurityProfilesV2(context.Context, *PatchOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error)
	mustEmbedUnimplementedOrganizationsSecurityProfilesV2ServerServer()
}

// UnimplementedOrganizationsSecurityProfilesV2ServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSecurityProfilesV2ServerServer struct {
}

func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) CreateOrganizationsSecurityProfilesV2(context.Context, *CreateOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSecurityProfilesV2 not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) DeleteOrganizationsSecurityProfilesV2(context.Context, *DeleteOrganizationsSecurityProfilesV2Request) (*GoogleProtobufEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSecurityProfilesV2 not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) GetOrganizationsSecurityProfilesV2(context.Context, *GetOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSecurityProfilesV2 not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) ListOrganizationsSecurityProfilesV2(context.Context, *ListOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1ListSecurityProfilesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSecurityProfilesV2 not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) PatchOrganizationsSecurityProfilesV2(context.Context, *PatchOrganizationsSecurityProfilesV2Request) (*GoogleCloudApigeeV1SecurityProfileV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsSecurityProfilesV2 not implemented")
}
func (UnimplementedOrganizationsSecurityProfilesV2ServerServer) mustEmbedUnimplementedOrganizationsSecurityProfilesV2ServerServer() {
}

// UnsafeOrganizationsSecurityProfilesV2ServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSecurityProfilesV2ServerServer will
// result in compilation errors.
type UnsafeOrganizationsSecurityProfilesV2ServerServer interface {
	mustEmbedUnimplementedOrganizationsSecurityProfilesV2ServerServer()
}

func RegisterOrganizationsSecurityProfilesV2ServerServer(s grpc.ServiceRegistrar, srv OrganizationsSecurityProfilesV2ServerServer) {
	s.RegisterService(&OrganizationsSecurityProfilesV2Server_ServiceDesc, srv)
}

func _OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSecurityProfilesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).CreateOrganizationsSecurityProfilesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/CreateOrganizationsSecurityProfilesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).CreateOrganizationsSecurityProfilesV2(ctx, req.(*CreateOrganizationsSecurityProfilesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSecurityProfilesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).DeleteOrganizationsSecurityProfilesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/DeleteOrganizationsSecurityProfilesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).DeleteOrganizationsSecurityProfilesV2(ctx, req.(*DeleteOrganizationsSecurityProfilesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSecurityProfilesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).GetOrganizationsSecurityProfilesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/GetOrganizationsSecurityProfilesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).GetOrganizationsSecurityProfilesV2(ctx, req.(*GetOrganizationsSecurityProfilesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSecurityProfilesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).ListOrganizationsSecurityProfilesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/ListOrganizationsSecurityProfilesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).ListOrganizationsSecurityProfilesV2(ctx, req.(*ListOrganizationsSecurityProfilesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsSecurityProfilesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).PatchOrganizationsSecurityProfilesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/PatchOrganizationsSecurityProfilesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSecurityProfilesV2ServerServer).PatchOrganizationsSecurityProfilesV2(ctx, req.(*PatchOrganizationsSecurityProfilesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSecurityProfilesV2Server_ServiceDesc is the grpc.ServiceDesc for OrganizationsSecurityProfilesV2Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSecurityProfilesV2Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server",
	HandlerType: (*OrganizationsSecurityProfilesV2ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsSecurityProfilesV2",
			Handler:    _OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSecurityProfilesV2",
			Handler:    _OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_Handler,
		},
		{
			MethodName: "GetOrganizationsSecurityProfilesV2",
			Handler:    _OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_Handler,
		},
		{
			MethodName: "ListOrganizationsSecurityProfilesV2",
			Handler:    _OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_Handler,
		},
		{
			MethodName: "PatchOrganizationsSecurityProfilesV2",
			Handler:    _OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSharedflowsServerClient is the client API for OrganizationsSharedflowsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSharedflowsServerClient interface {
	// Uploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it. Once imported, the shared flow revision must be deployed before it can be accessed at runtime. The size limit of a shared flow bundle is 15 MB.
	CreateOrganizationsSharedflow(ctx context.Context, in *CreateOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error)
	// Deletes a shared flow and all it's revisions. The shared flow must be undeployed before you can delete it.
	DeleteOrganizationsSharedflow(ctx context.Context, in *DeleteOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlow, error)
	// Gets a shared flow by name, including a list of its revisions.
	GetOrganizationsSharedflow(ctx context.Context, in *GetOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlow, error)
	// Lists all shared flows in the organization.
	ListOrganizationsSharedflows(ctx context.Context, in *ListOrganizationsSharedflowsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSharedFlowsResponse, error)
}

type organizationsSharedflowsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSharedflowsServerClient(cc grpc.ClientConnInterface) OrganizationsSharedflowsServerClient {
	return &organizationsSharedflowsServerClient{cc}
}

func (c *organizationsSharedflowsServerClient) CreateOrganizationsSharedflow(ctx context.Context, in *CreateOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	out := new(GoogleCloudApigeeV1SharedFlowRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/CreateOrganizationsSharedflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSharedflowsServerClient) DeleteOrganizationsSharedflow(ctx context.Context, in *DeleteOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlow, error) {
	out := new(GoogleCloudApigeeV1SharedFlow)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/DeleteOrganizationsSharedflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSharedflowsServerClient) GetOrganizationsSharedflow(ctx context.Context, in *GetOrganizationsSharedflowRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlow, error) {
	out := new(GoogleCloudApigeeV1SharedFlow)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/GetOrganizationsSharedflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSharedflowsServerClient) ListOrganizationsSharedflows(ctx context.Context, in *ListOrganizationsSharedflowsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListSharedFlowsResponse, error) {
	out := new(GoogleCloudApigeeV1ListSharedFlowsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/ListOrganizationsSharedflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSharedflowsServerServer is the server API for OrganizationsSharedflowsServer service.
// All implementations must embed UnimplementedOrganizationsSharedflowsServerServer
// for forward compatibility
type OrganizationsSharedflowsServerServer interface {
	// Uploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it. Once imported, the shared flow revision must be deployed before it can be accessed at runtime. The size limit of a shared flow bundle is 15 MB.
	CreateOrganizationsSharedflow(context.Context, *CreateOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error)
	// Deletes a shared flow and all it's revisions. The shared flow must be undeployed before you can delete it.
	DeleteOrganizationsSharedflow(context.Context, *DeleteOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlow, error)
	// Gets a shared flow by name, including a list of its revisions.
	GetOrganizationsSharedflow(context.Context, *GetOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlow, error)
	// Lists all shared flows in the organization.
	ListOrganizationsSharedflows(context.Context, *ListOrganizationsSharedflowsRequest) (*GoogleCloudApigeeV1ListSharedFlowsResponse, error)
	mustEmbedUnimplementedOrganizationsSharedflowsServerServer()
}

// UnimplementedOrganizationsSharedflowsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSharedflowsServerServer struct {
}

func (UnimplementedOrganizationsSharedflowsServerServer) CreateOrganizationsSharedflow(context.Context, *CreateOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSharedflow not implemented")
}
func (UnimplementedOrganizationsSharedflowsServerServer) DeleteOrganizationsSharedflow(context.Context, *DeleteOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSharedflow not implemented")
}
func (UnimplementedOrganizationsSharedflowsServerServer) GetOrganizationsSharedflow(context.Context, *GetOrganizationsSharedflowRequest) (*GoogleCloudApigeeV1SharedFlow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSharedflow not implemented")
}
func (UnimplementedOrganizationsSharedflowsServerServer) ListOrganizationsSharedflows(context.Context, *ListOrganizationsSharedflowsRequest) (*GoogleCloudApigeeV1ListSharedFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSharedflows not implemented")
}
func (UnimplementedOrganizationsSharedflowsServerServer) mustEmbedUnimplementedOrganizationsSharedflowsServerServer() {
}

// UnsafeOrganizationsSharedflowsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSharedflowsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSharedflowsServerServer interface {
	mustEmbedUnimplementedOrganizationsSharedflowsServerServer()
}

func RegisterOrganizationsSharedflowsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSharedflowsServerServer) {
	s.RegisterService(&OrganizationsSharedflowsServer_ServiceDesc, srv)
}

func _OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSharedflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsServerServer).CreateOrganizationsSharedflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/CreateOrganizationsSharedflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsServerServer).CreateOrganizationsSharedflow(ctx, req.(*CreateOrganizationsSharedflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSharedflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsServerServer).DeleteOrganizationsSharedflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/DeleteOrganizationsSharedflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsServerServer).DeleteOrganizationsSharedflow(ctx, req.(*DeleteOrganizationsSharedflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSharedflowsServer_GetOrganizationsSharedflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSharedflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsServerServer).GetOrganizationsSharedflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/GetOrganizationsSharedflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsServerServer).GetOrganizationsSharedflow(ctx, req.(*GetOrganizationsSharedflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSharedflowsServer_ListOrganizationsSharedflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSharedflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsServerServer).ListOrganizationsSharedflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/ListOrganizationsSharedflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsServerServer).ListOrganizationsSharedflows(ctx, req.(*ListOrganizationsSharedflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSharedflowsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSharedflowsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSharedflowsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer",
	HandlerType: (*OrganizationsSharedflowsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsSharedflow",
			Handler:    _OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSharedflow",
			Handler:    _OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_Handler,
		},
		{
			MethodName: "GetOrganizationsSharedflow",
			Handler:    _OrganizationsSharedflowsServer_GetOrganizationsSharedflow_Handler,
		},
		{
			MethodName: "ListOrganizationsSharedflows",
			Handler:    _OrganizationsSharedflowsServer_ListOrganizationsSharedflows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSharedflowsDeploymentsServerClient is the client API for OrganizationsSharedflowsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSharedflowsDeploymentsServerClient interface {
	// Lists all deployments of a shared flow.
	ListOrganizationsSharedflowsDeployments(ctx context.Context, in *ListOrganizationsSharedflowsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsSharedflowsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSharedflowsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsSharedflowsDeploymentsServerClient {
	return &organizationsSharedflowsDeploymentsServerClient{cc}
}

func (c *organizationsSharedflowsDeploymentsServerClient) ListOrganizationsSharedflowsDeployments(ctx context.Context, in *ListOrganizationsSharedflowsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer/ListOrganizationsSharedflowsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSharedflowsDeploymentsServerServer is the server API for OrganizationsSharedflowsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsSharedflowsDeploymentsServerServer
// for forward compatibility
type OrganizationsSharedflowsDeploymentsServerServer interface {
	// Lists all deployments of a shared flow.
	ListOrganizationsSharedflowsDeployments(context.Context, *ListOrganizationsSharedflowsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsSharedflowsDeploymentsServerServer()
}

// UnimplementedOrganizationsSharedflowsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSharedflowsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsSharedflowsDeploymentsServerServer) ListOrganizationsSharedflowsDeployments(context.Context, *ListOrganizationsSharedflowsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSharedflowsDeployments not implemented")
}
func (UnimplementedOrganizationsSharedflowsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsSharedflowsDeploymentsServerServer() {
}

// UnsafeOrganizationsSharedflowsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSharedflowsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSharedflowsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsSharedflowsDeploymentsServerServer()
}

func RegisterOrganizationsSharedflowsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSharedflowsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsSharedflowsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSharedflowsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsDeploymentsServerServer).ListOrganizationsSharedflowsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer/ListOrganizationsSharedflowsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsDeploymentsServerServer).ListOrganizationsSharedflowsDeployments(ctx, req.(*ListOrganizationsSharedflowsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSharedflowsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSharedflowsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSharedflowsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer",
	HandlerType: (*OrganizationsSharedflowsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsSharedflowsDeployments",
			Handler:    _OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSharedflowsRevisionsServerClient is the client API for OrganizationsSharedflowsRevisionsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSharedflowsRevisionsServerClient interface {
	// Deletes a shared flow and all associated policies, resources, and revisions. You must undeploy the shared flow before deleting it.
	DeleteOrganizationsSharedflowsRevision(ctx context.Context, in *DeleteOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error)
	// Gets a revision of a shared flow. To download the shared flow configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the shared flow configuration locally and upload the updated sharedFlow configuration revision, as described in [updateSharedFlowRevision](updateSharedFlowRevision).
	GetOrganizationsSharedflowsRevision(ctx context.Context, in *GetOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error)
	// Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.
	UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx context.Context, in *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error)
}

type organizationsSharedflowsRevisionsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSharedflowsRevisionsServerClient(cc grpc.ClientConnInterface) OrganizationsSharedflowsRevisionsServerClient {
	return &organizationsSharedflowsRevisionsServerClient{cc}
}

func (c *organizationsSharedflowsRevisionsServerClient) DeleteOrganizationsSharedflowsRevision(ctx context.Context, in *DeleteOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	out := new(GoogleCloudApigeeV1SharedFlowRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/DeleteOrganizationsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSharedflowsRevisionsServerClient) GetOrganizationsSharedflowsRevision(ctx context.Context, in *GetOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleApiHttpBody, error) {
	out := new(GoogleApiHttpBody)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/GetOrganizationsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSharedflowsRevisionsServerClient) UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx context.Context, in *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	out := new(GoogleCloudApigeeV1SharedFlowRevision)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/UpdateSharedFlowRevisionOrganizationsSharedflowsRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSharedflowsRevisionsServerServer is the server API for OrganizationsSharedflowsRevisionsServer service.
// All implementations must embed UnimplementedOrganizationsSharedflowsRevisionsServerServer
// for forward compatibility
type OrganizationsSharedflowsRevisionsServerServer interface {
	// Deletes a shared flow and all associated policies, resources, and revisions. You must undeploy the shared flow before deleting it.
	DeleteOrganizationsSharedflowsRevision(context.Context, *DeleteOrganizationsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error)
	// Gets a revision of a shared flow. To download the shared flow configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the shared flow configuration locally and upload the updated sharedFlow configuration revision, as described in [updateSharedFlowRevision](updateSharedFlowRevision).
	GetOrganizationsSharedflowsRevision(context.Context, *GetOrganizationsSharedflowsRevisionRequest) (*GoogleApiHttpBody, error)
	// Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.
	UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(context.Context, *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error)
	mustEmbedUnimplementedOrganizationsSharedflowsRevisionsServerServer()
}

// UnimplementedOrganizationsSharedflowsRevisionsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSharedflowsRevisionsServerServer struct {
}

func (UnimplementedOrganizationsSharedflowsRevisionsServerServer) DeleteOrganizationsSharedflowsRevision(context.Context, *DeleteOrganizationsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsSharedflowsRevisionsServerServer) GetOrganizationsSharedflowsRevision(context.Context, *GetOrganizationsSharedflowsRevisionRequest) (*GoogleApiHttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsSharedflowsRevisionsServerServer) UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(context.Context, *UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest) (*GoogleCloudApigeeV1SharedFlowRevision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharedFlowRevisionOrganizationsSharedflowsRevision not implemented")
}
func (UnimplementedOrganizationsSharedflowsRevisionsServerServer) mustEmbedUnimplementedOrganizationsSharedflowsRevisionsServerServer() {
}

// UnsafeOrganizationsSharedflowsRevisionsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSharedflowsRevisionsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSharedflowsRevisionsServerServer interface {
	mustEmbedUnimplementedOrganizationsSharedflowsRevisionsServerServer()
}

func RegisterOrganizationsSharedflowsRevisionsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSharedflowsRevisionsServerServer) {
	s.RegisterService(&OrganizationsSharedflowsRevisionsServer_ServiceDesc, srv)
}

func _OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).DeleteOrganizationsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/DeleteOrganizationsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).DeleteOrganizationsSharedflowsRevision(ctx, req.(*DeleteOrganizationsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).GetOrganizationsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/GetOrganizationsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).GetOrganizationsSharedflowsRevision(ctx, req.(*GetOrganizationsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/UpdateSharedFlowRevisionOrganizationsSharedflowsRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsRevisionsServerServer).UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx, req.(*UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSharedflowsRevisionsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSharedflowsRevisionsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSharedflowsRevisionsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer",
	HandlerType: (*OrganizationsSharedflowsRevisionsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteOrganizationsSharedflowsRevision",
			Handler:    _OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_Handler,
		},
		{
			MethodName: "GetOrganizationsSharedflowsRevision",
			Handler:    _OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_Handler,
		},
		{
			MethodName: "UpdateSharedFlowRevisionOrganizationsSharedflowsRevision",
			Handler:    _OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSharedflowsRevisionsDeploymentsServerClient is the client API for OrganizationsSharedflowsRevisionsDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSharedflowsRevisionsDeploymentsServerClient interface {
	// Lists all deployments of a shared flow revision.
	ListOrganizationsSharedflowsRevisionsDeployments(ctx context.Context, in *ListOrganizationsSharedflowsRevisionsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
}

type organizationsSharedflowsRevisionsDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSharedflowsRevisionsDeploymentsServerClient(cc grpc.ClientConnInterface) OrganizationsSharedflowsRevisionsDeploymentsServerClient {
	return &organizationsSharedflowsRevisionsDeploymentsServerClient{cc}
}

func (c *organizationsSharedflowsRevisionsDeploymentsServerClient) ListOrganizationsSharedflowsRevisionsDeployments(ctx context.Context, in *ListOrganizationsSharedflowsRevisionsDeploymentsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	out := new(GoogleCloudApigeeV1ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer/ListOrganizationsSharedflowsRevisionsDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSharedflowsRevisionsDeploymentsServerServer is the server API for OrganizationsSharedflowsRevisionsDeploymentsServer service.
// All implementations must embed UnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer
// for forward compatibility
type OrganizationsSharedflowsRevisionsDeploymentsServerServer interface {
	// Lists all deployments of a shared flow revision.
	ListOrganizationsSharedflowsRevisionsDeployments(context.Context, *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error)
	mustEmbedUnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer()
}

// UnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer struct {
}

func (UnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer) ListOrganizationsSharedflowsRevisionsDeployments(context.Context, *ListOrganizationsSharedflowsRevisionsDeploymentsRequest) (*GoogleCloudApigeeV1ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSharedflowsRevisionsDeployments not implemented")
}
func (UnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer) mustEmbedUnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer() {
}

// UnsafeOrganizationsSharedflowsRevisionsDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSharedflowsRevisionsDeploymentsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSharedflowsRevisionsDeploymentsServerServer interface {
	mustEmbedUnimplementedOrganizationsSharedflowsRevisionsDeploymentsServerServer()
}

func RegisterOrganizationsSharedflowsRevisionsDeploymentsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSharedflowsRevisionsDeploymentsServerServer) {
	s.RegisterService(&OrganizationsSharedflowsRevisionsDeploymentsServer_ServiceDesc, srv)
}

func _OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSharedflowsRevisionsDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSharedflowsRevisionsDeploymentsServerServer).ListOrganizationsSharedflowsRevisionsDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer/ListOrganizationsSharedflowsRevisionsDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSharedflowsRevisionsDeploymentsServerServer).ListOrganizationsSharedflowsRevisionsDeployments(ctx, req.(*ListOrganizationsSharedflowsRevisionsDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSharedflowsRevisionsDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSharedflowsRevisionsDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSharedflowsRevisionsDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer",
	HandlerType: (*OrganizationsSharedflowsRevisionsDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationsSharedflowsRevisionsDeployments",
			Handler:    _OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSitesServerClient is the client API for OrganizationsSitesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSitesServerClient interface {
}

type organizationsSitesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSitesServerClient(cc grpc.ClientConnInterface) OrganizationsSitesServerClient {
	return &organizationsSitesServerClient{cc}
}

// OrganizationsSitesServerServer is the server API for OrganizationsSitesServer service.
// All implementations must embed UnimplementedOrganizationsSitesServerServer
// for forward compatibility
type OrganizationsSitesServerServer interface {
	mustEmbedUnimplementedOrganizationsSitesServerServer()
}

// UnimplementedOrganizationsSitesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSitesServerServer struct {
}

func (UnimplementedOrganizationsSitesServerServer) mustEmbedUnimplementedOrganizationsSitesServerServer() {
}

// UnsafeOrganizationsSitesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSitesServerServer will
// result in compilation errors.
type UnsafeOrganizationsSitesServerServer interface {
	mustEmbedUnimplementedOrganizationsSitesServerServer()
}

func RegisterOrganizationsSitesServerServer(s grpc.ServiceRegistrar, srv OrganizationsSitesServerServer) {
	s.RegisterService(&OrganizationsSitesServer_ServiceDesc, srv)
}

// OrganizationsSitesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSitesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSitesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSitesServer",
	HandlerType: (*OrganizationsSitesServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSitesApicategoriesServerClient is the client API for OrganizationsSitesApicategoriesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSitesApicategoriesServerClient interface {
	// Creates a new API category.
	CreateOrganizationsSitesApicategory(ctx context.Context, in *CreateOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
	// Deletes an API category.
	DeleteOrganizationsSitesApicategory(ctx context.Context, in *DeleteOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteResponse, error)
	// Gets an API category.
	GetOrganizationsSitesApicategory(ctx context.Context, in *GetOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
	// Returns the API categories associated with a portal.
	ListOrganizationsSitesApicategories(ctx context.Context, in *ListOrganizationsSitesApicategoriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiCategoriesResponse, error)
	// Updates an API category.
	PatchOrganizationsSitesApicategory(ctx context.Context, in *PatchOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
}

type organizationsSitesApicategoriesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSitesApicategoriesServerClient(cc grpc.ClientConnInterface) OrganizationsSitesApicategoriesServerClient {
	return &organizationsSitesApicategoriesServerClient{cc}
}

func (c *organizationsSitesApicategoriesServerClient) CreateOrganizationsSitesApicategory(ctx context.Context, in *CreateOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	out := new(GoogleCloudApigeeV1ApiCategoryResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/CreateOrganizationsSitesApicategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApicategoriesServerClient) DeleteOrganizationsSitesApicategory(ctx context.Context, in *DeleteOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteResponse, error) {
	out := new(GoogleCloudApigeeV1DeleteResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/DeleteOrganizationsSitesApicategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApicategoriesServerClient) GetOrganizationsSitesApicategory(ctx context.Context, in *GetOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	out := new(GoogleCloudApigeeV1ApiCategoryResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/GetOrganizationsSitesApicategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApicategoriesServerClient) ListOrganizationsSitesApicategories(ctx context.Context, in *ListOrganizationsSitesApicategoriesRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiCategoriesResponse, error) {
	out := new(GoogleCloudApigeeV1ListApiCategoriesResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/ListOrganizationsSitesApicategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApicategoriesServerClient) PatchOrganizationsSitesApicategory(ctx context.Context, in *PatchOrganizationsSitesApicategoryRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	out := new(GoogleCloudApigeeV1ApiCategoryResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/PatchOrganizationsSitesApicategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSitesApicategoriesServerServer is the server API for OrganizationsSitesApicategoriesServer service.
// All implementations must embed UnimplementedOrganizationsSitesApicategoriesServerServer
// for forward compatibility
type OrganizationsSitesApicategoriesServerServer interface {
	// Creates a new API category.
	CreateOrganizationsSitesApicategory(context.Context, *CreateOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
	// Deletes an API category.
	DeleteOrganizationsSitesApicategory(context.Context, *DeleteOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1DeleteResponse, error)
	// Gets an API category.
	GetOrganizationsSitesApicategory(context.Context, *GetOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
	// Returns the API categories associated with a portal.
	ListOrganizationsSitesApicategories(context.Context, *ListOrganizationsSitesApicategoriesRequest) (*GoogleCloudApigeeV1ListApiCategoriesResponse, error)
	// Updates an API category.
	PatchOrganizationsSitesApicategory(context.Context, *PatchOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error)
	mustEmbedUnimplementedOrganizationsSitesApicategoriesServerServer()
}

// UnimplementedOrganizationsSitesApicategoriesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSitesApicategoriesServerServer struct {
}

func (UnimplementedOrganizationsSitesApicategoriesServerServer) CreateOrganizationsSitesApicategory(context.Context, *CreateOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSitesApicategory not implemented")
}
func (UnimplementedOrganizationsSitesApicategoriesServerServer) DeleteOrganizationsSitesApicategory(context.Context, *DeleteOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSitesApicategory not implemented")
}
func (UnimplementedOrganizationsSitesApicategoriesServerServer) GetOrganizationsSitesApicategory(context.Context, *GetOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSitesApicategory not implemented")
}
func (UnimplementedOrganizationsSitesApicategoriesServerServer) ListOrganizationsSitesApicategories(context.Context, *ListOrganizationsSitesApicategoriesRequest) (*GoogleCloudApigeeV1ListApiCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSitesApicategories not implemented")
}
func (UnimplementedOrganizationsSitesApicategoriesServerServer) PatchOrganizationsSitesApicategory(context.Context, *PatchOrganizationsSitesApicategoryRequest) (*GoogleCloudApigeeV1ApiCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsSitesApicategory not implemented")
}
func (UnimplementedOrganizationsSitesApicategoriesServerServer) mustEmbedUnimplementedOrganizationsSitesApicategoriesServerServer() {
}

// UnsafeOrganizationsSitesApicategoriesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSitesApicategoriesServerServer will
// result in compilation errors.
type UnsafeOrganizationsSitesApicategoriesServerServer interface {
	mustEmbedUnimplementedOrganizationsSitesApicategoriesServerServer()
}

func RegisterOrganizationsSitesApicategoriesServerServer(s grpc.ServiceRegistrar, srv OrganizationsSitesApicategoriesServerServer) {
	s.RegisterService(&OrganizationsSitesApicategoriesServer_ServiceDesc, srv)
}

func _OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSitesApicategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApicategoriesServerServer).CreateOrganizationsSitesApicategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/CreateOrganizationsSitesApicategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApicategoriesServerServer).CreateOrganizationsSitesApicategory(ctx, req.(*CreateOrganizationsSitesApicategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSitesApicategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApicategoriesServerServer).DeleteOrganizationsSitesApicategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/DeleteOrganizationsSitesApicategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApicategoriesServerServer).DeleteOrganizationsSitesApicategory(ctx, req.(*DeleteOrganizationsSitesApicategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSitesApicategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApicategoriesServerServer).GetOrganizationsSitesApicategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/GetOrganizationsSitesApicategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApicategoriesServerServer).GetOrganizationsSitesApicategory(ctx, req.(*GetOrganizationsSitesApicategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSitesApicategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApicategoriesServerServer).ListOrganizationsSitesApicategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/ListOrganizationsSitesApicategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApicategoriesServerServer).ListOrganizationsSitesApicategories(ctx, req.(*ListOrganizationsSitesApicategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsSitesApicategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApicategoriesServerServer).PatchOrganizationsSitesApicategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/PatchOrganizationsSitesApicategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApicategoriesServerServer).PatchOrganizationsSitesApicategory(ctx, req.(*PatchOrganizationsSitesApicategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSitesApicategoriesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSitesApicategoriesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSitesApicategoriesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer",
	HandlerType: (*OrganizationsSitesApicategoriesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsSitesApicategory",
			Handler:    _OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSitesApicategory",
			Handler:    _OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_Handler,
		},
		{
			MethodName: "GetOrganizationsSitesApicategory",
			Handler:    _OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_Handler,
		},
		{
			MethodName: "ListOrganizationsSitesApicategories",
			Handler:    _OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_Handler,
		},
		{
			MethodName: "PatchOrganizationsSitesApicategory",
			Handler:    _OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// OrganizationsSitesApidocsServerClient is the client API for OrganizationsSitesApidocsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsSitesApidocsServerClient interface {
	// Creates a new catalog item.
	CreateOrganizationsSitesApidoc(ctx context.Context, in *CreateOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Deletes a catalog item.
	DeleteOrganizationsSitesApidoc(ctx context.Context, in *DeleteOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteResponse, error)
	// Gets a catalog item.
	GetOrganizationsSitesApidoc(ctx context.Context, in *GetOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Gets the documentation for the specified catalog item.
	GetDocumentationOrganizationsSitesApidoc(ctx context.Context, in *GetDocumentationOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error)
	// Returns the catalog items associated with a portal.
	ListOrganizationsSitesApidocs(ctx context.Context, in *ListOrganizationsSitesApidocsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiDocsResponse, error)
	// Updates a catalog item.
	UpdateOrganizationsSitesApidoc(ctx context.Context, in *UpdateOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Updates the documentation for the specified catalog item. Note that the documentation file contents will not be populated in the return message.
	UpdateDocumentationOrganizationsSitesApidoc(ctx context.Context, in *UpdateDocumentationOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error)
}

type organizationsSitesApidocsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsSitesApidocsServerClient(cc grpc.ClientConnInterface) OrganizationsSitesApidocsServerClient {
	return &organizationsSitesApidocsServerClient{cc}
}

func (c *organizationsSitesApidocsServerClient) CreateOrganizationsSitesApidoc(ctx context.Context, in *CreateOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	out := new(GoogleCloudApigeeV1ApiDocResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/CreateOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) DeleteOrganizationsSitesApidoc(ctx context.Context, in *DeleteOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1DeleteResponse, error) {
	out := new(GoogleCloudApigeeV1DeleteResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/DeleteOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) GetOrganizationsSitesApidoc(ctx context.Context, in *GetOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	out := new(GoogleCloudApigeeV1ApiDocResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) GetDocumentationOrganizationsSitesApidoc(ctx context.Context, in *GetDocumentationOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error) {
	out := new(GoogleCloudApigeeV1ApiDocDocumentationResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetDocumentationOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) ListOrganizationsSitesApidocs(ctx context.Context, in *ListOrganizationsSitesApidocsRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ListApiDocsResponse, error) {
	out := new(GoogleCloudApigeeV1ListApiDocsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/ListOrganizationsSitesApidocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) UpdateOrganizationsSitesApidoc(ctx context.Context, in *UpdateOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	out := new(GoogleCloudApigeeV1ApiDocResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsSitesApidocsServerClient) UpdateDocumentationOrganizationsSitesApidoc(ctx context.Context, in *UpdateDocumentationOrganizationsSitesApidocRequest, opts ...grpc.CallOption) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error) {
	out := new(GoogleCloudApigeeV1ApiDocDocumentationResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateDocumentationOrganizationsSitesApidoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsSitesApidocsServerServer is the server API for OrganizationsSitesApidocsServer service.
// All implementations must embed UnimplementedOrganizationsSitesApidocsServerServer
// for forward compatibility
type OrganizationsSitesApidocsServerServer interface {
	// Creates a new catalog item.
	CreateOrganizationsSitesApidoc(context.Context, *CreateOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Deletes a catalog item.
	DeleteOrganizationsSitesApidoc(context.Context, *DeleteOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1DeleteResponse, error)
	// Gets a catalog item.
	GetOrganizationsSitesApidoc(context.Context, *GetOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Gets the documentation for the specified catalog item.
	GetDocumentationOrganizationsSitesApidoc(context.Context, *GetDocumentationOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error)
	// Returns the catalog items associated with a portal.
	ListOrganizationsSitesApidocs(context.Context, *ListOrganizationsSitesApidocsRequest) (*GoogleCloudApigeeV1ListApiDocsResponse, error)
	// Updates a catalog item.
	UpdateOrganizationsSitesApidoc(context.Context, *UpdateOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error)
	// Updates the documentation for the specified catalog item. Note that the documentation file contents will not be populated in the return message.
	UpdateDocumentationOrganizationsSitesApidoc(context.Context, *UpdateDocumentationOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error)
	mustEmbedUnimplementedOrganizationsSitesApidocsServerServer()
}

// UnimplementedOrganizationsSitesApidocsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsSitesApidocsServerServer struct {
}

func (UnimplementedOrganizationsSitesApidocsServerServer) CreateOrganizationsSitesApidoc(context.Context, *CreateOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) DeleteOrganizationsSitesApidoc(context.Context, *DeleteOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) GetOrganizationsSitesApidoc(context.Context, *GetOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) GetDocumentationOrganizationsSitesApidoc(context.Context, *GetDocumentationOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentationOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) ListOrganizationsSitesApidocs(context.Context, *ListOrganizationsSitesApidocsRequest) (*GoogleCloudApigeeV1ListApiDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsSitesApidocs not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) UpdateOrganizationsSitesApidoc(context.Context, *UpdateOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) UpdateDocumentationOrganizationsSitesApidoc(context.Context, *UpdateDocumentationOrganizationsSitesApidocRequest) (*GoogleCloudApigeeV1ApiDocDocumentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentationOrganizationsSitesApidoc not implemented")
}
func (UnimplementedOrganizationsSitesApidocsServerServer) mustEmbedUnimplementedOrganizationsSitesApidocsServerServer() {
}

// UnsafeOrganizationsSitesApidocsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsSitesApidocsServerServer will
// result in compilation errors.
type UnsafeOrganizationsSitesApidocsServerServer interface {
	mustEmbedUnimplementedOrganizationsSitesApidocsServerServer()
}

func RegisterOrganizationsSitesApidocsServerServer(s grpc.ServiceRegistrar, srv OrganizationsSitesApidocsServerServer) {
	s.RegisterService(&OrganizationsSitesApidocsServer_ServiceDesc, srv)
}

func _OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).CreateOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/CreateOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).CreateOrganizationsSitesApidoc(ctx, req.(*CreateOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).DeleteOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/DeleteOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).DeleteOrganizationsSitesApidoc(ctx, req.(*DeleteOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).GetOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).GetOrganizationsSitesApidoc(ctx, req.(*GetOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentationOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).GetDocumentationOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetDocumentationOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).GetDocumentationOrganizationsSitesApidoc(ctx, req.(*GetDocumentationOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsSitesApidocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).ListOrganizationsSitesApidocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/ListOrganizationsSitesApidocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).ListOrganizationsSitesApidocs(ctx, req.(*ListOrganizationsSitesApidocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).UpdateOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).UpdateOrganizationsSitesApidoc(ctx, req.(*UpdateOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentationOrganizationsSitesApidocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsSitesApidocsServerServer).UpdateDocumentationOrganizationsSitesApidoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateDocumentationOrganizationsSitesApidoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsSitesApidocsServerServer).UpdateDocumentationOrganizationsSitesApidoc(ctx, req.(*UpdateDocumentationOrganizationsSitesApidocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsSitesApidocsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsSitesApidocsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsSitesApidocsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer",
	HandlerType: (*OrganizationsSitesApidocsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_Handler,
		},
		{
			MethodName: "DeleteOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_Handler,
		},
		{
			MethodName: "GetOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_Handler,
		},
		{
			MethodName: "GetDocumentationOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_Handler,
		},
		{
			MethodName: "ListOrganizationsSitesApidocs",
			Handler:    _OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_Handler,
		},
		{
			MethodName: "UpdateOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_Handler,
		},
		{
			MethodName: "UpdateDocumentationOrganizationsSitesApidoc",
			Handler:    _OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
	// Provisions a new Apigee organization with a functioning runtime. This is the standard way to create trial organizations for a free Apigee trial.
	ProvisionOrganizationProject(ctx context.Context, in *ProvisionOrganizationProjectRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

func (c *projectsServerClient) ProvisionOrganizationProject(ctx context.Context, in *ProvisionOrganizationProjectRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.apigee.v1.ProjectsServer/ProvisionOrganizationProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	// Provisions a new Apigee organization with a functioning runtime. This is the standard way to create trial organizations for a free Apigee trial.
	ProvisionOrganizationProject(context.Context, *ProvisionOrganizationProjectRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) ProvisionOrganizationProject(context.Context, *ProvisionOrganizationProjectRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionOrganizationProject not implemented")
}
func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

func _ProjectsServer_ProvisionOrganizationProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionOrganizationProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServerServer).ProvisionOrganizationProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.apigee.v1.ProjectsServer/ProvisionOrganizationProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServerServer).ProvisionOrganizationProject(ctx, req.(*ProvisionOrganizationProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.apigee.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionOrganizationProject",
			Handler:    _ProjectsServer_ProvisionOrganizationProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/apigee/v1/service.proto",
}
