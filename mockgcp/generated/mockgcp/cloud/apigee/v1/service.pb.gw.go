// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: mockgcp/cloud/apigee/v1/service.proto

/*
Package apigeepb is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package apigeepb

import (
	"context"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var _ codes.Code
var _ io.Reader
var _ status.Status
var _ = runtime.String
var _ = utilities.NewDoubleArray
var _ = metadata.Join

func request_HybridIssuersServer_ListHybridIssuers_0(ctx context.Context, marshaler runtime.Marshaler, client HybridIssuersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListHybridIssuersRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.ListHybridIssuers(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_HybridIssuersServer_ListHybridIssuers_0(ctx context.Context, marshaler runtime.Marshaler, server HybridIssuersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListHybridIssuersRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.ListHybridIssuers(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsServer_CreateOrganization_0 = &utilities.DoubleArray{Encoding: map[string]int{"organization": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsServer_CreateOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_CreateOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_CreateOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_CreateOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganization(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsServer_DeleteOrganization_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsServer_DeleteOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_DeleteOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeleteOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_DeleteOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_DeleteOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeleteOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetControlPlaneAccessOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetControlPlaneAccessOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetControlPlaneAccessOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetControlPlaneAccessOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetControlPlaneAccessOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetControlPlaneAccessOrganization(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsServer_GetDeployedIngressConfigOrganization_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsServer_GetDeployedIngressConfigOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedIngressConfigOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_GetDeployedIngressConfigOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetDeployedIngressConfigOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetDeployedIngressConfigOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedIngressConfigOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_GetDeployedIngressConfigOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetDeployedIngressConfigOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetProjectMappingOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetProjectMappingOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetProjectMappingOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetProjectMappingOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetProjectMappingOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetProjectMappingOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetRuntimeConfigOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetRuntimeConfigOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetRuntimeConfigOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetRuntimeConfigOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetRuntimeConfigOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetRuntimeConfigOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetSecuritySettingsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSecuritySettingsOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetSecuritySettingsOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetSecuritySettingsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSecuritySettingsOrganizationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetSecuritySettingsOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_GetSyncAuthorizationOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSyncAuthorizationOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetSyncAuthorizationOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_GetSyncAuthorizationOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSyncAuthorizationOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetSyncAuthorizationOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_ListOrganizations_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizations(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_ListOrganizations_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizations(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_SetAddonsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetAddonsOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["org"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "org")
	}

	protoReq.Org, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "org", err)
	}

	msg, err := client.SetAddonsOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_SetAddonsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetAddonsOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["org"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "org")
	}

	protoReq.Org, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "org", err)
	}

	msg, err := server.SetAddonsOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_SetSyncAuthorizationOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetSyncAuthorizationOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.SetSyncAuthorizationOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_SetSyncAuthorizationOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetSyncAuthorizationOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.SetSyncAuthorizationOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsServer_UpdateOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_UpdateOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganization(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsServer_UpdateControlPlaneAccessOrganization_0 = &utilities.DoubleArray{Encoding: map[string]int{"organization": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateControlPlaneAccessOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_UpdateControlPlaneAccessOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateControlPlaneAccessOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateControlPlaneAccessOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_UpdateControlPlaneAccessOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateControlPlaneAccessOrganization(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsServer_UpdateSecuritySettingsOrganization_0 = &utilities.DoubleArray{Encoding: map[string]int{"organization": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsServer_UpdateSecuritySettingsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSecuritySettingsOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_UpdateSecuritySettingsOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateSecuritySettingsOrganization(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsServer_UpdateSecuritySettingsOrganization_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSecuritySettingsOrganizationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Organization); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsServer_UpdateSecuritySettingsOrganization_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateSecuritySettingsOrganization(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsAnalyticsDatastore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsAnalyticsDatastore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsAnalyticsDatastore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsAnalyticsDatastore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsAnalyticsDatastore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsAnalyticsDatastore(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAnalyticsDatastoresRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsAnalyticsDatastores(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAnalyticsDatastoresRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsAnalyticsDatastores(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq TestOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.TestOrganizationsAnalyticsDatastore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq TestOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.TestOrganizationsAnalyticsDatastore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAnalyticsDatastoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsAnalyticsDatastore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAnalyticsDatastoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAnalyticsDatastoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAnalyticsDatastore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsAnalyticsDatastore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.AttributesOrganizationsApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.AttributesOrganizationsApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsApiproducts(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsApiproducts(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApiproductRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproduct); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApiproductsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApiproductsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApiproductsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApiproductsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsApiproductsAttributes(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsApiproductsAttributes(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateApiProductAttributeOrganizationsApiproductsAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateApiProductAttributeOrganizationsApiproductsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsRateplansServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsRateplan); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsApiproductsRateplan(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsRateplansServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsRateplan); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsApiproductsRateplan(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsRateplansServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApiproductsRateplan(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsRateplansServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApiproductsRateplan(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsRateplansServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApiproductsRateplan(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsRateplansServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApiproductsRateplan(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsRateplansServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsRateplansRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsApiproductsRateplans(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsRateplansServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApiproductsRateplansRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsApiproductsRateplans(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApiproductsRateplansServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsRateplan); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsApiproductsRateplan(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApiproductsRateplansServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApiproductsRateplanRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApiproductsRateplan); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsApiproductsRateplan(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisServer_CreateOrganizationsApi_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_api": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsApisServer_CreateOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApi); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_CreateOrganizationsApi_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsApi(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisServer_CreateOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApi); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_CreateOrganizationsApi_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsApi(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisServer_DeleteOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApi(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisServer_DeleteOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApi(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisServer_GetOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApi(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisServer_GetOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApi(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisServer_ListOrganizationsApis_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsApisServer_ListOrganizationsApis_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_ListOrganizationsApis_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsApis(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisServer_ListOrganizationsApis_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_ListOrganizationsApis_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsApis(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisServer_PatchOrganizationsApi_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_api": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsApisServer_PatchOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApi); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_PatchOrganizationsApi_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsApi(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisServer_PatchOrganizationsApi_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsApiRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApi); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisServer_PatchOrganizationsApi_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsApi(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsApisDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsApisDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApisKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsApisKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApisKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsApisKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApisKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApisKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsApisKeyvaluemapsEntries(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsApisKeyvaluemapsEntries(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsApisKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsApisKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_apis_revision": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateApiProxyRevisionOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisRevision); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateApiProxyRevisionOrganizationsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateApiProxyRevisionOrganizationsApisRevisionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsApisRevision); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateApiProxyRevisionOrganizationsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsApisRevisionsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisRevisionsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsApisRevisionsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsApisRevisionsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsApisRevisionsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsApisRevisionsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsAppgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsAppgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsAppgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsAppgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsAppgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsAppgroup(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppgroupsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsAppgroups(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppgroupsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsAppgroups(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_appgroup": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateOrganizationsAppgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAppgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateOrganizationsAppgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsAppgroupsApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsAppgroupsApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsAppgroupsApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsAppgroupsApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsAppgroupsApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsAppgroupsApp(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppgroupsAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsAppgroupsApps(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppgroupsAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsAppgroupsApps(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_appgroups_app": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateOrganizationsAppgroupsApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsAppgroupsAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateOrganizationsAppgroupsApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsAppgroupsAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsAppgroupsAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsAppgroupsAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsAppgroupsAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsAppgroupsAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsAppgroupsAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsAppgroupsAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsAppgroupsAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsAppgroupsAppsKeysApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppgroupsAppsKeysApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppgroupsAppsKeysApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsAppsServer_GetOrganizationsApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppsServer_GetOrganizationsApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsApp(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsAppsServer_ListOrganizationsApps_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsAppsServer_ListOrganizationsApps_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppsServer_ListOrganizationsApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsApps(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsAppsServer_ListOrganizationsApps_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsAppsServer_ListOrganizationsApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsApps(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_datacollector": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDatacollectorsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDatacollector); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsDatacollector(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDatacollectorsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDatacollector); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsDatacollector(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDatacollectorsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDatacollector(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDatacollectorsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDatacollector(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDatacollectorsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsDatacollector(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDatacollectorsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsDatacollector(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDatacollectorsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDatacollectorsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsDatacollectors(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDatacollectorsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDatacollectorsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsDatacollectors(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_datacollector": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDatacollectorsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDatacollector); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsDatacollector(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDatacollectorsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsDatacollectorRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDatacollector); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsDatacollector(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.AttributesOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.AttributesOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetBalanceOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetBalanceOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetBalanceOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetBalanceOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMonetizationConfigOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetMonetizationConfigOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetMonetizationConfigOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetMonetizationConfigOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsDevelopers(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsDevelopers(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetDeveloperStatusOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.SetDeveloperStatusOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetDeveloperStatusOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.SetDeveloperStatusOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMonetizationConfigOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateMonetizationConfigOrganizationsDeveloper(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateMonetizationConfigOrganizationsDeveloperRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDeveloper); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateMonetizationConfigOrganizationsDeveloper(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.AttributesOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttributesOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.AttributesOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_developers_app": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsDevelopersApps(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAppsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsDevelopersApps(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsDevelopersApp(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsDevelopersAppRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersApp); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsDevelopersApp(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDevelopersAppsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDevelopersAppsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsDevelopersAppsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsDevelopersAppsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAppsAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsDevelopersAppsAttributes(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAppsAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsDevelopersAppsAttributes(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsDevelopersAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsDevelopersAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDevelopersAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDevelopersAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsDevelopersAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsDevelopersAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_developers_apps_key": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppKeyOrganizationsDevelopersAppsKeyRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKey); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDevelopersAppsKeysApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysApiproductsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysApiproductsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproductRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAppsKeysCreateServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppsKeysCreateRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKeysCreate); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsDevelopersAppsKeysCreate(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAppsKeysCreateServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersAppsKeysCreateRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAppsKeysCreate); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsDevelopersAppsKeysCreate(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsDevelopersAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsDevelopersAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsDevelopersAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsDevelopersAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsDevelopersAttributes(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersAttributesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsDevelopersAttributes(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersAttributesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersAttributesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDeveloperAttributeOrganizationsDevelopersAttributeRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersAttribute); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateDeveloperAttributeOrganizationsDevelopersAttribute(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersBalanceServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AdjustOrganizationsDevelopersBalanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersBalance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.AdjustOrganizationsDevelopersBalance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersBalanceServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AdjustOrganizationsDevelopersBalanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersBalance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.AdjustOrganizationsDevelopersBalance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersBalanceServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreditOrganizationsDevelopersBalanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersBalance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.CreditOrganizationsDevelopersBalance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersBalanceServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreditOrganizationsDevelopersBalanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersBalance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.CreditOrganizationsDevelopersBalance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersSubscriptionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersSubscription); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsDevelopersSubscription(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersSubscriptionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersSubscription); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsDevelopersSubscription(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersSubscriptionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ExpireOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersSubscription); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.ExpireOrganizationsDevelopersSubscription(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersSubscriptionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ExpireOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsDevelopersSubscription); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.ExpireOrganizationsDevelopersSubscription(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersSubscriptionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsDevelopersSubscription(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersSubscriptionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsDevelopersSubscriptionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsDevelopersSubscription(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsDevelopersSubscriptionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersSubscriptionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsDevelopersSubscriptions(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsDevelopersSubscriptionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsDevelopersSubscriptionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsDevelopersSubscriptions(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_endpoint_attachment": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEndpointAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEndpointAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEndpointAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEndpointAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEndpointAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEndpointAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEndpointAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEndpointAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEndpointAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEndpointAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEndpointAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEndpointAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEndpointAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEndpointAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEndpointAttachment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEndpointAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEndpointAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEndpointAttachments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEndpointAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEndpointAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEndpointAttachments(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_envgroup": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvgroup(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedIngressConfigOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetDeployedIngressConfigOrganizationsEnvgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedIngressConfigOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetDeployedIngressConfigOrganizationsEnvgroup(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvgroupsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvgroups(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvgroupsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvgroups(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_envgroup": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsEnvgroup(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvgroupRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroup); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsEnvgroup(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroupsAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvgroupsAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvgroupsAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvgroupsAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvgroupsAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvgroupsAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvgroupsAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvgroupsAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvgroupsAttachment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvgroupsAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvgroupsAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvgroupsAttachments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvgroupsAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvgroupsAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvgroupsAttachments(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environment": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetAddonsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetAddonsConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetAddonsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetAddonsConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetApiSecurityRuntimeConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetApiSecurityRuntimeConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDebugmaskOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetDebugmaskOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDebugmaskOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetDebugmaskOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetDeployedConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeployedConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetDeployedConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSecurityActionsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetSecurityActionsConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSecurityActionsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetSecurityActionsConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTraceConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetTraceConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetTraceConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetTraceConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environment": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ModifyEnvironmentOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ModifyEnvironmentOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ModifyEnvironmentOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ModifyEnvironmentOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SubscribeOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.SubscribeOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SubscribeOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.SubscribeOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UnsubscribeOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.UnsubscribeOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UnsubscribeOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.UnsubscribeOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environment": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDebugmaskOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateDebugmaskOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDebugmaskOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateDebugmaskOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateEnvironmentOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateEnvironmentOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateEnvironmentOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateEnvironmentOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environment": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSecurityActionsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateSecurityActionsConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSecurityActionsConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateSecurityActionsConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environment": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateTraceConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateTraceConfigOrganizationsEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateTraceConfigOrganizationsEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateTraceConfigOrganizationsEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsAddonsConfigServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsAddonsConfig); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsAddonsConfigServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq SetAddonEnablementOrganizationsEnvironmentsAddonsConfigRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsAddonsConfig); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.SetAddonEnablementOrganizationsEnvironmentsAddonsConfig(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsAnalyticsAdminServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsAnalyticsAdminServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetSchemav2OrganizationsEnvironmentsAnalyticsAdminRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsAnalyticsExportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsAnalyticsExportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsAnalyticsExport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsAnalyticsExport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsAnalyticsExportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsAnalyticsExportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsAnalyticsExport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsAnalyticsExport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsAnalyticsExportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsAnalyticsExportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsAnalyticsExport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsAnalyticsExportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsAnalyticsExportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsAnalyticsExport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsAnalyticsExportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsAnalyticsExportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsAnalyticsExports(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsAnalyticsExportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsAnalyticsExportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsAnalyticsExports(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsApisDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsApisDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsApisDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsApisDeployments(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeployOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeployOrganizationsEnvironmentsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeployOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeployOrganizationsEnvironmentsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeploymentsOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetDeploymentsOrganizationsEnvironmentsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UndeployOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UndeployOrganizationsEnvironmentsApisRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UndeployOrganizationsEnvironmentsApisRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UndeployOrganizationsEnvironmentsApisRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_apis_revisions_debugsession": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsApisRevisionsDebugsession); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsApisRevisionsDebugsession); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsApisRevisionsDebugsessionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsApisRevisionsDebugsession(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsApisRevisionsDebugsessionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsApisRevisionsDebugsessions(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsApisRevisionsDebugsessionsDataRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GenerateUploadUrlOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsArchiveDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsArchiveDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsArchiveDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsArchiveDeployments(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_archive_deployment": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsArchiveDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsArchiveDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsArchiveDeploymentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsArchiveDeployment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsEnvironmentsArchiveDeployment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsCachesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsCacheRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsCache(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsCachesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsCacheRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsCache(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsDeployment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsDeploymentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsDeployment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsFlowhooksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsFlowhook); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsFlowhooksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsFlowhook); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsFlowhooksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsFlowhooksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsFlowhooksServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsFlowhook(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsFlowhooksServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsFlowhookRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsFlowhook(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_keystore": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsKeystore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystore); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsKeystore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsKeystore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsKeystore(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsKeystore(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeystoreRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsKeystore(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_keystores_aliase": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystoresAliase); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystoresAliase); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CsrOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.CsrOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CsrOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.CsrOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetCertificateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetCertificateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_keystores_aliase": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeystoresAliasesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystoresAliase); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeystoresAliasesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsKeystoresAliaseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeystoresAliase); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateOrganizationsEnvironmentsKeystoresAliase(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsKeyvaluemapsEntries(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsEnvironmentsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsOptimizedStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsOptimizedStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsOptimizedStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsOptimizedStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsOptimizedStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsOptimizedStat(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsQuery); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsQuery); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultOrganizationsEnvironmentsQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultOrganizationsEnvironmentsQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResulturlOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResulturlOrganizationsEnvironmentsQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResulturlOrganizationsEnvironmentsQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResulturlOrganizationsEnvironmentsQuery(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsQueriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsQueries(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsQueriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsQueries(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsReferencesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsReference); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsReference(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsReferencesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsReference); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsReference(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsReferencesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsReference(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsReferencesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsReference(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsReferencesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsReference(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsReferencesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsReference(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsReferencesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsReference); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsEnvironmentsReference(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsReferencesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsReferenceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsReference); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsEnvironmentsReference(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_resourcefile": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsResourcefile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsResourcefile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsResourcefile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsResourcefile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsResourcefile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsResourcefile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsResourcefile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsResourcefile(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsResourcefilesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsResourcefiles(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsResourcefilesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsResourcefiles(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	msg, err := client.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListEnvironmentResourcesOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	msg, err := server.ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsResourcefilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsResourcefile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsEnvironmentsResourcefile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsResourcefilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsResourcefileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsResourcefile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	val, ok = pathParams["type"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "type")
	}

	protoReq.Type, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "type", err)
	}

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsEnvironmentsResourcefile(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_security_action": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityActionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsSecurityAction(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityActionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsSecurityAction(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityActionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DisableOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DisableOrganizationsEnvironmentsSecurityAction(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityActionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DisableOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DisableOrganizationsEnvironmentsSecurityAction(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityActionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq EnableOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.EnableOrganizationsEnvironmentsSecurityAction(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityActionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq EnableOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityAction); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.EnableOrganizationsEnvironmentsSecurityAction(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityActionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsSecurityAction(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityActionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityActionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsSecurityAction(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityActionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityActionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsSecurityActions(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityActionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityActionsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsSecurityActions(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityIncidentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityIncident); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityIncidentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BatchUpdateOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityIncident); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.BatchUpdateOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityIncidentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityIncidentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityIncidentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityIncidentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsSecurityIncidents(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityIncidentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityIncidentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsSecurityIncidents(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_security_incident": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityIncidentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityIncident); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityIncidentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsSecurityIncidentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityIncident); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsEnvironmentsSecurityIncident(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultOrganizationsEnvironmentsSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultOrganizationsEnvironmentsSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultViewOrganizationsEnvironmentsSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsEnvironmentsSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultViewOrganizationsEnvironmentsSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsSecurityReports(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSecurityReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsSecurityReports(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityStat); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["orgenv"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "orgenv")
	}

	protoReq.Orgenv, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "orgenv", err)
	}

	msg, err := client.QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq QueryTabularStatsOrganizationsEnvironmentsSecurityStatRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityStat); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["orgenv"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "orgenv")
	}

	protoReq.Orgenv, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "orgenv", err)
	}

	msg, err := server.QueryTabularStatsOrganizationsEnvironmentsSecurityStat(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSecurityStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityStat); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["orgenv"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "orgenv")
	}

	protoReq.Orgenv, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "orgenv", err)
	}

	msg, err := client.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSecurityStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStatRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsSecurityStat); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["orgenv"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "orgenv")
	}

	protoReq.Orgenv, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "orgenv", err)
	}

	msg, err := server.QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSharedflowsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsSharedflowsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSharedflowsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsSharedflowsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsSharedflowsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.DeployOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.DeployOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDeploymentsOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UndeployOrganizationsEnvironmentsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UndeployOrganizationsEnvironmentsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsStat(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_targetserver": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTargetserversServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTargetserver); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsTargetserver(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTargetserversServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTargetserver); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsTargetserver(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTargetserversServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsTargetserver(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTargetserversServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsTargetserver(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTargetserversServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsTargetserver(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTargetserversServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsTargetserver(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTargetserversServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTargetserver); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsEnvironmentsTargetserver(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTargetserversServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsEnvironmentsTargetserverRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTargetserver); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsEnvironmentsTargetserver(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTraceConfigOverridesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTraceConfigOverride); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTraceConfigOverridesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTraceConfigOverride); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTraceConfigOverridesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTraceConfigOverridesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTraceConfigOverridesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTraceConfigOverridesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTraceConfigOverridesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsTraceConfigOverridesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsEnvironmentsTraceConfigOverrides(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTraceConfigOverridesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsEnvironmentsTraceConfigOverridesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsEnvironmentsTraceConfigOverrides(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_environments_trace_config_override": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsEnvironmentsTraceConfigOverridesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTraceConfigOverride); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsEnvironmentsTraceConfigOverridesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsEnvironmentsTraceConfigOverrideRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsEnvironmentsTraceConfigOverride); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsEnvironmentsTraceConfigOverride(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsHostQuery); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsHostQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsHostQuery); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsHostQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsHostQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsHostQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultOrganizationsHostQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultOrganizationsHostQuery(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultViewOrganizationsHostQuery(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsHostQueryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultViewOrganizationsHostQuery(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostQueriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsHostQueriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsHostQueries(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostQueriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsHostQueriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsHostQueries(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsHostSecurityReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsHostSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsHostSecurityReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsHostSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsHostSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsHostSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultOrganizationsHostSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultOrganizationsHostSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetResultViewOrganizationsHostSecurityReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetResultViewOrganizationsHostSecurityReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetResultViewOrganizationsHostSecurityReport(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostSecurityReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsHostSecurityReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsHostSecurityReports(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostSecurityReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsHostSecurityReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsHostSecurityReports(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsHostStatsServer_GetOrganizationsHostStat_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsHostStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostStatsServer_GetOrganizationsHostStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsHostStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsHostStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsHostStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsHostStatsServer_GetOrganizationsHostStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsHostStat(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesServer_CreateOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsInstance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_CreateOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsInstance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsInstance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsInstance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesServer_GetOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsInstance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_GetOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsInstance(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsInstancesServer_ListOrganizationsInstances_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsInstancesServer_ListOrganizationsInstances_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesServer_ListOrganizationsInstances_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsInstances(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_ListOrganizationsInstances_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesServer_ListOrganizationsInstances_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsInstances(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsInstancesServer_PatchOrganizationsInstance_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_instance": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsInstancesServer_PatchOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesServer_PatchOrganizationsInstance_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsInstance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_PatchOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesServer_PatchOrganizationsInstance_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsInstance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ReportStatusOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["instance"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "instance")
	}

	protoReq.Instance, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "instance", err)
	}

	msg, err := client.ReportStatusOrganizationsInstance(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ReportStatusOrganizationsInstanceRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstance); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["instance"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "instance")
	}

	protoReq.Instance, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "instance", err)
	}

	msg, err := server.ReportStatusOrganizationsInstance(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsInstancesAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesAttachment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsInstancesAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsInstancesAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsInstancesAttachment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsInstancesAttachment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesAttachmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsInstancesAttachment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesAttachmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsInstancesAttachments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesAttachmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesAttachmentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsInstancesAttachments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesCanaryevaluationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesCanaryevaluationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesCanaryevaluation); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsInstancesCanaryevaluation(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesCanaryevaluationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesCanaryevaluationRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesCanaryevaluation); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsInstancesCanaryevaluation(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesCanaryevaluationsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesCanaryevaluationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsInstancesCanaryevaluation(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesCanaryevaluationsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesCanaryevaluationRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsInstancesCanaryevaluation(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesNatAddressesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ActivateOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesNatAddresse); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.ActivateOrganizationsInstancesNatAddresse(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesNatAddressesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ActivateOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesNatAddresse); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.ActivateOrganizationsInstancesNatAddresse(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesNatAddressesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesNatAddresse); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsInstancesNatAddresse(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesNatAddressesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsInstancesNatAddresse); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsInstancesNatAddresse(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesNatAddressesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsInstancesNatAddresse(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesNatAddressesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsInstancesNatAddresse(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesNatAddressesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsInstancesNatAddresse(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesNatAddressesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsInstancesNatAddresseRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsInstancesNatAddresse(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsInstancesNatAddressesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesNatAddressesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsInstancesNatAddresses(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsInstancesNatAddressesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsInstancesNatAddressesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsInstancesNatAddresses(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemap); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsKeyvaluemap(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsKeyvaluemapRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsKeyvaluemap(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsKeyvaluemapsEntries(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsKeyvaluemapsEntriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsKeyvaluemapsEntries(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsKeyvaluemapsEntriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsKeyvaluemapsEntry(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsKeyvaluemapsEntriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsKeyvaluemapsEntryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsKeyvaluemapsEntry); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsKeyvaluemapsEntry(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsOptimizedHostStatsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsOptimizedHostStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsOptimizedHostStat(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsOptimizedHostStatsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsOptimizedHostStatRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsOptimizedHostStat(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsReportsServer_CreateOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsReportsServer_CreateOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsReportsServer_DeleteOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsReportsServer_DeleteOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsReportsServer_GetOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsReportsServer_GetOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsReport(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsReportsServer_ListOrganizationsReports_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsReportsServer_ListOrganizationsReports_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsReportsServer_ListOrganizationsReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsReports(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsReportsServer_ListOrganizationsReports_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsReportsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsReportsServer_ListOrganizationsReports_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsReports(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsReportsServer_UpdateOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsReportsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsReport(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsReportsServer_UpdateOrganizationsReport_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsReportsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsReportRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsReport); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsReport(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityAssessmentResultsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BatchComputeOrganizationsSecurityAssessmentResultRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityAssessmentResult); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.BatchComputeOrganizationsSecurityAssessmentResult(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityAssessmentResultsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq BatchComputeOrganizationsSecurityAssessmentResultRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityAssessmentResult); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.BatchComputeOrganizationsSecurityAssessmentResult(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_security_profile": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsSecurityProfile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsSecurityProfile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSecurityProfile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSecurityProfile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsSecurityProfile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsSecurityProfile(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSecurityProfilesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsSecurityProfiles(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSecurityProfilesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsSecurityProfiles(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListRevisionsOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListRevisionsOrganizationsSecurityProfile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListRevisionsOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListRevisionsOrganizationsSecurityProfile(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_security_profile": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsSecurityProfile(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSecurityProfileRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfile); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsSecurityProfile(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["profile_environment"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "profile_environment")
	}

	protoReq.ProfileEnvironment, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "profile_environment", err)
	}

	msg, err := client.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["profile_environment"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "profile_environment")
	}

	protoReq.ProfileEnvironment, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "profile_environment", err)
	}

	msg, err := server.ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsSecurityProfilesEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesEnvironment); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsSecurityProfilesEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesEnvironmentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSecurityProfilesEnvironment(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesEnvironmentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfilesEnvironmentRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSecurityProfilesEnvironment(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_security_profiles_v2": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesV2ServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesV2); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsSecurityProfilesV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesV2ServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesV2); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsSecurityProfilesV2(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesV2ServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSecurityProfilesV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesV2ServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSecurityProfilesV2(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesV2ServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsSecurityProfilesV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesV2ServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsSecurityProfilesV2(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesV2ServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsSecurityProfilesV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesV2ServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsSecurityProfilesV2(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_security_profiles_v2": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSecurityProfilesV2ServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesV2); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.PatchOrganizationsSecurityProfilesV2(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSecurityProfilesV2ServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSecurityProfilesV2Request
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSecurityProfilesV2); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.PatchOrganizationsSecurityProfilesV2(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_sharedflow": 0, "parent": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSharedflow); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.CreateOrganizationsSharedflow(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSharedflow); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.CreateOrganizationsSharedflow(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSharedflow(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSharedflow(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsSharedflow(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSharedflowRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsSharedflow(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsSharedflows(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsSharedflows(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsSharedflowsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsSharedflowsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"name": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.GetOrganizationsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.GetOrganizationsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0 = &utilities.DoubleArray{Encoding: map[string]int{"organizations_sharedflows_revision": 0, "name": 1}, Base: []int{1, 1, 2, 0, 0}, Check: []int{0, 1, 1, 2, 3}}
)

func request_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsRevisionsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSharedflowsRevision); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsRevisionsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateSharedFlowRevisionOrganizationsSharedflowsRevisionRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSharedflowsRevision); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.UpdateSharedFlowRevisionOrganizationsSharedflowsRevision(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSharedflowsRevisionsDeploymentsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsRevisionsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsSharedflowsRevisionsDeployments(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSharedflowsRevisionsDeploymentsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSharedflowsRevisionsDeploymentsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsSharedflowsRevisionsDeployments(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApicategoriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApicategory); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsSitesApicategory(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApicategoriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApicategory); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsSitesApicategory(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApicategoriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSitesApicategory(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApicategoriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSitesApicategory(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApicategoriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsSitesApicategory(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApicategoriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsSitesApicategory(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApicategoriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSitesApicategoriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.ListOrganizationsSitesApicategories(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApicategoriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSitesApicategoriesRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.ListOrganizationsSitesApicategories(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApicategoriesServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApicategory); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.PatchOrganizationsSitesApicategory(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApicategoriesServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq PatchOrganizationsSitesApicategoryRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApicategory); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.PatchOrganizationsSitesApicategory(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := client.CreateOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq CreateOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	msg, err := server.CreateOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.DeleteOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq DeleteOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.DeleteOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDocumentationOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.GetDocumentationOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq GetDocumentationOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.GetDocumentationOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

var (
	filter_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0 = &utilities.DoubleArray{Encoding: map[string]int{"parent": 0}, Base: []int{1, 1, 0}, Check: []int{0, 1, 2}}
)

func request_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSitesApidocsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := client.ListOrganizationsSitesApidocs(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ListOrganizationsSitesApidocsRequest
	var metadata runtime.ServerMetadata

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["parent"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "parent")
	}

	protoReq.Parent, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "parent", err)
	}

	if err := req.ParseForm(); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}
	if err := runtime.PopulateQueryParameters(&protoReq, req.Form, filter_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0); err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	msg, err := server.ListOrganizationsSitesApidocs(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

func request_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, client OrganizationsSitesApidocsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDocumentationOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.UpdateDocumentationOrganizationsSitesApidoc(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(ctx context.Context, marshaler runtime.Marshaler, server OrganizationsSitesApidocsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq UpdateDocumentationOrganizationsSitesApidocRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.OrganizationsSitesApidoc); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.UpdateDocumentationOrganizationsSitesApidoc(ctx, &protoReq)
	return msg, metadata, err

}

func request_ProjectsServer_ProvisionOrganizationProject_0(ctx context.Context, marshaler runtime.Marshaler, client ProjectsServerClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ProvisionOrganizationProjectRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Project); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := client.ProvisionOrganizationProject(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err

}

func local_request_ProjectsServer_ProvisionOrganizationProject_0(ctx context.Context, marshaler runtime.Marshaler, server ProjectsServerServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var protoReq ProvisionOrganizationProjectRequest
	var metadata runtime.ServerMetadata

	newReader, berr := utilities.IOReaderFactory(req.Body)
	if berr != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", berr)
	}
	if err := marshaler.NewDecoder(newReader()).Decode(&protoReq.Project); err != nil && err != io.EOF {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "%v", err)
	}

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["name"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "name")
	}

	protoReq.Name, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "name", err)
	}

	msg, err := server.ProvisionOrganizationProject(ctx, &protoReq)
	return msg, metadata, err

}

// RegisterHybridIssuersServerHandlerServer registers the http handlers for service HybridIssuersServer to "mux".
// UnaryRPC     :call HybridIssuersServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterHybridIssuersServerHandlerFromEndpoint instead.
func RegisterHybridIssuersServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server HybridIssuersServerServer) error {

	mux.Handle("GET", pattern_HybridIssuersServer_ListHybridIssuers_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.HybridIssuersServer/ListHybridIssuers", runtime.WithHTTPPathPattern("/v1/{name=hybrid/issuers}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_HybridIssuersServer_ListHybridIssuers_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HybridIssuersServer_ListHybridIssuers_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsServerHandlerServer registers the http handlers for service OrganizationsServer to "mux".
// UnaryRPC     :call OrganizationsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsServerHandlerFromEndpoint instead.
func RegisterOrganizationsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsServer_CreateOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/CreateOrganization", runtime.WithHTTPPathPattern("/v1/organizations"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_CreateOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_CreateOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsServer_DeleteOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/DeleteOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_DeleteOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_DeleteOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetControlPlaneAccessOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetControlPlaneAccessOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/controlPlaneAccess}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetControlPlaneAccessOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetControlPlaneAccessOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetDeployedIngressConfigOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetDeployedIngressConfigOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/deployedIngressConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetDeployedIngressConfigOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetDeployedIngressConfigOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetProjectMappingOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetProjectMappingOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:getProjectMapping"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetProjectMappingOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetProjectMappingOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetRuntimeConfigOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetRuntimeConfigOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/runtimeConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetRuntimeConfigOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetRuntimeConfigOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetSecuritySettingsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSecuritySettingsOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securitySettings}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetSecuritySettingsOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetSecuritySettingsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_GetSyncAuthorizationOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSyncAuthorizationOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:getSyncAuthorization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_GetSyncAuthorizationOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetSyncAuthorizationOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_ListOrganizations_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/ListOrganizations", runtime.WithHTTPPathPattern("/v1/{parent=organizations}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_ListOrganizations_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_ListOrganizations_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_SetAddonsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetAddonsOrganization", runtime.WithHTTPPathPattern("/v1/{org=organizations/*}:setAddons"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_SetAddonsOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_SetAddonsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_SetSyncAuthorizationOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetSyncAuthorizationOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:setSyncAuthorization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_SetSyncAuthorizationOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_SetSyncAuthorizationOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsServer_UpdateOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_UpdateOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsServer_UpdateControlPlaneAccessOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateControlPlaneAccessOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/controlPlaneAccess}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsServer_UpdateSecuritySettingsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateSecuritySettingsOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securitySettings}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsServer_UpdateSecuritySettingsOrganization_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateSecuritySettingsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAnalyticsDatastoresServerHandlerServer registers the http handlers for service OrganizationsAnalyticsDatastoresServer to "mux".
// UnaryRPC     :call OrganizationsAnalyticsDatastoresServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAnalyticsDatastoresServerHandlerFromEndpoint instead.
func RegisterOrganizationsAnalyticsDatastoresServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAnalyticsDatastoresServerServer) error {

	mux.Handle("POST", pattern_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/CreateOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/DeleteOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/GetOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/ListOrganizationsAnalyticsDatastores", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/TestOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores:test"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/UpdateOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApiproductsServerHandlerServer registers the http handlers for service OrganizationsApiproductsServer to "mux".
// UnaryRPC     :call OrganizationsApiproductsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApiproductsServerHandlerFromEndpoint instead.
func RegisterOrganizationsApiproductsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApiproductsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/AttributesOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/CreateOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apiproducts"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/DeleteOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/GetOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/ListOrganizationsApiproducts", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apiproducts"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/UpdateOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApiproductsAttributesServerHandlerServer registers the http handlers for service OrganizationsApiproductsAttributesServer to "mux".
// UnaryRPC     :call OrganizationsApiproductsAttributesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApiproductsAttributesServerHandlerFromEndpoint instead.
func RegisterOrganizationsApiproductsAttributesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApiproductsAttributesServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/DeleteOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/GetOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/ListOrganizationsApiproductsAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/UpdateApiProductAttributeOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApiproductsRateplansServerHandlerServer registers the http handlers for service OrganizationsApiproductsRateplansServer to "mux".
// UnaryRPC     :call OrganizationsApiproductsRateplansServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApiproductsRateplansServerHandlerFromEndpoint instead.
func RegisterOrganizationsApiproductsRateplansServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApiproductsRateplansServerServer) error {

	mux.Handle("POST", pattern_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/CreateOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/rateplans"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/DeleteOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/GetOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/ListOrganizationsApiproductsRateplans", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/rateplans"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/UpdateOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisServerHandlerServer registers the http handlers for service OrganizationsApisServer to "mux".
// UnaryRPC     :call OrganizationsApisServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisServerServer) error {

	mux.Handle("POST", pattern_OrganizationsApisServer_CreateOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/CreateOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apis"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisServer_CreateOrganizationsApi_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_CreateOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisServer_DeleteOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/DeleteOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisServer_DeleteOrganizationsApi_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_DeleteOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisServer_GetOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/GetOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisServer_GetOrganizationsApi_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_GetOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisServer_ListOrganizationsApis_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/ListOrganizationsApis", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apis"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisServer_ListOrganizationsApis_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_ListOrganizationsApis_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsApisServer_PatchOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/PatchOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisServer_PatchOrganizationsApi_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_PatchOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisDeploymentsServerHandlerServer registers the http handlers for service OrganizationsApisDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsApisDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer/ListOrganizationsApisDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisKeyvaluemapsServerHandlerServer registers the http handlers for service OrganizationsApisKeyvaluemapsServer to "mux".
// UnaryRPC     :call OrganizationsApisKeyvaluemapsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisKeyvaluemapsServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisKeyvaluemapsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisKeyvaluemapsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/CreateOrganizationsApisKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/DeleteOrganizationsApisKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerServer registers the http handlers for service OrganizationsApisKeyvaluemapsEntriesServer to "mux".
// UnaryRPC     :call OrganizationsApisKeyvaluemapsEntriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisKeyvaluemapsEntriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/CreateOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/DeleteOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/GetOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/ListOrganizationsApisKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/UpdateOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisRevisionsServerHandlerServer registers the http handlers for service OrganizationsApisRevisionsServer to "mux".
// UnaryRPC     :call OrganizationsApisRevisionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisRevisionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisRevisionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisRevisionsServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/DeleteOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/GetOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/UpdateApiProxyRevisionOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsApisRevisionsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsApisRevisionsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsApisRevisionsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsApisRevisionsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsApisRevisionsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsApisRevisionsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer/ListOrganizationsApisRevisionsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAppgroupsServerHandlerServer registers the http handlers for service OrganizationsAppgroupsServer to "mux".
// UnaryRPC     :call OrganizationsAppgroupsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAppgroupsServerHandlerFromEndpoint instead.
func RegisterOrganizationsAppgroupsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAppgroupsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/CreateOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/appgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/DeleteOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/GetOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/ListOrganizationsAppgroups", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/appgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/UpdateOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAppgroupsAppsServerHandlerServer registers the http handlers for service OrganizationsAppgroupsAppsServer to "mux".
// UnaryRPC     :call OrganizationsAppgroupsAppsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAppgroupsAppsServerHandlerFromEndpoint instead.
func RegisterOrganizationsAppgroupsAppsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAppgroupsAppsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/CreateOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/DeleteOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/GetOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/ListOrganizationsAppgroupsApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/UpdateOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAppgroupsAppsKeysServerHandlerServer registers the http handlers for service OrganizationsAppgroupsAppsKeysServer to "mux".
// UnaryRPC     :call OrganizationsAppgroupsAppsKeysServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAppgroupsAppsKeysServerHandlerFromEndpoint instead.
func RegisterOrganizationsAppgroupsAppsKeysServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAppgroupsAppsKeysServerServer) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/CreateOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*/apps/*}/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/DeleteOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/GetOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerServer registers the http handlers for service OrganizationsAppgroupsAppsKeysApiproductsServer to "mux".
// UnaryRPC     :call OrganizationsAppgroupsAppsKeysApiproductsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerFromEndpoint instead.
func RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAppgroupsAppsKeysApiproductsServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/DeleteOrganizationsAppgroupsAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsAppsServerHandlerServer registers the http handlers for service OrganizationsAppsServer to "mux".
// UnaryRPC     :call OrganizationsAppsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsAppsServerHandlerFromEndpoint instead.
func RegisterOrganizationsAppsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsAppsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsAppsServer_GetOrganizationsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/GetOrganizationsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppsServer_GetOrganizationsApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppsServer_GetOrganizationsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppsServer_ListOrganizationsApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/ListOrganizationsApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsAppsServer_ListOrganizationsApps_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppsServer_ListOrganizationsApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDatacollectorsServerHandlerServer registers the http handlers for service OrganizationsDatacollectorsServer to "mux".
// UnaryRPC     :call OrganizationsDatacollectorsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDatacollectorsServerHandlerFromEndpoint instead.
func RegisterOrganizationsDatacollectorsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDatacollectorsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/CreateOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/datacollectors"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/DeleteOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/GetOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/ListOrganizationsDatacollectors", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/datacollectors"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/PatchOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer/ListOrganizationsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersServerHandlerServer registers the http handlers for service OrganizationsDevelopersServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/AttributesOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/CreateOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/developers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/DeleteOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetBalanceOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetMonetizationConfigOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/monetizationConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/ListOrganizationsDevelopers", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/developers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/SetDeveloperStatusOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateMonetizationConfigOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/monetizationConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAppsServerHandlerServer registers the http handlers for service OrganizationsDevelopersAppsServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAppsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAppsServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAppsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAppsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/AttributesOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/CreateOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/DeleteOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GetOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/ListOrganizationsDevelopersApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/UpdateOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAppsAttributesServerHandlerServer registers the http handlers for service OrganizationsDevelopersAppsAttributesServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAppsAttributesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAppsAttributesServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAppsAttributesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAppsAttributesServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/DeleteOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/GetOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/ListOrganizationsDevelopersAppsAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAppsKeysServerHandlerServer registers the http handlers for service OrganizationsDevelopersAppsKeysServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAppsKeysServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAppsKeysServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAppsKeysServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAppsKeysServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/CreateOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/DeleteOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/GetOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerServer registers the http handlers for service OrganizationsDevelopersAppsKeysApiproductsServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAppsKeysApiproductsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAppsKeysApiproductsServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/DeleteOrganizationsDevelopersAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerServer registers the http handlers for service OrganizationsDevelopersAppsKeysCreateServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAppsKeysCreateServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAppsKeysCreateServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer/CreateOrganizationsDevelopersAppsKeysCreate", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/keys/create"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersAttributesServerHandlerServer registers the http handlers for service OrganizationsDevelopersAttributesServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersAttributesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersAttributesServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersAttributesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersAttributesServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/DeleteOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/GetOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/ListOrganizationsDevelopersAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/UpdateDeveloperAttributeOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersBalanceServerHandlerServer registers the http handlers for service OrganizationsDevelopersBalanceServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersBalanceServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersBalanceServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersBalanceServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersBalanceServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/AdjustOrganizationsDevelopersBalance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}:adjust"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/CreditOrganizationsDevelopersBalance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}:credit"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsDevelopersSubscriptionsServerHandlerServer registers the http handlers for service OrganizationsDevelopersSubscriptionsServer to "mux".
// UnaryRPC     :call OrganizationsDevelopersSubscriptionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsDevelopersSubscriptionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsDevelopersSubscriptionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsDevelopersSubscriptionsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/CreateOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/subscriptions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ExpireOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/subscriptions/*}:expire"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/GetOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/subscriptions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ListOrganizationsDevelopersSubscriptions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/subscriptions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEndpointAttachmentsServerHandlerServer registers the http handlers for service OrganizationsEndpointAttachmentsServer to "mux".
// UnaryRPC     :call OrganizationsEndpointAttachmentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEndpointAttachmentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEndpointAttachmentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEndpointAttachmentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/CreateOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/endpointAttachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/DeleteOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/endpointAttachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/GetOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/endpointAttachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/ListOrganizationsEndpointAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/endpointAttachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvgroupsServerHandlerServer registers the http handlers for service OrganizationsEnvgroupsServer to "mux".
// UnaryRPC     :call OrganizationsEnvgroupsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvgroupsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvgroupsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvgroupsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/CreateOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/envgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/DeleteOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetDeployedIngressConfigOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/deployedIngressConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/ListOrganizationsEnvgroups", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/envgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/PatchOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvgroupsAttachmentsServerHandlerServer registers the http handlers for service OrganizationsEnvgroupsAttachmentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvgroupsAttachmentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvgroupsAttachmentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvgroupsAttachmentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvgroupsAttachmentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/CreateOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/envgroups/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/DeleteOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/GetOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/ListOrganizationsEnvgroupsAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/envgroups/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/CreateOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/environments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/DeleteOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetAddonsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/addonsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetApiSecurityRuntimeConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apiSecurityRuntimeConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDebugmaskOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/debugmask}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDeployedConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/deployedConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetSecurityActionsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActionsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetTraceConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/ModifyEnvironmentOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/SubscribeOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}:subscribe"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UnsubscribeOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}:unsubscribe"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateDebugmaskOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/debugmask}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateEnvironmentOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateSecurityActionsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActionsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateTraceConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsAddonsConfigServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsAddonsConfigServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsAddonsConfigServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer/SetAddonEnablementOrganizationsEnvironmentsAddonsConfig", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/addonsConfig}:setAddonEnablement"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsAnalyticsAdminServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsAnalyticsAdminServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsAnalyticsAdminServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer/GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/analytics/admin/schemav2}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsAnalyticsExportsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsAnalyticsExportsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsAnalyticsExportsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/CreateOrganizationsEnvironmentsAnalyticsExport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/analytics/exports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/GetOrganizationsEnvironmentsAnalyticsExport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/analytics/exports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/ListOrganizationsEnvironmentsAnalyticsExports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/analytics/exports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsApisDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsApisDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsApisDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer/ListOrganizationsEnvironmentsApisDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsApisRevisionsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsApisRevisionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsApisRevisionsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/DeployOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/GetDeploymentsOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/UndeployOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsApisRevisionsDebugsessionsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/CreateOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*/revisions/*}/debugsessions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*}/data"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/GetOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/ListOrganizationsEnvironmentsApisRevisionsDebugsessions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*/revisions/*}/debugsessions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer/GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*/data/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsApisRevisionsDeploymentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments:generateDeployChangeReport"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments:generateUndeployChangeReport"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsArchiveDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsArchiveDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsArchiveDeploymentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/CreateOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/DeleteOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}:generateDownloadUrl"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments:generateUploadUrl"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GetOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/ListOrganizationsEnvironmentsArchiveDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/PatchOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsCachesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsCachesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsCachesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsCachesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsCachesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsCachesServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer/DeleteOrganizationsEnvironmentsCache", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/caches/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/GetOrganizationsEnvironmentsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/deployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/ListOrganizationsEnvironmentsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsFlowhooksServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsFlowhooksServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsFlowhooksServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsFlowhooksServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsFlowhooksServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsFlowhooksServerServer) error {

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/GetOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsKeystoresServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsKeystoresServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsKeystoresServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsKeystoresServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsKeystoresServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsKeystoresServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/CreateOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/keystores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/DeleteOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/GetOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsKeystoresAliasesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsKeystoresAliasesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsKeystoresAliasesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CreateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keystores/*}/aliases"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CsrOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}/csr"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/DeleteOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetCertificateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}/certificate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/UpdateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsKeyvaluemapsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsKeyvaluemapsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/CreateOrganizationsEnvironmentsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/DeleteOrganizationsEnvironmentsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsEntriesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsKeyvaluemapsEntriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/CreateOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/DeleteOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/GetOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/ListOrganizationsEnvironmentsKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/UpdateOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsOptimizedStatsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsOptimizedStatsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsOptimizedStatsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer/GetOrganizationsEnvironmentsOptimizedStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/optimizedStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsQueriesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsQueriesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsQueriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsQueriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsQueriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsQueriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/CreateOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/queries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResultOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResulturlOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*/resulturl}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/ListOrganizationsEnvironmentsQueries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/queries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsReferencesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsReferencesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsReferencesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsReferencesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsReferencesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsReferencesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/CreateOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/references"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/DeleteOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/GetOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/UpdateOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsResourcefilesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsResourcefilesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsResourcefilesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsResourcefilesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsResourcefilesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsResourcefilesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/CreateOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/DeleteOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/GetOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListOrganizationsEnvironmentsResourcefiles", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/UpdateOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSecurityActionsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSecurityActionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSecurityActionsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/CreateOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityActions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/DisableOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}:disable"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/EnableOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}:enable"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/GetOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/ListOrganizationsEnvironmentsSecurityActions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityActions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSecurityIncidentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSecurityIncidentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSecurityIncidentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/BatchUpdateOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityIncidents:batchUpdate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/GetOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityIncidents/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/ListOrganizationsEnvironmentsSecurityIncidents", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityIncidents"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/PatchOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityIncidents/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSecurityReportsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSecurityReportsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSecurityReportsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/CreateOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultViewOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/ListOrganizationsEnvironmentsSecurityReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSecurityStatsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSecurityStatsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSecurityStatsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTabularStatsOrganizationsEnvironmentsSecurityStat", runtime.WithHTTPPathPattern("/v1/{orgenv=organizations/*/environments/*}/securityStats:queryTabularStats"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat", runtime.WithHTTPPathPattern("/v1/{orgenv=organizations/*/environments/*}/securityStats:queryTimeSeriesStats"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSharedflowsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSharedflowsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSharedflowsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer/ListOrganizationsEnvironmentsSharedflowsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/sharedflows/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsSharedflowsRevisionsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsSharedflowsRevisionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsSharedflowsRevisionsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/DeployOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/UndeployOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsStatsServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsStatsServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsStatsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsStatsServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsStatsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsStatsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer/GetOrganizationsEnvironmentsStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/stats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsTargetserversServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsTargetserversServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsTargetserversServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsTargetserversServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsTargetserversServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsTargetserversServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/CreateOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/targetservers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/DeleteOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/GetOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/UpdateOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerServer registers the http handlers for service OrganizationsEnvironmentsTraceConfigOverridesServer to "mux".
// UnaryRPC     :call OrganizationsEnvironmentsTraceConfigOverridesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerFromEndpoint instead.
func RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsEnvironmentsTraceConfigOverridesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/CreateOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/traceConfig}/overrides"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/DeleteOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/GetOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/ListOrganizationsEnvironmentsTraceConfigOverrides", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/traceConfig}/overrides"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/PatchOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsHostQueriesServerHandlerServer registers the http handlers for service OrganizationsHostQueriesServer to "mux".
// UnaryRPC     :call OrganizationsHostQueriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsHostQueriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsHostQueriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsHostQueriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/CreateOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostQueries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultViewOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/ListOrganizationsHostQueries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostQueries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsHostSecurityReportsServerHandlerServer registers the http handlers for service OrganizationsHostSecurityReportsServer to "mux".
// UnaryRPC     :call OrganizationsHostSecurityReportsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsHostSecurityReportsServerHandlerFromEndpoint instead.
func RegisterOrganizationsHostSecurityReportsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsHostSecurityReportsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/CreateOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostSecurityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultViewOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/ListOrganizationsHostSecurityReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostSecurityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsHostStatsServerHandlerServer registers the http handlers for service OrganizationsHostStatsServer to "mux".
// UnaryRPC     :call OrganizationsHostStatsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsHostStatsServerHandlerFromEndpoint instead.
func RegisterOrganizationsHostStatsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsHostStatsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsHostStatsServer_GetOrganizationsHostStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer/GetOrganizationsHostStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsInstancesServerHandlerServer registers the http handlers for service OrganizationsInstancesServer to "mux".
// UnaryRPC     :call OrganizationsInstancesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsInstancesServerHandlerFromEndpoint instead.
func RegisterOrganizationsInstancesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsInstancesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsInstancesServer_CreateOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/CreateOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/instances"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_CreateOrganizationsInstance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_CreateOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesServer_DeleteOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/DeleteOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesServer_GetOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/GetOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_GetOrganizationsInstance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_GetOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesServer_ListOrganizationsInstances_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ListOrganizationsInstances", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/instances"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_ListOrganizationsInstances_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_ListOrganizationsInstances_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsInstancesServer_PatchOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/PatchOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_PatchOrganizationsInstance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_PatchOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ReportStatusOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{instance=organizations/*/instances/*}:reportStatus"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsInstancesAttachmentsServerHandlerServer registers the http handlers for service OrganizationsInstancesAttachmentsServer to "mux".
// UnaryRPC     :call OrganizationsInstancesAttachmentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsInstancesAttachmentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsInstancesAttachmentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsInstancesAttachmentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/CreateOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/DeleteOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/GetOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/ListOrganizationsInstancesAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsInstancesCanaryevaluationsServerHandlerServer registers the http handlers for service OrganizationsInstancesCanaryevaluationsServer to "mux".
// UnaryRPC     :call OrganizationsInstancesCanaryevaluationsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsInstancesCanaryevaluationsServerHandlerFromEndpoint instead.
func RegisterOrganizationsInstancesCanaryevaluationsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsInstancesCanaryevaluationsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/CreateOrganizationsInstancesCanaryevaluation", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/canaryevaluations"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/GetOrganizationsInstancesCanaryevaluation", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/canaryevaluations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsInstancesNatAddressesServerHandlerServer registers the http handlers for service OrganizationsInstancesNatAddressesServer to "mux".
// UnaryRPC     :call OrganizationsInstancesNatAddressesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsInstancesNatAddressesServerHandlerFromEndpoint instead.
func RegisterOrganizationsInstancesNatAddressesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsInstancesNatAddressesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ActivateOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}:activate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/CreateOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/natAddresses"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/DeleteOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/GetOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ListOrganizationsInstancesNatAddresses", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/natAddresses"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsKeyvaluemapsServerHandlerServer registers the http handlers for service OrganizationsKeyvaluemapsServer to "mux".
// UnaryRPC     :call OrganizationsKeyvaluemapsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsKeyvaluemapsServerHandlerFromEndpoint instead.
func RegisterOrganizationsKeyvaluemapsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsKeyvaluemapsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/CreateOrganizationsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/DeleteOrganizationsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsKeyvaluemapsEntriesServerHandlerServer registers the http handlers for service OrganizationsKeyvaluemapsEntriesServer to "mux".
// UnaryRPC     :call OrganizationsKeyvaluemapsEntriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsKeyvaluemapsEntriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsKeyvaluemapsEntriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsKeyvaluemapsEntriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/CreateOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/DeleteOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/GetOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/ListOrganizationsKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/UpdateOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsOptimizedHostStatsServerHandlerServer registers the http handlers for service OrganizationsOptimizedHostStatsServer to "mux".
// UnaryRPC     :call OrganizationsOptimizedHostStatsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsOptimizedHostStatsServerHandlerFromEndpoint instead.
func RegisterOrganizationsOptimizedHostStatsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsOptimizedHostStatsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer/GetOrganizationsOptimizedHostStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/optimizedHostStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsReportsServerHandlerServer registers the http handlers for service OrganizationsReportsServer to "mux".
// UnaryRPC     :call OrganizationsReportsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsReportsServerHandlerFromEndpoint instead.
func RegisterOrganizationsReportsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsReportsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsReportsServer_CreateOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/CreateOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/reports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsReportsServer_CreateOrganizationsReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_CreateOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsReportsServer_DeleteOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/DeleteOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsReportsServer_DeleteOrganizationsReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_DeleteOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsReportsServer_GetOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/GetOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsReportsServer_GetOrganizationsReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_GetOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsReportsServer_ListOrganizationsReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/ListOrganizationsReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/reports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsReportsServer_ListOrganizationsReports_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_ListOrganizationsReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsReportsServer_UpdateOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/UpdateOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsReportsServer_UpdateOrganizationsReport_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_UpdateOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSecurityAssessmentResultsServerHandlerServer registers the http handlers for service OrganizationsSecurityAssessmentResultsServer to "mux".
// UnaryRPC     :call OrganizationsSecurityAssessmentResultsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSecurityAssessmentResultsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSecurityAssessmentResultsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSecurityAssessmentResultsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer/BatchComputeOrganizationsSecurityAssessmentResult", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityAssessmentResults}:batchCompute"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSecurityProfilesServerHandlerServer registers the http handlers for service OrganizationsSecurityProfilesServer to "mux".
// UnaryRPC     :call OrganizationsSecurityProfilesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSecurityProfilesServerHandlerFromEndpoint instead.
func RegisterOrganizationsSecurityProfilesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSecurityProfilesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/CreateOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/DeleteOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/GetOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListOrganizationsSecurityProfiles", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListRevisionsOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}:listRevisions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/PatchOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerServer registers the http handlers for service OrganizationsSecurityProfilesEnvironmentsServer to "mux".
// UnaryRPC     :call OrganizationsSecurityProfilesEnvironmentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSecurityProfilesEnvironmentsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{profile_environment=*}:computeEnvironmentScores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/CreateOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/securityProfiles/*}/environments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/DeleteOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSecurityProfilesV2ServerHandlerServer registers the http handlers for service OrganizationsSecurityProfilesV2Server to "mux".
// UnaryRPC     :call OrganizationsSecurityProfilesV2ServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSecurityProfilesV2ServerHandlerFromEndpoint instead.
func RegisterOrganizationsSecurityProfilesV2ServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSecurityProfilesV2ServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/CreateOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfilesV2"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/DeleteOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/GetOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/ListOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfilesV2"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/PatchOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSharedflowsServerHandlerServer registers the http handlers for service OrganizationsSharedflowsServer to "mux".
// UnaryRPC     :call OrganizationsSharedflowsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSharedflowsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSharedflowsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSharedflowsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/CreateOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/sharedflows"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/DeleteOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/GetOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/ListOrganizationsSharedflows", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/sharedflows"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSharedflowsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsSharedflowsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsSharedflowsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSharedflowsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSharedflowsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSharedflowsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer/ListOrganizationsSharedflowsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sharedflows/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSharedflowsRevisionsServerHandlerServer registers the http handlers for service OrganizationsSharedflowsRevisionsServer to "mux".
// UnaryRPC     :call OrganizationsSharedflowsRevisionsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSharedflowsRevisionsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSharedflowsRevisionsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSharedflowsRevisionsServerServer) error {

	mux.Handle("DELETE", pattern_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/DeleteOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/GetOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/UpdateSharedFlowRevisionOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerServer registers the http handlers for service OrganizationsSharedflowsRevisionsDeploymentsServer to "mux".
// UnaryRPC     :call OrganizationsSharedflowsRevisionsDeploymentsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSharedflowsRevisionsDeploymentsServerServer) error {

	mux.Handle("GET", pattern_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer/ListOrganizationsSharedflowsRevisionsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSitesApicategoriesServerHandlerServer registers the http handlers for service OrganizationsSitesApicategoriesServer to "mux".
// UnaryRPC     :call OrganizationsSitesApicategoriesServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSitesApicategoriesServerHandlerFromEndpoint instead.
func RegisterOrganizationsSitesApicategoriesServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSitesApicategoriesServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/CreateOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apicategories"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/DeleteOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/GetOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/ListOrganizationsSitesApicategories", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apicategories"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/PatchOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterOrganizationsSitesApidocsServerHandlerServer registers the http handlers for service OrganizationsSitesApidocsServer to "mux".
// UnaryRPC     :call OrganizationsSitesApidocsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterOrganizationsSitesApidocsServerHandlerFromEndpoint instead.
func RegisterOrganizationsSitesApidocsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server OrganizationsSitesApidocsServerServer) error {

	mux.Handle("POST", pattern_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/CreateOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apidocs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/DeleteOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetDocumentationOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*/documentation}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/ListOrganizationsSitesApidocs", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apidocs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateDocumentationOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*/documentation}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterProjectsServerHandlerServer registers the http handlers for service ProjectsServer to "mux".
// UnaryRPC     :call ProjectsServerServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterProjectsServerHandlerFromEndpoint instead.
func RegisterProjectsServerHandlerServer(ctx context.Context, mux *runtime.ServeMux, server ProjectsServerServer) error {

	mux.Handle("POST", pattern_ProjectsServer_ProvisionOrganizationProject_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateIncomingContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.ProjectsServer/ProvisionOrganizationProject", runtime.WithHTTPPathPattern("/v1/{name=projects/*}:provisionOrganization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_ProjectsServer_ProvisionOrganizationProject_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ProjectsServer_ProvisionOrganizationProject_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

// RegisterHybridIssuersServerHandlerFromEndpoint is same as RegisterHybridIssuersServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterHybridIssuersServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterHybridIssuersServerHandler(ctx, mux, conn)
}

// RegisterHybridIssuersServerHandler registers the http handlers for service HybridIssuersServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterHybridIssuersServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterHybridIssuersServerHandlerClient(ctx, mux, NewHybridIssuersServerClient(conn))
}

// RegisterHybridIssuersServerHandlerClient registers the http handlers for service HybridIssuersServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "HybridIssuersServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "HybridIssuersServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "HybridIssuersServerClient" to call the correct interceptors.
func RegisterHybridIssuersServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client HybridIssuersServerClient) error {

	mux.Handle("GET", pattern_HybridIssuersServer_ListHybridIssuers_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.HybridIssuersServer/ListHybridIssuers", runtime.WithHTTPPathPattern("/v1/{name=hybrid/issuers}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_HybridIssuersServer_ListHybridIssuers_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_HybridIssuersServer_ListHybridIssuers_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_HybridIssuersServer_ListHybridIssuers_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 4, 2, 5, 3}, []string{"v1", "hybrid", "issuers", "name"}, ""))
)

var (
	forward_HybridIssuersServer_ListHybridIssuers_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsServerHandlerFromEndpoint is same as RegisterOrganizationsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsServerHandler registers the http handlers for service OrganizationsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsServerHandlerClient(ctx, mux, NewOrganizationsServerClient(conn))
}

// RegisterOrganizationsServerHandlerClient registers the http handlers for service OrganizationsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsServerClient" to call the correct interceptors.
func RegisterOrganizationsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsServer_CreateOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/CreateOrganization", runtime.WithHTTPPathPattern("/v1/organizations"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_CreateOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_CreateOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsServer_DeleteOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/DeleteOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_DeleteOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_DeleteOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetControlPlaneAccessOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetControlPlaneAccessOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/controlPlaneAccess}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetControlPlaneAccessOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetControlPlaneAccessOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetDeployedIngressConfigOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetDeployedIngressConfigOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/deployedIngressConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetDeployedIngressConfigOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetDeployedIngressConfigOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetProjectMappingOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetProjectMappingOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:getProjectMapping"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetProjectMappingOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetProjectMappingOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetRuntimeConfigOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetRuntimeConfigOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/runtimeConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetRuntimeConfigOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetRuntimeConfigOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_GetSecuritySettingsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSecuritySettingsOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securitySettings}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetSecuritySettingsOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetSecuritySettingsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_GetSyncAuthorizationOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/GetSyncAuthorizationOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:getSyncAuthorization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_GetSyncAuthorizationOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_GetSyncAuthorizationOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsServer_ListOrganizations_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/ListOrganizations", runtime.WithHTTPPathPattern("/v1/{parent=organizations}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_ListOrganizations_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_ListOrganizations_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_SetAddonsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetAddonsOrganization", runtime.WithHTTPPathPattern("/v1/{org=organizations/*}:setAddons"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_SetAddonsOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_SetAddonsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsServer_SetSyncAuthorizationOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/SetSyncAuthorizationOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}:setSyncAuthorization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_SetSyncAuthorizationOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_SetSyncAuthorizationOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsServer_UpdateOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_UpdateOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsServer_UpdateControlPlaneAccessOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateControlPlaneAccessOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/controlPlaneAccess}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateControlPlaneAccessOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsServer_UpdateSecuritySettingsOrganization_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsServer/UpdateSecuritySettingsOrganization", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securitySettings}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsServer_UpdateSecuritySettingsOrganization_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsServer_UpdateSecuritySettingsOrganization_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsServer_CreateOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1}, []string{"v1", "organizations"}, ""))

	pattern_OrganizationsServer_DeleteOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, ""))

	pattern_OrganizationsServer_GetOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, ""))

	pattern_OrganizationsServer_GetControlPlaneAccessOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "controlPlaneAccess", "name"}, ""))

	pattern_OrganizationsServer_GetDeployedIngressConfigOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "deployedIngressConfig", "name"}, ""))

	pattern_OrganizationsServer_GetProjectMappingOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, "getProjectMapping"))

	pattern_OrganizationsServer_GetRuntimeConfigOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "runtimeConfig", "name"}, ""))

	pattern_OrganizationsServer_GetSecuritySettingsOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "securitySettings", "name"}, ""))

	pattern_OrganizationsServer_GetSyncAuthorizationOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, "getSyncAuthorization"))

	pattern_OrganizationsServer_ListOrganizations_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 4, 1, 5, 2}, []string{"v1", "organizations", "parent"}, ""))

	pattern_OrganizationsServer_SetAddonsOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "org"}, "setAddons"))

	pattern_OrganizationsServer_SetSyncAuthorizationOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, "setSyncAuthorization"))

	pattern_OrganizationsServer_UpdateOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "organizations", "name"}, ""))

	pattern_OrganizationsServer_UpdateControlPlaneAccessOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "controlPlaneAccess", "name"}, ""))

	pattern_OrganizationsServer_UpdateSecuritySettingsOrganization_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "securitySettings", "name"}, ""))
)

var (
	forward_OrganizationsServer_CreateOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_DeleteOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetControlPlaneAccessOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetDeployedIngressConfigOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetProjectMappingOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetRuntimeConfigOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetSecuritySettingsOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_GetSyncAuthorizationOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_ListOrganizations_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_SetAddonsOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_SetSyncAuthorizationOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_UpdateOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_UpdateControlPlaneAccessOrganization_0 = runtime.ForwardResponseMessage

	forward_OrganizationsServer_UpdateSecuritySettingsOrganization_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAnalyticsDatastoresServerHandlerFromEndpoint is same as RegisterOrganizationsAnalyticsDatastoresServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAnalyticsDatastoresServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAnalyticsDatastoresServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAnalyticsDatastoresServerHandler registers the http handlers for service OrganizationsAnalyticsDatastoresServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAnalyticsDatastoresServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAnalyticsDatastoresServerHandlerClient(ctx, mux, NewOrganizationsAnalyticsDatastoresServerClient(conn))
}

// RegisterOrganizationsAnalyticsDatastoresServerHandlerClient registers the http handlers for service OrganizationsAnalyticsDatastoresServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAnalyticsDatastoresServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAnalyticsDatastoresServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAnalyticsDatastoresServerClient" to call the correct interceptors.
func RegisterOrganizationsAnalyticsDatastoresServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAnalyticsDatastoresServerClient) error {

	mux.Handle("POST", pattern_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/CreateOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/DeleteOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/GetOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/ListOrganizationsAnalyticsDatastores", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/TestOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/analytics/datastores:test"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAnalyticsDatastoresServer/UpdateOrganizationsAnalyticsDatastore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/analytics/datastores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3, 2, 4}, []string{"v1", "organizations", "parent", "analytics", "datastores"}, ""))

	pattern_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 2, 3, 1, 0, 4, 5, 5, 4}, []string{"v1", "organizations", "analytics", "datastores", "name"}, ""))

	pattern_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 2, 3, 1, 0, 4, 5, 5, 4}, []string{"v1", "organizations", "analytics", "datastores", "name"}, ""))

	pattern_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3, 2, 4}, []string{"v1", "organizations", "parent", "analytics", "datastores"}, ""))

	pattern_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3, 2, 4}, []string{"v1", "organizations", "parent", "analytics", "datastores"}, "test"))

	pattern_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 2, 3, 1, 0, 4, 5, 5, 4}, []string{"v1", "organizations", "analytics", "datastores", "name"}, ""))
)

var (
	forward_OrganizationsAnalyticsDatastoresServer_CreateOrganizationsAnalyticsDatastore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAnalyticsDatastoresServer_DeleteOrganizationsAnalyticsDatastore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAnalyticsDatastoresServer_GetOrganizationsAnalyticsDatastore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAnalyticsDatastoresServer_ListOrganizationsAnalyticsDatastores_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAnalyticsDatastoresServer_TestOrganizationsAnalyticsDatastore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAnalyticsDatastoresServer_UpdateOrganizationsAnalyticsDatastore_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApiproductsServerHandlerFromEndpoint is same as RegisterOrganizationsApiproductsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApiproductsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApiproductsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApiproductsServerHandler registers the http handlers for service OrganizationsApiproductsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApiproductsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApiproductsServerHandlerClient(ctx, mux, NewOrganizationsApiproductsServerClient(conn))
}

// RegisterOrganizationsApiproductsServerHandlerClient registers the http handlers for service OrganizationsApiproductsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApiproductsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApiproductsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApiproductsServerClient" to call the correct interceptors.
func RegisterOrganizationsApiproductsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApiproductsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/AttributesOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/CreateOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apiproducts"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/DeleteOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/GetOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/ListOrganizationsApiproducts", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apiproducts"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsServer/UpdateOrganizationsApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apiproducts", "name", "attributes"}, ""))

	pattern_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "apiproducts"}, ""))

	pattern_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apiproducts", "name"}, ""))

	pattern_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apiproducts", "name"}, ""))

	pattern_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "apiproducts"}, ""))

	pattern_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apiproducts", "name"}, ""))
)

var (
	forward_OrganizationsApiproductsServer_AttributesOrganizationsApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsServer_CreateOrganizationsApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsServer_DeleteOrganizationsApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsServer_GetOrganizationsApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsServer_ListOrganizationsApiproducts_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsServer_UpdateOrganizationsApiproduct_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApiproductsAttributesServerHandlerFromEndpoint is same as RegisterOrganizationsApiproductsAttributesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApiproductsAttributesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApiproductsAttributesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApiproductsAttributesServerHandler registers the http handlers for service OrganizationsApiproductsAttributesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApiproductsAttributesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApiproductsAttributesServerHandlerClient(ctx, mux, NewOrganizationsApiproductsAttributesServerClient(conn))
}

// RegisterOrganizationsApiproductsAttributesServerHandlerClient registers the http handlers for service OrganizationsApiproductsAttributesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApiproductsAttributesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApiproductsAttributesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApiproductsAttributesServerClient" to call the correct interceptors.
func RegisterOrganizationsApiproductsAttributesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApiproductsAttributesServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/DeleteOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/GetOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/ListOrganizationsApiproductsAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsAttributesServer/UpdateApiProductAttributeOrganizationsApiproductsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "attributes", "name"}, ""))

	pattern_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "attributes", "name"}, ""))

	pattern_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apiproducts", "parent", "attributes"}, ""))

	pattern_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "attributes", "name"}, ""))
)

var (
	forward_OrganizationsApiproductsAttributesServer_DeleteOrganizationsApiproductsAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsAttributesServer_GetOrganizationsApiproductsAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsAttributesServer_ListOrganizationsApiproductsAttributes_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsAttributesServer_UpdateApiProductAttributeOrganizationsApiproductsAttribute_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApiproductsRateplansServerHandlerFromEndpoint is same as RegisterOrganizationsApiproductsRateplansServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApiproductsRateplansServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApiproductsRateplansServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApiproductsRateplansServerHandler registers the http handlers for service OrganizationsApiproductsRateplansServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApiproductsRateplansServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApiproductsRateplansServerHandlerClient(ctx, mux, NewOrganizationsApiproductsRateplansServerClient(conn))
}

// RegisterOrganizationsApiproductsRateplansServerHandlerClient registers the http handlers for service OrganizationsApiproductsRateplansServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApiproductsRateplansServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApiproductsRateplansServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApiproductsRateplansServerClient" to call the correct interceptors.
func RegisterOrganizationsApiproductsRateplansServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApiproductsRateplansServerClient) error {

	mux.Handle("POST", pattern_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/CreateOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/rateplans"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/DeleteOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/GetOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/ListOrganizationsApiproductsRateplans", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apiproducts/*}/rateplans"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApiproductsRateplansServer/UpdateOrganizationsApiproductsRateplan", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apiproducts/*/rateplans/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apiproducts", "parent", "rateplans"}, ""))

	pattern_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "rateplans", "name"}, ""))

	pattern_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "rateplans", "name"}, ""))

	pattern_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apiproducts", "parent", "rateplans"}, ""))

	pattern_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apiproducts", "rateplans", "name"}, ""))
)

var (
	forward_OrganizationsApiproductsRateplansServer_CreateOrganizationsApiproductsRateplan_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsRateplansServer_DeleteOrganizationsApiproductsRateplan_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsRateplansServer_GetOrganizationsApiproductsRateplan_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsRateplansServer_ListOrganizationsApiproductsRateplans_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApiproductsRateplansServer_UpdateOrganizationsApiproductsRateplan_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisServerHandlerFromEndpoint is same as RegisterOrganizationsApisServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisServerHandler registers the http handlers for service OrganizationsApisServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisServerHandlerClient(ctx, mux, NewOrganizationsApisServerClient(conn))
}

// RegisterOrganizationsApisServerHandlerClient registers the http handlers for service OrganizationsApisServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisServerClient" to call the correct interceptors.
func RegisterOrganizationsApisServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisServerClient) error {

	mux.Handle("POST", pattern_OrganizationsApisServer_CreateOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/CreateOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apis"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisServer_CreateOrganizationsApi_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_CreateOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisServer_DeleteOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/DeleteOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisServer_DeleteOrganizationsApi_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_DeleteOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisServer_GetOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/GetOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisServer_GetOrganizationsApi_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_GetOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisServer_ListOrganizationsApis_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/ListOrganizationsApis", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apis"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisServer_ListOrganizationsApis_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_ListOrganizationsApis_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsApisServer_PatchOrganizationsApi_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisServer/PatchOrganizationsApi", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisServer_PatchOrganizationsApi_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisServer_PatchOrganizationsApi_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisServer_CreateOrganizationsApi_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "apis"}, ""))

	pattern_OrganizationsApisServer_DeleteOrganizationsApi_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apis", "name"}, ""))

	pattern_OrganizationsApisServer_GetOrganizationsApi_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apis", "name"}, ""))

	pattern_OrganizationsApisServer_ListOrganizationsApis_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "apis"}, ""))

	pattern_OrganizationsApisServer_PatchOrganizationsApi_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apis", "name"}, ""))
)

var (
	forward_OrganizationsApisServer_CreateOrganizationsApi_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisServer_DeleteOrganizationsApi_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisServer_GetOrganizationsApi_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisServer_ListOrganizationsApis_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisServer_PatchOrganizationsApi_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsApisDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisDeploymentsServerHandler registers the http handlers for service OrganizationsApisDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsApisDeploymentsServerClient(conn))
}

// RegisterOrganizationsApisDeploymentsServerHandlerClient registers the http handlers for service OrganizationsApisDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsApisDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisDeploymentsServer/ListOrganizationsApisDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apis", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsApisDeploymentsServer_ListOrganizationsApisDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisKeyvaluemapsServerHandlerFromEndpoint is same as RegisterOrganizationsApisKeyvaluemapsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisKeyvaluemapsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisKeyvaluemapsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisKeyvaluemapsServerHandler registers the http handlers for service OrganizationsApisKeyvaluemapsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisKeyvaluemapsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisKeyvaluemapsServerHandlerClient(ctx, mux, NewOrganizationsApisKeyvaluemapsServerClient(conn))
}

// RegisterOrganizationsApisKeyvaluemapsServerHandlerClient registers the http handlers for service OrganizationsApisKeyvaluemapsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisKeyvaluemapsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisKeyvaluemapsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisKeyvaluemapsServerClient" to call the correct interceptors.
func RegisterOrganizationsApisKeyvaluemapsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisKeyvaluemapsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/CreateOrganizationsApisKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsServer/DeleteOrganizationsApisKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "apis", "parent", "keyvaluemaps"}, ""))

	pattern_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apis", "keyvaluemaps", "name"}, ""))
)

var (
	forward_OrganizationsApisKeyvaluemapsServer_CreateOrganizationsApisKeyvaluemap_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisKeyvaluemapsServer_DeleteOrganizationsApisKeyvaluemap_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerFromEndpoint is same as RegisterOrganizationsApisKeyvaluemapsEntriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisKeyvaluemapsEntriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisKeyvaluemapsEntriesServerHandler registers the http handlers for service OrganizationsApisKeyvaluemapsEntriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisKeyvaluemapsEntriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerClient(ctx, mux, NewOrganizationsApisKeyvaluemapsEntriesServerClient(conn))
}

// RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerClient registers the http handlers for service OrganizationsApisKeyvaluemapsEntriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisKeyvaluemapsEntriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisKeyvaluemapsEntriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisKeyvaluemapsEntriesServerClient" to call the correct interceptors.
func RegisterOrganizationsApisKeyvaluemapsEntriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisKeyvaluemapsEntriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/CreateOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/DeleteOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/GetOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/ListOrganizationsApisKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisKeyvaluemapsEntriesServer/UpdateOrganizationsApisKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "apis", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "apis", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "apis", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "apis", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "apis", "keyvaluemaps", "entries", "name"}, ""))
)

var (
	forward_OrganizationsApisKeyvaluemapsEntriesServer_CreateOrganizationsApisKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisKeyvaluemapsEntriesServer_DeleteOrganizationsApisKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisKeyvaluemapsEntriesServer_GetOrganizationsApisKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisKeyvaluemapsEntriesServer_ListOrganizationsApisKeyvaluemapsEntries_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisKeyvaluemapsEntriesServer_UpdateOrganizationsApisKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisRevisionsServerHandlerFromEndpoint is same as RegisterOrganizationsApisRevisionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisRevisionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisRevisionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisRevisionsServerHandler registers the http handlers for service OrganizationsApisRevisionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisRevisionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisRevisionsServerHandlerClient(ctx, mux, NewOrganizationsApisRevisionsServerClient(conn))
}

// RegisterOrganizationsApisRevisionsServerHandlerClient registers the http handlers for service OrganizationsApisRevisionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisRevisionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisRevisionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisRevisionsServerClient" to call the correct interceptors.
func RegisterOrganizationsApisRevisionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisRevisionsServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/DeleteOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/GetOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsServer/UpdateApiProxyRevisionOrganizationsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apis/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apis", "revisions", "name"}, ""))

	pattern_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apis", "revisions", "name"}, ""))

	pattern_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "apis", "revisions", "name"}, ""))
)

var (
	forward_OrganizationsApisRevisionsServer_DeleteOrganizationsApisRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisRevisionsServer_GetOrganizationsApisRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsApisRevisionsServer_UpdateApiProxyRevisionOrganizationsApisRevision_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsApisRevisionsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsApisRevisionsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsApisRevisionsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsApisRevisionsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsApisRevisionsDeploymentsServerHandler registers the http handlers for service OrganizationsApisRevisionsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsApisRevisionsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsApisRevisionsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsApisRevisionsDeploymentsServerClient(conn))
}

// RegisterOrganizationsApisRevisionsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsApisRevisionsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsApisRevisionsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsApisRevisionsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsApisRevisionsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsApisRevisionsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsApisRevisionsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsApisRevisionsDeploymentsServer/ListOrganizationsApisRevisionsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "apis", "revisions", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsApisRevisionsDeploymentsServer_ListOrganizationsApisRevisionsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAppgroupsServerHandlerFromEndpoint is same as RegisterOrganizationsAppgroupsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAppgroupsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAppgroupsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAppgroupsServerHandler registers the http handlers for service OrganizationsAppgroupsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAppgroupsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAppgroupsServerHandlerClient(ctx, mux, NewOrganizationsAppgroupsServerClient(conn))
}

// RegisterOrganizationsAppgroupsServerHandlerClient registers the http handlers for service OrganizationsAppgroupsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAppgroupsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAppgroupsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAppgroupsServerClient" to call the correct interceptors.
func RegisterOrganizationsAppgroupsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAppgroupsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/CreateOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/appgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/DeleteOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/GetOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/ListOrganizationsAppgroups", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/appgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsServer/UpdateOrganizationsAppgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "appgroups"}, ""))

	pattern_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "appgroups", "name"}, ""))

	pattern_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "appgroups", "name"}, ""))

	pattern_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "appgroups"}, ""))

	pattern_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "appgroups", "name"}, ""))
)

var (
	forward_OrganizationsAppgroupsServer_CreateOrganizationsAppgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsServer_DeleteOrganizationsAppgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsServer_GetOrganizationsAppgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsServer_ListOrganizationsAppgroups_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsServer_UpdateOrganizationsAppgroup_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAppgroupsAppsServerHandlerFromEndpoint is same as RegisterOrganizationsAppgroupsAppsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAppgroupsAppsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAppgroupsAppsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAppgroupsAppsServerHandler registers the http handlers for service OrganizationsAppgroupsAppsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAppgroupsAppsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAppgroupsAppsServerHandlerClient(ctx, mux, NewOrganizationsAppgroupsAppsServerClient(conn))
}

// RegisterOrganizationsAppgroupsAppsServerHandlerClient registers the http handlers for service OrganizationsAppgroupsAppsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAppgroupsAppsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAppgroupsAppsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAppgroupsAppsServerClient" to call the correct interceptors.
func RegisterOrganizationsAppgroupsAppsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAppgroupsAppsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/CreateOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/DeleteOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/GetOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/ListOrganizationsAppgroupsApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsServer/UpdateOrganizationsAppgroupsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "appgroups", "parent", "apps"}, ""))

	pattern_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "appgroups", "apps", "name"}, ""))

	pattern_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "appgroups", "apps", "name"}, ""))

	pattern_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "appgroups", "parent", "apps"}, ""))

	pattern_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "appgroups", "apps", "name"}, ""))
)

var (
	forward_OrganizationsAppgroupsAppsServer_CreateOrganizationsAppgroupsApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsServer_DeleteOrganizationsAppgroupsApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsServer_GetOrganizationsAppgroupsApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsServer_ListOrganizationsAppgroupsApps_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsServer_UpdateOrganizationsAppgroupsApp_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAppgroupsAppsKeysServerHandlerFromEndpoint is same as RegisterOrganizationsAppgroupsAppsKeysServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAppgroupsAppsKeysServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAppgroupsAppsKeysServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAppgroupsAppsKeysServerHandler registers the http handlers for service OrganizationsAppgroupsAppsKeysServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAppgroupsAppsKeysServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAppgroupsAppsKeysServerHandlerClient(ctx, mux, NewOrganizationsAppgroupsAppsKeysServerClient(conn))
}

// RegisterOrganizationsAppgroupsAppsKeysServerHandlerClient registers the http handlers for service OrganizationsAppgroupsAppsKeysServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAppgroupsAppsKeysServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAppgroupsAppsKeysServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAppgroupsAppsKeysServerClient" to call the correct interceptors.
func RegisterOrganizationsAppgroupsAppsKeysServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAppgroupsAppsKeysServerClient) error {

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/CreateOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/appgroups/*/apps/*}/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/DeleteOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/GetOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysServer/UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "appgroups", "apps", "parent", "keys"}, ""))

	pattern_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "appgroups", "apps", "keys", "name"}, ""))

	pattern_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "appgroups", "apps", "keys", "name"}, ""))

	pattern_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "appgroups", "apps", "keys", "name"}, ""))
)

var (
	forward_OrganizationsAppgroupsAppsKeysServer_CreateOrganizationsAppgroupsAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsKeysServer_DeleteOrganizationsAppgroupsAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsKeysServer_GetOrganizationsAppgroupsAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsKeysServer_UpdateAppGroupAppKeyOrganizationsAppgroupsAppsKey_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerFromEndpoint is same as RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandler registers the http handlers for service OrganizationsAppgroupsAppsKeysApiproductsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerClient(ctx, mux, NewOrganizationsAppgroupsAppsKeysApiproductsServerClient(conn))
}

// RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerClient registers the http handlers for service OrganizationsAppgroupsAppsKeysApiproductsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAppgroupsAppsKeysApiproductsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAppgroupsAppsKeysApiproductsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAppgroupsAppsKeysApiproductsServerClient" to call the correct interceptors.
func RegisterOrganizationsAppgroupsAppsKeysApiproductsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAppgroupsAppsKeysApiproductsServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/DeleteOrganizationsAppgroupsAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppgroupsAppsKeysApiproductsServer/UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/appgroups/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6}, []string{"v1", "organizations", "appgroups", "apps", "keys", "apiproducts", "name"}, ""))

	pattern_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6}, []string{"v1", "organizations", "appgroups", "apps", "keys", "apiproducts", "name"}, ""))
)

var (
	forward_OrganizationsAppgroupsAppsKeysApiproductsServer_DeleteOrganizationsAppgroupsAppsKeysApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppgroupsAppsKeysApiproductsServer_UpdateAppGroupAppKeyApiProductOrganizationsAppgroupsAppsKeysApiproduct_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsAppsServerHandlerFromEndpoint is same as RegisterOrganizationsAppsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsAppsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsAppsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsAppsServerHandler registers the http handlers for service OrganizationsAppsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsAppsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsAppsServerHandlerClient(ctx, mux, NewOrganizationsAppsServerClient(conn))
}

// RegisterOrganizationsAppsServerHandlerClient registers the http handlers for service OrganizationsAppsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsAppsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsAppsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsAppsServerClient" to call the correct interceptors.
func RegisterOrganizationsAppsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsAppsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsAppsServer_GetOrganizationsApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/GetOrganizationsApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppsServer_GetOrganizationsApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppsServer_GetOrganizationsApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsAppsServer_ListOrganizationsApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsAppsServer/ListOrganizationsApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsAppsServer_ListOrganizationsApps_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsAppsServer_ListOrganizationsApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsAppsServer_GetOrganizationsApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "apps", "name"}, ""))

	pattern_OrganizationsAppsServer_ListOrganizationsApps_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "apps"}, ""))
)

var (
	forward_OrganizationsAppsServer_GetOrganizationsApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsAppsServer_ListOrganizationsApps_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDatacollectorsServerHandlerFromEndpoint is same as RegisterOrganizationsDatacollectorsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDatacollectorsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDatacollectorsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDatacollectorsServerHandler registers the http handlers for service OrganizationsDatacollectorsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDatacollectorsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDatacollectorsServerHandlerClient(ctx, mux, NewOrganizationsDatacollectorsServerClient(conn))
}

// RegisterOrganizationsDatacollectorsServerHandlerClient registers the http handlers for service OrganizationsDatacollectorsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDatacollectorsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDatacollectorsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDatacollectorsServerClient" to call the correct interceptors.
func RegisterOrganizationsDatacollectorsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDatacollectorsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/CreateOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/datacollectors"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/DeleteOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/GetOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/ListOrganizationsDatacollectors", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/datacollectors"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDatacollectorsServer/PatchOrganizationsDatacollector", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/datacollectors/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "datacollectors"}, ""))

	pattern_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "datacollectors", "name"}, ""))

	pattern_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "datacollectors", "name"}, ""))

	pattern_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "datacollectors"}, ""))

	pattern_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "datacollectors", "name"}, ""))
)

var (
	forward_OrganizationsDatacollectorsServer_CreateOrganizationsDatacollector_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDatacollectorsServer_DeleteOrganizationsDatacollector_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDatacollectorsServer_GetOrganizationsDatacollector_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDatacollectorsServer_ListOrganizationsDatacollectors_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDatacollectorsServer_PatchOrganizationsDatacollector_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDeploymentsServerHandler registers the http handlers for service OrganizationsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsDeploymentsServerClient(conn))
}

// RegisterOrganizationsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDeploymentsServer/ListOrganizationsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsDeploymentsServer_ListOrganizationsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersServerHandler registers the http handlers for service OrganizationsDevelopersServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersServerHandlerClient(ctx, mux, NewOrganizationsDevelopersServerClient(conn))
}

// RegisterOrganizationsDevelopersServerHandlerClient registers the http handlers for service OrganizationsDevelopersServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/AttributesOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/CreateOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/developers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/DeleteOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetBalanceOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/GetMonetizationConfigOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/monetizationConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/ListOrganizationsDevelopers", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/developers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/SetDeveloperStatusOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersServer/UpdateMonetizationConfigOrganizationsDeveloper", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/monetizationConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "attributes"}, ""))

	pattern_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "developers"}, ""))

	pattern_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "developers", "name"}, ""))

	pattern_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "developers", "name"}, ""))

	pattern_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "developers", "balance", "name"}, ""))

	pattern_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "developers", "monetizationConfig", "name"}, ""))

	pattern_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "developers"}, ""))

	pattern_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "developers", "name"}, ""))

	pattern_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "developers", "name"}, ""))

	pattern_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "developers", "monetizationConfig", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersServer_AttributesOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_CreateOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_DeleteOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_GetOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_GetBalanceOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_GetMonetizationConfigOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_ListOrganizationsDevelopers_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_SetDeveloperStatusOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_UpdateOrganizationsDeveloper_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersServer_UpdateMonetizationConfigOrganizationsDeveloper_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAppsServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAppsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAppsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAppsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAppsServerHandler registers the http handlers for service OrganizationsDevelopersAppsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAppsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAppsServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAppsServerClient(conn))
}

// RegisterOrganizationsDevelopersAppsServerHandlerClient registers the http handlers for service OrganizationsDevelopersAppsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAppsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAppsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAppsServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAppsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAppsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/AttributesOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/CreateOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/DeleteOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/GetOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/ListOrganizationsDevelopersApps", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/apps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsServer/UpdateOrganizationsDevelopersApp", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "developers", "apps", "name", "attributes"}, ""))

	pattern_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "apps"}, ""))

	pattern_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "apps", "name"}, ""))

	pattern_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "apps", "name"}, ""))

	pattern_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "apps", "name"}, ""))

	pattern_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "apps"}, ""))

	pattern_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "apps", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersAppsServer_AttributesOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_CreateOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_DeleteOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_GenerateKeyPairOrUpdateDeveloperAppStatusOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_GetOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_ListOrganizationsDevelopersApps_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsServer_UpdateOrganizationsDevelopersApp_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAppsAttributesServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAppsAttributesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAppsAttributesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAppsAttributesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAppsAttributesServerHandler registers the http handlers for service OrganizationsDevelopersAppsAttributesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAppsAttributesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAppsAttributesServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAppsAttributesServerClient(conn))
}

// RegisterOrganizationsDevelopersAppsAttributesServerHandlerClient registers the http handlers for service OrganizationsDevelopersAppsAttributesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAppsAttributesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAppsAttributesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAppsAttributesServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAppsAttributesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAppsAttributesServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/DeleteOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/GetOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/ListOrganizationsDevelopersAppsAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsAttributesServer/UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "attributes", "name"}, ""))

	pattern_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "attributes", "name"}, ""))

	pattern_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "developers", "apps", "parent", "attributes"}, ""))

	pattern_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "attributes", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersAppsAttributesServer_DeleteOrganizationsDevelopersAppsAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsAttributesServer_GetOrganizationsDevelopersAppsAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsAttributesServer_ListOrganizationsDevelopersAppsAttributes_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsAttributesServer_UpdateDeveloperAppAttributeOrganizationsDevelopersAppsAttribute_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAppsKeysServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAppsKeysServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAppsKeysServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAppsKeysServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAppsKeysServerHandler registers the http handlers for service OrganizationsDevelopersAppsKeysServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAppsKeysServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAppsKeysServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAppsKeysServerClient(conn))
}

// RegisterOrganizationsDevelopersAppsKeysServerHandlerClient registers the http handlers for service OrganizationsDevelopersAppsKeysServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAppsKeysServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAppsKeysServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAppsKeysServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAppsKeysServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAppsKeysServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/CreateOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/keys"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/DeleteOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/GetOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysServer/UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "developers", "apps", "parent", "keys"}, ""))

	pattern_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "keys", "name"}, ""))

	pattern_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "keys", "name"}, ""))

	pattern_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "keys", "name"}, ""))

	pattern_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "developers", "apps", "keys", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersAppsKeysServer_CreateOrganizationsDevelopersAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsKeysServer_DeleteOrganizationsDevelopersAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsKeysServer_GetOrganizationsDevelopersAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsKeysServer_ReplaceDeveloperAppKeyOrganizationsDevelopersAppsKey_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsKeysServer_UpdateDeveloperAppKeyOrganizationsDevelopersAppsKey_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandler registers the http handlers for service OrganizationsDevelopersAppsKeysApiproductsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAppsKeysApiproductsServerClient(conn))
}

// RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerClient registers the http handlers for service OrganizationsDevelopersAppsKeysApiproductsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAppsKeysApiproductsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAppsKeysApiproductsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAppsKeysApiproductsServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAppsKeysApiproductsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAppsKeysApiproductsServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/DeleteOrganizationsDevelopersAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysApiproductsServer/UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/apps/*/keys/*/apiproducts/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6}, []string{"v1", "organizations", "developers", "apps", "keys", "apiproducts", "name"}, ""))

	pattern_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6}, []string{"v1", "organizations", "developers", "apps", "keys", "apiproducts", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersAppsKeysApiproductsServer_DeleteOrganizationsDevelopersAppsKeysApiproduct_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAppsKeysApiproductsServer_UpdateDeveloperAppKeyApiProductOrganizationsDevelopersAppsKeysApiproduct_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAppsKeysCreateServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAppsKeysCreateServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAppsKeysCreateServerHandler registers the http handlers for service OrganizationsDevelopersAppsKeysCreateServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAppsKeysCreateServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAppsKeysCreateServerClient(conn))
}

// RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerClient registers the http handlers for service OrganizationsDevelopersAppsKeysCreateServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAppsKeysCreateServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAppsKeysCreateServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAppsKeysCreateServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAppsKeysCreateServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAppsKeysCreateServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAppsKeysCreateServer/CreateOrganizationsDevelopersAppsKeysCreate", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*/apps/*}/keys/create"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5, 2, 6}, []string{"v1", "organizations", "developers", "apps", "parent", "keys", "create"}, ""))
)

var (
	forward_OrganizationsDevelopersAppsKeysCreateServer_CreateOrganizationsDevelopersAppsKeysCreate_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersAttributesServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersAttributesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersAttributesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersAttributesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersAttributesServerHandler registers the http handlers for service OrganizationsDevelopersAttributesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersAttributesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersAttributesServerHandlerClient(ctx, mux, NewOrganizationsDevelopersAttributesServerClient(conn))
}

// RegisterOrganizationsDevelopersAttributesServerHandlerClient registers the http handlers for service OrganizationsDevelopersAttributesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersAttributesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersAttributesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersAttributesServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersAttributesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersAttributesServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/DeleteOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/GetOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/ListOrganizationsDevelopersAttributes", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/attributes"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersAttributesServer/UpdateDeveloperAttributeOrganizationsDevelopersAttribute", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/attributes/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "attributes", "name"}, ""))

	pattern_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "attributes", "name"}, ""))

	pattern_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "attributes"}, ""))

	pattern_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "attributes", "name"}, ""))
)

var (
	forward_OrganizationsDevelopersAttributesServer_DeleteOrganizationsDevelopersAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAttributesServer_GetOrganizationsDevelopersAttribute_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAttributesServer_ListOrganizationsDevelopersAttributes_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersAttributesServer_UpdateDeveloperAttributeOrganizationsDevelopersAttribute_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersBalanceServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersBalanceServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersBalanceServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersBalanceServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersBalanceServerHandler registers the http handlers for service OrganizationsDevelopersBalanceServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersBalanceServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersBalanceServerHandlerClient(ctx, mux, NewOrganizationsDevelopersBalanceServerClient(conn))
}

// RegisterOrganizationsDevelopersBalanceServerHandlerClient registers the http handlers for service OrganizationsDevelopersBalanceServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersBalanceServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersBalanceServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersBalanceServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersBalanceServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersBalanceServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/AdjustOrganizationsDevelopersBalance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}:adjust"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersBalanceServer/CreditOrganizationsDevelopersBalance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/balance}:credit"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "developers", "balance", "name"}, "adjust"))

	pattern_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "developers", "balance", "name"}, "credit"))
)

var (
	forward_OrganizationsDevelopersBalanceServer_AdjustOrganizationsDevelopersBalance_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersBalanceServer_CreditOrganizationsDevelopersBalance_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsDevelopersSubscriptionsServerHandlerFromEndpoint is same as RegisterOrganizationsDevelopersSubscriptionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsDevelopersSubscriptionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsDevelopersSubscriptionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsDevelopersSubscriptionsServerHandler registers the http handlers for service OrganizationsDevelopersSubscriptionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsDevelopersSubscriptionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsDevelopersSubscriptionsServerHandlerClient(ctx, mux, NewOrganizationsDevelopersSubscriptionsServerClient(conn))
}

// RegisterOrganizationsDevelopersSubscriptionsServerHandlerClient registers the http handlers for service OrganizationsDevelopersSubscriptionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsDevelopersSubscriptionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsDevelopersSubscriptionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsDevelopersSubscriptionsServerClient" to call the correct interceptors.
func RegisterOrganizationsDevelopersSubscriptionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsDevelopersSubscriptionsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/CreateOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/subscriptions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ExpireOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/subscriptions/*}:expire"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/GetOrganizationsDevelopersSubscription", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/developers/*/subscriptions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsDevelopersSubscriptionsServer/ListOrganizationsDevelopersSubscriptions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/developers/*}/subscriptions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "subscriptions"}, ""))

	pattern_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "subscriptions", "name"}, "expire"))

	pattern_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "developers", "subscriptions", "name"}, ""))

	pattern_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "developers", "parent", "subscriptions"}, ""))
)

var (
	forward_OrganizationsDevelopersSubscriptionsServer_CreateOrganizationsDevelopersSubscription_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersSubscriptionsServer_ExpireOrganizationsDevelopersSubscription_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersSubscriptionsServer_GetOrganizationsDevelopersSubscription_0 = runtime.ForwardResponseMessage

	forward_OrganizationsDevelopersSubscriptionsServer_ListOrganizationsDevelopersSubscriptions_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEndpointAttachmentsServerHandlerFromEndpoint is same as RegisterOrganizationsEndpointAttachmentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEndpointAttachmentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEndpointAttachmentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEndpointAttachmentsServerHandler registers the http handlers for service OrganizationsEndpointAttachmentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEndpointAttachmentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEndpointAttachmentsServerHandlerClient(ctx, mux, NewOrganizationsEndpointAttachmentsServerClient(conn))
}

// RegisterOrganizationsEndpointAttachmentsServerHandlerClient registers the http handlers for service OrganizationsEndpointAttachmentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEndpointAttachmentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEndpointAttachmentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEndpointAttachmentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEndpointAttachmentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEndpointAttachmentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/CreateOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/endpointAttachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/DeleteOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/endpointAttachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/GetOrganizationsEndpointAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/endpointAttachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEndpointAttachmentsServer/ListOrganizationsEndpointAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/endpointAttachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "endpointAttachments"}, ""))

	pattern_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "endpointAttachments", "name"}, ""))

	pattern_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "endpointAttachments", "name"}, ""))

	pattern_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "endpointAttachments"}, ""))
)

var (
	forward_OrganizationsEndpointAttachmentsServer_CreateOrganizationsEndpointAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEndpointAttachmentsServer_DeleteOrganizationsEndpointAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEndpointAttachmentsServer_GetOrganizationsEndpointAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEndpointAttachmentsServer_ListOrganizationsEndpointAttachments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvgroupsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvgroupsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvgroupsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvgroupsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvgroupsServerHandler registers the http handlers for service OrganizationsEnvgroupsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvgroupsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvgroupsServerHandlerClient(ctx, mux, NewOrganizationsEnvgroupsServerClient(conn))
}

// RegisterOrganizationsEnvgroupsServerHandlerClient registers the http handlers for service OrganizationsEnvgroupsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvgroupsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvgroupsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvgroupsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvgroupsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvgroupsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/CreateOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/envgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/DeleteOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/GetDeployedIngressConfigOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/deployedIngressConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/ListOrganizationsEnvgroups", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/envgroups"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsServer/PatchOrganizationsEnvgroup", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "envgroups"}, ""))

	pattern_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "envgroups", "name"}, ""))

	pattern_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "envgroups", "name"}, ""))

	pattern_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "envgroups", "deployedIngressConfig", "name"}, ""))

	pattern_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "envgroups"}, ""))

	pattern_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "envgroups", "name"}, ""))
)

var (
	forward_OrganizationsEnvgroupsServer_CreateOrganizationsEnvgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsServer_DeleteOrganizationsEnvgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsServer_GetOrganizationsEnvgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsServer_GetDeployedIngressConfigOrganizationsEnvgroup_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsServer_ListOrganizationsEnvgroups_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsServer_PatchOrganizationsEnvgroup_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvgroupsAttachmentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvgroupsAttachmentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvgroupsAttachmentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvgroupsAttachmentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvgroupsAttachmentsServerHandler registers the http handlers for service OrganizationsEnvgroupsAttachmentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvgroupsAttachmentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvgroupsAttachmentsServerHandlerClient(ctx, mux, NewOrganizationsEnvgroupsAttachmentsServerClient(conn))
}

// RegisterOrganizationsEnvgroupsAttachmentsServerHandlerClient registers the http handlers for service OrganizationsEnvgroupsAttachmentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvgroupsAttachmentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvgroupsAttachmentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvgroupsAttachmentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvgroupsAttachmentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvgroupsAttachmentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/CreateOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/envgroups/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/DeleteOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/GetOrganizationsEnvgroupsAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/envgroups/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvgroupsAttachmentsServer/ListOrganizationsEnvgroupsAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/envgroups/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "envgroups", "parent", "attachments"}, ""))

	pattern_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "envgroups", "attachments", "name"}, ""))

	pattern_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "envgroups", "attachments", "name"}, ""))

	pattern_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "envgroups", "parent", "attachments"}, ""))
)

var (
	forward_OrganizationsEnvgroupsAttachmentsServer_CreateOrganizationsEnvgroupsAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsAttachmentsServer_DeleteOrganizationsEnvgroupsAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsAttachmentsServer_GetOrganizationsEnvgroupsAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvgroupsAttachmentsServer_ListOrganizationsEnvgroupsAttachments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsServerHandler registers the http handlers for service OrganizationsEnvironmentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/CreateOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/environments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/DeleteOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetAddonsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/addonsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetApiSecurityRuntimeConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apiSecurityRuntimeConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDebugmaskOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/debugmask}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetDeployedConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/deployedConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetSecurityActionsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActionsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/GetTraceConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/ModifyEnvironmentOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/SubscribeOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}:subscribe"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UnsubscribeOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}:unsubscribe"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateDebugmaskOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/debugmask}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateEnvironmentOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateSecurityActionsConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActionsConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsServer/UpdateTraceConfigOrganizationsEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "environments"}, ""))

	pattern_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "addonsConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "apiSecurityRuntimeConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "debugmask", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "deployedConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "securityActionsConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "traceConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "parent"}, "subscribe"))

	pattern_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "parent"}, "unsubscribe"))

	pattern_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "debugmask", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "environments", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "securityActionsConfig", "name"}, ""))

	pattern_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "traceConfig", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsServer_CreateOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_DeleteOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetAddonsConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetApiSecurityRuntimeConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetDebugmaskOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetDeployedConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetSecurityActionsConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_GetTraceConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_ModifyEnvironmentOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_SubscribeOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UnsubscribeOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UpdateOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UpdateDebugmaskOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UpdateEnvironmentOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UpdateSecurityActionsConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsServer_UpdateTraceConfigOrganizationsEnvironment_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsAddonsConfigServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsAddonsConfigServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsAddonsConfigServerHandler registers the http handlers for service OrganizationsEnvironmentsAddonsConfigServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsAddonsConfigServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsAddonsConfigServerClient(conn))
}

// RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsAddonsConfigServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsAddonsConfigServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsAddonsConfigServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsAddonsConfigServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsAddonsConfigServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsAddonsConfigServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAddonsConfigServer/SetAddonEnablementOrganizationsEnvironmentsAddonsConfig", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/addonsConfig}:setAddonEnablement"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "environments", "addonsConfig", "name"}, "setAddonEnablement"))
)

var (
	forward_OrganizationsEnvironmentsAddonsConfigServer_SetAddonEnablementOrganizationsEnvironmentsAddonsConfig_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandler registers the http handlers for service OrganizationsEnvironmentsAnalyticsAdminServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsAnalyticsAdminServerClient(conn))
}

// RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsAnalyticsAdminServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsAnalyticsAdminServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsAnalyticsAdminServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsAnalyticsAdminServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsAnalyticsAdminServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsAnalyticsAdminServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsAdminServer/GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/analytics/admin/schemav2}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 2, 5, 4, 7, 5, 6}, []string{"v1", "organizations", "environments", "analytics", "admin", "schemav2", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsAnalyticsAdminServer_GetSchemav2OrganizationsEnvironmentsAnalyticsAdmin_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandler registers the http handlers for service OrganizationsEnvironmentsAnalyticsExportsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsAnalyticsExportsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsAnalyticsExportsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsAnalyticsExportsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsAnalyticsExportsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsAnalyticsExportsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsAnalyticsExportsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsAnalyticsExportsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/CreateOrganizationsEnvironmentsAnalyticsExport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/analytics/exports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/GetOrganizationsEnvironmentsAnalyticsExport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/analytics/exports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsAnalyticsExportsServer/ListOrganizationsEnvironmentsAnalyticsExports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/analytics/exports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 2, 5}, []string{"v1", "organizations", "environments", "parent", "analytics", "exports"}, ""))

	pattern_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "analytics", "exports", "name"}, ""))

	pattern_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 2, 5}, []string{"v1", "organizations", "environments", "parent", "analytics", "exports"}, ""))
)

var (
	forward_OrganizationsEnvironmentsAnalyticsExportsServer_CreateOrganizationsEnvironmentsAnalyticsExport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsAnalyticsExportsServer_GetOrganizationsEnvironmentsAnalyticsExport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsAnalyticsExportsServer_ListOrganizationsEnvironmentsAnalyticsExports_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsApisDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsApisDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsApisDeploymentsServerHandler registers the http handlers for service OrganizationsEnvironmentsApisDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsApisDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsApisDeploymentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsApisDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsApisDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsApisDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsApisDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsApisDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsApisDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisDeploymentsServer/ListOrganizationsEnvironmentsApisDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "apis", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsEnvironmentsApisDeploymentsServer_ListOrganizationsEnvironmentsApisDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsApisRevisionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsApisRevisionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsApisRevisionsServerHandler registers the http handlers for service OrganizationsEnvironmentsApisRevisionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsApisRevisionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsApisRevisionsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsApisRevisionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsApisRevisionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsApisRevisionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsApisRevisionsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsApisRevisionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsApisRevisionsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/DeployOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/GetDeploymentsOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsServer/UndeployOrganizationsEnvironmentsApisRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "name", "deployments"}, ""))

	pattern_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "name", "deployments"}, ""))

	pattern_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "name", "deployments"}, ""))
)

var (
	forward_OrganizationsEnvironmentsApisRevisionsServer_DeployOrganizationsEnvironmentsApisRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsServer_GetDeploymentsOrganizationsEnvironmentsApisRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsServer_UndeployOrganizationsEnvironmentsApisRevision_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandler registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsApisRevisionsDebugsessionsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/CreateOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*/revisions/*}/debugsessions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*}/data"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/GetOrganizationsEnvironmentsApisRevisionsDebugsession", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsServer/ListOrganizationsEnvironmentsApisRevisionsDebugsessions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/apis/*/revisions/*}/debugsessions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "parent", "debugsessions"}, ""))

	pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6, 2, 7}, []string{"v1", "organizations", "environments", "apis", "revisions", "debugsessions", "name", "data"}, ""))

	pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 4, 10, 5, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "debugsessions", "name"}, ""))

	pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "parent", "debugsessions"}, ""))
)

var (
	forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_CreateOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_DeleteDataOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_GetOrganizationsEnvironmentsApisRevisionsDebugsession_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsServer_ListOrganizationsEnvironmentsApisRevisionsDebugsessions_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandler registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient(conn))
}

// RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer/GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*/debugsessions/*/data/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 2, 5, 1, 0, 2, 6, 1, 0, 4, 12, 5, 7}, []string{"v1", "organizations", "environments", "apis", "revisions", "debugsessions", "data", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsApisRevisionsDebugsessionsDataServer_GetOrganizationsEnvironmentsApisRevisionsDebugsessionsData_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandler registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsApisRevisionsDeploymentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsApisRevisionsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsApisRevisionsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsApisRevisionsDeploymentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments:generateDeployChangeReport"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsApisRevisionsDeploymentsServer/GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/apis/*/revisions/*}/deployments:generateUndeployChangeReport"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "name", "deployments"}, "generateDeployChangeReport"))

	pattern_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "apis", "revisions", "name", "deployments"}, "generateUndeployChangeReport"))
)

var (
	forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateDeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsApisRevisionsDeploymentsServer_GenerateUndeployChangeReportOrganizationsEnvironmentsApisRevisionsDeployment_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandler registers the http handlers for service OrganizationsEnvironmentsArchiveDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsArchiveDeploymentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsArchiveDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsArchiveDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsArchiveDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsArchiveDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsArchiveDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsArchiveDeploymentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/CreateOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/DeleteOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}:generateDownloadUrl"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments:generateUploadUrl"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/GetOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/ListOrganizationsEnvironmentsArchiveDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/archiveDeployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsArchiveDeploymentsServer/PatchOrganizationsEnvironmentsArchiveDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/archiveDeployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "archiveDeployments"}, ""))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "archiveDeployments", "name"}, ""))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "archiveDeployments", "name"}, "generateDownloadUrl"))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "archiveDeployments"}, "generateUploadUrl"))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "archiveDeployments", "name"}, ""))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "archiveDeployments"}, ""))

	pattern_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "archiveDeployments", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_CreateOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_DeleteOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateDownloadUrlOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GenerateUploadUrlOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_GetOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_ListOrganizationsEnvironmentsArchiveDeployments_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsArchiveDeploymentsServer_PatchOrganizationsEnvironmentsArchiveDeployment_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsCachesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsCachesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsCachesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsCachesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsCachesServerHandler registers the http handlers for service OrganizationsEnvironmentsCachesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsCachesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsCachesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsCachesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsCachesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsCachesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsCachesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsCachesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsCachesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsCachesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsCachesServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsCachesServer/DeleteOrganizationsEnvironmentsCache", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/caches/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "caches", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsCachesServer_DeleteOrganizationsEnvironmentsCache_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsDeploymentsServerHandler registers the http handlers for service OrganizationsEnvironmentsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsDeploymentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/GetOrganizationsEnvironmentsDeployment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/deployments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsDeploymentsServer/ListOrganizationsEnvironmentsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "deployments", "name"}, ""))

	pattern_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsEnvironmentsDeploymentsServer_GetOrganizationsEnvironmentsDeployment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsDeploymentsServer_ListOrganizationsEnvironmentsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsFlowhooksServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsFlowhooksServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsFlowhooksServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsFlowhooksServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsFlowhooksServerHandler registers the http handlers for service OrganizationsEnvironmentsFlowhooksServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsFlowhooksServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsFlowhooksServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsFlowhooksServerClient(conn))
}

// RegisterOrganizationsEnvironmentsFlowhooksServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsFlowhooksServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsFlowhooksServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsFlowhooksServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsFlowhooksServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsFlowhooksServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsFlowhooksServerClient) error {

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsFlowhooksServer/GetOrganizationsEnvironmentsFlowhook", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/flowhooks/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "flowhooks", "name"}, ""))

	pattern_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "flowhooks", "name"}, ""))

	pattern_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "flowhooks", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsFlowhooksServer_AttachSharedFlowToFlowHookOrganizationsEnvironmentsFlowhook_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsFlowhooksServer_DetachSharedFlowFromFlowHookOrganizationsEnvironmentsFlowhook_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsFlowhooksServer_GetOrganizationsEnvironmentsFlowhook_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsKeystoresServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsKeystoresServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsKeystoresServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsKeystoresServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsKeystoresServerHandler registers the http handlers for service OrganizationsEnvironmentsKeystoresServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsKeystoresServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsKeystoresServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsKeystoresServerClient(conn))
}

// RegisterOrganizationsEnvironmentsKeystoresServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsKeystoresServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsKeystoresServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsKeystoresServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsKeystoresServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsKeystoresServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsKeystoresServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/CreateOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/keystores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/DeleteOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresServer/GetOrganizationsEnvironmentsKeystore", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "keystores"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "keystores", "name"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "keystores", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsKeystoresServer_CreateOrganizationsEnvironmentsKeystore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresServer_DeleteOrganizationsEnvironmentsKeystore_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresServer_GetOrganizationsEnvironmentsKeystore_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandler registers the http handlers for service OrganizationsEnvironmentsKeystoresAliasesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsKeystoresAliasesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsKeystoresAliasesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsKeystoresAliasesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsKeystoresAliasesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsKeystoresAliasesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsKeystoresAliasesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsKeystoresAliasesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CreateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keystores/*}/aliases"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/CsrOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}/csr"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/DeleteOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/GetCertificateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}/certificate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeystoresAliasesServer/UpdateOrganizationsEnvironmentsKeystoresAliase", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keystores/*/aliases/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "keystores", "parent", "aliases"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "keystores", "aliases", "name", "csr"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keystores", "aliases", "name"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keystores", "aliases", "name"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "keystores", "aliases", "name", "certificate"}, ""))

	pattern_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keystores", "aliases", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsKeystoresAliasesServer_CreateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresAliasesServer_CsrOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresAliasesServer_DeleteOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresAliasesServer_GetCertificateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeystoresAliasesServer_UpdateOrganizationsEnvironmentsKeystoresAliase_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandler registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsKeyvaluemapsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsKeyvaluemapsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsKeyvaluemapsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsKeyvaluemapsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsKeyvaluemapsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsKeyvaluemapsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/CreateOrganizationsEnvironmentsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsServer/DeleteOrganizationsEnvironmentsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "keyvaluemaps"}, ""))

	pattern_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "keyvaluemaps", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsKeyvaluemapsServer_CreateOrganizationsEnvironmentsKeyvaluemap_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeyvaluemapsServer_DeleteOrganizationsEnvironmentsKeyvaluemap_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandler registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsEntriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsKeyvaluemapsEntriesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsKeyvaluemapsEntriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsKeyvaluemapsEntriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsKeyvaluemapsEntriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/CreateOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/DeleteOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/GetOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/ListOrganizationsEnvironmentsKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsKeyvaluemapsEntriesServer/UpdateOrganizationsEnvironmentsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5}, []string{"v1", "organizations", "environments", "keyvaluemaps", "entries", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_CreateOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_DeleteOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_GetOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_ListOrganizationsEnvironmentsKeyvaluemapsEntries_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsKeyvaluemapsEntriesServer_UpdateOrganizationsEnvironmentsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsOptimizedStatsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsOptimizedStatsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsOptimizedStatsServerHandler registers the http handlers for service OrganizationsEnvironmentsOptimizedStatsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsOptimizedStatsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsOptimizedStatsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsOptimizedStatsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsOptimizedStatsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsOptimizedStatsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsOptimizedStatsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsOptimizedStatsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsOptimizedStatsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsOptimizedStatsServer/GetOrganizationsEnvironmentsOptimizedStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/optimizedStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 4, 6, 5, 5}, []string{"v1", "organizations", "environments", "optimizedStats", ".*", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsOptimizedStatsServer_GetOrganizationsEnvironmentsOptimizedStat_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsQueriesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsQueriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsQueriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsQueriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsQueriesServerHandler registers the http handlers for service OrganizationsEnvironmentsQueriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsQueriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsQueriesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsQueriesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsQueriesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsQueriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsQueriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsQueriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsQueriesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsQueriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsQueriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/CreateOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/queries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResultOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/GetResulturlOrganizationsEnvironmentsQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/queries/*/resulturl}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsQueriesServer/ListOrganizationsEnvironmentsQueries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/queries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "queries"}, ""))

	pattern_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "queries", "name"}, ""))

	pattern_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "queries", "result", "name"}, ""))

	pattern_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "queries", "resulturl", "name"}, ""))

	pattern_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "queries"}, ""))
)

var (
	forward_OrganizationsEnvironmentsQueriesServer_CreateOrganizationsEnvironmentsQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsQueriesServer_GetOrganizationsEnvironmentsQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsQueriesServer_GetResultOrganizationsEnvironmentsQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsQueriesServer_GetResulturlOrganizationsEnvironmentsQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsQueriesServer_ListOrganizationsEnvironmentsQueries_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsReferencesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsReferencesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsReferencesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsReferencesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsReferencesServerHandler registers the http handlers for service OrganizationsEnvironmentsReferencesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsReferencesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsReferencesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsReferencesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsReferencesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsReferencesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsReferencesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsReferencesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsReferencesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsReferencesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsReferencesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/CreateOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/references"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/DeleteOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/GetOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsReferencesServer/UpdateOrganizationsEnvironmentsReference", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/references/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "references"}, ""))

	pattern_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "references", "name"}, ""))

	pattern_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "references", "name"}, ""))

	pattern_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "references", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsReferencesServer_CreateOrganizationsEnvironmentsReference_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsReferencesServer_DeleteOrganizationsEnvironmentsReference_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsReferencesServer_GetOrganizationsEnvironmentsReference_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsReferencesServer_UpdateOrganizationsEnvironmentsReference_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsResourcefilesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsResourcefilesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsResourcefilesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsResourcefilesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsResourcefilesServerHandler registers the http handlers for service OrganizationsEnvironmentsResourcefilesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsResourcefilesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsResourcefilesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsResourcefilesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsResourcefilesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsResourcefilesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsResourcefilesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsResourcefilesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsResourcefilesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsResourcefilesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsResourcefilesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/CreateOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/DeleteOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/GetOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListOrganizationsEnvironmentsResourcefiles", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsResourcefilesServer/UpdateOrganizationsEnvironmentsResourcefile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/resourcefiles/{type}/{name}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "resourcefiles"}, ""))

	pattern_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 1, 0, 4, 1, 5, 6}, []string{"v1", "organizations", "environments", "parent", "resourcefiles", "type", "name"}, ""))

	pattern_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 1, 0, 4, 1, 5, 6}, []string{"v1", "organizations", "environments", "parent", "resourcefiles", "type", "name"}, ""))

	pattern_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "resourcefiles"}, ""))

	pattern_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5}, []string{"v1", "organizations", "environments", "parent", "resourcefiles", "type"}, ""))

	pattern_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 1, 0, 4, 1, 5, 6}, []string{"v1", "organizations", "environments", "parent", "resourcefiles", "type", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsResourcefilesServer_CreateOrganizationsEnvironmentsResourcefile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsResourcefilesServer_DeleteOrganizationsEnvironmentsResourcefile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsResourcefilesServer_GetOrganizationsEnvironmentsResourcefile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsResourcefilesServer_ListOrganizationsEnvironmentsResourcefiles_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsResourcefilesServer_ListEnvironmentResourcesOrganizationsEnvironmentsResourcefile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsResourcefilesServer_UpdateOrganizationsEnvironmentsResourcefile_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSecurityActionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSecurityActionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSecurityActionsServerHandler registers the http handlers for service OrganizationsEnvironmentsSecurityActionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSecurityActionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSecurityActionsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSecurityActionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSecurityActionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSecurityActionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSecurityActionsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSecurityActionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSecurityActionsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/CreateOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityActions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/DisableOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}:disable"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/EnableOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}:enable"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/GetOrganizationsEnvironmentsSecurityAction", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityActions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityActionsServer/ListOrganizationsEnvironmentsSecurityActions", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityActions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityActions"}, ""))

	pattern_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityActions", "name"}, "disable"))

	pattern_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityActions", "name"}, "enable"))

	pattern_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityActions", "name"}, ""))

	pattern_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityActions"}, ""))
)

var (
	forward_OrganizationsEnvironmentsSecurityActionsServer_CreateOrganizationsEnvironmentsSecurityAction_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityActionsServer_DisableOrganizationsEnvironmentsSecurityAction_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityActionsServer_EnableOrganizationsEnvironmentsSecurityAction_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityActionsServer_GetOrganizationsEnvironmentsSecurityAction_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityActionsServer_ListOrganizationsEnvironmentsSecurityActions_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandler registers the http handlers for service OrganizationsEnvironmentsSecurityIncidentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSecurityIncidentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSecurityIncidentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSecurityIncidentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSecurityIncidentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSecurityIncidentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSecurityIncidentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSecurityIncidentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/BatchUpdateOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityIncidents:batchUpdate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/GetOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityIncidents/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/ListOrganizationsEnvironmentsSecurityIncidents", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityIncidents"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityIncidentsServer/PatchOrganizationsEnvironmentsSecurityIncident", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityIncidents/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityIncidents"}, "batchUpdate"))

	pattern_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityIncidents", "name"}, ""))

	pattern_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityIncidents"}, ""))

	pattern_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityIncidents", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsSecurityIncidentsServer_BatchUpdateOrganizationsEnvironmentsSecurityIncident_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityIncidentsServer_GetOrganizationsEnvironmentsSecurityIncident_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityIncidentsServer_ListOrganizationsEnvironmentsSecurityIncidents_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityIncidentsServer_PatchOrganizationsEnvironmentsSecurityIncident_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSecurityReportsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSecurityReportsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSecurityReportsServerHandler registers the http handlers for service OrganizationsEnvironmentsSecurityReportsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSecurityReportsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSecurityReportsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSecurityReportsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSecurityReportsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSecurityReportsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSecurityReportsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSecurityReportsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSecurityReportsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/CreateOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/GetResultViewOrganizationsEnvironmentsSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/securityReports/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityReportsServer/ListOrganizationsEnvironmentsSecurityReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/securityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityReports"}, ""))

	pattern_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "securityReports", "name"}, ""))

	pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "securityReports", "result", "name"}, ""))

	pattern_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "securityReports", "resultView", "name"}, ""))

	pattern_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "securityReports"}, ""))
)

var (
	forward_OrganizationsEnvironmentsSecurityReportsServer_CreateOrganizationsEnvironmentsSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityReportsServer_GetOrganizationsEnvironmentsSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultOrganizationsEnvironmentsSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityReportsServer_GetResultViewOrganizationsEnvironmentsSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityReportsServer_ListOrganizationsEnvironmentsSecurityReports_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSecurityStatsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSecurityStatsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSecurityStatsServerHandler registers the http handlers for service OrganizationsEnvironmentsSecurityStatsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSecurityStatsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSecurityStatsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSecurityStatsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSecurityStatsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSecurityStatsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSecurityStatsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSecurityStatsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSecurityStatsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTabularStatsOrganizationsEnvironmentsSecurityStat", runtime.WithHTTPPathPattern("/v1/{orgenv=organizations/*/environments/*}/securityStats:queryTabularStats"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSecurityStatsServer/QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat", runtime.WithHTTPPathPattern("/v1/{orgenv=organizations/*/environments/*}/securityStats:queryTimeSeriesStats"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "orgenv", "securityStats"}, "queryTabularStats"))

	pattern_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "orgenv", "securityStats"}, "queryTimeSeriesStats"))
)

var (
	forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTabularStatsOrganizationsEnvironmentsSecurityStat_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSecurityStatsServer_QueryTimeSeriesStatsOrganizationsEnvironmentsSecurityStat_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandler registers the http handlers for service OrganizationsEnvironmentsSharedflowsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSharedflowsDeploymentsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSharedflowsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSharedflowsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSharedflowsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSharedflowsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSharedflowsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSharedflowsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsDeploymentsServer/ListOrganizationsEnvironmentsSharedflowsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/sharedflows/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "sharedflows", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsEnvironmentsSharedflowsDeploymentsServer_ListOrganizationsEnvironmentsSharedflowsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandler registers the http handlers for service OrganizationsEnvironmentsSharedflowsRevisionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsSharedflowsRevisionsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsSharedflowsRevisionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsSharedflowsRevisionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsSharedflowsRevisionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsSharedflowsRevisionsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsSharedflowsRevisionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsSharedflowsRevisionsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/DeployOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsSharedflowsRevisionsServer/UndeployOrganizationsEnvironmentsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "sharedflows", "revisions", "name", "deployments"}, ""))

	pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "sharedflows", "revisions", "name", "deployments"}, ""))

	pattern_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 1, 0, 4, 8, 5, 5, 2, 6}, []string{"v1", "organizations", "environments", "sharedflows", "revisions", "name", "deployments"}, ""))
)

var (
	forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_DeployOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_GetDeploymentsOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsSharedflowsRevisionsServer_UndeployOrganizationsEnvironmentsSharedflowsRevision_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsStatsServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsStatsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsStatsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsStatsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsStatsServerHandler registers the http handlers for service OrganizationsEnvironmentsStatsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsStatsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsStatsServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsStatsServerClient(conn))
}

// RegisterOrganizationsEnvironmentsStatsServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsStatsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsStatsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsStatsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsStatsServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsStatsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsStatsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsStatsServer/GetOrganizationsEnvironmentsStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/stats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 4, 6, 5, 5}, []string{"v1", "organizations", "environments", "stats", ".*", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsStatsServer_GetOrganizationsEnvironmentsStat_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsTargetserversServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsTargetserversServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsTargetserversServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsTargetserversServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsTargetserversServerHandler registers the http handlers for service OrganizationsEnvironmentsTargetserversServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsTargetserversServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsTargetserversServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsTargetserversServerClient(conn))
}

// RegisterOrganizationsEnvironmentsTargetserversServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsTargetserversServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsTargetserversServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsTargetserversServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsTargetserversServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsTargetserversServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsTargetserversServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/CreateOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*}/targetservers"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/DeleteOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/GetOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTargetserversServer/UpdateOrganizationsEnvironmentsTargetserver", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/targetservers/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "environments", "parent", "targetservers"}, ""))

	pattern_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "targetservers", "name"}, ""))

	pattern_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "targetservers", "name"}, ""))

	pattern_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "environments", "targetservers", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsTargetserversServer_CreateOrganizationsEnvironmentsTargetserver_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTargetserversServer_DeleteOrganizationsEnvironmentsTargetserver_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTargetserversServer_GetOrganizationsEnvironmentsTargetserver_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTargetserversServer_UpdateOrganizationsEnvironmentsTargetserver_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerFromEndpoint is same as RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandler registers the http handlers for service OrganizationsEnvironmentsTraceConfigOverridesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerClient(ctx, mux, NewOrganizationsEnvironmentsTraceConfigOverridesServerClient(conn))
}

// RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerClient registers the http handlers for service OrganizationsEnvironmentsTraceConfigOverridesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsEnvironmentsTraceConfigOverridesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsEnvironmentsTraceConfigOverridesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsEnvironmentsTraceConfigOverridesServerClient" to call the correct interceptors.
func RegisterOrganizationsEnvironmentsTraceConfigOverridesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsEnvironmentsTraceConfigOverridesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/CreateOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/traceConfig}/overrides"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/DeleteOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/GetOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/ListOrganizationsEnvironmentsTraceConfigOverrides", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/environments/*/traceConfig}/overrides"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsEnvironmentsTraceConfigOverridesServer/PatchOrganizationsEnvironmentsTraceConfigOverride", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/environments/*/traceConfig/overrides/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "traceConfig", "parent", "overrides"}, ""))

	pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "traceConfig", "overrides", "name"}, ""))

	pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "traceConfig", "overrides", "name"}, ""))

	pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4, 2, 5}, []string{"v1", "organizations", "environments", "traceConfig", "parent", "overrides"}, ""))

	pattern_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 2, 4, 1, 0, 4, 7, 5, 5}, []string{"v1", "organizations", "environments", "traceConfig", "overrides", "name"}, ""))
)

var (
	forward_OrganizationsEnvironmentsTraceConfigOverridesServer_CreateOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTraceConfigOverridesServer_DeleteOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTraceConfigOverridesServer_GetOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTraceConfigOverridesServer_ListOrganizationsEnvironmentsTraceConfigOverrides_0 = runtime.ForwardResponseMessage

	forward_OrganizationsEnvironmentsTraceConfigOverridesServer_PatchOrganizationsEnvironmentsTraceConfigOverride_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsHostQueriesServerHandlerFromEndpoint is same as RegisterOrganizationsHostQueriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsHostQueriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsHostQueriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsHostQueriesServerHandler registers the http handlers for service OrganizationsHostQueriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsHostQueriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsHostQueriesServerHandlerClient(ctx, mux, NewOrganizationsHostQueriesServerClient(conn))
}

// RegisterOrganizationsHostQueriesServerHandlerClient registers the http handlers for service OrganizationsHostQueriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsHostQueriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsHostQueriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsHostQueriesServerClient" to call the correct interceptors.
func RegisterOrganizationsHostQueriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsHostQueriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/CreateOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostQueries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/GetResultViewOrganizationsHostQuery", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostQueries/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostQueriesServer/ListOrganizationsHostQueries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostQueries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "hostQueries"}, ""))

	pattern_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "hostQueries", "name"}, ""))

	pattern_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "hostQueries", "result", "name"}, ""))

	pattern_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "hostQueries", "resultView", "name"}, ""))

	pattern_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "hostQueries"}, ""))
)

var (
	forward_OrganizationsHostQueriesServer_CreateOrganizationsHostQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostQueriesServer_GetOrganizationsHostQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostQueriesServer_GetResultOrganizationsHostQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostQueriesServer_GetResultViewOrganizationsHostQuery_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostQueriesServer_ListOrganizationsHostQueries_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsHostSecurityReportsServerHandlerFromEndpoint is same as RegisterOrganizationsHostSecurityReportsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsHostSecurityReportsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsHostSecurityReportsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsHostSecurityReportsServerHandler registers the http handlers for service OrganizationsHostSecurityReportsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsHostSecurityReportsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsHostSecurityReportsServerHandlerClient(ctx, mux, NewOrganizationsHostSecurityReportsServerClient(conn))
}

// RegisterOrganizationsHostSecurityReportsServerHandlerClient registers the http handlers for service OrganizationsHostSecurityReportsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsHostSecurityReportsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsHostSecurityReportsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsHostSecurityReportsServerClient" to call the correct interceptors.
func RegisterOrganizationsHostSecurityReportsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsHostSecurityReportsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/CreateOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostSecurityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*/result}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/GetResultViewOrganizationsHostSecurityReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostSecurityReports/*/resultView}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostSecurityReportsServer/ListOrganizationsHostSecurityReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/hostSecurityReports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "hostSecurityReports"}, ""))

	pattern_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "hostSecurityReports", "name"}, ""))

	pattern_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "hostSecurityReports", "result", "name"}, ""))

	pattern_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 4, 5, 5, 4}, []string{"v1", "organizations", "hostSecurityReports", "resultView", "name"}, ""))

	pattern_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "hostSecurityReports"}, ""))
)

var (
	forward_OrganizationsHostSecurityReportsServer_CreateOrganizationsHostSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostSecurityReportsServer_GetOrganizationsHostSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostSecurityReportsServer_GetResultOrganizationsHostSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostSecurityReportsServer_GetResultViewOrganizationsHostSecurityReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsHostSecurityReportsServer_ListOrganizationsHostSecurityReports_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsHostStatsServerHandlerFromEndpoint is same as RegisterOrganizationsHostStatsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsHostStatsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsHostStatsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsHostStatsServerHandler registers the http handlers for service OrganizationsHostStatsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsHostStatsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsHostStatsServerHandlerClient(ctx, mux, NewOrganizationsHostStatsServerClient(conn))
}

// RegisterOrganizationsHostStatsServerHandlerClient registers the http handlers for service OrganizationsHostStatsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsHostStatsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsHostStatsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsHostStatsServerClient" to call the correct interceptors.
func RegisterOrganizationsHostStatsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsHostStatsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsHostStatsServer_GetOrganizationsHostStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsHostStatsServer/GetOrganizationsHostStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/hostStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsHostStatsServer_GetOrganizationsHostStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsHostStatsServer_GetOrganizationsHostStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 2, 3, 4, 4, 5, 4}, []string{"v1", "organizations", "hostStats", ".*", "name"}, ""))
)

var (
	forward_OrganizationsHostStatsServer_GetOrganizationsHostStat_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsInstancesServerHandlerFromEndpoint is same as RegisterOrganizationsInstancesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsInstancesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsInstancesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsInstancesServerHandler registers the http handlers for service OrganizationsInstancesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsInstancesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsInstancesServerHandlerClient(ctx, mux, NewOrganizationsInstancesServerClient(conn))
}

// RegisterOrganizationsInstancesServerHandlerClient registers the http handlers for service OrganizationsInstancesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsInstancesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsInstancesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsInstancesServerClient" to call the correct interceptors.
func RegisterOrganizationsInstancesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsInstancesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsInstancesServer_CreateOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/CreateOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/instances"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_CreateOrganizationsInstance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_CreateOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesServer_DeleteOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/DeleteOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_DeleteOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesServer_GetOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/GetOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_GetOrganizationsInstance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_GetOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesServer_ListOrganizationsInstances_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ListOrganizationsInstances", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/instances"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_ListOrganizationsInstances_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_ListOrganizationsInstances_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsInstancesServer_PatchOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/PatchOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_PatchOrganizationsInstance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_PatchOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesServer/ReportStatusOrganizationsInstance", runtime.WithHTTPPathPattern("/v1/{instance=organizations/*/instances/*}:reportStatus"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsInstancesServer_CreateOrganizationsInstance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "instances"}, ""))

	pattern_OrganizationsInstancesServer_DeleteOrganizationsInstance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "instances", "name"}, ""))

	pattern_OrganizationsInstancesServer_GetOrganizationsInstance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "instances", "name"}, ""))

	pattern_OrganizationsInstancesServer_ListOrganizationsInstances_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "instances"}, ""))

	pattern_OrganizationsInstancesServer_PatchOrganizationsInstance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "instances", "name"}, ""))

	pattern_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "instances", "instance"}, "reportStatus"))
)

var (
	forward_OrganizationsInstancesServer_CreateOrganizationsInstance_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesServer_DeleteOrganizationsInstance_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesServer_GetOrganizationsInstance_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesServer_ListOrganizationsInstances_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesServer_PatchOrganizationsInstance_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesServer_ReportStatusOrganizationsInstance_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsInstancesAttachmentsServerHandlerFromEndpoint is same as RegisterOrganizationsInstancesAttachmentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsInstancesAttachmentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsInstancesAttachmentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsInstancesAttachmentsServerHandler registers the http handlers for service OrganizationsInstancesAttachmentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsInstancesAttachmentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsInstancesAttachmentsServerHandlerClient(ctx, mux, NewOrganizationsInstancesAttachmentsServerClient(conn))
}

// RegisterOrganizationsInstancesAttachmentsServerHandlerClient registers the http handlers for service OrganizationsInstancesAttachmentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsInstancesAttachmentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsInstancesAttachmentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsInstancesAttachmentsServerClient" to call the correct interceptors.
func RegisterOrganizationsInstancesAttachmentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsInstancesAttachmentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/CreateOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/DeleteOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/GetOrganizationsInstancesAttachment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/attachments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesAttachmentsServer/ListOrganizationsInstancesAttachments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/attachments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "instances", "parent", "attachments"}, ""))

	pattern_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "attachments", "name"}, ""))

	pattern_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "attachments", "name"}, ""))

	pattern_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "instances", "parent", "attachments"}, ""))
)

var (
	forward_OrganizationsInstancesAttachmentsServer_CreateOrganizationsInstancesAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesAttachmentsServer_DeleteOrganizationsInstancesAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesAttachmentsServer_GetOrganizationsInstancesAttachment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesAttachmentsServer_ListOrganizationsInstancesAttachments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsInstancesCanaryevaluationsServerHandlerFromEndpoint is same as RegisterOrganizationsInstancesCanaryevaluationsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsInstancesCanaryevaluationsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsInstancesCanaryevaluationsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsInstancesCanaryevaluationsServerHandler registers the http handlers for service OrganizationsInstancesCanaryevaluationsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsInstancesCanaryevaluationsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsInstancesCanaryevaluationsServerHandlerClient(ctx, mux, NewOrganizationsInstancesCanaryevaluationsServerClient(conn))
}

// RegisterOrganizationsInstancesCanaryevaluationsServerHandlerClient registers the http handlers for service OrganizationsInstancesCanaryevaluationsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsInstancesCanaryevaluationsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsInstancesCanaryevaluationsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsInstancesCanaryevaluationsServerClient" to call the correct interceptors.
func RegisterOrganizationsInstancesCanaryevaluationsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsInstancesCanaryevaluationsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/CreateOrganizationsInstancesCanaryevaluation", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/canaryevaluations"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesCanaryevaluationsServer/GetOrganizationsInstancesCanaryevaluation", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/canaryevaluations/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "instances", "parent", "canaryevaluations"}, ""))

	pattern_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "canaryevaluations", "name"}, ""))
)

var (
	forward_OrganizationsInstancesCanaryevaluationsServer_CreateOrganizationsInstancesCanaryevaluation_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesCanaryevaluationsServer_GetOrganizationsInstancesCanaryevaluation_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsInstancesNatAddressesServerHandlerFromEndpoint is same as RegisterOrganizationsInstancesNatAddressesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsInstancesNatAddressesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsInstancesNatAddressesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsInstancesNatAddressesServerHandler registers the http handlers for service OrganizationsInstancesNatAddressesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsInstancesNatAddressesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsInstancesNatAddressesServerHandlerClient(ctx, mux, NewOrganizationsInstancesNatAddressesServerClient(conn))
}

// RegisterOrganizationsInstancesNatAddressesServerHandlerClient registers the http handlers for service OrganizationsInstancesNatAddressesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsInstancesNatAddressesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsInstancesNatAddressesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsInstancesNatAddressesServerClient" to call the correct interceptors.
func RegisterOrganizationsInstancesNatAddressesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsInstancesNatAddressesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ActivateOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}:activate"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/CreateOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/natAddresses"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/DeleteOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/GetOrganizationsInstancesNatAddresse", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/instances/*/natAddresses/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsInstancesNatAddressesServer/ListOrganizationsInstancesNatAddresses", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/instances/*}/natAddresses"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "natAddresses", "name"}, "activate"))

	pattern_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "instances", "parent", "natAddresses"}, ""))

	pattern_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "natAddresses", "name"}, ""))

	pattern_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "instances", "natAddresses", "name"}, ""))

	pattern_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "instances", "parent", "natAddresses"}, ""))
)

var (
	forward_OrganizationsInstancesNatAddressesServer_ActivateOrganizationsInstancesNatAddresse_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesNatAddressesServer_CreateOrganizationsInstancesNatAddresse_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesNatAddressesServer_DeleteOrganizationsInstancesNatAddresse_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesNatAddressesServer_GetOrganizationsInstancesNatAddresse_0 = runtime.ForwardResponseMessage

	forward_OrganizationsInstancesNatAddressesServer_ListOrganizationsInstancesNatAddresses_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsKeyvaluemapsServerHandlerFromEndpoint is same as RegisterOrganizationsKeyvaluemapsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsKeyvaluemapsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsKeyvaluemapsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsKeyvaluemapsServerHandler registers the http handlers for service OrganizationsKeyvaluemapsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsKeyvaluemapsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsKeyvaluemapsServerHandlerClient(ctx, mux, NewOrganizationsKeyvaluemapsServerClient(conn))
}

// RegisterOrganizationsKeyvaluemapsServerHandlerClient registers the http handlers for service OrganizationsKeyvaluemapsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsKeyvaluemapsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsKeyvaluemapsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsKeyvaluemapsServerClient" to call the correct interceptors.
func RegisterOrganizationsKeyvaluemapsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsKeyvaluemapsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/CreateOrganizationsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/keyvaluemaps"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsServer/DeleteOrganizationsKeyvaluemap", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "keyvaluemaps"}, ""))

	pattern_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "keyvaluemaps", "name"}, ""))
)

var (
	forward_OrganizationsKeyvaluemapsServer_CreateOrganizationsKeyvaluemap_0 = runtime.ForwardResponseMessage

	forward_OrganizationsKeyvaluemapsServer_DeleteOrganizationsKeyvaluemap_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsKeyvaluemapsEntriesServerHandlerFromEndpoint is same as RegisterOrganizationsKeyvaluemapsEntriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsKeyvaluemapsEntriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsKeyvaluemapsEntriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsKeyvaluemapsEntriesServerHandler registers the http handlers for service OrganizationsKeyvaluemapsEntriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsKeyvaluemapsEntriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsKeyvaluemapsEntriesServerHandlerClient(ctx, mux, NewOrganizationsKeyvaluemapsEntriesServerClient(conn))
}

// RegisterOrganizationsKeyvaluemapsEntriesServerHandlerClient registers the http handlers for service OrganizationsKeyvaluemapsEntriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsKeyvaluemapsEntriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsKeyvaluemapsEntriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsKeyvaluemapsEntriesServerClient" to call the correct interceptors.
func RegisterOrganizationsKeyvaluemapsEntriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsKeyvaluemapsEntriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/CreateOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/DeleteOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/GetOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/ListOrganizationsKeyvaluemapsEntries", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/keyvaluemaps/*}/entries"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsKeyvaluemapsEntriesServer/UpdateOrganizationsKeyvaluemapsEntry", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/keyvaluemaps/*/entries/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "keyvaluemaps", "entries", "name"}, ""))

	pattern_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "keyvaluemaps", "parent", "entries"}, ""))

	pattern_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "keyvaluemaps", "entries", "name"}, ""))
)

var (
	forward_OrganizationsKeyvaluemapsEntriesServer_CreateOrganizationsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsKeyvaluemapsEntriesServer_DeleteOrganizationsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsKeyvaluemapsEntriesServer_GetOrganizationsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage

	forward_OrganizationsKeyvaluemapsEntriesServer_ListOrganizationsKeyvaluemapsEntries_0 = runtime.ForwardResponseMessage

	forward_OrganizationsKeyvaluemapsEntriesServer_UpdateOrganizationsKeyvaluemapsEntry_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsOptimizedHostStatsServerHandlerFromEndpoint is same as RegisterOrganizationsOptimizedHostStatsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsOptimizedHostStatsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsOptimizedHostStatsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsOptimizedHostStatsServerHandler registers the http handlers for service OrganizationsOptimizedHostStatsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsOptimizedHostStatsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsOptimizedHostStatsServerHandlerClient(ctx, mux, NewOrganizationsOptimizedHostStatsServerClient(conn))
}

// RegisterOrganizationsOptimizedHostStatsServerHandlerClient registers the http handlers for service OrganizationsOptimizedHostStatsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsOptimizedHostStatsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsOptimizedHostStatsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsOptimizedHostStatsServerClient" to call the correct interceptors.
func RegisterOrganizationsOptimizedHostStatsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsOptimizedHostStatsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsOptimizedHostStatsServer/GetOrganizationsOptimizedHostStat", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/optimizedHostStats/.*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 2, 3, 4, 4, 5, 4}, []string{"v1", "organizations", "optimizedHostStats", ".*", "name"}, ""))
)

var (
	forward_OrganizationsOptimizedHostStatsServer_GetOrganizationsOptimizedHostStat_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsReportsServerHandlerFromEndpoint is same as RegisterOrganizationsReportsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsReportsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsReportsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsReportsServerHandler registers the http handlers for service OrganizationsReportsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsReportsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsReportsServerHandlerClient(ctx, mux, NewOrganizationsReportsServerClient(conn))
}

// RegisterOrganizationsReportsServerHandlerClient registers the http handlers for service OrganizationsReportsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsReportsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsReportsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsReportsServerClient" to call the correct interceptors.
func RegisterOrganizationsReportsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsReportsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsReportsServer_CreateOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/CreateOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/reports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsReportsServer_CreateOrganizationsReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_CreateOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsReportsServer_DeleteOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/DeleteOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsReportsServer_DeleteOrganizationsReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_DeleteOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsReportsServer_GetOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/GetOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsReportsServer_GetOrganizationsReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_GetOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsReportsServer_ListOrganizationsReports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/ListOrganizationsReports", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/reports"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsReportsServer_ListOrganizationsReports_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_ListOrganizationsReports_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsReportsServer_UpdateOrganizationsReport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsReportsServer/UpdateOrganizationsReport", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/reports/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsReportsServer_UpdateOrganizationsReport_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsReportsServer_UpdateOrganizationsReport_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsReportsServer_CreateOrganizationsReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "reports"}, ""))

	pattern_OrganizationsReportsServer_DeleteOrganizationsReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "reports", "name"}, ""))

	pattern_OrganizationsReportsServer_GetOrganizationsReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "reports", "name"}, ""))

	pattern_OrganizationsReportsServer_ListOrganizationsReports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "reports"}, ""))

	pattern_OrganizationsReportsServer_UpdateOrganizationsReport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "reports", "name"}, ""))
)

var (
	forward_OrganizationsReportsServer_CreateOrganizationsReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsReportsServer_DeleteOrganizationsReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsReportsServer_GetOrganizationsReport_0 = runtime.ForwardResponseMessage

	forward_OrganizationsReportsServer_ListOrganizationsReports_0 = runtime.ForwardResponseMessage

	forward_OrganizationsReportsServer_UpdateOrganizationsReport_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSecurityAssessmentResultsServerHandlerFromEndpoint is same as RegisterOrganizationsSecurityAssessmentResultsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSecurityAssessmentResultsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSecurityAssessmentResultsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSecurityAssessmentResultsServerHandler registers the http handlers for service OrganizationsSecurityAssessmentResultsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSecurityAssessmentResultsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSecurityAssessmentResultsServerHandlerClient(ctx, mux, NewOrganizationsSecurityAssessmentResultsServerClient(conn))
}

// RegisterOrganizationsSecurityAssessmentResultsServerHandlerClient registers the http handlers for service OrganizationsSecurityAssessmentResultsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSecurityAssessmentResultsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSecurityAssessmentResultsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSecurityAssessmentResultsServerClient" to call the correct interceptors.
func RegisterOrganizationsSecurityAssessmentResultsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSecurityAssessmentResultsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityAssessmentResultsServer/BatchComputeOrganizationsSecurityAssessmentResult", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityAssessmentResults}:batchCompute"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 4, 3, 5, 3}, []string{"v1", "organizations", "securityAssessmentResults", "name"}, "batchCompute"))
)

var (
	forward_OrganizationsSecurityAssessmentResultsServer_BatchComputeOrganizationsSecurityAssessmentResult_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSecurityProfilesServerHandlerFromEndpoint is same as RegisterOrganizationsSecurityProfilesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSecurityProfilesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSecurityProfilesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSecurityProfilesServerHandler registers the http handlers for service OrganizationsSecurityProfilesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSecurityProfilesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSecurityProfilesServerHandlerClient(ctx, mux, NewOrganizationsSecurityProfilesServerClient(conn))
}

// RegisterOrganizationsSecurityProfilesServerHandlerClient registers the http handlers for service OrganizationsSecurityProfilesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSecurityProfilesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSecurityProfilesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSecurityProfilesServerClient" to call the correct interceptors.
func RegisterOrganizationsSecurityProfilesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSecurityProfilesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/CreateOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/DeleteOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/GetOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListOrganizationsSecurityProfiles", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfiles"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/ListRevisionsOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}:listRevisions"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesServer/PatchOrganizationsSecurityProfile", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "securityProfiles"}, ""))

	pattern_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfiles", "name"}, ""))

	pattern_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfiles", "name"}, ""))

	pattern_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "securityProfiles"}, ""))

	pattern_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfiles", "name"}, "listRevisions"))

	pattern_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfiles", "name"}, ""))
)

var (
	forward_OrganizationsSecurityProfilesServer_CreateOrganizationsSecurityProfile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesServer_DeleteOrganizationsSecurityProfile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesServer_GetOrganizationsSecurityProfile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesServer_ListOrganizationsSecurityProfiles_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesServer_ListRevisionsOrganizationsSecurityProfile_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesServer_PatchOrganizationsSecurityProfile_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerFromEndpoint is same as RegisterOrganizationsSecurityProfilesEnvironmentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSecurityProfilesEnvironmentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSecurityProfilesEnvironmentsServerHandler registers the http handlers for service OrganizationsSecurityProfilesEnvironmentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSecurityProfilesEnvironmentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerClient(ctx, mux, NewOrganizationsSecurityProfilesEnvironmentsServerClient(conn))
}

// RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerClient registers the http handlers for service OrganizationsSecurityProfilesEnvironmentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSecurityProfilesEnvironmentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSecurityProfilesEnvironmentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSecurityProfilesEnvironmentsServerClient" to call the correct interceptors.
func RegisterOrganizationsSecurityProfilesEnvironmentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSecurityProfilesEnvironmentsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{profile_environment=*}:computeEnvironmentScores"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/CreateOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/securityProfiles/*}/environments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesEnvironmentsServer/DeleteOrganizationsSecurityProfilesEnvironment", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfiles/*/environments/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"v1", "profile_environment"}, "computeEnvironmentScores"))

	pattern_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "securityProfiles", "parent", "environments"}, ""))

	pattern_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "securityProfiles", "environments", "name"}, ""))
)

var (
	forward_OrganizationsSecurityProfilesEnvironmentsServer_ComputeEnvironmentScoresOrganizationsSecurityProfilesEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesEnvironmentsServer_CreateOrganizationsSecurityProfilesEnvironment_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesEnvironmentsServer_DeleteOrganizationsSecurityProfilesEnvironment_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSecurityProfilesV2ServerHandlerFromEndpoint is same as RegisterOrganizationsSecurityProfilesV2ServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSecurityProfilesV2ServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSecurityProfilesV2ServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSecurityProfilesV2ServerHandler registers the http handlers for service OrganizationsSecurityProfilesV2Server to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSecurityProfilesV2ServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSecurityProfilesV2ServerHandlerClient(ctx, mux, NewOrganizationsSecurityProfilesV2ServerClient(conn))
}

// RegisterOrganizationsSecurityProfilesV2ServerHandlerClient registers the http handlers for service OrganizationsSecurityProfilesV2Server
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSecurityProfilesV2ServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSecurityProfilesV2ServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSecurityProfilesV2ServerClient" to call the correct interceptors.
func RegisterOrganizationsSecurityProfilesV2ServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSecurityProfilesV2ServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/CreateOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfilesV2"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/DeleteOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/GetOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/ListOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/securityProfilesV2"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSecurityProfilesV2Server/PatchOrganizationsSecurityProfilesV2", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/securityProfilesV2/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "securityProfilesV2"}, ""))

	pattern_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfilesV2", "name"}, ""))

	pattern_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfilesV2", "name"}, ""))

	pattern_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "securityProfilesV2"}, ""))

	pattern_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "securityProfilesV2", "name"}, ""))
)

var (
	forward_OrganizationsSecurityProfilesV2Server_CreateOrganizationsSecurityProfilesV2_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesV2Server_DeleteOrganizationsSecurityProfilesV2_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesV2Server_GetOrganizationsSecurityProfilesV2_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesV2Server_ListOrganizationsSecurityProfilesV2_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSecurityProfilesV2Server_PatchOrganizationsSecurityProfilesV2_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSharedflowsServerHandlerFromEndpoint is same as RegisterOrganizationsSharedflowsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSharedflowsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSharedflowsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSharedflowsServerHandler registers the http handlers for service OrganizationsSharedflowsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSharedflowsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSharedflowsServerHandlerClient(ctx, mux, NewOrganizationsSharedflowsServerClient(conn))
}

// RegisterOrganizationsSharedflowsServerHandlerClient registers the http handlers for service OrganizationsSharedflowsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSharedflowsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSharedflowsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSharedflowsServerClient" to call the correct interceptors.
func RegisterOrganizationsSharedflowsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSharedflowsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/CreateOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/sharedflows"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/DeleteOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/GetOrganizationsSharedflow", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsServer/ListOrganizationsSharedflows", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*}/sharedflows"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "sharedflows"}, ""))

	pattern_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "sharedflows", "name"}, ""))

	pattern_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3}, []string{"v1", "organizations", "sharedflows", "name"}, ""))

	pattern_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2, 2, 3}, []string{"v1", "organizations", "parent", "sharedflows"}, ""))
)

var (
	forward_OrganizationsSharedflowsServer_CreateOrganizationsSharedflow_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSharedflowsServer_DeleteOrganizationsSharedflow_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSharedflowsServer_GetOrganizationsSharedflow_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSharedflowsServer_ListOrganizationsSharedflows_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSharedflowsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsSharedflowsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSharedflowsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSharedflowsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSharedflowsDeploymentsServerHandler registers the http handlers for service OrganizationsSharedflowsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSharedflowsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSharedflowsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsSharedflowsDeploymentsServerClient(conn))
}

// RegisterOrganizationsSharedflowsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsSharedflowsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSharedflowsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSharedflowsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSharedflowsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsSharedflowsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSharedflowsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsDeploymentsServer/ListOrganizationsSharedflowsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sharedflows/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "sharedflows", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsSharedflowsDeploymentsServer_ListOrganizationsSharedflowsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSharedflowsRevisionsServerHandlerFromEndpoint is same as RegisterOrganizationsSharedflowsRevisionsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSharedflowsRevisionsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSharedflowsRevisionsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSharedflowsRevisionsServerHandler registers the http handlers for service OrganizationsSharedflowsRevisionsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSharedflowsRevisionsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSharedflowsRevisionsServerHandlerClient(ctx, mux, NewOrganizationsSharedflowsRevisionsServerClient(conn))
}

// RegisterOrganizationsSharedflowsRevisionsServerHandlerClient registers the http handlers for service OrganizationsSharedflowsRevisionsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSharedflowsRevisionsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSharedflowsRevisionsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSharedflowsRevisionsServerClient" to call the correct interceptors.
func RegisterOrganizationsSharedflowsRevisionsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSharedflowsRevisionsServerClient) error {

	mux.Handle("DELETE", pattern_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/DeleteOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/GetOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsServer/UpdateSharedFlowRevisionOrganizationsSharedflowsRevision", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sharedflows/*/revisions/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sharedflows", "revisions", "name"}, ""))

	pattern_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sharedflows", "revisions", "name"}, ""))

	pattern_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sharedflows", "revisions", "name"}, ""))
)

var (
	forward_OrganizationsSharedflowsRevisionsServer_DeleteOrganizationsSharedflowsRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSharedflowsRevisionsServer_GetOrganizationsSharedflowsRevision_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSharedflowsRevisionsServer_UpdateSharedFlowRevisionOrganizationsSharedflowsRevision_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerFromEndpoint is same as RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandler registers the http handlers for service OrganizationsSharedflowsRevisionsDeploymentsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerClient(ctx, mux, NewOrganizationsSharedflowsRevisionsDeploymentsServerClient(conn))
}

// RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerClient registers the http handlers for service OrganizationsSharedflowsRevisionsDeploymentsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSharedflowsRevisionsDeploymentsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSharedflowsRevisionsDeploymentsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSharedflowsRevisionsDeploymentsServerClient" to call the correct interceptors.
func RegisterOrganizationsSharedflowsRevisionsDeploymentsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSharedflowsRevisionsDeploymentsServerClient) error {

	mux.Handle("GET", pattern_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSharedflowsRevisionsDeploymentsServer/ListOrganizationsSharedflowsRevisionsDeployments", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sharedflows/*/revisions/*}/deployments"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4, 2, 5}, []string{"v1", "organizations", "sharedflows", "revisions", "parent", "deployments"}, ""))
)

var (
	forward_OrganizationsSharedflowsRevisionsDeploymentsServer_ListOrganizationsSharedflowsRevisionsDeployments_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSitesApicategoriesServerHandlerFromEndpoint is same as RegisterOrganizationsSitesApicategoriesServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSitesApicategoriesServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSitesApicategoriesServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSitesApicategoriesServerHandler registers the http handlers for service OrganizationsSitesApicategoriesServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSitesApicategoriesServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSitesApicategoriesServerHandlerClient(ctx, mux, NewOrganizationsSitesApicategoriesServerClient(conn))
}

// RegisterOrganizationsSitesApicategoriesServerHandlerClient registers the http handlers for service OrganizationsSitesApicategoriesServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSitesApicategoriesServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSitesApicategoriesServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSitesApicategoriesServerClient" to call the correct interceptors.
func RegisterOrganizationsSitesApicategoriesServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSitesApicategoriesServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/CreateOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apicategories"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/DeleteOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/GetOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/ListOrganizationsSitesApicategories", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apicategories"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApicategoriesServer/PatchOrganizationsSitesApicategory", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apicategories/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "sites", "parent", "apicategories"}, ""))

	pattern_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apicategories", "name"}, ""))

	pattern_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apicategories", "name"}, ""))

	pattern_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "sites", "parent", "apicategories"}, ""))

	pattern_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apicategories", "name"}, ""))
)

var (
	forward_OrganizationsSitesApicategoriesServer_CreateOrganizationsSitesApicategory_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApicategoriesServer_DeleteOrganizationsSitesApicategory_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApicategoriesServer_GetOrganizationsSitesApicategory_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApicategoriesServer_ListOrganizationsSitesApicategories_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApicategoriesServer_PatchOrganizationsSitesApicategory_0 = runtime.ForwardResponseMessage
)

// RegisterOrganizationsSitesApidocsServerHandlerFromEndpoint is same as RegisterOrganizationsSitesApidocsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterOrganizationsSitesApidocsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterOrganizationsSitesApidocsServerHandler(ctx, mux, conn)
}

// RegisterOrganizationsSitesApidocsServerHandler registers the http handlers for service OrganizationsSitesApidocsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterOrganizationsSitesApidocsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterOrganizationsSitesApidocsServerHandlerClient(ctx, mux, NewOrganizationsSitesApidocsServerClient(conn))
}

// RegisterOrganizationsSitesApidocsServerHandlerClient registers the http handlers for service OrganizationsSitesApidocsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "OrganizationsSitesApidocsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "OrganizationsSitesApidocsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "OrganizationsSitesApidocsServerClient" to call the correct interceptors.
func RegisterOrganizationsSitesApidocsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client OrganizationsSitesApidocsServerClient) error {

	mux.Handle("POST", pattern_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/CreateOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apidocs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("DELETE", pattern_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/DeleteOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/GetDocumentationOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*/documentation}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/ListOrganizationsSitesApidocs", runtime.WithHTTPPathPattern("/v1/{parent=organizations/*/sites/*}/apidocs"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PUT", pattern_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("PATCH", pattern_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.OrganizationsSitesApidocsServer/UpdateDocumentationOrganizationsSitesApidoc", runtime.WithHTTPPathPattern("/v1/{name=organizations/*/sites/*/apidocs/*/documentation}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "sites", "parent", "apidocs"}, ""))

	pattern_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apidocs", "name"}, ""))

	pattern_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apidocs", "name"}, ""))

	pattern_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "sites", "apidocs", "documentation", "name"}, ""))

	pattern_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 4, 4, 5, 3, 2, 4}, []string{"v1", "organizations", "sites", "parent", "apidocs"}, ""))

	pattern_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 4, 6, 5, 4}, []string{"v1", "organizations", "sites", "apidocs", "name"}, ""))

	pattern_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 2, 2, 1, 0, 2, 3, 1, 0, 2, 4, 4, 7, 5, 5}, []string{"v1", "organizations", "sites", "apidocs", "documentation", "name"}, ""))
)

var (
	forward_OrganizationsSitesApidocsServer_CreateOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_DeleteOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_GetOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_GetDocumentationOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_ListOrganizationsSitesApidocs_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_UpdateOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage

	forward_OrganizationsSitesApidocsServer_UpdateDocumentationOrganizationsSitesApidoc_0 = runtime.ForwardResponseMessage
)

// RegisterProjectsServerHandlerFromEndpoint is same as RegisterProjectsServerHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterProjectsServerHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.Dial(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Infof("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterProjectsServerHandler(ctx, mux, conn)
}

// RegisterProjectsServerHandler registers the http handlers for service ProjectsServer to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterProjectsServerHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterProjectsServerHandlerClient(ctx, mux, NewProjectsServerClient(conn))
}

// RegisterProjectsServerHandlerClient registers the http handlers for service ProjectsServer
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "ProjectsServerClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "ProjectsServerClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "ProjectsServerClient" to call the correct interceptors.
func RegisterProjectsServerHandlerClient(ctx context.Context, mux *runtime.ServeMux, client ProjectsServerClient) error {

	mux.Handle("POST", pattern_ProjectsServer_ProvisionOrganizationProject_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		var err error
		var annotatedContext context.Context
		annotatedContext, err = runtime.AnnotateContext(ctx, mux, req, "/mockgcp.cloud.apigee.v1.ProjectsServer/ProvisionOrganizationProject", runtime.WithHTTPPathPattern("/v1/{name=projects/*}:provisionOrganization"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_ProjectsServer_ProvisionOrganizationProject_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}

		forward_ProjectsServer_ProvisionOrganizationProject_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_ProjectsServer_ProvisionOrganizationProject_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 1, 0, 4, 2, 5, 2}, []string{"v1", "projects", "name"}, "provisionOrganization"))
)

var (
	forward_ProjectsServer_ProvisionOrganizationProject_0 = runtime.ForwardResponseMessage
)
