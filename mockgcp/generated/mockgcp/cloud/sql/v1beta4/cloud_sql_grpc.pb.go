// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1beta4/cloud_sql.proto

package sqlpb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlBackupRunsServiceClient is the client API for SqlBackupRunsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlBackupRunsServiceClient interface {
	// Deletes the backup taken by a backup run.
	Delete(ctx context.Context, in *SqlBackupRunsDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a backup run.
	Get(ctx context.Context, in *SqlBackupRunsGetRequest, opts ...grpc.CallOption) (*BackupRun, error)
	// Creates a new backup run on demand.
	Insert(ctx context.Context, in *SqlBackupRunsInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists all backup runs associated with the project or a given instance and
	// configuration in the reverse chronological order of the backup initiation
	// time.
	List(ctx context.Context, in *SqlBackupRunsListRequest, opts ...grpc.CallOption) (*BackupRunsListResponse, error)
}

type sqlBackupRunsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlBackupRunsServiceClient(cc grpc.ClientConnInterface) SqlBackupRunsServiceClient {
	return &sqlBackupRunsServiceClient{cc}
}

func (c *sqlBackupRunsServiceClient) Delete(ctx context.Context, in *SqlBackupRunsDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) Get(ctx context.Context, in *SqlBackupRunsGetRequest, opts ...grpc.CallOption) (*BackupRun, error) {
	out := new(BackupRun)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) Insert(ctx context.Context, in *SqlBackupRunsInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlBackupRunsServiceClient) List(ctx context.Context, in *SqlBackupRunsListRequest, opts ...grpc.CallOption) (*BackupRunsListResponse, error) {
	out := new(BackupRunsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlBackupRunsServiceServer is the server API for SqlBackupRunsService service.
// All implementations must embed UnimplementedSqlBackupRunsServiceServer
// for forward compatibility
type SqlBackupRunsServiceServer interface {
	// Deletes the backup taken by a backup run.
	Delete(context.Context, *SqlBackupRunsDeleteRequest) (*Operation, error)
	// Retrieves a resource containing information about a backup run.
	Get(context.Context, *SqlBackupRunsGetRequest) (*BackupRun, error)
	// Creates a new backup run on demand.
	Insert(context.Context, *SqlBackupRunsInsertRequest) (*Operation, error)
	// Lists all backup runs associated with the project or a given instance and
	// configuration in the reverse chronological order of the backup initiation
	// time.
	List(context.Context, *SqlBackupRunsListRequest) (*BackupRunsListResponse, error)
	mustEmbedUnimplementedSqlBackupRunsServiceServer()
}

// UnimplementedSqlBackupRunsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlBackupRunsServiceServer struct {
}

func (UnimplementedSqlBackupRunsServiceServer) Delete(context.Context, *SqlBackupRunsDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) Get(context.Context, *SqlBackupRunsGetRequest) (*BackupRun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) Insert(context.Context, *SqlBackupRunsInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) List(context.Context, *SqlBackupRunsListRequest) (*BackupRunsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlBackupRunsServiceServer) mustEmbedUnimplementedSqlBackupRunsServiceServer() {}

// UnsafeSqlBackupRunsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlBackupRunsServiceServer will
// result in compilation errors.
type UnsafeSqlBackupRunsServiceServer interface {
	mustEmbedUnimplementedSqlBackupRunsServiceServer()
}

func RegisterSqlBackupRunsServiceServer(s grpc.ServiceRegistrar, srv SqlBackupRunsServiceServer) {
	s.RegisterService(&SqlBackupRunsService_ServiceDesc, srv)
}

func _SqlBackupRunsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Delete(ctx, req.(*SqlBackupRunsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Get(ctx, req.(*SqlBackupRunsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).Insert(ctx, req.(*SqlBackupRunsInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlBackupRunsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlBackupRunsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlBackupRunsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlBackupRunsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlBackupRunsServiceServer).List(ctx, req.(*SqlBackupRunsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlBackupRunsService_ServiceDesc is the grpc.ServiceDesc for SqlBackupRunsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlBackupRunsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlBackupRunsService",
	HandlerType: (*SqlBackupRunsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlBackupRunsService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlBackupRunsService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlBackupRunsService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlBackupRunsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}

// SqlDatabasesServiceClient is the client API for SqlDatabasesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlDatabasesServiceClient interface {
	// Deletes a database from a Cloud SQL instance.
	Delete(ctx context.Context, in *SqlDatabasesDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a database inside a Cloud
	// SQL instance.
	Get(ctx context.Context, in *SqlDatabasesGetRequest, opts ...grpc.CallOption) (*Database, error)
	// Inserts a resource containing information about a database inside a Cloud
	// SQL instance.
	//
	// **Note:** You can't modify the default character set and collation.
	Insert(ctx context.Context, in *SqlDatabasesInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists databases in the specified Cloud SQL instance.
	List(ctx context.Context, in *SqlDatabasesListRequest, opts ...grpc.CallOption) (*DatabasesListResponse, error)
	// Partially updates a resource containing information about a database inside
	// a Cloud SQL instance. This method supports patch semantics.
	Patch(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
	// Updates a resource containing information about a database inside a Cloud
	// SQL instance.
	Update(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
}

type sqlDatabasesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlDatabasesServiceClient(cc grpc.ClientConnInterface) SqlDatabasesServiceClient {
	return &sqlDatabasesServiceClient{cc}
}

func (c *sqlDatabasesServiceClient) Delete(ctx context.Context, in *SqlDatabasesDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Get(ctx context.Context, in *SqlDatabasesGetRequest, opts ...grpc.CallOption) (*Database, error) {
	out := new(Database)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Insert(ctx context.Context, in *SqlDatabasesInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) List(ctx context.Context, in *SqlDatabasesListRequest, opts ...grpc.CallOption) (*DatabasesListResponse, error) {
	out := new(DatabasesListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Patch(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlDatabasesServiceClient) Update(ctx context.Context, in *SqlDatabasesUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlDatabasesServiceServer is the server API for SqlDatabasesService service.
// All implementations must embed UnimplementedSqlDatabasesServiceServer
// for forward compatibility
type SqlDatabasesServiceServer interface {
	// Deletes a database from a Cloud SQL instance.
	Delete(context.Context, *SqlDatabasesDeleteRequest) (*Operation, error)
	// Retrieves a resource containing information about a database inside a Cloud
	// SQL instance.
	Get(context.Context, *SqlDatabasesGetRequest) (*Database, error)
	// Inserts a resource containing information about a database inside a Cloud
	// SQL instance.
	//
	// **Note:** You can't modify the default character set and collation.
	Insert(context.Context, *SqlDatabasesInsertRequest) (*Operation, error)
	// Lists databases in the specified Cloud SQL instance.
	List(context.Context, *SqlDatabasesListRequest) (*DatabasesListResponse, error)
	// Partially updates a resource containing information about a database inside
	// a Cloud SQL instance. This method supports patch semantics.
	Patch(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error)
	// Updates a resource containing information about a database inside a Cloud
	// SQL instance.
	Update(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error)
	mustEmbedUnimplementedSqlDatabasesServiceServer()
}

// UnimplementedSqlDatabasesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlDatabasesServiceServer struct {
}

func (UnimplementedSqlDatabasesServiceServer) Delete(context.Context, *SqlDatabasesDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Get(context.Context, *SqlDatabasesGetRequest) (*Database, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Insert(context.Context, *SqlDatabasesInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) List(context.Context, *SqlDatabasesListRequest) (*DatabasesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Patch(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) Update(context.Context, *SqlDatabasesUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSqlDatabasesServiceServer) mustEmbedUnimplementedSqlDatabasesServiceServer() {}

// UnsafeSqlDatabasesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlDatabasesServiceServer will
// result in compilation errors.
type UnsafeSqlDatabasesServiceServer interface {
	mustEmbedUnimplementedSqlDatabasesServiceServer()
}

func RegisterSqlDatabasesServiceServer(s grpc.ServiceRegistrar, srv SqlDatabasesServiceServer) {
	s.RegisterService(&SqlDatabasesService_ServiceDesc, srv)
}

func _SqlDatabasesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Delete(ctx, req.(*SqlDatabasesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Get(ctx, req.(*SqlDatabasesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Insert(ctx, req.(*SqlDatabasesInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).List(ctx, req.(*SqlDatabasesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Patch(ctx, req.(*SqlDatabasesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlDatabasesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlDatabasesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlDatabasesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlDatabasesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlDatabasesServiceServer).Update(ctx, req.(*SqlDatabasesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlDatabasesService_ServiceDesc is the grpc.ServiceDesc for SqlDatabasesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlDatabasesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlDatabasesService",
	HandlerType: (*SqlDatabasesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlDatabasesService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlDatabasesService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlDatabasesService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlDatabasesService_List_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SqlDatabasesService_Patch_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SqlDatabasesService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}

// SqlFlagsServiceClient is the client API for SqlFlagsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlFlagsServiceClient interface {
	// Lists all available database flags for Cloud SQL instances.
	List(ctx context.Context, in *SqlFlagsListRequest, opts ...grpc.CallOption) (*FlagsListResponse, error)
}

type sqlFlagsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlFlagsServiceClient(cc grpc.ClientConnInterface) SqlFlagsServiceClient {
	return &sqlFlagsServiceClient{cc}
}

func (c *sqlFlagsServiceClient) List(ctx context.Context, in *SqlFlagsListRequest, opts ...grpc.CallOption) (*FlagsListResponse, error) {
	out := new(FlagsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlFlagsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlFlagsServiceServer is the server API for SqlFlagsService service.
// All implementations must embed UnimplementedSqlFlagsServiceServer
// for forward compatibility
type SqlFlagsServiceServer interface {
	// Lists all available database flags for Cloud SQL instances.
	List(context.Context, *SqlFlagsListRequest) (*FlagsListResponse, error)
	mustEmbedUnimplementedSqlFlagsServiceServer()
}

// UnimplementedSqlFlagsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlFlagsServiceServer struct {
}

func (UnimplementedSqlFlagsServiceServer) List(context.Context, *SqlFlagsListRequest) (*FlagsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlFlagsServiceServer) mustEmbedUnimplementedSqlFlagsServiceServer() {}

// UnsafeSqlFlagsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlFlagsServiceServer will
// result in compilation errors.
type UnsafeSqlFlagsServiceServer interface {
	mustEmbedUnimplementedSqlFlagsServiceServer()
}

func RegisterSqlFlagsServiceServer(s grpc.ServiceRegistrar, srv SqlFlagsServiceServer) {
	s.RegisterService(&SqlFlagsService_ServiceDesc, srv)
}

func _SqlFlagsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlFlagsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlFlagsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlFlagsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlFlagsServiceServer).List(ctx, req.(*SqlFlagsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlFlagsService_ServiceDesc is the grpc.ServiceDesc for SqlFlagsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlFlagsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlFlagsService",
	HandlerType: (*SqlFlagsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SqlFlagsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}

// SqlInstancesServiceClient is the client API for SqlInstancesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlInstancesServiceClient interface {
	// Add a new trusted Certificate Authority (CA) version for the specified
	// instance. Required to prepare for a certificate rotation. If a CA version
	// was previously added but never used in a certificate rotation, this
	// operation replaces that version. There cannot be more than one CA version
	// waiting to be rotated in.
	AddServerCa(ctx context.Context, in *SqlInstancesAddServerCaRequest, opts ...grpc.CallOption) (*Operation, error)
	// Creates a Cloud SQL instance as a clone of the source instance. Using this
	// operation might cause your instance to restart.
	Clone(ctx context.Context, in *SqlInstancesCloneRequest, opts ...grpc.CallOption) (*Operation, error)
	// Deletes a Cloud SQL instance.
	Delete(ctx context.Context, in *SqlInstancesDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Demotes the stand-alone instance to be a Cloud SQL read replica for an
	// external database server.
	DemoteMaster(ctx context.Context, in *SqlInstancesDemoteMasterRequest, opts ...grpc.CallOption) (*Operation, error)
	// Demotes an existing standalone instance to be a Cloud SQL read replica
	// for an external database server.
	Demote(ctx context.Context, in *SqlInstancesDemoteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
	// dump or CSV file.
	Export(ctx context.Context, in *SqlInstancesExportRequest, opts ...grpc.CallOption) (*Operation, error)
	// Initiates a manual failover of a high availability (HA) primary instance
	// to a standby instance, which becomes the primary instance. Users are
	// then rerouted to the new primary. For more information, see the
	// [Overview of high
	// availability](https://cloud.google.com/sql/docs/mysql/high-availability)
	// page in the Cloud SQL documentation.
	// If using Legacy HA (MySQL only), this causes the instance to failover to
	// its failover replica instance.
	Failover(ctx context.Context, in *SqlInstancesFailoverRequest, opts ...grpc.CallOption) (*Operation, error)
	// Reencrypt CMEK instance with latest key version.
	Reencrypt(ctx context.Context, in *SqlInstancesReencryptRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a Cloud SQL instance.
	Get(ctx context.Context, in *SqlInstancesGetRequest, opts ...grpc.CallOption) (*DatabaseInstance, error)
	// Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
	// Cloud Storage.
	Import(ctx context.Context, in *SqlInstancesImportRequest, opts ...grpc.CallOption) (*Operation, error)
	// Creates a new Cloud SQL instance.
	Insert(ctx context.Context, in *SqlInstancesInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists instances under a given project.
	List(ctx context.Context, in *SqlInstancesListRequest, opts ...grpc.CallOption) (*InstancesListResponse, error)
	// Lists all of the trusted Certificate Authorities (CAs) for the specified
	// instance. There can be up to three CAs listed: the CA that was used to sign
	// the certificate that is currently in use, a CA that has been added but not
	// yet used to sign a certificate, and a CA used to sign a certificate that
	// has previously rotated out.
	ListServerCas(ctx context.Context, in *SqlInstancesListServerCasRequest, opts ...grpc.CallOption) (*InstancesListServerCasResponse, error)
	// Partially updates settings of a Cloud SQL instance by merging the request
	// with the current configuration. This method supports patch semantics.
	Patch(ctx context.Context, in *SqlInstancesPatchRequest, opts ...grpc.CallOption) (*Operation, error)
	// Promotes the read replica instance to be a stand-alone Cloud SQL instance.
	// Using this operation might cause your instance to restart.
	PromoteReplica(ctx context.Context, in *SqlInstancesPromoteReplicaRequest, opts ...grpc.CallOption) (*Operation, error)
	// Switches over from the primary instance to a replica instance.
	Switchover(ctx context.Context, in *SqlInstancesSwitchoverRequest, opts ...grpc.CallOption) (*Operation, error)
	// Deletes all client certificates and generates a new server SSL certificate
	// for the instance.
	ResetSslConfig(ctx context.Context, in *SqlInstancesResetSslConfigRequest, opts ...grpc.CallOption) (*Operation, error)
	// Restarts a Cloud SQL instance.
	Restart(ctx context.Context, in *SqlInstancesRestartRequest, opts ...grpc.CallOption) (*Operation, error)
	// Restores a backup of a Cloud SQL instance. Using this operation might cause
	// your instance to restart.
	RestoreBackup(ctx context.Context, in *SqlInstancesRestoreBackupRequest, opts ...grpc.CallOption) (*Operation, error)
	// Rotates the server certificate to one signed by the Certificate Authority
	// (CA) version previously added with the addServerCA method.
	RotateServerCa(ctx context.Context, in *SqlInstancesRotateServerCaRequest, opts ...grpc.CallOption) (*Operation, error)
	// Starts the replication in the read replica instance.
	StartReplica(ctx context.Context, in *SqlInstancesStartReplicaRequest, opts ...grpc.CallOption) (*Operation, error)
	// Stops the replication in the read replica instance.
	StopReplica(ctx context.Context, in *SqlInstancesStopReplicaRequest, opts ...grpc.CallOption) (*Operation, error)
	// Truncate MySQL general and slow query log tables
	// MySQL only.
	TruncateLog(ctx context.Context, in *SqlInstancesTruncateLogRequest, opts ...grpc.CallOption) (*Operation, error)
	// Updates settings of a Cloud SQL instance. Using this operation might cause
	// your instance to restart.
	Update(ctx context.Context, in *SqlInstancesUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
	// Generates a short-lived X509 certificate containing the provided public key
	// and signed by a private key specific to the target instance. Users may use
	// the certificate to authenticate as themselves when connecting to the
	// database.
	CreateEphemeral(ctx context.Context, in *SqlInstancesCreateEphemeralCertRequest, opts ...grpc.CallOption) (*SslCert, error)
	// Reschedules the maintenance on the given instance.
	RescheduleMaintenance(ctx context.Context, in *SqlInstancesRescheduleMaintenanceRequest, opts ...grpc.CallOption) (*Operation, error)
	// Verify External primary instance external sync settings.
	VerifyExternalSyncSettings(ctx context.Context, in *SqlInstancesVerifyExternalSyncSettingsRequest, opts ...grpc.CallOption) (*SqlInstancesVerifyExternalSyncSettingsResponse, error)
	// Start External primary instance migration.
	StartExternalSync(ctx context.Context, in *SqlInstancesStartExternalSyncRequest, opts ...grpc.CallOption) (*Operation, error)
	// Perform Disk Shrink on primary instance.
	PerformDiskShrink(ctx context.Context, in *SqlInstancesPerformDiskShrinkRequest, opts ...grpc.CallOption) (*Operation, error)
	// Get Disk Shrink Config for a given instance.
	GetDiskShrinkConfig(ctx context.Context, in *SqlInstancesGetDiskShrinkConfigRequest, opts ...grpc.CallOption) (*SqlInstancesGetDiskShrinkConfigResponse, error)
	// Reset Replica Size to primary instance disk size.
	ResetReplicaSize(ctx context.Context, in *SqlInstancesResetReplicaSizeRequest, opts ...grpc.CallOption) (*Operation, error)
	// Get Latest Recovery Time for a given instance.
	GetLatestRecoveryTime(ctx context.Context, in *SqlInstancesGetLatestRecoveryTimeRequest, opts ...grpc.CallOption) (*SqlInstancesGetLatestRecoveryTimeResponse, error)
	// Acquire a lease for the setup of SQL Server Reporting Services (SSRS).
	AcquireSsrsLease(ctx context.Context, in *SqlInstancesAcquireSsrsLeaseRequest, opts ...grpc.CallOption) (*SqlInstancesAcquireSsrsLeaseResponse, error)
	// Release a lease for the setup of SQL Server Reporting Services (SSRS).
	ReleaseSsrsLease(ctx context.Context, in *SqlInstancesReleaseSsrsLeaseRequest, opts ...grpc.CallOption) (*SqlInstancesReleaseSsrsLeaseResponse, error)
}

type sqlInstancesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlInstancesServiceClient(cc grpc.ClientConnInterface) SqlInstancesServiceClient {
	return &sqlInstancesServiceClient{cc}
}

func (c *sqlInstancesServiceClient) AddServerCa(ctx context.Context, in *SqlInstancesAddServerCaRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/AddServerCa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Clone(ctx context.Context, in *SqlInstancesCloneRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Delete(ctx context.Context, in *SqlInstancesDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) DemoteMaster(ctx context.Context, in *SqlInstancesDemoteMasterRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/DemoteMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Demote(ctx context.Context, in *SqlInstancesDemoteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Demote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Export(ctx context.Context, in *SqlInstancesExportRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Failover(ctx context.Context, in *SqlInstancesFailoverRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Failover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Reencrypt(ctx context.Context, in *SqlInstancesReencryptRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Reencrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Get(ctx context.Context, in *SqlInstancesGetRequest, opts ...grpc.CallOption) (*DatabaseInstance, error) {
	out := new(DatabaseInstance)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Import(ctx context.Context, in *SqlInstancesImportRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Insert(ctx context.Context, in *SqlInstancesInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) List(ctx context.Context, in *SqlInstancesListRequest, opts ...grpc.CallOption) (*InstancesListResponse, error) {
	out := new(InstancesListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) ListServerCas(ctx context.Context, in *SqlInstancesListServerCasRequest, opts ...grpc.CallOption) (*InstancesListServerCasResponse, error) {
	out := new(InstancesListServerCasResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ListServerCas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Patch(ctx context.Context, in *SqlInstancesPatchRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Patch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) PromoteReplica(ctx context.Context, in *SqlInstancesPromoteReplicaRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/PromoteReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Switchover(ctx context.Context, in *SqlInstancesSwitchoverRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Switchover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) ResetSslConfig(ctx context.Context, in *SqlInstancesResetSslConfigRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ResetSslConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Restart(ctx context.Context, in *SqlInstancesRestartRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) RestoreBackup(ctx context.Context, in *SqlInstancesRestoreBackupRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RestoreBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) RotateServerCa(ctx context.Context, in *SqlInstancesRotateServerCaRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RotateServerCa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) StartReplica(ctx context.Context, in *SqlInstancesStartReplicaRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StartReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) StopReplica(ctx context.Context, in *SqlInstancesStopReplicaRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StopReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) TruncateLog(ctx context.Context, in *SqlInstancesTruncateLogRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/TruncateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) Update(ctx context.Context, in *SqlInstancesUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) CreateEphemeral(ctx context.Context, in *SqlInstancesCreateEphemeralCertRequest, opts ...grpc.CallOption) (*SslCert, error) {
	out := new(SslCert)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/CreateEphemeral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) RescheduleMaintenance(ctx context.Context, in *SqlInstancesRescheduleMaintenanceRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RescheduleMaintenance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) VerifyExternalSyncSettings(ctx context.Context, in *SqlInstancesVerifyExternalSyncSettingsRequest, opts ...grpc.CallOption) (*SqlInstancesVerifyExternalSyncSettingsResponse, error) {
	out := new(SqlInstancesVerifyExternalSyncSettingsResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/VerifyExternalSyncSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) StartExternalSync(ctx context.Context, in *SqlInstancesStartExternalSyncRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StartExternalSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) PerformDiskShrink(ctx context.Context, in *SqlInstancesPerformDiskShrinkRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/PerformDiskShrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) GetDiskShrinkConfig(ctx context.Context, in *SqlInstancesGetDiskShrinkConfigRequest, opts ...grpc.CallOption) (*SqlInstancesGetDiskShrinkConfigResponse, error) {
	out := new(SqlInstancesGetDiskShrinkConfigResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/GetDiskShrinkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) ResetReplicaSize(ctx context.Context, in *SqlInstancesResetReplicaSizeRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ResetReplicaSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) GetLatestRecoveryTime(ctx context.Context, in *SqlInstancesGetLatestRecoveryTimeRequest, opts ...grpc.CallOption) (*SqlInstancesGetLatestRecoveryTimeResponse, error) {
	out := new(SqlInstancesGetLatestRecoveryTimeResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/GetLatestRecoveryTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) AcquireSsrsLease(ctx context.Context, in *SqlInstancesAcquireSsrsLeaseRequest, opts ...grpc.CallOption) (*SqlInstancesAcquireSsrsLeaseResponse, error) {
	out := new(SqlInstancesAcquireSsrsLeaseResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/AcquireSsrsLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlInstancesServiceClient) ReleaseSsrsLease(ctx context.Context, in *SqlInstancesReleaseSsrsLeaseRequest, opts ...grpc.CallOption) (*SqlInstancesReleaseSsrsLeaseResponse, error) {
	out := new(SqlInstancesReleaseSsrsLeaseResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ReleaseSsrsLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlInstancesServiceServer is the server API for SqlInstancesService service.
// All implementations must embed UnimplementedSqlInstancesServiceServer
// for forward compatibility
type SqlInstancesServiceServer interface {
	// Add a new trusted Certificate Authority (CA) version for the specified
	// instance. Required to prepare for a certificate rotation. If a CA version
	// was previously added but never used in a certificate rotation, this
	// operation replaces that version. There cannot be more than one CA version
	// waiting to be rotated in.
	AddServerCa(context.Context, *SqlInstancesAddServerCaRequest) (*Operation, error)
	// Creates a Cloud SQL instance as a clone of the source instance. Using this
	// operation might cause your instance to restart.
	Clone(context.Context, *SqlInstancesCloneRequest) (*Operation, error)
	// Deletes a Cloud SQL instance.
	Delete(context.Context, *SqlInstancesDeleteRequest) (*Operation, error)
	// Demotes the stand-alone instance to be a Cloud SQL read replica for an
	// external database server.
	DemoteMaster(context.Context, *SqlInstancesDemoteMasterRequest) (*Operation, error)
	// Demotes an existing standalone instance to be a Cloud SQL read replica
	// for an external database server.
	Demote(context.Context, *SqlInstancesDemoteRequest) (*Operation, error)
	// Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
	// dump or CSV file.
	Export(context.Context, *SqlInstancesExportRequest) (*Operation, error)
	// Initiates a manual failover of a high availability (HA) primary instance
	// to a standby instance, which becomes the primary instance. Users are
	// then rerouted to the new primary. For more information, see the
	// [Overview of high
	// availability](https://cloud.google.com/sql/docs/mysql/high-availability)
	// page in the Cloud SQL documentation.
	// If using Legacy HA (MySQL only), this causes the instance to failover to
	// its failover replica instance.
	Failover(context.Context, *SqlInstancesFailoverRequest) (*Operation, error)
	// Reencrypt CMEK instance with latest key version.
	Reencrypt(context.Context, *SqlInstancesReencryptRequest) (*Operation, error)
	// Retrieves a resource containing information about a Cloud SQL instance.
	Get(context.Context, *SqlInstancesGetRequest) (*DatabaseInstance, error)
	// Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
	// Cloud Storage.
	Import(context.Context, *SqlInstancesImportRequest) (*Operation, error)
	// Creates a new Cloud SQL instance.
	Insert(context.Context, *SqlInstancesInsertRequest) (*Operation, error)
	// Lists instances under a given project.
	List(context.Context, *SqlInstancesListRequest) (*InstancesListResponse, error)
	// Lists all of the trusted Certificate Authorities (CAs) for the specified
	// instance. There can be up to three CAs listed: the CA that was used to sign
	// the certificate that is currently in use, a CA that has been added but not
	// yet used to sign a certificate, and a CA used to sign a certificate that
	// has previously rotated out.
	ListServerCas(context.Context, *SqlInstancesListServerCasRequest) (*InstancesListServerCasResponse, error)
	// Partially updates settings of a Cloud SQL instance by merging the request
	// with the current configuration. This method supports patch semantics.
	Patch(context.Context, *SqlInstancesPatchRequest) (*Operation, error)
	// Promotes the read replica instance to be a stand-alone Cloud SQL instance.
	// Using this operation might cause your instance to restart.
	PromoteReplica(context.Context, *SqlInstancesPromoteReplicaRequest) (*Operation, error)
	// Switches over from the primary instance to a replica instance.
	Switchover(context.Context, *SqlInstancesSwitchoverRequest) (*Operation, error)
	// Deletes all client certificates and generates a new server SSL certificate
	// for the instance.
	ResetSslConfig(context.Context, *SqlInstancesResetSslConfigRequest) (*Operation, error)
	// Restarts a Cloud SQL instance.
	Restart(context.Context, *SqlInstancesRestartRequest) (*Operation, error)
	// Restores a backup of a Cloud SQL instance. Using this operation might cause
	// your instance to restart.
	RestoreBackup(context.Context, *SqlInstancesRestoreBackupRequest) (*Operation, error)
	// Rotates the server certificate to one signed by the Certificate Authority
	// (CA) version previously added with the addServerCA method.
	RotateServerCa(context.Context, *SqlInstancesRotateServerCaRequest) (*Operation, error)
	// Starts the replication in the read replica instance.
	StartReplica(context.Context, *SqlInstancesStartReplicaRequest) (*Operation, error)
	// Stops the replication in the read replica instance.
	StopReplica(context.Context, *SqlInstancesStopReplicaRequest) (*Operation, error)
	// Truncate MySQL general and slow query log tables
	// MySQL only.
	TruncateLog(context.Context, *SqlInstancesTruncateLogRequest) (*Operation, error)
	// Updates settings of a Cloud SQL instance. Using this operation might cause
	// your instance to restart.
	Update(context.Context, *SqlInstancesUpdateRequest) (*Operation, error)
	// Generates a short-lived X509 certificate containing the provided public key
	// and signed by a private key specific to the target instance. Users may use
	// the certificate to authenticate as themselves when connecting to the
	// database.
	CreateEphemeral(context.Context, *SqlInstancesCreateEphemeralCertRequest) (*SslCert, error)
	// Reschedules the maintenance on the given instance.
	RescheduleMaintenance(context.Context, *SqlInstancesRescheduleMaintenanceRequest) (*Operation, error)
	// Verify External primary instance external sync settings.
	VerifyExternalSyncSettings(context.Context, *SqlInstancesVerifyExternalSyncSettingsRequest) (*SqlInstancesVerifyExternalSyncSettingsResponse, error)
	// Start External primary instance migration.
	StartExternalSync(context.Context, *SqlInstancesStartExternalSyncRequest) (*Operation, error)
	// Perform Disk Shrink on primary instance.
	PerformDiskShrink(context.Context, *SqlInstancesPerformDiskShrinkRequest) (*Operation, error)
	// Get Disk Shrink Config for a given instance.
	GetDiskShrinkConfig(context.Context, *SqlInstancesGetDiskShrinkConfigRequest) (*SqlInstancesGetDiskShrinkConfigResponse, error)
	// Reset Replica Size to primary instance disk size.
	ResetReplicaSize(context.Context, *SqlInstancesResetReplicaSizeRequest) (*Operation, error)
	// Get Latest Recovery Time for a given instance.
	GetLatestRecoveryTime(context.Context, *SqlInstancesGetLatestRecoveryTimeRequest) (*SqlInstancesGetLatestRecoveryTimeResponse, error)
	// Acquire a lease for the setup of SQL Server Reporting Services (SSRS).
	AcquireSsrsLease(context.Context, *SqlInstancesAcquireSsrsLeaseRequest) (*SqlInstancesAcquireSsrsLeaseResponse, error)
	// Release a lease for the setup of SQL Server Reporting Services (SSRS).
	ReleaseSsrsLease(context.Context, *SqlInstancesReleaseSsrsLeaseRequest) (*SqlInstancesReleaseSsrsLeaseResponse, error)
	mustEmbedUnimplementedSqlInstancesServiceServer()
}

// UnimplementedSqlInstancesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlInstancesServiceServer struct {
}

func (UnimplementedSqlInstancesServiceServer) AddServerCa(context.Context, *SqlInstancesAddServerCaRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServerCa not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Clone(context.Context, *SqlInstancesCloneRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Delete(context.Context, *SqlInstancesDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlInstancesServiceServer) DemoteMaster(context.Context, *SqlInstancesDemoteMasterRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteMaster not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Demote(context.Context, *SqlInstancesDemoteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Demote not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Export(context.Context, *SqlInstancesExportRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Failover(context.Context, *SqlInstancesFailoverRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Failover not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Reencrypt(context.Context, *SqlInstancesReencryptRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reencrypt not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Get(context.Context, *SqlInstancesGetRequest) (*DatabaseInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Import(context.Context, *SqlInstancesImportRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Insert(context.Context, *SqlInstancesInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlInstancesServiceServer) List(context.Context, *SqlInstancesListRequest) (*InstancesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlInstancesServiceServer) ListServerCas(context.Context, *SqlInstancesListServerCasRequest) (*InstancesListServerCasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServerCas not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Patch(context.Context, *SqlInstancesPatchRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedSqlInstancesServiceServer) PromoteReplica(context.Context, *SqlInstancesPromoteReplicaRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteReplica not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Switchover(context.Context, *SqlInstancesSwitchoverRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Switchover not implemented")
}
func (UnimplementedSqlInstancesServiceServer) ResetSslConfig(context.Context, *SqlInstancesResetSslConfigRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetSslConfig not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Restart(context.Context, *SqlInstancesRestartRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedSqlInstancesServiceServer) RestoreBackup(context.Context, *SqlInstancesRestoreBackupRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackup not implemented")
}
func (UnimplementedSqlInstancesServiceServer) RotateServerCa(context.Context, *SqlInstancesRotateServerCaRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateServerCa not implemented")
}
func (UnimplementedSqlInstancesServiceServer) StartReplica(context.Context, *SqlInstancesStartReplicaRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplica not implemented")
}
func (UnimplementedSqlInstancesServiceServer) StopReplica(context.Context, *SqlInstancesStopReplicaRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplica not implemented")
}
func (UnimplementedSqlInstancesServiceServer) TruncateLog(context.Context, *SqlInstancesTruncateLogRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateLog not implemented")
}
func (UnimplementedSqlInstancesServiceServer) Update(context.Context, *SqlInstancesUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSqlInstancesServiceServer) CreateEphemeral(context.Context, *SqlInstancesCreateEphemeralCertRequest) (*SslCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEphemeral not implemented")
}
func (UnimplementedSqlInstancesServiceServer) RescheduleMaintenance(context.Context, *SqlInstancesRescheduleMaintenanceRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RescheduleMaintenance not implemented")
}
func (UnimplementedSqlInstancesServiceServer) VerifyExternalSyncSettings(context.Context, *SqlInstancesVerifyExternalSyncSettingsRequest) (*SqlInstancesVerifyExternalSyncSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyExternalSyncSettings not implemented")
}
func (UnimplementedSqlInstancesServiceServer) StartExternalSync(context.Context, *SqlInstancesStartExternalSyncRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExternalSync not implemented")
}
func (UnimplementedSqlInstancesServiceServer) PerformDiskShrink(context.Context, *SqlInstancesPerformDiskShrinkRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformDiskShrink not implemented")
}
func (UnimplementedSqlInstancesServiceServer) GetDiskShrinkConfig(context.Context, *SqlInstancesGetDiskShrinkConfigRequest) (*SqlInstancesGetDiskShrinkConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskShrinkConfig not implemented")
}
func (UnimplementedSqlInstancesServiceServer) ResetReplicaSize(context.Context, *SqlInstancesResetReplicaSizeRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetReplicaSize not implemented")
}
func (UnimplementedSqlInstancesServiceServer) GetLatestRecoveryTime(context.Context, *SqlInstancesGetLatestRecoveryTimeRequest) (*SqlInstancesGetLatestRecoveryTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRecoveryTime not implemented")
}
func (UnimplementedSqlInstancesServiceServer) AcquireSsrsLease(context.Context, *SqlInstancesAcquireSsrsLeaseRequest) (*SqlInstancesAcquireSsrsLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireSsrsLease not implemented")
}
func (UnimplementedSqlInstancesServiceServer) ReleaseSsrsLease(context.Context, *SqlInstancesReleaseSsrsLeaseRequest) (*SqlInstancesReleaseSsrsLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSsrsLease not implemented")
}
func (UnimplementedSqlInstancesServiceServer) mustEmbedUnimplementedSqlInstancesServiceServer() {}

// UnsafeSqlInstancesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlInstancesServiceServer will
// result in compilation errors.
type UnsafeSqlInstancesServiceServer interface {
	mustEmbedUnimplementedSqlInstancesServiceServer()
}

func RegisterSqlInstancesServiceServer(s grpc.ServiceRegistrar, srv SqlInstancesServiceServer) {
	s.RegisterService(&SqlInstancesService_ServiceDesc, srv)
}

func _SqlInstancesService_AddServerCa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesAddServerCaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).AddServerCa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/AddServerCa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).AddServerCa(ctx, req.(*SqlInstancesAddServerCaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Clone(ctx, req.(*SqlInstancesCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Delete(ctx, req.(*SqlInstancesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_DemoteMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesDemoteMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).DemoteMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/DemoteMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).DemoteMaster(ctx, req.(*SqlInstancesDemoteMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Demote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesDemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Demote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Demote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Demote(ctx, req.(*SqlInstancesDemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Export(ctx, req.(*SqlInstancesExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Failover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesFailoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Failover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Failover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Failover(ctx, req.(*SqlInstancesFailoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Reencrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesReencryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Reencrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Reencrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Reencrypt(ctx, req.(*SqlInstancesReencryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Get(ctx, req.(*SqlInstancesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Import(ctx, req.(*SqlInstancesImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Insert(ctx, req.(*SqlInstancesInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).List(ctx, req.(*SqlInstancesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_ListServerCas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesListServerCasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).ListServerCas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ListServerCas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).ListServerCas(ctx, req.(*SqlInstancesListServerCasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesPatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Patch(ctx, req.(*SqlInstancesPatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_PromoteReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesPromoteReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).PromoteReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/PromoteReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).PromoteReplica(ctx, req.(*SqlInstancesPromoteReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Switchover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesSwitchoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Switchover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Switchover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Switchover(ctx, req.(*SqlInstancesSwitchoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_ResetSslConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesResetSslConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).ResetSslConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ResetSslConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).ResetSslConfig(ctx, req.(*SqlInstancesResetSslConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Restart(ctx, req.(*SqlInstancesRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_RestoreBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesRestoreBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).RestoreBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RestoreBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).RestoreBackup(ctx, req.(*SqlInstancesRestoreBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_RotateServerCa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesRotateServerCaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).RotateServerCa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RotateServerCa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).RotateServerCa(ctx, req.(*SqlInstancesRotateServerCaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_StartReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesStartReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).StartReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StartReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).StartReplica(ctx, req.(*SqlInstancesStartReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_StopReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesStopReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).StopReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StopReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).StopReplica(ctx, req.(*SqlInstancesStopReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_TruncateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesTruncateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).TruncateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/TruncateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).TruncateLog(ctx, req.(*SqlInstancesTruncateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).Update(ctx, req.(*SqlInstancesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_CreateEphemeral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesCreateEphemeralCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).CreateEphemeral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/CreateEphemeral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).CreateEphemeral(ctx, req.(*SqlInstancesCreateEphemeralCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_RescheduleMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesRescheduleMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).RescheduleMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/RescheduleMaintenance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).RescheduleMaintenance(ctx, req.(*SqlInstancesRescheduleMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_VerifyExternalSyncSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesVerifyExternalSyncSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).VerifyExternalSyncSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/VerifyExternalSyncSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).VerifyExternalSyncSettings(ctx, req.(*SqlInstancesVerifyExternalSyncSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_StartExternalSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesStartExternalSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).StartExternalSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/StartExternalSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).StartExternalSync(ctx, req.(*SqlInstancesStartExternalSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_PerformDiskShrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesPerformDiskShrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).PerformDiskShrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/PerformDiskShrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).PerformDiskShrink(ctx, req.(*SqlInstancesPerformDiskShrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_GetDiskShrinkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesGetDiskShrinkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).GetDiskShrinkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/GetDiskShrinkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).GetDiskShrinkConfig(ctx, req.(*SqlInstancesGetDiskShrinkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_ResetReplicaSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesResetReplicaSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).ResetReplicaSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ResetReplicaSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).ResetReplicaSize(ctx, req.(*SqlInstancesResetReplicaSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_GetLatestRecoveryTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesGetLatestRecoveryTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).GetLatestRecoveryTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/GetLatestRecoveryTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).GetLatestRecoveryTime(ctx, req.(*SqlInstancesGetLatestRecoveryTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_AcquireSsrsLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesAcquireSsrsLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).AcquireSsrsLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/AcquireSsrsLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).AcquireSsrsLease(ctx, req.(*SqlInstancesAcquireSsrsLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlInstancesService_ReleaseSsrsLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlInstancesReleaseSsrsLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlInstancesServiceServer).ReleaseSsrsLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlInstancesService/ReleaseSsrsLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlInstancesServiceServer).ReleaseSsrsLease(ctx, req.(*SqlInstancesReleaseSsrsLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlInstancesService_ServiceDesc is the grpc.ServiceDesc for SqlInstancesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlInstancesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlInstancesService",
	HandlerType: (*SqlInstancesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddServerCa",
			Handler:    _SqlInstancesService_AddServerCa_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _SqlInstancesService_Clone_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SqlInstancesService_Delete_Handler,
		},
		{
			MethodName: "DemoteMaster",
			Handler:    _SqlInstancesService_DemoteMaster_Handler,
		},
		{
			MethodName: "Demote",
			Handler:    _SqlInstancesService_Demote_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _SqlInstancesService_Export_Handler,
		},
		{
			MethodName: "Failover",
			Handler:    _SqlInstancesService_Failover_Handler,
		},
		{
			MethodName: "Reencrypt",
			Handler:    _SqlInstancesService_Reencrypt_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlInstancesService_Get_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _SqlInstancesService_Import_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlInstancesService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlInstancesService_List_Handler,
		},
		{
			MethodName: "ListServerCas",
			Handler:    _SqlInstancesService_ListServerCas_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SqlInstancesService_Patch_Handler,
		},
		{
			MethodName: "PromoteReplica",
			Handler:    _SqlInstancesService_PromoteReplica_Handler,
		},
		{
			MethodName: "Switchover",
			Handler:    _SqlInstancesService_Switchover_Handler,
		},
		{
			MethodName: "ResetSslConfig",
			Handler:    _SqlInstancesService_ResetSslConfig_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _SqlInstancesService_Restart_Handler,
		},
		{
			MethodName: "RestoreBackup",
			Handler:    _SqlInstancesService_RestoreBackup_Handler,
		},
		{
			MethodName: "RotateServerCa",
			Handler:    _SqlInstancesService_RotateServerCa_Handler,
		},
		{
			MethodName: "StartReplica",
			Handler:    _SqlInstancesService_StartReplica_Handler,
		},
		{
			MethodName: "StopReplica",
			Handler:    _SqlInstancesService_StopReplica_Handler,
		},
		{
			MethodName: "TruncateLog",
			Handler:    _SqlInstancesService_TruncateLog_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SqlInstancesService_Update_Handler,
		},
		{
			MethodName: "CreateEphemeral",
			Handler:    _SqlInstancesService_CreateEphemeral_Handler,
		},
		{
			MethodName: "RescheduleMaintenance",
			Handler:    _SqlInstancesService_RescheduleMaintenance_Handler,
		},
		{
			MethodName: "VerifyExternalSyncSettings",
			Handler:    _SqlInstancesService_VerifyExternalSyncSettings_Handler,
		},
		{
			MethodName: "StartExternalSync",
			Handler:    _SqlInstancesService_StartExternalSync_Handler,
		},
		{
			MethodName: "PerformDiskShrink",
			Handler:    _SqlInstancesService_PerformDiskShrink_Handler,
		},
		{
			MethodName: "GetDiskShrinkConfig",
			Handler:    _SqlInstancesService_GetDiskShrinkConfig_Handler,
		},
		{
			MethodName: "ResetReplicaSize",
			Handler:    _SqlInstancesService_ResetReplicaSize_Handler,
		},
		{
			MethodName: "GetLatestRecoveryTime",
			Handler:    _SqlInstancesService_GetLatestRecoveryTime_Handler,
		},
		{
			MethodName: "AcquireSsrsLease",
			Handler:    _SqlInstancesService_AcquireSsrsLease_Handler,
		},
		{
			MethodName: "ReleaseSsrsLease",
			Handler:    _SqlInstancesService_ReleaseSsrsLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}

// SqlOperationsServiceClient is the client API for SqlOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlOperationsServiceClient interface {
	// Retrieves an instance operation that has been performed on an instance.
	Get(ctx context.Context, in *SqlOperationsGetRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists all instance operations that have been performed on the given Cloud
	// SQL instance in the reverse chronological order of the start time.
	List(ctx context.Context, in *SqlOperationsListRequest, opts ...grpc.CallOption) (*OperationsListResponse, error)
	// Cancels an instance operation that has been performed on an instance.
	Cancel(ctx context.Context, in *SqlOperationsCancelRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sqlOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlOperationsServiceClient(cc grpc.ClientConnInterface) SqlOperationsServiceClient {
	return &sqlOperationsServiceClient{cc}
}

func (c *sqlOperationsServiceClient) Get(ctx context.Context, in *SqlOperationsGetRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlOperationsServiceClient) List(ctx context.Context, in *SqlOperationsListRequest, opts ...grpc.CallOption) (*OperationsListResponse, error) {
	out := new(OperationsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlOperationsServiceClient) Cancel(ctx context.Context, in *SqlOperationsCancelRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlOperationsServiceServer is the server API for SqlOperationsService service.
// All implementations must embed UnimplementedSqlOperationsServiceServer
// for forward compatibility
type SqlOperationsServiceServer interface {
	// Retrieves an instance operation that has been performed on an instance.
	Get(context.Context, *SqlOperationsGetRequest) (*Operation, error)
	// Lists all instance operations that have been performed on the given Cloud
	// SQL instance in the reverse chronological order of the start time.
	List(context.Context, *SqlOperationsListRequest) (*OperationsListResponse, error)
	// Cancels an instance operation that has been performed on an instance.
	Cancel(context.Context, *SqlOperationsCancelRequest) (*empty.Empty, error)
	mustEmbedUnimplementedSqlOperationsServiceServer()
}

// UnimplementedSqlOperationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlOperationsServiceServer struct {
}

func (UnimplementedSqlOperationsServiceServer) Get(context.Context, *SqlOperationsGetRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlOperationsServiceServer) List(context.Context, *SqlOperationsListRequest) (*OperationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlOperationsServiceServer) Cancel(context.Context, *SqlOperationsCancelRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedSqlOperationsServiceServer) mustEmbedUnimplementedSqlOperationsServiceServer() {}

// UnsafeSqlOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlOperationsServiceServer will
// result in compilation errors.
type UnsafeSqlOperationsServiceServer interface {
	mustEmbedUnimplementedSqlOperationsServiceServer()
}

func RegisterSqlOperationsServiceServer(s grpc.ServiceRegistrar, srv SqlOperationsServiceServer) {
	s.RegisterService(&SqlOperationsService_ServiceDesc, srv)
}

func _SqlOperationsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).Get(ctx, req.(*SqlOperationsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlOperationsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).List(ctx, req.(*SqlOperationsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlOperationsService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlOperationsCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlOperationsServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlOperationsService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlOperationsServiceServer).Cancel(ctx, req.(*SqlOperationsCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlOperationsService_ServiceDesc is the grpc.ServiceDesc for SqlOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlOperationsService",
	HandlerType: (*SqlOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SqlOperationsService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlOperationsService_List_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _SqlOperationsService_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}

// SqlSslCertsServiceClient is the client API for SqlSslCertsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlSslCertsServiceClient interface {
	// Deletes the SSL certificate. For First Generation instances, the
	// certificate remains valid until the instance is restarted.
	Delete(ctx context.Context, in *SqlSslCertsDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a particular SSL certificate.  Does not include the private key
	// (required for usage).  The private key must be saved from the response to
	// initial creation.
	Get(ctx context.Context, in *SqlSslCertsGetRequest, opts ...grpc.CallOption) (*SslCert, error)
	// Creates an SSL certificate and returns it along with the private key and
	// server certificate authority.  The new certificate will not be usable until
	// the instance is restarted.
	Insert(ctx context.Context, in *SqlSslCertsInsertRequest, opts ...grpc.CallOption) (*SslCertsInsertResponse, error)
	// Lists all of the current SSL certificates for the instance.
	List(ctx context.Context, in *SqlSslCertsListRequest, opts ...grpc.CallOption) (*SslCertsListResponse, error)
}

type sqlSslCertsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlSslCertsServiceClient(cc grpc.ClientConnInterface) SqlSslCertsServiceClient {
	return &sqlSslCertsServiceClient{cc}
}

func (c *sqlSslCertsServiceClient) Delete(ctx context.Context, in *SqlSslCertsDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) Get(ctx context.Context, in *SqlSslCertsGetRequest, opts ...grpc.CallOption) (*SslCert, error) {
	out := new(SslCert)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) Insert(ctx context.Context, in *SqlSslCertsInsertRequest, opts ...grpc.CallOption) (*SslCertsInsertResponse, error) {
	out := new(SslCertsInsertResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlSslCertsServiceClient) List(ctx context.Context, in *SqlSslCertsListRequest, opts ...grpc.CallOption) (*SslCertsListResponse, error) {
	out := new(SslCertsListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlSslCertsServiceServer is the server API for SqlSslCertsService service.
// All implementations must embed UnimplementedSqlSslCertsServiceServer
// for forward compatibility
type SqlSslCertsServiceServer interface {
	// Deletes the SSL certificate. For First Generation instances, the
	// certificate remains valid until the instance is restarted.
	Delete(context.Context, *SqlSslCertsDeleteRequest) (*Operation, error)
	// Retrieves a particular SSL certificate.  Does not include the private key
	// (required for usage).  The private key must be saved from the response to
	// initial creation.
	Get(context.Context, *SqlSslCertsGetRequest) (*SslCert, error)
	// Creates an SSL certificate and returns it along with the private key and
	// server certificate authority.  The new certificate will not be usable until
	// the instance is restarted.
	Insert(context.Context, *SqlSslCertsInsertRequest) (*SslCertsInsertResponse, error)
	// Lists all of the current SSL certificates for the instance.
	List(context.Context, *SqlSslCertsListRequest) (*SslCertsListResponse, error)
	mustEmbedUnimplementedSqlSslCertsServiceServer()
}

// UnimplementedSqlSslCertsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlSslCertsServiceServer struct {
}

func (UnimplementedSqlSslCertsServiceServer) Delete(context.Context, *SqlSslCertsDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) Get(context.Context, *SqlSslCertsGetRequest) (*SslCert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) Insert(context.Context, *SqlSslCertsInsertRequest) (*SslCertsInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) List(context.Context, *SqlSslCertsListRequest) (*SslCertsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlSslCertsServiceServer) mustEmbedUnimplementedSqlSslCertsServiceServer() {}

// UnsafeSqlSslCertsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlSslCertsServiceServer will
// result in compilation errors.
type UnsafeSqlSslCertsServiceServer interface {
	mustEmbedUnimplementedSqlSslCertsServiceServer()
}

func RegisterSqlSslCertsServiceServer(s grpc.ServiceRegistrar, srv SqlSslCertsServiceServer) {
	s.RegisterService(&SqlSslCertsService_ServiceDesc, srv)
}

func _SqlSslCertsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Delete(ctx, req.(*SqlSslCertsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Get(ctx, req.(*SqlSslCertsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).Insert(ctx, req.(*SqlSslCertsInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlSslCertsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlSslCertsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlSslCertsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlSslCertsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlSslCertsServiceServer).List(ctx, req.(*SqlSslCertsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlSslCertsService_ServiceDesc is the grpc.ServiceDesc for SqlSslCertsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlSslCertsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlSslCertsService",
	HandlerType: (*SqlSslCertsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlSslCertsService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlSslCertsService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlSslCertsService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlSslCertsService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql.proto",
}
