// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1beta4/cloud_sql_connect.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlConnectServiceClient is the client API for SqlConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlConnectServiceClient interface {
	// Retrieves connect settings about a Cloud SQL instance.
	GetConnectSettings(ctx context.Context, in *GetConnectSettingsRequest, opts ...grpc.CallOption) (*ConnectSettings, error)
	// Generates a short-lived X509 certificate containing the provided public key
	// and signed by a private key specific to the target instance. Users may use
	// the certificate to authenticate as themselves when connecting to the
	// database.
	GenerateEphemeralCert(ctx context.Context, in *GenerateEphemeralCertRequest, opts ...grpc.CallOption) (*GenerateEphemeralCertResponse, error)
}

type sqlConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlConnectServiceClient(cc grpc.ClientConnInterface) SqlConnectServiceClient {
	return &sqlConnectServiceClient{cc}
}

func (c *sqlConnectServiceClient) GetConnectSettings(ctx context.Context, in *GetConnectSettingsRequest, opts ...grpc.CallOption) (*ConnectSettings, error) {
	out := new(ConnectSettings)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlConnectService/GetConnectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlConnectServiceClient) GenerateEphemeralCert(ctx context.Context, in *GenerateEphemeralCertRequest, opts ...grpc.CallOption) (*GenerateEphemeralCertResponse, error) {
	out := new(GenerateEphemeralCertResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlConnectService/GenerateEphemeralCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlConnectServiceServer is the server API for SqlConnectService service.
// All implementations must embed UnimplementedSqlConnectServiceServer
// for forward compatibility
type SqlConnectServiceServer interface {
	// Retrieves connect settings about a Cloud SQL instance.
	GetConnectSettings(context.Context, *GetConnectSettingsRequest) (*ConnectSettings, error)
	// Generates a short-lived X509 certificate containing the provided public key
	// and signed by a private key specific to the target instance. Users may use
	// the certificate to authenticate as themselves when connecting to the
	// database.
	GenerateEphemeralCert(context.Context, *GenerateEphemeralCertRequest) (*GenerateEphemeralCertResponse, error)
	mustEmbedUnimplementedSqlConnectServiceServer()
}

// UnimplementedSqlConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlConnectServiceServer struct {
}

func (UnimplementedSqlConnectServiceServer) GetConnectSettings(context.Context, *GetConnectSettingsRequest) (*ConnectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectSettings not implemented")
}
func (UnimplementedSqlConnectServiceServer) GenerateEphemeralCert(context.Context, *GenerateEphemeralCertRequest) (*GenerateEphemeralCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEphemeralCert not implemented")
}
func (UnimplementedSqlConnectServiceServer) mustEmbedUnimplementedSqlConnectServiceServer() {}

// UnsafeSqlConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlConnectServiceServer will
// result in compilation errors.
type UnsafeSqlConnectServiceServer interface {
	mustEmbedUnimplementedSqlConnectServiceServer()
}

func RegisterSqlConnectServiceServer(s grpc.ServiceRegistrar, srv SqlConnectServiceServer) {
	s.RegisterService(&SqlConnectService_ServiceDesc, srv)
}

func _SqlConnectService_GetConnectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlConnectServiceServer).GetConnectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlConnectService/GetConnectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlConnectServiceServer).GetConnectSettings(ctx, req.(*GetConnectSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlConnectService_GenerateEphemeralCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEphemeralCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlConnectServiceServer).GenerateEphemeralCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlConnectService/GenerateEphemeralCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlConnectServiceServer).GenerateEphemeralCert(ctx, req.(*GenerateEphemeralCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlConnectService_ServiceDesc is the grpc.ServiceDesc for SqlConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlConnectService",
	HandlerType: (*SqlConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectSettings",
			Handler:    _SqlConnectService_GetConnectSettings_Handler,
		},
		{
			MethodName: "GenerateEphemeralCert",
			Handler:    _SqlConnectService_GenerateEphemeralCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql_connect.proto",
}
