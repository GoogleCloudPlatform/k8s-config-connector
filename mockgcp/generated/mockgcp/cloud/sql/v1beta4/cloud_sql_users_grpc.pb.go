// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/sql/v1beta4/cloud_sql_users.proto

package sqlpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlUsersServiceClient is the client API for SqlUsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlUsersServiceClient interface {
	// Deletes a user from a Cloud SQL instance.
	Delete(ctx context.Context, in *SqlUsersDeleteRequest, opts ...grpc.CallOption) (*Operation, error)
	// Retrieves a resource containing information about a user.
	Get(ctx context.Context, in *SqlUsersGetRequest, opts ...grpc.CallOption) (*User, error)
	// Creates a new user in a Cloud SQL instance.
	Insert(ctx context.Context, in *SqlUsersInsertRequest, opts ...grpc.CallOption) (*Operation, error)
	// Lists users in the specified Cloud SQL instance.
	List(ctx context.Context, in *SqlUsersListRequest, opts ...grpc.CallOption) (*UsersListResponse, error)
	// Updates an existing user in a Cloud SQL instance.
	Update(ctx context.Context, in *SqlUsersUpdateRequest, opts ...grpc.CallOption) (*Operation, error)
}

type sqlUsersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlUsersServiceClient(cc grpc.ClientConnInterface) SqlUsersServiceClient {
	return &sqlUsersServiceClient{cc}
}

func (c *sqlUsersServiceClient) Delete(ctx context.Context, in *SqlUsersDeleteRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlUsersServiceClient) Get(ctx context.Context, in *SqlUsersGetRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlUsersServiceClient) Insert(ctx context.Context, in *SqlUsersInsertRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlUsersServiceClient) List(ctx context.Context, in *SqlUsersListRequest, opts ...grpc.CallOption) (*UsersListResponse, error) {
	out := new(UsersListResponse)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlUsersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlUsersServiceClient) Update(ctx context.Context, in *SqlUsersUpdateRequest, opts ...grpc.CallOption) (*Operation, error) {
	out := new(Operation)
	err := c.cc.Invoke(ctx, "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SqlUsersServiceServer is the server API for SqlUsersService service.
// All implementations must embed UnimplementedSqlUsersServiceServer
// for forward compatibility
type SqlUsersServiceServer interface {
	// Deletes a user from a Cloud SQL instance.
	Delete(context.Context, *SqlUsersDeleteRequest) (*Operation, error)
	// Retrieves a resource containing information about a user.
	Get(context.Context, *SqlUsersGetRequest) (*User, error)
	// Creates a new user in a Cloud SQL instance.
	Insert(context.Context, *SqlUsersInsertRequest) (*Operation, error)
	// Lists users in the specified Cloud SQL instance.
	List(context.Context, *SqlUsersListRequest) (*UsersListResponse, error)
	// Updates an existing user in a Cloud SQL instance.
	Update(context.Context, *SqlUsersUpdateRequest) (*Operation, error)
	mustEmbedUnimplementedSqlUsersServiceServer()
}

// UnimplementedSqlUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSqlUsersServiceServer struct {
}

func (UnimplementedSqlUsersServiceServer) Delete(context.Context, *SqlUsersDeleteRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSqlUsersServiceServer) Get(context.Context, *SqlUsersGetRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSqlUsersServiceServer) Insert(context.Context, *SqlUsersInsertRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedSqlUsersServiceServer) List(context.Context, *SqlUsersListRequest) (*UsersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSqlUsersServiceServer) Update(context.Context, *SqlUsersUpdateRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSqlUsersServiceServer) mustEmbedUnimplementedSqlUsersServiceServer() {}

// UnsafeSqlUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlUsersServiceServer will
// result in compilation errors.
type UnsafeSqlUsersServiceServer interface {
	mustEmbedUnimplementedSqlUsersServiceServer()
}

func RegisterSqlUsersServiceServer(s grpc.ServiceRegistrar, srv SqlUsersServiceServer) {
	s.RegisterService(&SqlUsersService_ServiceDesc, srv)
}

func _SqlUsersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlUsersDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlUsersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlUsersServiceServer).Delete(ctx, req.(*SqlUsersDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlUsersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlUsersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlUsersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlUsersServiceServer).Get(ctx, req.(*SqlUsersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlUsersService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlUsersInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlUsersServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlUsersServiceServer).Insert(ctx, req.(*SqlUsersInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlUsersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlUsersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlUsersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlUsersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlUsersServiceServer).List(ctx, req.(*SqlUsersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlUsersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SqlUsersUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlUsersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mockgcp.cloud.sql.v1beta4.SqlUsersService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlUsersServiceServer).Update(ctx, req.(*SqlUsersUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SqlUsersService_ServiceDesc is the grpc.ServiceDesc for SqlUsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlUsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mockgcp.cloud.sql.v1beta4.SqlUsersService",
	HandlerType: (*SqlUsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _SqlUsersService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SqlUsersService_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _SqlUsersService_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SqlUsersService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SqlUsersService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/sql/v1beta4/cloud_sql_users.proto",
}
