// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/sql/v1beta4/cloud_sql.proto

package sqlpb

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// External Sync parallel level.
type ExternalSyncParallelLevel int32

const (
	// Unknown sync parallel level. Will be defaulted to OPTIMAL.
	ExternalSyncParallelLevel_EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED ExternalSyncParallelLevel = 0
	// Minimal parallel level.
	ExternalSyncParallelLevel_MIN ExternalSyncParallelLevel = 1
	// Optimal parallel level.
	ExternalSyncParallelLevel_OPTIMAL ExternalSyncParallelLevel = 2
	// Maximum parallel level.
	ExternalSyncParallelLevel_MAX ExternalSyncParallelLevel = 3
)

// Enum value maps for ExternalSyncParallelLevel.
var (
	ExternalSyncParallelLevel_name = map[int32]string{
		0: "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED",
		1: "MIN",
		2: "OPTIMAL",
		3: "MAX",
	}
	ExternalSyncParallelLevel_value = map[string]int32{
		"EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED": 0,
		"MIN":     1,
		"OPTIMAL": 2,
		"MAX":     3,
	}
)

func (x ExternalSyncParallelLevel) Enum() *ExternalSyncParallelLevel {
	p := new(ExternalSyncParallelLevel)
	*p = x
	return p
}

func (x ExternalSyncParallelLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalSyncParallelLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[0].Descriptor()
}

func (ExternalSyncParallelLevel) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[0]
}

func (x ExternalSyncParallelLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalSyncParallelLevel.Descriptor instead.
func (ExternalSyncParallelLevel) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{0}
}

// Backup type for re-encryption
type BackupReencryptionConfig_BackupType int32

const (
	// Unknown backup type, will be defaulted to AUTOMATIC backup type
	BackupReencryptionConfig_BACKUP_TYPE_UNSPECIFIED BackupReencryptionConfig_BackupType = 0
	// Reencrypt automatic backups
	BackupReencryptionConfig_AUTOMATED BackupReencryptionConfig_BackupType = 1
	// Reencrypt on-demand backups
	BackupReencryptionConfig_ON_DEMAND BackupReencryptionConfig_BackupType = 2
)

// Enum value maps for BackupReencryptionConfig_BackupType.
var (
	BackupReencryptionConfig_BackupType_name = map[int32]string{
		0: "BACKUP_TYPE_UNSPECIFIED",
		1: "AUTOMATED",
		2: "ON_DEMAND",
	}
	BackupReencryptionConfig_BackupType_value = map[string]int32{
		"BACKUP_TYPE_UNSPECIFIED": 0,
		"AUTOMATED":               1,
		"ON_DEMAND":               2,
	}
)

func (x BackupReencryptionConfig_BackupType) Enum() *BackupReencryptionConfig_BackupType {
	p := new(BackupReencryptionConfig_BackupType)
	*p = x
	return p
}

func (x BackupReencryptionConfig_BackupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupReencryptionConfig_BackupType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[1].Descriptor()
}

func (BackupReencryptionConfig_BackupType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[1]
}

func (x BackupReencryptionConfig_BackupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupReencryptionConfig_BackupType.Descriptor instead.
func (BackupReencryptionConfig_BackupType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{35, 0}
}

type SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode int32

const (
	// Unknown external sync mode, will be defaulted to ONLINE mode
	SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 0
	// Online external sync will set up replication after initial data external
	// sync
	SqlInstancesVerifyExternalSyncSettingsRequest_ONLINE SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 1
	// Offline external sync only dumps and loads a one-time snapshot of
	// the primary instance's data
	SqlInstancesVerifyExternalSyncSettingsRequest_OFFLINE SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode = 2
)

// Enum value maps for SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.
var (
	SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode_name = map[int32]string{
		0: "EXTERNAL_SYNC_MODE_UNSPECIFIED",
		1: "ONLINE",
		2: "OFFLINE",
	}
	SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode_value = map[string]int32{
		"EXTERNAL_SYNC_MODE_UNSPECIFIED": 0,
		"ONLINE":                         1,
		"OFFLINE":                        2,
	}
)

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Enum() *SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	p := new(SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode)
	*p = x
	return p
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[2].Descriptor()
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[2]
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode.Descriptor instead.
func (SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{38, 0}
}

// MigrationType enum decides if the migration is a physical file based
// migration or logical migration
type SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType int32

const (
	// If no migration type is specified it will be defaulted to LOGICAL.
	SqlInstancesVerifyExternalSyncSettingsRequest_MIGRATION_TYPE_UNSPECIFIED SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType = 0
	// Logical Migrations
	SqlInstancesVerifyExternalSyncSettingsRequest_LOGICAL SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType = 1
	// Physical file based Migrations
	SqlInstancesVerifyExternalSyncSettingsRequest_PHYSICAL SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType = 2
)

// Enum value maps for SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.
var (
	SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_name = map[int32]string{
		0: "MIGRATION_TYPE_UNSPECIFIED",
		1: "LOGICAL",
		2: "PHYSICAL",
	}
	SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_value = map[string]int32{
		"MIGRATION_TYPE_UNSPECIFIED": 0,
		"LOGICAL":                    1,
		"PHYSICAL":                   2,
	}
)

func (x SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) Enum() *SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType {
	p := new(SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType)
	*p = x
	return p
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[3].Descriptor()
}

func (SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes[3]
}

func (x SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType.Descriptor instead.
func (SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{38, 1}
}

type SqlBackupRunsDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the backup run to delete. To find a backup run ID, use the
	// [list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1beta4/backupRuns/list)
	// method.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlBackupRunsDeleteRequest) Reset() {
	*x = SqlBackupRunsDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBackupRunsDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBackupRunsDeleteRequest) ProtoMessage() {}

func (x *SqlBackupRunsDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBackupRunsDeleteRequest.ProtoReflect.Descriptor instead.
func (*SqlBackupRunsDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{0}
}

func (x *SqlBackupRunsDeleteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SqlBackupRunsDeleteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlBackupRunsDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlBackupRunsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of this backup run.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlBackupRunsGetRequest) Reset() {
	*x = SqlBackupRunsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBackupRunsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBackupRunsGetRequest) ProtoMessage() {}

func (x *SqlBackupRunsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBackupRunsGetRequest.ProtoReflect.Descriptor instead.
func (*SqlBackupRunsGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{1}
}

func (x *SqlBackupRunsGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SqlBackupRunsGetRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlBackupRunsGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlBackupRunsInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string     `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *BackupRun `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlBackupRunsInsertRequest) Reset() {
	*x = SqlBackupRunsInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBackupRunsInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBackupRunsInsertRequest) ProtoMessage() {}

func (x *SqlBackupRunsInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBackupRunsInsertRequest.ProtoReflect.Descriptor instead.
func (*SqlBackupRunsInsertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{2}
}

func (x *SqlBackupRunsInsertRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlBackupRunsInsertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlBackupRunsInsertRequest) GetBody() *BackupRun {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlBackupRunsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID, or "-" for all instances. This does not include
	// the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Maximum number of backup runs per response.
	MaxResults int32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// A previously-returned page token representing part of the larger set of
	// results to view.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlBackupRunsListRequest) Reset() {
	*x = SqlBackupRunsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBackupRunsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBackupRunsListRequest) ProtoMessage() {}

func (x *SqlBackupRunsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBackupRunsListRequest.ProtoReflect.Descriptor instead.
func (*SqlBackupRunsListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{3}
}

func (x *SqlBackupRunsListRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlBackupRunsListRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *SqlBackupRunsListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SqlBackupRunsListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlDatabasesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database to be deleted in the instance.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlDatabasesDeleteRequest) Reset() {
	*x = SqlDatabasesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabasesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabasesDeleteRequest) ProtoMessage() {}

func (x *SqlDatabasesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabasesDeleteRequest.ProtoReflect.Descriptor instead.
func (*SqlDatabasesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{4}
}

func (x *SqlDatabasesDeleteRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SqlDatabasesDeleteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlDatabasesDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlDatabasesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database in the instance.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlDatabasesGetRequest) Reset() {
	*x = SqlDatabasesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabasesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabasesGetRequest) ProtoMessage() {}

func (x *SqlDatabasesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabasesGetRequest.ProtoReflect.Descriptor instead.
func (*SqlDatabasesGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{5}
}

func (x *SqlDatabasesGetRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SqlDatabasesGetRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlDatabasesGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlDatabasesInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string    `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *Database `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlDatabasesInsertRequest) Reset() {
	*x = SqlDatabasesInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabasesInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabasesInsertRequest) ProtoMessage() {}

func (x *SqlDatabasesInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabasesInsertRequest.ProtoReflect.Descriptor instead.
func (*SqlDatabasesInsertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{6}
}

func (x *SqlDatabasesInsertRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlDatabasesInsertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlDatabasesInsertRequest) GetBody() *Database {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlDatabasesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlDatabasesListRequest) Reset() {
	*x = SqlDatabasesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabasesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabasesListRequest) ProtoMessage() {}

func (x *SqlDatabasesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabasesListRequest.ProtoReflect.Descriptor instead.
func (*SqlDatabasesListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{7}
}

func (x *SqlDatabasesListRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlDatabasesListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlDatabasesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database to be updated in the instance.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string    `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Body    *Database `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlDatabasesUpdateRequest) Reset() {
	*x = SqlDatabasesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatabasesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatabasesUpdateRequest) ProtoMessage() {}

func (x *SqlDatabasesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatabasesUpdateRequest.ProtoReflect.Descriptor instead.
func (*SqlDatabasesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{8}
}

func (x *SqlDatabasesUpdateRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *SqlDatabasesUpdateRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlDatabasesUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlDatabasesUpdateRequest) GetBody() *Database {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlFlagsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database type and version you want to retrieve flags for. By default, this
	// method returns flags for all database types and versions.
	DatabaseVersion string `protobuf:"bytes,1,opt,name=database_version,json=databaseVersion,proto3" json:"database_version,omitempty"`
}

func (x *SqlFlagsListRequest) Reset() {
	*x = SqlFlagsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFlagsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFlagsListRequest) ProtoMessage() {}

func (x *SqlFlagsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFlagsListRequest.ProtoReflect.Descriptor instead.
func (*SqlFlagsListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{9}
}

func (x *SqlFlagsListRequest) GetDatabaseVersion() string {
	if x != nil {
		return x.DatabaseVersion
	}
	return ""
}

type SqlInstancesAddServerCaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesAddServerCaRequest) Reset() {
	*x = SqlInstancesAddServerCaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesAddServerCaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesAddServerCaRequest) ProtoMessage() {}

func (x *SqlInstancesAddServerCaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesAddServerCaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesAddServerCaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{10}
}

func (x *SqlInstancesAddServerCaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesAddServerCaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesCloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Cloud SQL instance to be cloned (source). This does not
	// include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the source as well as the clone Cloud SQL instance.
	Project string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesCloneRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesCloneRequest) Reset() {
	*x = SqlInstancesCloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesCloneRequest) ProtoMessage() {}

func (x *SqlInstancesCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesCloneRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesCloneRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{11}
}

func (x *SqlInstancesCloneRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesCloneRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesCloneRequest) GetBody() *InstancesCloneRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be deleted.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesDeleteRequest) Reset() {
	*x = SqlInstancesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDeleteRequest) ProtoMessage() {}

func (x *SqlInstancesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDeleteRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{12}
}

func (x *SqlInstancesDeleteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesDemoteMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string                        `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesDemoteMasterRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesDemoteMasterRequest) Reset() {
	*x = SqlInstancesDemoteMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDemoteMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDemoteMasterRequest) ProtoMessage() {}

func (x *SqlInstancesDemoteMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDemoteMasterRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDemoteMasterRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{13}
}

func (x *SqlInstancesDemoteMasterRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDemoteMasterRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesDemoteMasterRequest) GetBody() *InstancesDemoteMasterRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance demote request.
type SqlInstancesDemoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Cloud SQL instance.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Required. The project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The request body.
	Body *InstancesDemoteRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesDemoteRequest) Reset() {
	*x = SqlInstancesDemoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesDemoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesDemoteRequest) ProtoMessage() {}

func (x *SqlInstancesDemoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesDemoteRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesDemoteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{14}
}

func (x *SqlInstancesDemoteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesDemoteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesDemoteRequest) GetBody() *InstancesDemoteRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Cloud SQL instance ID. This doesn't include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be exported.
	Project string                  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesExportRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesExportRequest) Reset() {
	*x = SqlInstancesExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesExportRequest) ProtoMessage() {}

func (x *SqlInstancesExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesExportRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesExportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{15}
}

func (x *SqlInstancesExportRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesExportRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesExportRequest) GetBody() *InstancesExportRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesFailoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string                    `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesFailoverRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesFailoverRequest) Reset() {
	*x = SqlInstancesFailoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesFailoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesFailoverRequest) ProtoMessage() {}

func (x *SqlInstancesFailoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesFailoverRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesFailoverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{16}
}

func (x *SqlInstancesFailoverRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesFailoverRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesFailoverRequest) GetBody() *InstancesFailoverRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetRequest) Reset() {
	*x = SqlInstancesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetRequest) ProtoMessage() {}

func (x *SqlInstancesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{17}
}

func (x *SqlInstancesGetRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                  `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesImportRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesImportRequest) Reset() {
	*x = SqlInstancesImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesImportRequest) ProtoMessage() {}

func (x *SqlInstancesImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesImportRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesImportRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{18}
}

func (x *SqlInstancesImportRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesImportRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesImportRequest) GetBody() *InstancesImportRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Project ID of the project to which the newly created Cloud SQL instances
	// should belong.
	Project string            `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesInsertRequest) Reset() {
	*x = SqlInstancesInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesInsertRequest) ProtoMessage() {}

func (x *SqlInstancesInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesInsertRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesInsertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{19}
}

func (x *SqlInstancesInsertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesInsertRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filter expression that filters resources listed in the response.
	// The expression is in the form of field:value. For example,
	// 'instanceType:CLOUD_SQL_INSTANCE'. Fields can be nested as needed as per
	// their JSON representation, such as 'settings.userLabels.auto_start:true'.
	//
	// Multiple filter queries are space-separated. For example.
	// 'state:RUNNABLE instanceType:CLOUD_SQL_INSTANCE'. By default, each
	// expression is an AND expression. However, you can include AND and OR
	// expressions explicitly.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of instances to return. The service may return fewer
	// than this value.
	// If unspecified, at most 500 instances are returned.
	// The maximum value is 1000; values above 1000 are coerced to 1000.
	MaxResults uint32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// A previously-returned page token representing part of the larger set of
	// results to view.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Project ID of the project for which to list Cloud SQL instances.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesListRequest) Reset() {
	*x = SqlInstancesListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesListRequest) ProtoMessage() {}

func (x *SqlInstancesListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesListRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{20}
}

func (x *SqlInstancesListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *SqlInstancesListRequest) GetMaxResults() uint32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *SqlInstancesListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SqlInstancesListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesListServerCasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesListServerCasRequest) Reset() {
	*x = SqlInstancesListServerCasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesListServerCasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesListServerCasRequest) ProtoMessage() {}

func (x *SqlInstancesListServerCasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesListServerCasRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesListServerCasRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{21}
}

func (x *SqlInstancesListServerCasRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesListServerCasRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesPatchRequest) Reset() {
	*x = SqlInstancesPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPatchRequest) ProtoMessage() {}

func (x *SqlInstancesPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPatchRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPatchRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{22}
}

func (x *SqlInstancesPatchRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPatchRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPatchRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesPromoteReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Set to true if the promote operation should attempt to re-add the original
	// primary as a replica when it comes back online. Otherwise, if this value is
	// false or not set, the original primary will be a standalone instance.
	Failover bool `protobuf:"varint,3,opt,name=failover,proto3" json:"failover,omitempty"`
}

func (x *SqlInstancesPromoteReplicaRequest) Reset() {
	*x = SqlInstancesPromoteReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPromoteReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPromoteReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesPromoteReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPromoteReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPromoteReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{23}
}

func (x *SqlInstancesPromoteReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPromoteReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPromoteReplicaRequest) GetFailover() bool {
	if x != nil {
		return x.Failover
	}
	return false
}

// Instance switchover request.
type SqlInstancesSwitchoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. (MySQL only) Cloud SQL instance operations timeout, which is a
	// sum of all database operations. Default value is 10 minutes and can be
	// modified to a maximum value of 24 hours.
	DbTimeout *duration.Duration `protobuf:"bytes,3,opt,name=db_timeout,json=dbTimeout,proto3" json:"db_timeout,omitempty"`
}

func (x *SqlInstancesSwitchoverRequest) Reset() {
	*x = SqlInstancesSwitchoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesSwitchoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesSwitchoverRequest) ProtoMessage() {}

func (x *SqlInstancesSwitchoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesSwitchoverRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesSwitchoverRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{24}
}

func (x *SqlInstancesSwitchoverRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesSwitchoverRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesSwitchoverRequest) GetDbTimeout() *duration.Duration {
	if x != nil {
		return x.DbTimeout
	}
	return nil
}

type SqlInstancesResetSslConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesResetSslConfigRequest) Reset() {
	*x = SqlInstancesResetSslConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesResetSslConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesResetSslConfigRequest) ProtoMessage() {}

func (x *SqlInstancesResetSslConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesResetSslConfigRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesResetSslConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{25}
}

func (x *SqlInstancesResetSslConfigRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesResetSslConfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance to be restarted.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesRestartRequest) Reset() {
	*x = SqlInstancesRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRestartRequest) ProtoMessage() {}

func (x *SqlInstancesRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRestartRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRestartRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{26}
}

func (x *SqlInstancesRestartRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRestartRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesRestoreBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                         `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesRestoreBackupRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRestoreBackupRequest) Reset() {
	*x = SqlInstancesRestoreBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRestoreBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRestoreBackupRequest) ProtoMessage() {}

func (x *SqlInstancesRestoreBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRestoreBackupRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRestoreBackupRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{27}
}

func (x *SqlInstancesRestoreBackupRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRestoreBackupRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRestoreBackupRequest) GetBody() *InstancesRestoreBackupRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesRotateServerCaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesRotateServerCaRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRotateServerCaRequest) Reset() {
	*x = SqlInstancesRotateServerCaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRotateServerCaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRotateServerCaRequest) ProtoMessage() {}

func (x *SqlInstancesRotateServerCaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRotateServerCaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRotateServerCaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{28}
}

func (x *SqlInstancesRotateServerCaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRotateServerCaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRotateServerCaRequest) GetBody() *InstancesRotateServerCaRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesStartReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesStartReplicaRequest) Reset() {
	*x = SqlInstancesStartReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStartReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStartReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesStartReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStartReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStartReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{29}
}

func (x *SqlInstancesStartReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStartReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesStopReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesStopReplicaRequest) Reset() {
	*x = SqlInstancesStopReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStopReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStopReplicaRequest) ProtoMessage() {}

func (x *SqlInstancesStopReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStopReplicaRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStopReplicaRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{30}
}

func (x *SqlInstancesStopReplicaRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStopReplicaRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesTruncateLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the Cloud SQL project.
	Project string                       `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *InstancesTruncateLogRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesTruncateLogRequest) Reset() {
	*x = SqlInstancesTruncateLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesTruncateLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesTruncateLogRequest) ProtoMessage() {}

func (x *SqlInstancesTruncateLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesTruncateLogRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesTruncateLogRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{31}
}

func (x *SqlInstancesTruncateLogRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesTruncateLogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesTruncateLogRequest) GetBody() *InstancesTruncateLogRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string            `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *DatabaseInstance `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesUpdateRequest) Reset() {
	*x = SqlInstancesUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesUpdateRequest) ProtoMessage() {}

func (x *SqlInstancesUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesUpdateRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesUpdateRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{32}
}

func (x *SqlInstancesUpdateRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesUpdateRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesUpdateRequest) GetBody() *DatabaseInstance {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance reencrypt request.
type SqlInstancesReencryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Reencrypt body that users request
	Body *InstancesReencryptRequest `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesReencryptRequest) Reset() {
	*x = SqlInstancesReencryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesReencryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesReencryptRequest) ProtoMessage() {}

func (x *SqlInstancesReencryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesReencryptRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesReencryptRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{33}
}

func (x *SqlInstancesReencryptRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesReencryptRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesReencryptRequest) GetBody() *InstancesReencryptRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Database Instance reencrypt request.
type InstancesReencryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration specific to backup re-encryption
	BackupReencryptionConfig *BackupReencryptionConfig `protobuf:"bytes,1,opt,name=backup_reencryption_config,json=backupReencryptionConfig,proto3,oneof" json:"backup_reencryption_config,omitempty"`
}

func (x *InstancesReencryptRequest) Reset() {
	*x = InstancesReencryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstancesReencryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstancesReencryptRequest) ProtoMessage() {}

func (x *InstancesReencryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstancesReencryptRequest.ProtoReflect.Descriptor instead.
func (*InstancesReencryptRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{34}
}

func (x *InstancesReencryptRequest) GetBackupReencryptionConfig() *BackupReencryptionConfig {
	if x != nil {
		return x.BackupReencryptionConfig
	}
	return nil
}

// Backup Reencryption Config
type BackupReencryptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Backup re-encryption limit
	BackupLimit *int32 `protobuf:"varint,1,opt,name=backup_limit,json=backupLimit,proto3,oneof" json:"backup_limit,omitempty"`
	// Type of backups users want to re-encrypt.
	BackupType *BackupReencryptionConfig_BackupType `protobuf:"varint,2,opt,name=backup_type,json=backupType,proto3,enum=mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig_BackupType,oneof" json:"backup_type,omitempty"`
}

func (x *BackupReencryptionConfig) Reset() {
	*x = BackupReencryptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupReencryptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupReencryptionConfig) ProtoMessage() {}

func (x *BackupReencryptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupReencryptionConfig.ProtoReflect.Descriptor instead.
func (*BackupReencryptionConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{35}
}

func (x *BackupReencryptionConfig) GetBackupLimit() int32 {
	if x != nil && x.BackupLimit != nil {
		return *x.BackupLimit
	}
	return 0
}

func (x *BackupReencryptionConfig) GetBackupType() BackupReencryptionConfig_BackupType {
	if x != nil && x.BackupType != nil {
		return *x.BackupType
	}
	return BackupReencryptionConfig_BACKUP_TYPE_UNSPECIFIED
}

type SqlInstancesRescheduleMaintenanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string                                        `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *SqlInstancesRescheduleMaintenanceRequestBody `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesRescheduleMaintenanceRequest) Reset() {
	*x = SqlInstancesRescheduleMaintenanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesRescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesRescheduleMaintenanceRequest) ProtoMessage() {}

func (x *SqlInstancesRescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesRescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesRescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{36}
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesRescheduleMaintenanceRequest) GetBody() *SqlInstancesRescheduleMaintenanceRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// Instance perform disk shrink request.
type SqlInstancesPerformDiskShrinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Perform disk shrink context.
	Body *PerformDiskShrinkContext `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesPerformDiskShrinkRequest) Reset() {
	*x = SqlInstancesPerformDiskShrinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesPerformDiskShrinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesPerformDiskShrinkRequest) ProtoMessage() {}

func (x *SqlInstancesPerformDiskShrinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesPerformDiskShrinkRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesPerformDiskShrinkRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{37}
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesPerformDiskShrinkRequest) GetBody() *PerformDiskShrinkContext {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlInstancesVerifyExternalSyncSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Flag to enable verifying connection only
	VerifyConnectionOnly bool `protobuf:"varint,3,opt,name=verify_connection_only,json=verifyConnectionOnly,proto3" json:"verify_connection_only,omitempty"`
	// External sync mode
	SyncMode SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode `protobuf:"varint,4,opt,name=sync_mode,json=syncMode,proto3,enum=mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode" json:"sync_mode,omitempty"`
	// Optional. Flag to verify settings required by replication setup only
	VerifyReplicationOnly bool `protobuf:"varint,5,opt,name=verify_replication_only,json=verifyReplicationOnly,proto3" json:"verify_replication_only,omitempty"`
	// Types that are assignable to SyncConfig:
	//
	//	*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig
	SyncConfig isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig `protobuf_oneof:"sync_config"`
	// Optional. MigrationType field decides if the migration is a physical file
	// based migration or logical migration
	MigrationType SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType `protobuf:"varint,7,opt,name=migration_type,json=migrationType,proto3,enum=mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType" json:"migration_type,omitempty"`
	// Optional. Parallel level for initial data sync. Currently only applicable
	// for PostgreSQL.
	SyncParallelLevel ExternalSyncParallelLevel `protobuf:"varint,8,opt,name=sync_parallel_level,json=syncParallelLevel,proto3,enum=mockgcp.cloud.sql.v1beta4.ExternalSyncParallelLevel" json:"sync_parallel_level,omitempty"`
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) Reset() {
	*x = SqlInstancesVerifyExternalSyncSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesVerifyExternalSyncSettingsRequest) ProtoMessage() {}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesVerifyExternalSyncSettingsRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesVerifyExternalSyncSettingsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{38}
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetVerifyConnectionOnly() bool {
	if x != nil {
		return x.VerifyConnectionOnly
	}
	return false
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetSyncMode() SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetVerifyReplicationOnly() bool {
	if x != nil {
		return x.VerifyReplicationOnly
	}
	return false
}

func (m *SqlInstancesVerifyExternalSyncSettingsRequest) GetSyncConfig() isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig {
	if m != nil {
		return m.SyncConfig
	}
	return nil
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetMysqlSyncConfig() *MySqlSyncConfig {
	if x, ok := x.GetSyncConfig().(*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig); ok {
		return x.MysqlSyncConfig
	}
	return nil
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetMigrationType() SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType {
	if x != nil {
		return x.MigrationType
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_MIGRATION_TYPE_UNSPECIFIED
}

func (x *SqlInstancesVerifyExternalSyncSettingsRequest) GetSyncParallelLevel() ExternalSyncParallelLevel {
	if x != nil {
		return x.SyncParallelLevel
	}
	return ExternalSyncParallelLevel_EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED
}

type isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig interface {
	isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig()
}

type SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig struct {
	// Optional. MySQL-specific settings for start external sync.
	MysqlSyncConfig *MySqlSyncConfig `protobuf:"bytes,6,opt,name=mysql_sync_config,json=mysqlSyncConfig,proto3,oneof"`
}

func (*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig) isSqlInstancesVerifyExternalSyncSettingsRequest_SyncConfig() {
}

type SqlInstancesStartExternalSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// External sync mode.
	SyncMode SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode `protobuf:"varint,3,opt,name=sync_mode,json=syncMode,proto3,enum=mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode" json:"sync_mode,omitempty"`
	// Whether to skip the verification step (VESS).
	SkipVerification bool `protobuf:"varint,4,opt,name=skip_verification,json=skipVerification,proto3" json:"skip_verification,omitempty"`
	// Types that are assignable to SyncConfig:
	//
	//	*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig
	SyncConfig isSqlInstancesStartExternalSyncRequest_SyncConfig `protobuf_oneof:"sync_config"`
	// Optional. Parallel level for initial data sync. Currently only applicable
	// for MySQL.
	SyncParallelLevel ExternalSyncParallelLevel `protobuf:"varint,7,opt,name=sync_parallel_level,json=syncParallelLevel,proto3,enum=mockgcp.cloud.sql.v1beta4.ExternalSyncParallelLevel" json:"sync_parallel_level,omitempty"`
	// Optional. MigrationType decides if the migration is a physical file based
	// migration or logical migration.
	MigrationType SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType `protobuf:"varint,8,opt,name=migration_type,json=migrationType,proto3,enum=mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType" json:"migration_type,omitempty"`
}

func (x *SqlInstancesStartExternalSyncRequest) Reset() {
	*x = SqlInstancesStartExternalSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesStartExternalSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesStartExternalSyncRequest) ProtoMessage() {}

func (x *SqlInstancesStartExternalSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesStartExternalSyncRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesStartExternalSyncRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{39}
}

func (x *SqlInstancesStartExternalSyncRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesStartExternalSyncRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesStartExternalSyncRequest) GetSyncMode() SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode {
	if x != nil {
		return x.SyncMode
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_EXTERNAL_SYNC_MODE_UNSPECIFIED
}

func (x *SqlInstancesStartExternalSyncRequest) GetSkipVerification() bool {
	if x != nil {
		return x.SkipVerification
	}
	return false
}

func (m *SqlInstancesStartExternalSyncRequest) GetSyncConfig() isSqlInstancesStartExternalSyncRequest_SyncConfig {
	if m != nil {
		return m.SyncConfig
	}
	return nil
}

func (x *SqlInstancesStartExternalSyncRequest) GetMysqlSyncConfig() *MySqlSyncConfig {
	if x, ok := x.GetSyncConfig().(*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig); ok {
		return x.MysqlSyncConfig
	}
	return nil
}

func (x *SqlInstancesStartExternalSyncRequest) GetSyncParallelLevel() ExternalSyncParallelLevel {
	if x != nil {
		return x.SyncParallelLevel
	}
	return ExternalSyncParallelLevel_EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED
}

func (x *SqlInstancesStartExternalSyncRequest) GetMigrationType() SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType {
	if x != nil {
		return x.MigrationType
	}
	return SqlInstancesVerifyExternalSyncSettingsRequest_MIGRATION_TYPE_UNSPECIFIED
}

type isSqlInstancesStartExternalSyncRequest_SyncConfig interface {
	isSqlInstancesStartExternalSyncRequest_SyncConfig()
}

type SqlInstancesStartExternalSyncRequest_MysqlSyncConfig struct {
	// MySQL-specific settings for start external sync.
	MysqlSyncConfig *MySqlSyncConfig `protobuf:"bytes,6,opt,name=mysql_sync_config,json=mysqlSyncConfig,proto3,oneof"`
}

func (*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig) isSqlInstancesStartExternalSyncRequest_SyncConfig() {
}

// Instance reset replica size request.
type SqlInstancesResetReplicaSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL read replica instance name.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// ID of the project that contains the read replica.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesResetReplicaSizeRequest) Reset() {
	*x = SqlInstancesResetReplicaSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesResetReplicaSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesResetReplicaSizeRequest) ProtoMessage() {}

func (x *SqlInstancesResetReplicaSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesResetReplicaSizeRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesResetReplicaSizeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{40}
}

func (x *SqlInstancesResetReplicaSizeRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesResetReplicaSizeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlOperationsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance operation ID.
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlOperationsGetRequest) Reset() {
	*x = SqlOperationsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperationsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperationsGetRequest) ProtoMessage() {}

func (x *SqlOperationsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperationsGetRequest.ProtoReflect.Descriptor instead.
func (*SqlOperationsGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{41}
}

func (x *SqlOperationsGetRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *SqlOperationsGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlOperationsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Maximum number of operations per response.
	MaxResults uint32 `protobuf:"varint,2,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// A previously-returned page token representing part of the larger set of
	// results to view.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlOperationsListRequest) Reset() {
	*x = SqlOperationsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperationsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperationsListRequest) ProtoMessage() {}

func (x *SqlOperationsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperationsListRequest.ProtoReflect.Descriptor instead.
func (*SqlOperationsListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{42}
}

func (x *SqlOperationsListRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlOperationsListRequest) GetMaxResults() uint32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *SqlOperationsListRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SqlOperationsListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// The request payload to cancel an operation.
type SqlOperationsCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance operation ID.
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlOperationsCancelRequest) Reset() {
	*x = SqlOperationsCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperationsCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperationsCancelRequest) ProtoMessage() {}

func (x *SqlOperationsCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperationsCancelRequest.ProtoReflect.Descriptor instead.
func (*SqlOperationsCancelRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{43}
}

func (x *SqlOperationsCancelRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *SqlOperationsCancelRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type SqlInstancesCreateEphemeralCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the Cloud SQL project.
	Project string                          `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *SslCertsCreateEphemeralRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesCreateEphemeralCertRequest) Reset() {
	*x = SqlInstancesCreateEphemeralCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesCreateEphemeralCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesCreateEphemeralCertRequest) ProtoMessage() {}

func (x *SqlInstancesCreateEphemeralCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesCreateEphemeralCertRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesCreateEphemeralCertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{44}
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesCreateEphemeralCertRequest) GetBody() *SslCertsCreateEphemeralRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlSslCertsDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Sha1 FingerPrint.
	Sha1Fingerprint string `protobuf:"bytes,3,opt,name=sha1_fingerprint,json=sha1Fingerprint,proto3" json:"sha1_fingerprint,omitempty"`
}

func (x *SqlSslCertsDeleteRequest) Reset() {
	*x = SqlSslCertsDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSslCertsDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSslCertsDeleteRequest) ProtoMessage() {}

func (x *SqlSslCertsDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSslCertsDeleteRequest.ProtoReflect.Descriptor instead.
func (*SqlSslCertsDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{45}
}

func (x *SqlSslCertsDeleteRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlSslCertsDeleteRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlSslCertsDeleteRequest) GetSha1Fingerprint() string {
	if x != nil {
		return x.Sha1Fingerprint
	}
	return ""
}

type SqlSslCertsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Sha1 FingerPrint.
	Sha1Fingerprint string `protobuf:"bytes,3,opt,name=sha1_fingerprint,json=sha1Fingerprint,proto3" json:"sha1_fingerprint,omitempty"`
}

func (x *SqlSslCertsGetRequest) Reset() {
	*x = SqlSslCertsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSslCertsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSslCertsGetRequest) ProtoMessage() {}

func (x *SqlSslCertsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSslCertsGetRequest.ProtoReflect.Descriptor instead.
func (*SqlSslCertsGetRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{46}
}

func (x *SqlSslCertsGetRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlSslCertsGetRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlSslCertsGetRequest) GetSha1Fingerprint() string {
	if x != nil {
		return x.Sha1Fingerprint
	}
	return ""
}

type SqlSslCertsInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Body    *SslCertsInsertRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlSslCertsInsertRequest) Reset() {
	*x = SqlSslCertsInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSslCertsInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSslCertsInsertRequest) ProtoMessage() {}

func (x *SqlSslCertsInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSslCertsInsertRequest.ProtoReflect.Descriptor instead.
func (*SqlSslCertsInsertRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{47}
}

func (x *SqlSslCertsInsertRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlSslCertsInsertRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlSslCertsInsertRequest) GetBody() *SslCertsInsertRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

type SqlSslCertsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlSslCertsListRequest) Reset() {
	*x = SqlSslCertsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSslCertsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSslCertsListRequest) ProtoMessage() {}

func (x *SqlSslCertsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSslCertsListRequest.ProtoReflect.Descriptor instead.
func (*SqlSslCertsListRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{48}
}

func (x *SqlSslCertsListRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlSslCertsListRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance get disk shrink config request.
type SqlInstancesGetDiskShrinkConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) Reset() {
	*x = SqlInstancesGetDiskShrinkConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetDiskShrinkConfigRequest) ProtoMessage() {}

func (x *SqlInstancesGetDiskShrinkConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetDiskShrinkConfigRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetDiskShrinkConfigRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{49}
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetDiskShrinkConfigRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance get latest recovery time request.
type SqlInstancesGetLatestRecoveryTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud SQL instance ID. This does not include the project ID.
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Project ID of the project that contains the instance.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) Reset() {
	*x = SqlInstancesGetLatestRecoveryTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetLatestRecoveryTimeRequest) ProtoMessage() {}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetLatestRecoveryTimeRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetLatestRecoveryTimeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{50}
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesGetLatestRecoveryTimeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Instance get latest recovery time response.
type SqlInstancesGetLatestRecoveryTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is always `sql#getLatestRecoveryTime`.
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Timestamp, identifies the latest recovery time of the source instance.
	LatestRecoveryTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=latest_recovery_time,json=latestRecoveryTime,proto3" json:"latest_recovery_time,omitempty"`
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) Reset() {
	*x = SqlInstancesGetLatestRecoveryTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesGetLatestRecoveryTimeResponse) ProtoMessage() {}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesGetLatestRecoveryTimeResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesGetLatestRecoveryTimeResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{51}
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SqlInstancesGetLatestRecoveryTimeResponse) GetLatestRecoveryTime() *timestamp.Timestamp {
	if x != nil {
		return x.LatestRecoveryTime
	}
	return nil
}

// Request to release a lease for SSRS.
type SqlInstancesReleaseSsrsLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The Cloud SQL instance ID. This doesn't include the project ID.
	// It's composed of lowercase letters, numbers, and hyphens, and it must start
	// with a letter. The total length must be 98 characters or less (Example:
	// instance-id).
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Required. The ID of the project that contains the instance (Example:
	// project-id).
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SqlInstancesReleaseSsrsLeaseRequest) Reset() {
	*x = SqlInstancesReleaseSsrsLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesReleaseSsrsLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesReleaseSsrsLeaseRequest) ProtoMessage() {}

func (x *SqlInstancesReleaseSsrsLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesReleaseSsrsLeaseRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesReleaseSsrsLeaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{52}
}

func (x *SqlInstancesReleaseSsrsLeaseRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesReleaseSsrsLeaseRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// The response for the release of the SSRS lease.
type SqlInstancesReleaseSsrsLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The operation ID.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
}

func (x *SqlInstancesReleaseSsrsLeaseResponse) Reset() {
	*x = SqlInstancesReleaseSsrsLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesReleaseSsrsLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesReleaseSsrsLeaseResponse) ProtoMessage() {}

func (x *SqlInstancesReleaseSsrsLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesReleaseSsrsLeaseResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesReleaseSsrsLeaseResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{53}
}

func (x *SqlInstancesReleaseSsrsLeaseResponse) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

// Request to acquire a lease for SSRS.
type SqlInstancesAcquireSsrsLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Cloud SQL instance ID. This doesn't include the project ID. It's
	// composed of lowercase letters, numbers, and hyphens, and it must start with
	// a letter. The total length must be 98 characters or less (Example:
	// instance-id).
	Instance string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	// Required. ID of the project that contains the instance (Example:
	// project-id).
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The body for request to acquire an SSRS lease.
	Body *InstancesAcquireSsrsLeaseRequest `protobuf:"bytes,100,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SqlInstancesAcquireSsrsLeaseRequest) Reset() {
	*x = SqlInstancesAcquireSsrsLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesAcquireSsrsLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesAcquireSsrsLeaseRequest) ProtoMessage() {}

func (x *SqlInstancesAcquireSsrsLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesAcquireSsrsLeaseRequest.ProtoReflect.Descriptor instead.
func (*SqlInstancesAcquireSsrsLeaseRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{54}
}

func (x *SqlInstancesAcquireSsrsLeaseRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *SqlInstancesAcquireSsrsLeaseRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SqlInstancesAcquireSsrsLeaseRequest) GetBody() *InstancesAcquireSsrsLeaseRequest {
	if x != nil {
		return x.Body
	}
	return nil
}

// Acquire SSRS lease response.
type SqlInstancesAcquireSsrsLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for this operation.
	OperationId *string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3,oneof" json:"operation_id,omitempty"`
}

func (x *SqlInstancesAcquireSsrsLeaseResponse) Reset() {
	*x = SqlInstancesAcquireSsrsLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInstancesAcquireSsrsLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInstancesAcquireSsrsLeaseResponse) ProtoMessage() {}

func (x *SqlInstancesAcquireSsrsLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInstancesAcquireSsrsLeaseResponse.ProtoReflect.Descriptor instead.
func (*SqlInstancesAcquireSsrsLeaseResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP(), []int{55}
}

func (x *SqlInstancesAcquireSsrsLeaseResponse) GetOperationId() string {
	if x != nil && x.OperationId != nil {
		return *x.OperationId
	}
	return ""
}

var File_mockgcp_cloud_sql_v1beta4_cloud_sql_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x73, 0x71, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x62, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75,
	0x6e, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5f, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x4f, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x40, 0x0a, 0x13, 0x53, 0x71,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x1e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x51, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xa4, 0x01, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x98, 0x01, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x45, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x76, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x58, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x75, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a,
	0x1d, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x64, 0x62, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52,
	0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4c, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa8, 0x01, 0x0a, 0x21,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x57, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x56, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x4a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x92, 0x01, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x76, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x92, 0x02, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x22, 0x47, 0x0a, 0x0a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x01, 0x0a,
	0x28, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xa5, 0x01, 0x0a,
	0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xcb, 0x06, 0x0a, 0x2d, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x76, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x17, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x5d, 0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4d,
	0x79, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x56, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x13, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4f, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46,
	0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x0d, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49, 0x47, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xda, 0x04, 0x0a, 0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x76, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x59, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4d, 0x79,
	0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x0f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x69, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x0e,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x5b, 0x0a, 0x23, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x51, 0x0a, 0x17,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x54, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x26, 0x53, 0x71, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x7b, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x53,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68,
	0x61, 0x31, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x31, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x31, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x68, 0x61, 0x31, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x73, 0x6c,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4e, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x53,
	0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5e, 0x0a, 0x26, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x60, 0x0a, 0x28, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x29, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x14,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x23, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x49, 0x0a, 0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x23, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53,
	0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x5f, 0x0a, 0x24, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x73, 0x72, 0x73,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x2a, 0x68, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50,
	0x54, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03,
	0x32, 0xeb, 0x06, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75,
	0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x2a, 0x44, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xad, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75,
	0x6e, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xb4, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x75, 0x6e, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22,
	0x3f, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73,
	0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xb7, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12,
	0x3f, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6e, 0x73,
	0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71, 0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71,
	0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0xeb,
	0x09, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x2a, 0x49, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d,
	0x12, 0xb0, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x49, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x46, 0x22, 0x3e, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12,
	0x3e, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12,
	0xbc, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x32, 0x49, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xbd,
	0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x1a, 0x49, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x7c,
	0xca, 0x41, 0x17, 0x73, 0x71, 0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71, 0x6c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x92, 0x02, 0x0a,
	0x0f, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71, 0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2,
	0x41, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x32, 0xa3, 0x35, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x41, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x42, 0x22, 0x40, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x61, 0x12, 0xac, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x33,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x22, 0x3a, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x3a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0xa2, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x34,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x2a, 0x34, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xc1, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x49, 0x22, 0x41, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xaf, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x3b, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xaf,
	0x01, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x3b, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0xb5, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x36, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x22, 0x3d, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xb8, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x3e, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x3a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0xa3, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x12, 0xaf, 0x01, 0x0a, 0x06, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x3b, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x9d, 0x01, 0x0a, 0x06,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x29, 0x2f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x12, 0x29, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xd3, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x12,
	0x3b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12,
	0x42, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x61, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x33, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x32, 0x34, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xc1, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12,
	0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x43, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0xb5, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12,
	0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3f, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x12, 0xc1, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x43, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xac, 0x01, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x22, 0x3c, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xc4, 0x01, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x3b, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x42, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0xc7, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x43, 0x61, 0x12, 0x3c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4b, 0x22, 0x43, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x61, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xbb, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x3a, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x41, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0xb8, 0x01, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x22, 0x40, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0xbe, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x39, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x22, 0x40,
	0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67,
	0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x1a, 0x34, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0xcc, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x22, 0x52, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4c, 0x22, 0x44, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0xdc, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x22, 0x4a, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x8d, 0x02, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x54, 0x22, 0x4f, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xcd, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4b, 0x22, 0x46, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x3a, 0x01, 0x2a, 0x12,
	0xd0, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4e, 0x22, 0x46, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x3a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0xee, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0xca, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x22, 0x45, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0xf6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x12, 0x4a, 0x2f,
	0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x10, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3e,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x73,
	0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x73,
	0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x45, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x3a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0xe2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x47, 0x22, 0x45, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x73, 0x72, 0x73, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71,
	0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0xfc, 0x04, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x9f, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x35, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x73, 0x71, 0x6c, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71, 0x6c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0xfe, 0x06, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x53, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbd, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f, 0x73, 0x71,
	0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x31,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x7d, 0x12, 0xb5, 0x01,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x34, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x22, 0x58, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x61, 0x31, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x7d, 0x12, 0xbd, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x34, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x22, 0x3d, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x3a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0xb1, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2e, 0x53, 0x73,
	0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x73, 0x71, 0x6c,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x73, 0x73, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x73, 0x1a, 0x7c, 0xca, 0x41, 0x17, 0x73, 0x71,
	0x6c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x67, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x34, 0x42, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x71, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x34, 0x2f, 0x73, 0x71, 0x6c, 0x70, 0x62, 0x3b, 0x73, 0x71, 0x6c, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescData = file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDesc
)

func file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescData)
	})
	return file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDescData
}

var file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_goTypes = []interface{}{
	(ExternalSyncParallelLevel)(0),                                      // 0: mockgcp.cloud.sql.v1beta4.ExternalSyncParallelLevel
	(BackupReencryptionConfig_BackupType)(0),                            // 1: mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig.BackupType
	(SqlInstancesVerifyExternalSyncSettingsRequest_ExternalSyncMode)(0), // 2: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	(SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType)(0),    // 3: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.MigrationType
	(*SqlBackupRunsDeleteRequest)(nil),                                  // 4: mockgcp.cloud.sql.v1beta4.SqlBackupRunsDeleteRequest
	(*SqlBackupRunsGetRequest)(nil),                                     // 5: mockgcp.cloud.sql.v1beta4.SqlBackupRunsGetRequest
	(*SqlBackupRunsInsertRequest)(nil),                                  // 6: mockgcp.cloud.sql.v1beta4.SqlBackupRunsInsertRequest
	(*SqlBackupRunsListRequest)(nil),                                    // 7: mockgcp.cloud.sql.v1beta4.SqlBackupRunsListRequest
	(*SqlDatabasesDeleteRequest)(nil),                                   // 8: mockgcp.cloud.sql.v1beta4.SqlDatabasesDeleteRequest
	(*SqlDatabasesGetRequest)(nil),                                      // 9: mockgcp.cloud.sql.v1beta4.SqlDatabasesGetRequest
	(*SqlDatabasesInsertRequest)(nil),                                   // 10: mockgcp.cloud.sql.v1beta4.SqlDatabasesInsertRequest
	(*SqlDatabasesListRequest)(nil),                                     // 11: mockgcp.cloud.sql.v1beta4.SqlDatabasesListRequest
	(*SqlDatabasesUpdateRequest)(nil),                                   // 12: mockgcp.cloud.sql.v1beta4.SqlDatabasesUpdateRequest
	(*SqlFlagsListRequest)(nil),                                         // 13: mockgcp.cloud.sql.v1beta4.SqlFlagsListRequest
	(*SqlInstancesAddServerCaRequest)(nil),                              // 14: mockgcp.cloud.sql.v1beta4.SqlInstancesAddServerCaRequest
	(*SqlInstancesCloneRequest)(nil),                                    // 15: mockgcp.cloud.sql.v1beta4.SqlInstancesCloneRequest
	(*SqlInstancesDeleteRequest)(nil),                                   // 16: mockgcp.cloud.sql.v1beta4.SqlInstancesDeleteRequest
	(*SqlInstancesDemoteMasterRequest)(nil),                             // 17: mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest
	(*SqlInstancesDemoteRequest)(nil),                                   // 18: mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteRequest
	(*SqlInstancesExportRequest)(nil),                                   // 19: mockgcp.cloud.sql.v1beta4.SqlInstancesExportRequest
	(*SqlInstancesFailoverRequest)(nil),                                 // 20: mockgcp.cloud.sql.v1beta4.SqlInstancesFailoverRequest
	(*SqlInstancesGetRequest)(nil),                                      // 21: mockgcp.cloud.sql.v1beta4.SqlInstancesGetRequest
	(*SqlInstancesImportRequest)(nil),                                   // 22: mockgcp.cloud.sql.v1beta4.SqlInstancesImportRequest
	(*SqlInstancesInsertRequest)(nil),                                   // 23: mockgcp.cloud.sql.v1beta4.SqlInstancesInsertRequest
	(*SqlInstancesListRequest)(nil),                                     // 24: mockgcp.cloud.sql.v1beta4.SqlInstancesListRequest
	(*SqlInstancesListServerCasRequest)(nil),                            // 25: mockgcp.cloud.sql.v1beta4.SqlInstancesListServerCasRequest
	(*SqlInstancesPatchRequest)(nil),                                    // 26: mockgcp.cloud.sql.v1beta4.SqlInstancesPatchRequest
	(*SqlInstancesPromoteReplicaRequest)(nil),                           // 27: mockgcp.cloud.sql.v1beta4.SqlInstancesPromoteReplicaRequest
	(*SqlInstancesSwitchoverRequest)(nil),                               // 28: mockgcp.cloud.sql.v1beta4.SqlInstancesSwitchoverRequest
	(*SqlInstancesResetSslConfigRequest)(nil),                           // 29: mockgcp.cloud.sql.v1beta4.SqlInstancesResetSslConfigRequest
	(*SqlInstancesRestartRequest)(nil),                                  // 30: mockgcp.cloud.sql.v1beta4.SqlInstancesRestartRequest
	(*SqlInstancesRestoreBackupRequest)(nil),                            // 31: mockgcp.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest
	(*SqlInstancesRotateServerCaRequest)(nil),                           // 32: mockgcp.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest
	(*SqlInstancesStartReplicaRequest)(nil),                             // 33: mockgcp.cloud.sql.v1beta4.SqlInstancesStartReplicaRequest
	(*SqlInstancesStopReplicaRequest)(nil),                              // 34: mockgcp.cloud.sql.v1beta4.SqlInstancesStopReplicaRequest
	(*SqlInstancesTruncateLogRequest)(nil),                              // 35: mockgcp.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest
	(*SqlInstancesUpdateRequest)(nil),                                   // 36: mockgcp.cloud.sql.v1beta4.SqlInstancesUpdateRequest
	(*SqlInstancesReencryptRequest)(nil),                                // 37: mockgcp.cloud.sql.v1beta4.SqlInstancesReencryptRequest
	(*InstancesReencryptRequest)(nil),                                   // 38: mockgcp.cloud.sql.v1beta4.InstancesReencryptRequest
	(*BackupReencryptionConfig)(nil),                                    // 39: mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig
	(*SqlInstancesRescheduleMaintenanceRequest)(nil),                    // 40: mockgcp.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest
	(*SqlInstancesPerformDiskShrinkRequest)(nil),                        // 41: mockgcp.cloud.sql.v1beta4.SqlInstancesPerformDiskShrinkRequest
	(*SqlInstancesVerifyExternalSyncSettingsRequest)(nil),               // 42: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest
	(*SqlInstancesStartExternalSyncRequest)(nil),                        // 43: mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest
	(*SqlInstancesResetReplicaSizeRequest)(nil),                         // 44: mockgcp.cloud.sql.v1beta4.SqlInstancesResetReplicaSizeRequest
	(*SqlOperationsGetRequest)(nil),                                     // 45: mockgcp.cloud.sql.v1beta4.SqlOperationsGetRequest
	(*SqlOperationsListRequest)(nil),                                    // 46: mockgcp.cloud.sql.v1beta4.SqlOperationsListRequest
	(*SqlOperationsCancelRequest)(nil),                                  // 47: mockgcp.cloud.sql.v1beta4.SqlOperationsCancelRequest
	(*SqlInstancesCreateEphemeralCertRequest)(nil),                      // 48: mockgcp.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest
	(*SqlSslCertsDeleteRequest)(nil),                                    // 49: mockgcp.cloud.sql.v1beta4.SqlSslCertsDeleteRequest
	(*SqlSslCertsGetRequest)(nil),                                       // 50: mockgcp.cloud.sql.v1beta4.SqlSslCertsGetRequest
	(*SqlSslCertsInsertRequest)(nil),                                    // 51: mockgcp.cloud.sql.v1beta4.SqlSslCertsInsertRequest
	(*SqlSslCertsListRequest)(nil),                                      // 52: mockgcp.cloud.sql.v1beta4.SqlSslCertsListRequest
	(*SqlInstancesGetDiskShrinkConfigRequest)(nil),                      // 53: mockgcp.cloud.sql.v1beta4.SqlInstancesGetDiskShrinkConfigRequest
	(*SqlInstancesGetLatestRecoveryTimeRequest)(nil),                    // 54: mockgcp.cloud.sql.v1beta4.SqlInstancesGetLatestRecoveryTimeRequest
	(*SqlInstancesGetLatestRecoveryTimeResponse)(nil),                   // 55: mockgcp.cloud.sql.v1beta4.SqlInstancesGetLatestRecoveryTimeResponse
	(*SqlInstancesReleaseSsrsLeaseRequest)(nil),                         // 56: mockgcp.cloud.sql.v1beta4.SqlInstancesReleaseSsrsLeaseRequest
	(*SqlInstancesReleaseSsrsLeaseResponse)(nil),                        // 57: mockgcp.cloud.sql.v1beta4.SqlInstancesReleaseSsrsLeaseResponse
	(*SqlInstancesAcquireSsrsLeaseRequest)(nil),                         // 58: mockgcp.cloud.sql.v1beta4.SqlInstancesAcquireSsrsLeaseRequest
	(*SqlInstancesAcquireSsrsLeaseResponse)(nil),                        // 59: mockgcp.cloud.sql.v1beta4.SqlInstancesAcquireSsrsLeaseResponse
	(*BackupRun)(nil),                                                   // 60: mockgcp.cloud.sql.v1beta4.BackupRun
	(*Database)(nil),                                                    // 61: mockgcp.cloud.sql.v1beta4.Database
	(*InstancesCloneRequest)(nil),                                       // 62: mockgcp.cloud.sql.v1beta4.InstancesCloneRequest
	(*InstancesDemoteMasterRequest)(nil),                                // 63: mockgcp.cloud.sql.v1beta4.InstancesDemoteMasterRequest
	(*InstancesDemoteRequest)(nil),                                      // 64: mockgcp.cloud.sql.v1beta4.InstancesDemoteRequest
	(*InstancesExportRequest)(nil),                                      // 65: mockgcp.cloud.sql.v1beta4.InstancesExportRequest
	(*InstancesFailoverRequest)(nil),                                    // 66: mockgcp.cloud.sql.v1beta4.InstancesFailoverRequest
	(*InstancesImportRequest)(nil),                                      // 67: mockgcp.cloud.sql.v1beta4.InstancesImportRequest
	(*DatabaseInstance)(nil),                                            // 68: mockgcp.cloud.sql.v1beta4.DatabaseInstance
	(*duration.Duration)(nil),                                           // 69: google.protobuf.Duration
	(*InstancesRestoreBackupRequest)(nil),                               // 70: mockgcp.cloud.sql.v1beta4.InstancesRestoreBackupRequest
	(*InstancesRotateServerCaRequest)(nil),                              // 71: mockgcp.cloud.sql.v1beta4.InstancesRotateServerCaRequest
	(*InstancesTruncateLogRequest)(nil),                                 // 72: mockgcp.cloud.sql.v1beta4.InstancesTruncateLogRequest
	(*SqlInstancesRescheduleMaintenanceRequestBody)(nil),                // 73: mockgcp.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequestBody
	(*PerformDiskShrinkContext)(nil),                                    // 74: mockgcp.cloud.sql.v1beta4.PerformDiskShrinkContext
	(*MySqlSyncConfig)(nil),                                             // 75: mockgcp.cloud.sql.v1beta4.MySqlSyncConfig
	(*SslCertsCreateEphemeralRequest)(nil),                              // 76: mockgcp.cloud.sql.v1beta4.SslCertsCreateEphemeralRequest
	(*SslCertsInsertRequest)(nil),                                       // 77: mockgcp.cloud.sql.v1beta4.SslCertsInsertRequest
	(*timestamp.Timestamp)(nil),                                         // 78: google.protobuf.Timestamp
	(*InstancesAcquireSsrsLeaseRequest)(nil),                            // 79: mockgcp.cloud.sql.v1beta4.InstancesAcquireSsrsLeaseRequest
	(*Operation)(nil),                                                   // 80: mockgcp.cloud.sql.v1beta4.Operation
	(*BackupRunsListResponse)(nil),                                      // 81: mockgcp.cloud.sql.v1beta4.BackupRunsListResponse
	(*DatabasesListResponse)(nil),                                       // 82: mockgcp.cloud.sql.v1beta4.DatabasesListResponse
	(*FlagsListResponse)(nil),                                           // 83: mockgcp.cloud.sql.v1beta4.FlagsListResponse
	(*InstancesListResponse)(nil),                                       // 84: mockgcp.cloud.sql.v1beta4.InstancesListResponse
	(*InstancesListServerCasResponse)(nil),                              // 85: mockgcp.cloud.sql.v1beta4.InstancesListServerCasResponse
	(*SslCert)(nil),                                                     // 86: mockgcp.cloud.sql.v1beta4.SslCert
	(*SqlInstancesVerifyExternalSyncSettingsResponse)(nil),              // 87: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsResponse
	(*SqlInstancesGetDiskShrinkConfigResponse)(nil),                     // 88: mockgcp.cloud.sql.v1beta4.SqlInstancesGetDiskShrinkConfigResponse
	(*OperationsListResponse)(nil),                                      // 89: mockgcp.cloud.sql.v1beta4.OperationsListResponse
	(*empty.Empty)(nil),                                                 // 90: google.protobuf.Empty
	(*SslCertsInsertResponse)(nil),                                      // 91: mockgcp.cloud.sql.v1beta4.SslCertsInsertResponse
	(*SslCertsListResponse)(nil),                                        // 92: mockgcp.cloud.sql.v1beta4.SslCertsListResponse
}
var file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_depIdxs = []int32{
	60, // 0: mockgcp.cloud.sql.v1beta4.SqlBackupRunsInsertRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.BackupRun
	61, // 1: mockgcp.cloud.sql.v1beta4.SqlDatabasesInsertRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.Database
	61, // 2: mockgcp.cloud.sql.v1beta4.SqlDatabasesUpdateRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.Database
	62, // 3: mockgcp.cloud.sql.v1beta4.SqlInstancesCloneRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesCloneRequest
	63, // 4: mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesDemoteMasterRequest
	64, // 5: mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesDemoteRequest
	65, // 6: mockgcp.cloud.sql.v1beta4.SqlInstancesExportRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesExportRequest
	66, // 7: mockgcp.cloud.sql.v1beta4.SqlInstancesFailoverRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesFailoverRequest
	67, // 8: mockgcp.cloud.sql.v1beta4.SqlInstancesImportRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesImportRequest
	68, // 9: mockgcp.cloud.sql.v1beta4.SqlInstancesInsertRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.DatabaseInstance
	68, // 10: mockgcp.cloud.sql.v1beta4.SqlInstancesPatchRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.DatabaseInstance
	69, // 11: mockgcp.cloud.sql.v1beta4.SqlInstancesSwitchoverRequest.db_timeout:type_name -> google.protobuf.Duration
	70, // 12: mockgcp.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesRestoreBackupRequest
	71, // 13: mockgcp.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesRotateServerCaRequest
	72, // 14: mockgcp.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesTruncateLogRequest
	68, // 15: mockgcp.cloud.sql.v1beta4.SqlInstancesUpdateRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.DatabaseInstance
	38, // 16: mockgcp.cloud.sql.v1beta4.SqlInstancesReencryptRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesReencryptRequest
	39, // 17: mockgcp.cloud.sql.v1beta4.InstancesReencryptRequest.backup_reencryption_config:type_name -> mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig
	1,  // 18: mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig.backup_type:type_name -> mockgcp.cloud.sql.v1beta4.BackupReencryptionConfig.BackupType
	73, // 19: mockgcp.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequestBody
	74, // 20: mockgcp.cloud.sql.v1beta4.SqlInstancesPerformDiskShrinkRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.PerformDiskShrinkContext
	2,  // 21: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.sync_mode:type_name -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	75, // 22: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.mysql_sync_config:type_name -> mockgcp.cloud.sql.v1beta4.MySqlSyncConfig
	3,  // 23: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.migration_type:type_name -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.MigrationType
	0,  // 24: mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.sync_parallel_level:type_name -> mockgcp.cloud.sql.v1beta4.ExternalSyncParallelLevel
	2,  // 25: mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest.sync_mode:type_name -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.ExternalSyncMode
	75, // 26: mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest.mysql_sync_config:type_name -> mockgcp.cloud.sql.v1beta4.MySqlSyncConfig
	0,  // 27: mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest.sync_parallel_level:type_name -> mockgcp.cloud.sql.v1beta4.ExternalSyncParallelLevel
	3,  // 28: mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest.migration_type:type_name -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest.MigrationType
	76, // 29: mockgcp.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.SslCertsCreateEphemeralRequest
	77, // 30: mockgcp.cloud.sql.v1beta4.SqlSslCertsInsertRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.SslCertsInsertRequest
	78, // 31: mockgcp.cloud.sql.v1beta4.SqlInstancesGetLatestRecoveryTimeResponse.latest_recovery_time:type_name -> google.protobuf.Timestamp
	79, // 32: mockgcp.cloud.sql.v1beta4.SqlInstancesAcquireSsrsLeaseRequest.body:type_name -> mockgcp.cloud.sql.v1beta4.InstancesAcquireSsrsLeaseRequest
	4,  // 33: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Delete:input_type -> mockgcp.cloud.sql.v1beta4.SqlBackupRunsDeleteRequest
	5,  // 34: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Get:input_type -> mockgcp.cloud.sql.v1beta4.SqlBackupRunsGetRequest
	6,  // 35: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Insert:input_type -> mockgcp.cloud.sql.v1beta4.SqlBackupRunsInsertRequest
	7,  // 36: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlBackupRunsListRequest
	8,  // 37: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Delete:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesDeleteRequest
	9,  // 38: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Get:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesGetRequest
	10, // 39: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Insert:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesInsertRequest
	11, // 40: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesListRequest
	12, // 41: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Patch:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesUpdateRequest
	12, // 42: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Update:input_type -> mockgcp.cloud.sql.v1beta4.SqlDatabasesUpdateRequest
	13, // 43: mockgcp.cloud.sql.v1beta4.SqlFlagsService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlFlagsListRequest
	14, // 44: mockgcp.cloud.sql.v1beta4.SqlInstancesService.AddServerCa:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesAddServerCaRequest
	15, // 45: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Clone:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesCloneRequest
	16, // 46: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Delete:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesDeleteRequest
	17, // 47: mockgcp.cloud.sql.v1beta4.SqlInstancesService.DemoteMaster:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteMasterRequest
	18, // 48: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Demote:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesDemoteRequest
	19, // 49: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Export:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesExportRequest
	20, // 50: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Failover:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesFailoverRequest
	37, // 51: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Reencrypt:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesReencryptRequest
	21, // 52: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Get:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesGetRequest
	22, // 53: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Import:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesImportRequest
	23, // 54: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Insert:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesInsertRequest
	24, // 55: mockgcp.cloud.sql.v1beta4.SqlInstancesService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesListRequest
	25, // 56: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ListServerCas:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesListServerCasRequest
	26, // 57: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Patch:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesPatchRequest
	27, // 58: mockgcp.cloud.sql.v1beta4.SqlInstancesService.PromoteReplica:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesPromoteReplicaRequest
	28, // 59: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Switchover:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesSwitchoverRequest
	29, // 60: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ResetSslConfig:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesResetSslConfigRequest
	30, // 61: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Restart:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesRestartRequest
	31, // 62: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RestoreBackup:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesRestoreBackupRequest
	32, // 63: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RotateServerCa:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesRotateServerCaRequest
	33, // 64: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StartReplica:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesStartReplicaRequest
	34, // 65: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StopReplica:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesStopReplicaRequest
	35, // 66: mockgcp.cloud.sql.v1beta4.SqlInstancesService.TruncateLog:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesTruncateLogRequest
	36, // 67: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Update:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesUpdateRequest
	48, // 68: mockgcp.cloud.sql.v1beta4.SqlInstancesService.CreateEphemeral:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesCreateEphemeralCertRequest
	40, // 69: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RescheduleMaintenance:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesRescheduleMaintenanceRequest
	42, // 70: mockgcp.cloud.sql.v1beta4.SqlInstancesService.VerifyExternalSyncSettings:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsRequest
	43, // 71: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StartExternalSync:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesStartExternalSyncRequest
	41, // 72: mockgcp.cloud.sql.v1beta4.SqlInstancesService.PerformDiskShrink:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesPerformDiskShrinkRequest
	53, // 73: mockgcp.cloud.sql.v1beta4.SqlInstancesService.GetDiskShrinkConfig:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesGetDiskShrinkConfigRequest
	44, // 74: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ResetReplicaSize:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesResetReplicaSizeRequest
	54, // 75: mockgcp.cloud.sql.v1beta4.SqlInstancesService.GetLatestRecoveryTime:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesGetLatestRecoveryTimeRequest
	58, // 76: mockgcp.cloud.sql.v1beta4.SqlInstancesService.AcquireSsrsLease:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesAcquireSsrsLeaseRequest
	56, // 77: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ReleaseSsrsLease:input_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesReleaseSsrsLeaseRequest
	45, // 78: mockgcp.cloud.sql.v1beta4.SqlOperationsService.Get:input_type -> mockgcp.cloud.sql.v1beta4.SqlOperationsGetRequest
	46, // 79: mockgcp.cloud.sql.v1beta4.SqlOperationsService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlOperationsListRequest
	47, // 80: mockgcp.cloud.sql.v1beta4.SqlOperationsService.Cancel:input_type -> mockgcp.cloud.sql.v1beta4.SqlOperationsCancelRequest
	49, // 81: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Delete:input_type -> mockgcp.cloud.sql.v1beta4.SqlSslCertsDeleteRequest
	50, // 82: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Get:input_type -> mockgcp.cloud.sql.v1beta4.SqlSslCertsGetRequest
	51, // 83: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Insert:input_type -> mockgcp.cloud.sql.v1beta4.SqlSslCertsInsertRequest
	52, // 84: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.List:input_type -> mockgcp.cloud.sql.v1beta4.SqlSslCertsListRequest
	80, // 85: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Delete:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	60, // 86: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Get:output_type -> mockgcp.cloud.sql.v1beta4.BackupRun
	80, // 87: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.Insert:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	81, // 88: mockgcp.cloud.sql.v1beta4.SqlBackupRunsService.List:output_type -> mockgcp.cloud.sql.v1beta4.BackupRunsListResponse
	80, // 89: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Delete:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	61, // 90: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Get:output_type -> mockgcp.cloud.sql.v1beta4.Database
	80, // 91: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Insert:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	82, // 92: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.List:output_type -> mockgcp.cloud.sql.v1beta4.DatabasesListResponse
	80, // 93: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Patch:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 94: mockgcp.cloud.sql.v1beta4.SqlDatabasesService.Update:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	83, // 95: mockgcp.cloud.sql.v1beta4.SqlFlagsService.List:output_type -> mockgcp.cloud.sql.v1beta4.FlagsListResponse
	80, // 96: mockgcp.cloud.sql.v1beta4.SqlInstancesService.AddServerCa:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 97: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Clone:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 98: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Delete:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 99: mockgcp.cloud.sql.v1beta4.SqlInstancesService.DemoteMaster:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 100: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Demote:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 101: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Export:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 102: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Failover:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 103: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Reencrypt:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	68, // 104: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Get:output_type -> mockgcp.cloud.sql.v1beta4.DatabaseInstance
	80, // 105: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Import:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 106: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Insert:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	84, // 107: mockgcp.cloud.sql.v1beta4.SqlInstancesService.List:output_type -> mockgcp.cloud.sql.v1beta4.InstancesListResponse
	85, // 108: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ListServerCas:output_type -> mockgcp.cloud.sql.v1beta4.InstancesListServerCasResponse
	80, // 109: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Patch:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 110: mockgcp.cloud.sql.v1beta4.SqlInstancesService.PromoteReplica:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 111: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Switchover:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 112: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ResetSslConfig:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 113: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Restart:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 114: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RestoreBackup:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 115: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RotateServerCa:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 116: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StartReplica:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 117: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StopReplica:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 118: mockgcp.cloud.sql.v1beta4.SqlInstancesService.TruncateLog:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 119: mockgcp.cloud.sql.v1beta4.SqlInstancesService.Update:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	86, // 120: mockgcp.cloud.sql.v1beta4.SqlInstancesService.CreateEphemeral:output_type -> mockgcp.cloud.sql.v1beta4.SslCert
	80, // 121: mockgcp.cloud.sql.v1beta4.SqlInstancesService.RescheduleMaintenance:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	87, // 122: mockgcp.cloud.sql.v1beta4.SqlInstancesService.VerifyExternalSyncSettings:output_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesVerifyExternalSyncSettingsResponse
	80, // 123: mockgcp.cloud.sql.v1beta4.SqlInstancesService.StartExternalSync:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	80, // 124: mockgcp.cloud.sql.v1beta4.SqlInstancesService.PerformDiskShrink:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	88, // 125: mockgcp.cloud.sql.v1beta4.SqlInstancesService.GetDiskShrinkConfig:output_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesGetDiskShrinkConfigResponse
	80, // 126: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ResetReplicaSize:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	55, // 127: mockgcp.cloud.sql.v1beta4.SqlInstancesService.GetLatestRecoveryTime:output_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesGetLatestRecoveryTimeResponse
	59, // 128: mockgcp.cloud.sql.v1beta4.SqlInstancesService.AcquireSsrsLease:output_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesAcquireSsrsLeaseResponse
	57, // 129: mockgcp.cloud.sql.v1beta4.SqlInstancesService.ReleaseSsrsLease:output_type -> mockgcp.cloud.sql.v1beta4.SqlInstancesReleaseSsrsLeaseResponse
	80, // 130: mockgcp.cloud.sql.v1beta4.SqlOperationsService.Get:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	89, // 131: mockgcp.cloud.sql.v1beta4.SqlOperationsService.List:output_type -> mockgcp.cloud.sql.v1beta4.OperationsListResponse
	90, // 132: mockgcp.cloud.sql.v1beta4.SqlOperationsService.Cancel:output_type -> google.protobuf.Empty
	80, // 133: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Delete:output_type -> mockgcp.cloud.sql.v1beta4.Operation
	86, // 134: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Get:output_type -> mockgcp.cloud.sql.v1beta4.SslCert
	91, // 135: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.Insert:output_type -> mockgcp.cloud.sql.v1beta4.SslCertsInsertResponse
	92, // 136: mockgcp.cloud.sql.v1beta4.SqlSslCertsService.List:output_type -> mockgcp.cloud.sql.v1beta4.SslCertsListResponse
	85, // [85:137] is the sub-list for method output_type
	33, // [33:85] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_init() }
func file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_init() {
	if File_mockgcp_cloud_sql_v1beta4_cloud_sql_proto != nil {
		return
	}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBackupRunsDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBackupRunsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBackupRunsInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBackupRunsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabasesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabasesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabasesInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabasesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatabasesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFlagsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesAddServerCaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesCloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDemoteMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesDemoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesFailoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesListServerCasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPromoteReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesSwitchoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesResetSslConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRestoreBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRotateServerCaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStartReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStopReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesTruncateLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesReencryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstancesReencryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupReencryptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesRescheduleMaintenanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesPerformDiskShrinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesVerifyExternalSyncSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesStartExternalSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesResetReplicaSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperationsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperationsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperationsCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesCreateEphemeralCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSslCertsDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSslCertsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSslCertsInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSslCertsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetDiskShrinkConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetLatestRecoveryTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesGetLatestRecoveryTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesReleaseSsrsLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesReleaseSsrsLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesAcquireSsrsLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInstancesAcquireSsrsLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*SqlInstancesVerifyExternalSyncSettingsRequest_MysqlSyncConfig)(nil),
	}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*SqlInstancesStartExternalSyncRequest_MysqlSyncConfig)(nil),
	}
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes[55].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_depIdxs,
		EnumInfos:         file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_enumTypes,
		MessageInfos:      file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_sql_v1beta4_cloud_sql_proto = out.File
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_rawDesc = nil
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_goTypes = nil
	file_mockgcp_cloud_sql_v1beta4_cloud_sql_proto_depIdxs = nil
}
