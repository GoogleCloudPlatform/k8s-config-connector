// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mockgcp/cloud/networksecurity/v1/service.proto

package networksecuritypb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganizationsServerClient is the client API for OrganizationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsServerClient interface {
}

type organizationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsServerClient(cc grpc.ClientConnInterface) OrganizationsServerClient {
	return &organizationsServerClient{cc}
}

// OrganizationsServerServer is the server API for OrganizationsServer service.
// All implementations must embed UnimplementedOrganizationsServerServer
// for forward compatibility
type OrganizationsServerServer interface {
	mustEmbedUnimplementedOrganizationsServerServer()
}

// UnimplementedOrganizationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsServerServer struct {
}

func (UnimplementedOrganizationsServerServer) mustEmbedUnimplementedOrganizationsServerServer() {}

// UnsafeOrganizationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsServerServer will
// result in compilation errors.
type UnsafeOrganizationsServerServer interface {
	mustEmbedUnimplementedOrganizationsServerServer()
}

func RegisterOrganizationsServerServer(s grpc.ServiceRegistrar, srv OrganizationsServerServer) {
	s.RegisterService(&OrganizationsServer_ServiceDesc, srv)
}

// OrganizationsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsServer",
	HandlerType: (*OrganizationsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/networksecurity/v1/service.proto",
}

// OrganizationsLocationsServerClient is the client API for OrganizationsLocationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsLocationsServerClient interface {
}

type organizationsLocationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsLocationsServerClient(cc grpc.ClientConnInterface) OrganizationsLocationsServerClient {
	return &organizationsLocationsServerClient{cc}
}

// OrganizationsLocationsServerServer is the server API for OrganizationsLocationsServer service.
// All implementations must embed UnimplementedOrganizationsLocationsServerServer
// for forward compatibility
type OrganizationsLocationsServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsServerServer()
}

// UnimplementedOrganizationsLocationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsLocationsServerServer struct {
}

func (UnimplementedOrganizationsLocationsServerServer) mustEmbedUnimplementedOrganizationsLocationsServerServer() {
}

// UnsafeOrganizationsLocationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsLocationsServerServer will
// result in compilation errors.
type UnsafeOrganizationsLocationsServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsServerServer()
}

func RegisterOrganizationsLocationsServerServer(s grpc.ServiceRegistrar, srv OrganizationsLocationsServerServer) {
	s.RegisterService(&OrganizationsLocationsServer_ServiceDesc, srv)
}

// OrganizationsLocationsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsLocationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsLocationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsLocationsServer",
	HandlerType: (*OrganizationsLocationsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/networksecurity/v1/service.proto",
}

// OrganizationsLocationsAddressGroupsServerClient is the client API for OrganizationsLocationsAddressGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsLocationsAddressGroupsServerClient interface {
	// Adds items to an address group.
	AddItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *AddItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Clones items from one address group to another.
	CloneItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *CloneItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a new address group in a given project and location.
	CreateOrganizationsLocationsAddressGroup(ctx context.Context, in *CreateOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an address group.
	DeleteOrganizationsLocationsAddressGroup(ctx context.Context, in *DeleteOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single address group.
	GetOrganizationsLocationsAddressGroup(ctx context.Context, in *GetOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*AddressGroup, error)
	// Lists address groups in a given project and location.
	ListOrganizationsLocationsAddressGroups(ctx context.Context, in *ListOrganizationsLocationsAddressGroupsRequest, opts ...grpc.CallOption) (*ListAddressGroupsResponse, error)
	// Lists references of an address group.
	ListReferencesOrganizationsLocationsAddressGroup(ctx context.Context, in *ListReferencesOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*ListAddressGroupReferencesResponse, error)
	// Updates parameters of an address group.
	PatchOrganizationsLocationsAddressGroup(ctx context.Context, in *PatchOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Removes items from an address group.
	RemoveItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *RemoveItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsLocationsAddressGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsLocationsAddressGroupsServerClient(cc grpc.ClientConnInterface) OrganizationsLocationsAddressGroupsServerClient {
	return &organizationsLocationsAddressGroupsServerClient{cc}
}

func (c *organizationsLocationsAddressGroupsServerClient) AddItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *AddItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/AddItemsOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) CloneItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *CloneItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/CloneItemsOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) CreateOrganizationsLocationsAddressGroup(ctx context.Context, in *CreateOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/CreateOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) DeleteOrganizationsLocationsAddressGroup(ctx context.Context, in *DeleteOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/DeleteOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) GetOrganizationsLocationsAddressGroup(ctx context.Context, in *GetOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*AddressGroup, error) {
	out := new(AddressGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/GetOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) ListOrganizationsLocationsAddressGroups(ctx context.Context, in *ListOrganizationsLocationsAddressGroupsRequest, opts ...grpc.CallOption) (*ListAddressGroupsResponse, error) {
	out := new(ListAddressGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/ListOrganizationsLocationsAddressGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) ListReferencesOrganizationsLocationsAddressGroup(ctx context.Context, in *ListReferencesOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*ListAddressGroupReferencesResponse, error) {
	out := new(ListAddressGroupReferencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/ListReferencesOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) PatchOrganizationsLocationsAddressGroup(ctx context.Context, in *PatchOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/PatchOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsAddressGroupsServerClient) RemoveItemsOrganizationsLocationsAddressGroup(ctx context.Context, in *RemoveItemsOrganizationsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/RemoveItemsOrganizationsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsLocationsAddressGroupsServerServer is the server API for OrganizationsLocationsAddressGroupsServer service.
// All implementations must embed UnimplementedOrganizationsLocationsAddressGroupsServerServer
// for forward compatibility
type OrganizationsLocationsAddressGroupsServerServer interface {
	// Adds items to an address group.
	AddItemsOrganizationsLocationsAddressGroup(context.Context, *AddItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Clones items from one address group to another.
	CloneItemsOrganizationsLocationsAddressGroup(context.Context, *CloneItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Creates a new address group in a given project and location.
	CreateOrganizationsLocationsAddressGroup(context.Context, *CreateOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Deletes an address group.
	DeleteOrganizationsLocationsAddressGroup(context.Context, *DeleteOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Gets details of a single address group.
	GetOrganizationsLocationsAddressGroup(context.Context, *GetOrganizationsLocationsAddressGroupRequest) (*AddressGroup, error)
	// Lists address groups in a given project and location.
	ListOrganizationsLocationsAddressGroups(context.Context, *ListOrganizationsLocationsAddressGroupsRequest) (*ListAddressGroupsResponse, error)
	// Lists references of an address group.
	ListReferencesOrganizationsLocationsAddressGroup(context.Context, *ListReferencesOrganizationsLocationsAddressGroupRequest) (*ListAddressGroupReferencesResponse, error)
	// Updates parameters of an address group.
	PatchOrganizationsLocationsAddressGroup(context.Context, *PatchOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Removes items from an address group.
	RemoveItemsOrganizationsLocationsAddressGroup(context.Context, *RemoveItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsLocationsAddressGroupsServerServer()
}

// UnimplementedOrganizationsLocationsAddressGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsLocationsAddressGroupsServerServer struct {
}

func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) AddItemsOrganizationsLocationsAddressGroup(context.Context, *AddItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemsOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) CloneItemsOrganizationsLocationsAddressGroup(context.Context, *CloneItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneItemsOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) CreateOrganizationsLocationsAddressGroup(context.Context, *CreateOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) DeleteOrganizationsLocationsAddressGroup(context.Context, *DeleteOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) GetOrganizationsLocationsAddressGroup(context.Context, *GetOrganizationsLocationsAddressGroupRequest) (*AddressGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) ListOrganizationsLocationsAddressGroups(context.Context, *ListOrganizationsLocationsAddressGroupsRequest) (*ListAddressGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsLocationsAddressGroups not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) ListReferencesOrganizationsLocationsAddressGroup(context.Context, *ListReferencesOrganizationsLocationsAddressGroupRequest) (*ListAddressGroupReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferencesOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) PatchOrganizationsLocationsAddressGroup(context.Context, *PatchOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) RemoveItemsOrganizationsLocationsAddressGroup(context.Context, *RemoveItemsOrganizationsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemsOrganizationsLocationsAddressGroup not implemented")
}
func (UnimplementedOrganizationsLocationsAddressGroupsServerServer) mustEmbedUnimplementedOrganizationsLocationsAddressGroupsServerServer() {
}

// UnsafeOrganizationsLocationsAddressGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsLocationsAddressGroupsServerServer will
// result in compilation errors.
type UnsafeOrganizationsLocationsAddressGroupsServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsAddressGroupsServerServer()
}

func RegisterOrganizationsLocationsAddressGroupsServerServer(s grpc.ServiceRegistrar, srv OrganizationsLocationsAddressGroupsServerServer) {
	s.RegisterService(&OrganizationsLocationsAddressGroupsServer_ServiceDesc, srv)
}

func _OrganizationsLocationsAddressGroupsServer_AddItemsOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).AddItemsOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/AddItemsOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).AddItemsOrganizationsLocationsAddressGroup(ctx, req.(*AddItemsOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_CloneItemsOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneItemsOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).CloneItemsOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/CloneItemsOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).CloneItemsOrganizationsLocationsAddressGroup(ctx, req.(*CloneItemsOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_CreateOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).CreateOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/CreateOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).CreateOrganizationsLocationsAddressGroup(ctx, req.(*CreateOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_DeleteOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).DeleteOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/DeleteOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).DeleteOrganizationsLocationsAddressGroup(ctx, req.(*DeleteOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_GetOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).GetOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/GetOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).GetOrganizationsLocationsAddressGroup(ctx, req.(*GetOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_ListOrganizationsLocationsAddressGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsLocationsAddressGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).ListOrganizationsLocationsAddressGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/ListOrganizationsLocationsAddressGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).ListOrganizationsLocationsAddressGroups(ctx, req.(*ListOrganizationsLocationsAddressGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_ListReferencesOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferencesOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).ListReferencesOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/ListReferencesOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).ListReferencesOrganizationsLocationsAddressGroup(ctx, req.(*ListReferencesOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_PatchOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).PatchOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/PatchOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).PatchOrganizationsLocationsAddressGroup(ctx, req.(*PatchOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsAddressGroupsServer_RemoveItemsOrganizationsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemsOrganizationsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).RemoveItemsOrganizationsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer/RemoveItemsOrganizationsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsAddressGroupsServerServer).RemoveItemsOrganizationsLocationsAddressGroup(ctx, req.(*RemoveItemsOrganizationsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsLocationsAddressGroupsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsLocationsAddressGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsLocationsAddressGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsLocationsAddressGroupsServer",
	HandlerType: (*OrganizationsLocationsAddressGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItemsOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_AddItemsOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "CloneItemsOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_CloneItemsOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "CreateOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_CreateOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "DeleteOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_DeleteOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "GetOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_GetOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "ListOrganizationsLocationsAddressGroups",
			Handler:    _OrganizationsLocationsAddressGroupsServer_ListOrganizationsLocationsAddressGroups_Handler,
		},
		{
			MethodName: "ListReferencesOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_ListReferencesOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "PatchOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_PatchOrganizationsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "RemoveItemsOrganizationsLocationsAddressGroup",
			Handler:    _OrganizationsLocationsAddressGroupsServer_RemoveItemsOrganizationsLocationsAddressGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// OrganizationsLocationsFirewallEndpointsServerClient is the client API for OrganizationsLocationsFirewallEndpointsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsLocationsFirewallEndpointsServerClient interface {
	// Creates a new FirewallEndpoint in a given project and location.
	CreateOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *CreateOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single Endpoint.
	DeleteOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *DeleteOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single Endpoint.
	GetOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *GetOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*FirewallEndpoint, error)
	// Lists FirewallEndpoints in a given project and location.
	ListOrganizationsLocationsFirewallEndpoints(ctx context.Context, in *ListOrganizationsLocationsFirewallEndpointsRequest, opts ...grpc.CallOption) (*ListFirewallEndpointsResponse, error)
	// Update a single Endpoint.
	PatchOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *PatchOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsLocationsFirewallEndpointsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsLocationsFirewallEndpointsServerClient(cc grpc.ClientConnInterface) OrganizationsLocationsFirewallEndpointsServerClient {
	return &organizationsLocationsFirewallEndpointsServerClient{cc}
}

func (c *organizationsLocationsFirewallEndpointsServerClient) CreateOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *CreateOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/CreateOrganizationsLocationsFirewallEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsFirewallEndpointsServerClient) DeleteOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *DeleteOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/DeleteOrganizationsLocationsFirewallEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsFirewallEndpointsServerClient) GetOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *GetOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*FirewallEndpoint, error) {
	out := new(FirewallEndpoint)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/GetOrganizationsLocationsFirewallEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsFirewallEndpointsServerClient) ListOrganizationsLocationsFirewallEndpoints(ctx context.Context, in *ListOrganizationsLocationsFirewallEndpointsRequest, opts ...grpc.CallOption) (*ListFirewallEndpointsResponse, error) {
	out := new(ListFirewallEndpointsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/ListOrganizationsLocationsFirewallEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsFirewallEndpointsServerClient) PatchOrganizationsLocationsFirewallEndpoint(ctx context.Context, in *PatchOrganizationsLocationsFirewallEndpointRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/PatchOrganizationsLocationsFirewallEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsLocationsFirewallEndpointsServerServer is the server API for OrganizationsLocationsFirewallEndpointsServer service.
// All implementations must embed UnimplementedOrganizationsLocationsFirewallEndpointsServerServer
// for forward compatibility
type OrganizationsLocationsFirewallEndpointsServerServer interface {
	// Creates a new FirewallEndpoint in a given project and location.
	CreateOrganizationsLocationsFirewallEndpoint(context.Context, *CreateOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error)
	// Deletes a single Endpoint.
	DeleteOrganizationsLocationsFirewallEndpoint(context.Context, *DeleteOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error)
	// Gets details of a single Endpoint.
	GetOrganizationsLocationsFirewallEndpoint(context.Context, *GetOrganizationsLocationsFirewallEndpointRequest) (*FirewallEndpoint, error)
	// Lists FirewallEndpoints in a given project and location.
	ListOrganizationsLocationsFirewallEndpoints(context.Context, *ListOrganizationsLocationsFirewallEndpointsRequest) (*ListFirewallEndpointsResponse, error)
	// Update a single Endpoint.
	PatchOrganizationsLocationsFirewallEndpoint(context.Context, *PatchOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsLocationsFirewallEndpointsServerServer()
}

// UnimplementedOrganizationsLocationsFirewallEndpointsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsLocationsFirewallEndpointsServerServer struct {
}

func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) CreateOrganizationsLocationsFirewallEndpoint(context.Context, *CreateOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsLocationsFirewallEndpoint not implemented")
}
func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) DeleteOrganizationsLocationsFirewallEndpoint(context.Context, *DeleteOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsLocationsFirewallEndpoint not implemented")
}
func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) GetOrganizationsLocationsFirewallEndpoint(context.Context, *GetOrganizationsLocationsFirewallEndpointRequest) (*FirewallEndpoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsLocationsFirewallEndpoint not implemented")
}
func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) ListOrganizationsLocationsFirewallEndpoints(context.Context, *ListOrganizationsLocationsFirewallEndpointsRequest) (*ListFirewallEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsLocationsFirewallEndpoints not implemented")
}
func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) PatchOrganizationsLocationsFirewallEndpoint(context.Context, *PatchOrganizationsLocationsFirewallEndpointRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsLocationsFirewallEndpoint not implemented")
}
func (UnimplementedOrganizationsLocationsFirewallEndpointsServerServer) mustEmbedUnimplementedOrganizationsLocationsFirewallEndpointsServerServer() {
}

// UnsafeOrganizationsLocationsFirewallEndpointsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsLocationsFirewallEndpointsServerServer will
// result in compilation errors.
type UnsafeOrganizationsLocationsFirewallEndpointsServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsFirewallEndpointsServerServer()
}

func RegisterOrganizationsLocationsFirewallEndpointsServerServer(s grpc.ServiceRegistrar, srv OrganizationsLocationsFirewallEndpointsServerServer) {
	s.RegisterService(&OrganizationsLocationsFirewallEndpointsServer_ServiceDesc, srv)
}

func _OrganizationsLocationsFirewallEndpointsServer_CreateOrganizationsLocationsFirewallEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsLocationsFirewallEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).CreateOrganizationsLocationsFirewallEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/CreateOrganizationsLocationsFirewallEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).CreateOrganizationsLocationsFirewallEndpoint(ctx, req.(*CreateOrganizationsLocationsFirewallEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsFirewallEndpointsServer_DeleteOrganizationsLocationsFirewallEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsLocationsFirewallEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).DeleteOrganizationsLocationsFirewallEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/DeleteOrganizationsLocationsFirewallEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).DeleteOrganizationsLocationsFirewallEndpoint(ctx, req.(*DeleteOrganizationsLocationsFirewallEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsFirewallEndpointsServer_GetOrganizationsLocationsFirewallEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsLocationsFirewallEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).GetOrganizationsLocationsFirewallEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/GetOrganizationsLocationsFirewallEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).GetOrganizationsLocationsFirewallEndpoint(ctx, req.(*GetOrganizationsLocationsFirewallEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsFirewallEndpointsServer_ListOrganizationsLocationsFirewallEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsLocationsFirewallEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).ListOrganizationsLocationsFirewallEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/ListOrganizationsLocationsFirewallEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).ListOrganizationsLocationsFirewallEndpoints(ctx, req.(*ListOrganizationsLocationsFirewallEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsFirewallEndpointsServer_PatchOrganizationsLocationsFirewallEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsLocationsFirewallEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).PatchOrganizationsLocationsFirewallEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer/PatchOrganizationsLocationsFirewallEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsFirewallEndpointsServerServer).PatchOrganizationsLocationsFirewallEndpoint(ctx, req.(*PatchOrganizationsLocationsFirewallEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsLocationsFirewallEndpointsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsLocationsFirewallEndpointsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsLocationsFirewallEndpointsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsLocationsFirewallEndpointsServer",
	HandlerType: (*OrganizationsLocationsFirewallEndpointsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsLocationsFirewallEndpoint",
			Handler:    _OrganizationsLocationsFirewallEndpointsServer_CreateOrganizationsLocationsFirewallEndpoint_Handler,
		},
		{
			MethodName: "DeleteOrganizationsLocationsFirewallEndpoint",
			Handler:    _OrganizationsLocationsFirewallEndpointsServer_DeleteOrganizationsLocationsFirewallEndpoint_Handler,
		},
		{
			MethodName: "GetOrganizationsLocationsFirewallEndpoint",
			Handler:    _OrganizationsLocationsFirewallEndpointsServer_GetOrganizationsLocationsFirewallEndpoint_Handler,
		},
		{
			MethodName: "ListOrganizationsLocationsFirewallEndpoints",
			Handler:    _OrganizationsLocationsFirewallEndpointsServer_ListOrganizationsLocationsFirewallEndpoints_Handler,
		},
		{
			MethodName: "PatchOrganizationsLocationsFirewallEndpoint",
			Handler:    _OrganizationsLocationsFirewallEndpointsServer_PatchOrganizationsLocationsFirewallEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// OrganizationsLocationsSecurityProfileGroupsServerClient is the client API for OrganizationsLocationsSecurityProfileGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsLocationsSecurityProfileGroupsServerClient interface {
	// Creates a new SecurityProfileGroup in a given organization and location.
	CreateOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *CreateOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single SecurityProfileGroup.
	DeleteOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *DeleteOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single SecurityProfileGroup.
	GetOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *GetOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*SecurityProfileGroup, error)
	// Lists SecurityProfileGroups in a given organization and location.
	ListOrganizationsLocationsSecurityProfileGroups(ctx context.Context, in *ListOrganizationsLocationsSecurityProfileGroupsRequest, opts ...grpc.CallOption) (*ListSecurityProfileGroupsResponse, error)
	// Updates the parameters of a single SecurityProfileGroup.
	PatchOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *PatchOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsLocationsSecurityProfileGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsLocationsSecurityProfileGroupsServerClient(cc grpc.ClientConnInterface) OrganizationsLocationsSecurityProfileGroupsServerClient {
	return &organizationsLocationsSecurityProfileGroupsServerClient{cc}
}

func (c *organizationsLocationsSecurityProfileGroupsServerClient) CreateOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *CreateOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/CreateOrganizationsLocationsSecurityProfileGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfileGroupsServerClient) DeleteOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *DeleteOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/DeleteOrganizationsLocationsSecurityProfileGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfileGroupsServerClient) GetOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *GetOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*SecurityProfileGroup, error) {
	out := new(SecurityProfileGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/GetOrganizationsLocationsSecurityProfileGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfileGroupsServerClient) ListOrganizationsLocationsSecurityProfileGroups(ctx context.Context, in *ListOrganizationsLocationsSecurityProfileGroupsRequest, opts ...grpc.CallOption) (*ListSecurityProfileGroupsResponse, error) {
	out := new(ListSecurityProfileGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/ListOrganizationsLocationsSecurityProfileGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfileGroupsServerClient) PatchOrganizationsLocationsSecurityProfileGroup(ctx context.Context, in *PatchOrganizationsLocationsSecurityProfileGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/PatchOrganizationsLocationsSecurityProfileGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsLocationsSecurityProfileGroupsServerServer is the server API for OrganizationsLocationsSecurityProfileGroupsServer service.
// All implementations must embed UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer
// for forward compatibility
type OrganizationsLocationsSecurityProfileGroupsServerServer interface {
	// Creates a new SecurityProfileGroup in a given organization and location.
	CreateOrganizationsLocationsSecurityProfileGroup(context.Context, *CreateOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a single SecurityProfileGroup.
	DeleteOrganizationsLocationsSecurityProfileGroup(context.Context, *DeleteOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error)
	// Gets details of a single SecurityProfileGroup.
	GetOrganizationsLocationsSecurityProfileGroup(context.Context, *GetOrganizationsLocationsSecurityProfileGroupRequest) (*SecurityProfileGroup, error)
	// Lists SecurityProfileGroups in a given organization and location.
	ListOrganizationsLocationsSecurityProfileGroups(context.Context, *ListOrganizationsLocationsSecurityProfileGroupsRequest) (*ListSecurityProfileGroupsResponse, error)
	// Updates the parameters of a single SecurityProfileGroup.
	PatchOrganizationsLocationsSecurityProfileGroup(context.Context, *PatchOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer()
}

// UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer struct {
}

func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) CreateOrganizationsLocationsSecurityProfileGroup(context.Context, *CreateOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsLocationsSecurityProfileGroup not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) DeleteOrganizationsLocationsSecurityProfileGroup(context.Context, *DeleteOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsLocationsSecurityProfileGroup not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) GetOrganizationsLocationsSecurityProfileGroup(context.Context, *GetOrganizationsLocationsSecurityProfileGroupRequest) (*SecurityProfileGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsLocationsSecurityProfileGroup not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) ListOrganizationsLocationsSecurityProfileGroups(context.Context, *ListOrganizationsLocationsSecurityProfileGroupsRequest) (*ListSecurityProfileGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsLocationsSecurityProfileGroups not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) PatchOrganizationsLocationsSecurityProfileGroup(context.Context, *PatchOrganizationsLocationsSecurityProfileGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsLocationsSecurityProfileGroup not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer) mustEmbedUnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer() {
}

// UnsafeOrganizationsLocationsSecurityProfileGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsLocationsSecurityProfileGroupsServerServer will
// result in compilation errors.
type UnsafeOrganizationsLocationsSecurityProfileGroupsServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsSecurityProfileGroupsServerServer()
}

func RegisterOrganizationsLocationsSecurityProfileGroupsServerServer(s grpc.ServiceRegistrar, srv OrganizationsLocationsSecurityProfileGroupsServerServer) {
	s.RegisterService(&OrganizationsLocationsSecurityProfileGroupsServer_ServiceDesc, srv)
}

func _OrganizationsLocationsSecurityProfileGroupsServer_CreateOrganizationsLocationsSecurityProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsLocationsSecurityProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).CreateOrganizationsLocationsSecurityProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/CreateOrganizationsLocationsSecurityProfileGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).CreateOrganizationsLocationsSecurityProfileGroup(ctx, req.(*CreateOrganizationsLocationsSecurityProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfileGroupsServer_DeleteOrganizationsLocationsSecurityProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsLocationsSecurityProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).DeleteOrganizationsLocationsSecurityProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/DeleteOrganizationsLocationsSecurityProfileGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).DeleteOrganizationsLocationsSecurityProfileGroup(ctx, req.(*DeleteOrganizationsLocationsSecurityProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfileGroupsServer_GetOrganizationsLocationsSecurityProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsLocationsSecurityProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).GetOrganizationsLocationsSecurityProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/GetOrganizationsLocationsSecurityProfileGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).GetOrganizationsLocationsSecurityProfileGroup(ctx, req.(*GetOrganizationsLocationsSecurityProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfileGroupsServer_ListOrganizationsLocationsSecurityProfileGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsLocationsSecurityProfileGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).ListOrganizationsLocationsSecurityProfileGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/ListOrganizationsLocationsSecurityProfileGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).ListOrganizationsLocationsSecurityProfileGroups(ctx, req.(*ListOrganizationsLocationsSecurityProfileGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfileGroupsServer_PatchOrganizationsLocationsSecurityProfileGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsLocationsSecurityProfileGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).PatchOrganizationsLocationsSecurityProfileGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer/PatchOrganizationsLocationsSecurityProfileGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfileGroupsServerServer).PatchOrganizationsLocationsSecurityProfileGroup(ctx, req.(*PatchOrganizationsLocationsSecurityProfileGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsLocationsSecurityProfileGroupsServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsLocationsSecurityProfileGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsLocationsSecurityProfileGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfileGroupsServer",
	HandlerType: (*OrganizationsLocationsSecurityProfileGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsLocationsSecurityProfileGroup",
			Handler:    _OrganizationsLocationsSecurityProfileGroupsServer_CreateOrganizationsLocationsSecurityProfileGroup_Handler,
		},
		{
			MethodName: "DeleteOrganizationsLocationsSecurityProfileGroup",
			Handler:    _OrganizationsLocationsSecurityProfileGroupsServer_DeleteOrganizationsLocationsSecurityProfileGroup_Handler,
		},
		{
			MethodName: "GetOrganizationsLocationsSecurityProfileGroup",
			Handler:    _OrganizationsLocationsSecurityProfileGroupsServer_GetOrganizationsLocationsSecurityProfileGroup_Handler,
		},
		{
			MethodName: "ListOrganizationsLocationsSecurityProfileGroups",
			Handler:    _OrganizationsLocationsSecurityProfileGroupsServer_ListOrganizationsLocationsSecurityProfileGroups_Handler,
		},
		{
			MethodName: "PatchOrganizationsLocationsSecurityProfileGroup",
			Handler:    _OrganizationsLocationsSecurityProfileGroupsServer_PatchOrganizationsLocationsSecurityProfileGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// OrganizationsLocationsSecurityProfilesServerClient is the client API for OrganizationsLocationsSecurityProfilesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationsLocationsSecurityProfilesServerClient interface {
	// Creates a new SecurityProfile in a given organization and location.
	CreateOrganizationsLocationsSecurityProfile(ctx context.Context, in *CreateOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single SecurityProfile.
	DeleteOrganizationsLocationsSecurityProfile(ctx context.Context, in *DeleteOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single SecurityProfile.
	GetOrganizationsLocationsSecurityProfile(ctx context.Context, in *GetOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error)
	// Lists SecurityProfiles in a given organization and location.
	ListOrganizationsLocationsSecurityProfiles(ctx context.Context, in *ListOrganizationsLocationsSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error)
	// Updates the parameters of a single SecurityProfile.
	PatchOrganizationsLocationsSecurityProfile(ctx context.Context, in *PatchOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type organizationsLocationsSecurityProfilesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationsLocationsSecurityProfilesServerClient(cc grpc.ClientConnInterface) OrganizationsLocationsSecurityProfilesServerClient {
	return &organizationsLocationsSecurityProfilesServerClient{cc}
}

func (c *organizationsLocationsSecurityProfilesServerClient) CreateOrganizationsLocationsSecurityProfile(ctx context.Context, in *CreateOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/CreateOrganizationsLocationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfilesServerClient) DeleteOrganizationsLocationsSecurityProfile(ctx context.Context, in *DeleteOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/DeleteOrganizationsLocationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfilesServerClient) GetOrganizationsLocationsSecurityProfile(ctx context.Context, in *GetOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*SecurityProfile, error) {
	out := new(SecurityProfile)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/GetOrganizationsLocationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfilesServerClient) ListOrganizationsLocationsSecurityProfiles(ctx context.Context, in *ListOrganizationsLocationsSecurityProfilesRequest, opts ...grpc.CallOption) (*ListSecurityProfilesResponse, error) {
	out := new(ListSecurityProfilesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/ListOrganizationsLocationsSecurityProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsLocationsSecurityProfilesServerClient) PatchOrganizationsLocationsSecurityProfile(ctx context.Context, in *PatchOrganizationsLocationsSecurityProfileRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/PatchOrganizationsLocationsSecurityProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsLocationsSecurityProfilesServerServer is the server API for OrganizationsLocationsSecurityProfilesServer service.
// All implementations must embed UnimplementedOrganizationsLocationsSecurityProfilesServerServer
// for forward compatibility
type OrganizationsLocationsSecurityProfilesServerServer interface {
	// Creates a new SecurityProfile in a given organization and location.
	CreateOrganizationsLocationsSecurityProfile(context.Context, *CreateOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error)
	// Deletes a single SecurityProfile.
	DeleteOrganizationsLocationsSecurityProfile(context.Context, *DeleteOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error)
	// Gets details of a single SecurityProfile.
	GetOrganizationsLocationsSecurityProfile(context.Context, *GetOrganizationsLocationsSecurityProfileRequest) (*SecurityProfile, error)
	// Lists SecurityProfiles in a given organization and location.
	ListOrganizationsLocationsSecurityProfiles(context.Context, *ListOrganizationsLocationsSecurityProfilesRequest) (*ListSecurityProfilesResponse, error)
	// Updates the parameters of a single SecurityProfile.
	PatchOrganizationsLocationsSecurityProfile(context.Context, *PatchOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedOrganizationsLocationsSecurityProfilesServerServer()
}

// UnimplementedOrganizationsLocationsSecurityProfilesServerServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationsLocationsSecurityProfilesServerServer struct {
}

func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) CreateOrganizationsLocationsSecurityProfile(context.Context, *CreateOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationsLocationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) DeleteOrganizationsLocationsSecurityProfile(context.Context, *DeleteOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationsLocationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) GetOrganizationsLocationsSecurityProfile(context.Context, *GetOrganizationsLocationsSecurityProfileRequest) (*SecurityProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsLocationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) ListOrganizationsLocationsSecurityProfiles(context.Context, *ListOrganizationsLocationsSecurityProfilesRequest) (*ListSecurityProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationsLocationsSecurityProfiles not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) PatchOrganizationsLocationsSecurityProfile(context.Context, *PatchOrganizationsLocationsSecurityProfileRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationsLocationsSecurityProfile not implemented")
}
func (UnimplementedOrganizationsLocationsSecurityProfilesServerServer) mustEmbedUnimplementedOrganizationsLocationsSecurityProfilesServerServer() {
}

// UnsafeOrganizationsLocationsSecurityProfilesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationsLocationsSecurityProfilesServerServer will
// result in compilation errors.
type UnsafeOrganizationsLocationsSecurityProfilesServerServer interface {
	mustEmbedUnimplementedOrganizationsLocationsSecurityProfilesServerServer()
}

func RegisterOrganizationsLocationsSecurityProfilesServerServer(s grpc.ServiceRegistrar, srv OrganizationsLocationsSecurityProfilesServerServer) {
	s.RegisterService(&OrganizationsLocationsSecurityProfilesServer_ServiceDesc, srv)
}

func _OrganizationsLocationsSecurityProfilesServer_CreateOrganizationsLocationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationsLocationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).CreateOrganizationsLocationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/CreateOrganizationsLocationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).CreateOrganizationsLocationsSecurityProfile(ctx, req.(*CreateOrganizationsLocationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfilesServer_DeleteOrganizationsLocationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationsLocationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).DeleteOrganizationsLocationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/DeleteOrganizationsLocationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).DeleteOrganizationsLocationsSecurityProfile(ctx, req.(*DeleteOrganizationsLocationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfilesServer_GetOrganizationsLocationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsLocationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).GetOrganizationsLocationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/GetOrganizationsLocationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).GetOrganizationsLocationsSecurityProfile(ctx, req.(*GetOrganizationsLocationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfilesServer_ListOrganizationsLocationsSecurityProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsLocationsSecurityProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).ListOrganizationsLocationsSecurityProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/ListOrganizationsLocationsSecurityProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).ListOrganizationsLocationsSecurityProfiles(ctx, req.(*ListOrganizationsLocationsSecurityProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsLocationsSecurityProfilesServer_PatchOrganizationsLocationsSecurityProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOrganizationsLocationsSecurityProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).PatchOrganizationsLocationsSecurityProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer/PatchOrganizationsLocationsSecurityProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsLocationsSecurityProfilesServerServer).PatchOrganizationsLocationsSecurityProfile(ctx, req.(*PatchOrganizationsLocationsSecurityProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationsLocationsSecurityProfilesServer_ServiceDesc is the grpc.ServiceDesc for OrganizationsLocationsSecurityProfilesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationsLocationsSecurityProfilesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.OrganizationsLocationsSecurityProfilesServer",
	HandlerType: (*OrganizationsLocationsSecurityProfilesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizationsLocationsSecurityProfile",
			Handler:    _OrganizationsLocationsSecurityProfilesServer_CreateOrganizationsLocationsSecurityProfile_Handler,
		},
		{
			MethodName: "DeleteOrganizationsLocationsSecurityProfile",
			Handler:    _OrganizationsLocationsSecurityProfilesServer_DeleteOrganizationsLocationsSecurityProfile_Handler,
		},
		{
			MethodName: "GetOrganizationsLocationsSecurityProfile",
			Handler:    _OrganizationsLocationsSecurityProfilesServer_GetOrganizationsLocationsSecurityProfile_Handler,
		},
		{
			MethodName: "ListOrganizationsLocationsSecurityProfiles",
			Handler:    _OrganizationsLocationsSecurityProfilesServer_ListOrganizationsLocationsSecurityProfiles_Handler,
		},
		{
			MethodName: "PatchOrganizationsLocationsSecurityProfile",
			Handler:    _OrganizationsLocationsSecurityProfilesServer_PatchOrganizationsLocationsSecurityProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsServerClient is the client API for ProjectsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsServerClient interface {
}

type projectsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsServerClient(cc grpc.ClientConnInterface) ProjectsServerClient {
	return &projectsServerClient{cc}
}

// ProjectsServerServer is the server API for ProjectsServer service.
// All implementations must embed UnimplementedProjectsServerServer
// for forward compatibility
type ProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

// UnimplementedProjectsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServerServer struct {
}

func (UnimplementedProjectsServerServer) mustEmbedUnimplementedProjectsServerServer() {}

// UnsafeProjectsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServerServer will
// result in compilation errors.
type UnsafeProjectsServerServer interface {
	mustEmbedUnimplementedProjectsServerServer()
}

func RegisterProjectsServerServer(s grpc.ServiceRegistrar, srv ProjectsServerServer) {
	s.RegisterService(&ProjectsServer_ServiceDesc, srv)
}

// ProjectsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsServer",
	HandlerType: (*ProjectsServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsServerClient is the client API for ProjectsLocationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServerClient interface {
	// Gets information about a location.
	GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type projectsLocationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServerClient {
	return &projectsLocationsServerClient{cc}
}

func (c *projectsLocationsServerClient) GetProjectsLocation(ctx context.Context, in *GetProjectsLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServer/GetProjectsLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerClient) ListProjectsLocations(ctx context.Context, in *ListProjectsLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServer/ListProjectsLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServerServer is the server API for ProjectsLocationsServer service.
// All implementations must embed UnimplementedProjectsLocationsServerServer
// for forward compatibility
type ProjectsLocationsServerServer interface {
	// Gets information about a location.
	GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error)
	// Lists information about the supported locations for this service.
	ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error)
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

// UnimplementedProjectsLocationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServerServer struct {
}

func (UnimplementedProjectsLocationsServerServer) GetProjectsLocation(context.Context, *GetProjectsLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocation not implemented")
}
func (UnimplementedProjectsLocationsServerServer) ListProjectsLocations(context.Context, *ListProjectsLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocations not implemented")
}
func (UnimplementedProjectsLocationsServerServer) mustEmbedUnimplementedProjectsLocationsServerServer() {
}

// UnsafeProjectsLocationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerServer()
}

func RegisterProjectsLocationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServerServer) {
	s.RegisterService(&ProjectsLocationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsServer_GetProjectsLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServer/GetProjectsLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).GetProjectsLocation(ctx, req.(*GetProjectsLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServer_ListProjectsLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServer/ListProjectsLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerServer).ListProjectsLocations(ctx, req.(*ListProjectsLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsServer",
	HandlerType: (*ProjectsLocationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectsLocation",
			Handler:    _ProjectsLocationsServer_GetProjectsLocation_Handler,
		},
		{
			MethodName: "ListProjectsLocations",
			Handler:    _ProjectsLocationsServer_ListProjectsLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsAddressGroupsServerClient is the client API for ProjectsLocationsAddressGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsAddressGroupsServerClient interface {
	// Adds items to an address group.
	AddItemsProjectsLocationsAddressGroup(ctx context.Context, in *AddItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Clones items from one address group to another.
	CloneItemsProjectsLocationsAddressGroup(ctx context.Context, in *CloneItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Creates a new address group in a given project and location.
	CreateProjectsLocationsAddressGroup(ctx context.Context, in *CreateProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single address group.
	DeleteProjectsLocationsAddressGroup(ctx context.Context, in *DeleteProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single address group.
	GetProjectsLocationsAddressGroup(ctx context.Context, in *GetProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*AddressGroup, error)
	// Lists address groups in a given project and location.
	ListProjectsLocationsAddressGroups(ctx context.Context, in *ListProjectsLocationsAddressGroupsRequest, opts ...grpc.CallOption) (*ListAddressGroupsResponse, error)
	// Lists references of an address group.
	ListReferencesProjectsLocationsAddressGroup(ctx context.Context, in *ListReferencesProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*ListAddressGroupReferencesResponse, error)
	// Updates the parameters of a single address group.
	PatchProjectsLocationsAddressGroup(ctx context.Context, in *PatchProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Removes items from an address group.
	RemoveItemsProjectsLocationsAddressGroup(ctx context.Context, in *RemoveItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsAddressGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsAddressGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsAddressGroupsServerClient {
	return &projectsLocationsAddressGroupsServerClient{cc}
}

func (c *projectsLocationsAddressGroupsServerClient) AddItemsProjectsLocationsAddressGroup(ctx context.Context, in *AddItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/AddItemsProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) CloneItemsProjectsLocationsAddressGroup(ctx context.Context, in *CloneItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/CloneItemsProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) CreateProjectsLocationsAddressGroup(ctx context.Context, in *CreateProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/CreateProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) DeleteProjectsLocationsAddressGroup(ctx context.Context, in *DeleteProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/DeleteProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) GetProjectsLocationsAddressGroup(ctx context.Context, in *GetProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*AddressGroup, error) {
	out := new(AddressGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/GetProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) ListProjectsLocationsAddressGroups(ctx context.Context, in *ListProjectsLocationsAddressGroupsRequest, opts ...grpc.CallOption) (*ListAddressGroupsResponse, error) {
	out := new(ListAddressGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/ListProjectsLocationsAddressGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) ListReferencesProjectsLocationsAddressGroup(ctx context.Context, in *ListReferencesProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*ListAddressGroupReferencesResponse, error) {
	out := new(ListAddressGroupReferencesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/ListReferencesProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) PatchProjectsLocationsAddressGroup(ctx context.Context, in *PatchProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/PatchProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAddressGroupsServerClient) RemoveItemsProjectsLocationsAddressGroup(ctx context.Context, in *RemoveItemsProjectsLocationsAddressGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/RemoveItemsProjectsLocationsAddressGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsAddressGroupsServerServer is the server API for ProjectsLocationsAddressGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsAddressGroupsServerServer
// for forward compatibility
type ProjectsLocationsAddressGroupsServerServer interface {
	// Adds items to an address group.
	AddItemsProjectsLocationsAddressGroup(context.Context, *AddItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Clones items from one address group to another.
	CloneItemsProjectsLocationsAddressGroup(context.Context, *CloneItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Creates a new address group in a given project and location.
	CreateProjectsLocationsAddressGroup(context.Context, *CreateProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a single address group.
	DeleteProjectsLocationsAddressGroup(context.Context, *DeleteProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Gets details of a single address group.
	GetProjectsLocationsAddressGroup(context.Context, *GetProjectsLocationsAddressGroupRequest) (*AddressGroup, error)
	// Lists address groups in a given project and location.
	ListProjectsLocationsAddressGroups(context.Context, *ListProjectsLocationsAddressGroupsRequest) (*ListAddressGroupsResponse, error)
	// Lists references of an address group.
	ListReferencesProjectsLocationsAddressGroup(context.Context, *ListReferencesProjectsLocationsAddressGroupRequest) (*ListAddressGroupReferencesResponse, error)
	// Updates the parameters of a single address group.
	PatchProjectsLocationsAddressGroup(context.Context, *PatchProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	// Removes items from an address group.
	RemoveItemsProjectsLocationsAddressGroup(context.Context, *RemoveItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsAddressGroupsServerServer()
}

// UnimplementedProjectsLocationsAddressGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsAddressGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsAddressGroupsServerServer) AddItemsProjectsLocationsAddressGroup(context.Context, *AddItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemsProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) CloneItemsProjectsLocationsAddressGroup(context.Context, *CloneItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneItemsProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) CreateProjectsLocationsAddressGroup(context.Context, *CreateProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) DeleteProjectsLocationsAddressGroup(context.Context, *DeleteProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) GetProjectsLocationsAddressGroup(context.Context, *GetProjectsLocationsAddressGroupRequest) (*AddressGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) ListProjectsLocationsAddressGroups(context.Context, *ListProjectsLocationsAddressGroupsRequest) (*ListAddressGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsAddressGroups not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) ListReferencesProjectsLocationsAddressGroup(context.Context, *ListReferencesProjectsLocationsAddressGroupRequest) (*ListAddressGroupReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferencesProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) PatchProjectsLocationsAddressGroup(context.Context, *PatchProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) RemoveItemsProjectsLocationsAddressGroup(context.Context, *RemoveItemsProjectsLocationsAddressGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItemsProjectsLocationsAddressGroup not implemented")
}
func (UnimplementedProjectsLocationsAddressGroupsServerServer) mustEmbedUnimplementedProjectsLocationsAddressGroupsServerServer() {
}

// UnsafeProjectsLocationsAddressGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsAddressGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsAddressGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsAddressGroupsServerServer()
}

func RegisterProjectsLocationsAddressGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsAddressGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsAddressGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsAddressGroupsServer_AddItemsProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).AddItemsProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/AddItemsProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).AddItemsProjectsLocationsAddressGroup(ctx, req.(*AddItemsProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_CloneItemsProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneItemsProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).CloneItemsProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/CloneItemsProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).CloneItemsProjectsLocationsAddressGroup(ctx, req.(*CloneItemsProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_CreateProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).CreateProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/CreateProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).CreateProjectsLocationsAddressGroup(ctx, req.(*CreateProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_DeleteProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).DeleteProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/DeleteProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).DeleteProjectsLocationsAddressGroup(ctx, req.(*DeleteProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_GetProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).GetProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/GetProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).GetProjectsLocationsAddressGroup(ctx, req.(*GetProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_ListProjectsLocationsAddressGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsAddressGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).ListProjectsLocationsAddressGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/ListProjectsLocationsAddressGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).ListProjectsLocationsAddressGroups(ctx, req.(*ListProjectsLocationsAddressGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_ListReferencesProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReferencesProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).ListReferencesProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/ListReferencesProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).ListReferencesProjectsLocationsAddressGroup(ctx, req.(*ListReferencesProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_PatchProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).PatchProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/PatchProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).PatchProjectsLocationsAddressGroup(ctx, req.(*PatchProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAddressGroupsServer_RemoveItemsProjectsLocationsAddressGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemsProjectsLocationsAddressGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAddressGroupsServerServer).RemoveItemsProjectsLocationsAddressGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer/RemoveItemsProjectsLocationsAddressGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAddressGroupsServerServer).RemoveItemsProjectsLocationsAddressGroup(ctx, req.(*RemoveItemsProjectsLocationsAddressGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsAddressGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsAddressGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsAddressGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsAddressGroupsServer",
	HandlerType: (*ProjectsLocationsAddressGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItemsProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_AddItemsProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "CloneItemsProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_CloneItemsProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "CreateProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_CreateProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_DeleteProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "GetProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_GetProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsAddressGroups",
			Handler:    _ProjectsLocationsAddressGroupsServer_ListProjectsLocationsAddressGroups_Handler,
		},
		{
			MethodName: "ListReferencesProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_ListReferencesProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_PatchProjectsLocationsAddressGroup_Handler,
		},
		{
			MethodName: "RemoveItemsProjectsLocationsAddressGroup",
			Handler:    _ProjectsLocationsAddressGroupsServer_RemoveItemsProjectsLocationsAddressGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsAuthorizationPoliciesServerClient is the client API for ProjectsLocationsAuthorizationPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsAuthorizationPoliciesServerClient interface {
	// Creates a new AuthorizationPolicy in a given project and location.
	CreateProjectsLocationsAuthorizationPolicy(ctx context.Context, in *CreateProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single AuthorizationPolicy.
	DeleteProjectsLocationsAuthorizationPolicy(ctx context.Context, in *DeleteProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single AuthorizationPolicy.
	GetProjectsLocationsAuthorizationPolicy(ctx context.Context, in *GetProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*AuthorizationPolicy, error)
	// Lists AuthorizationPolicies in a given project and location.
	ListProjectsLocationsAuthorizationPolicies(ctx context.Context, in *ListProjectsLocationsAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListAuthorizationPoliciesResponse, error)
	// Updates the parameters of a single AuthorizationPolicy.
	PatchProjectsLocationsAuthorizationPolicy(ctx context.Context, in *PatchProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsAuthorizationPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsAuthorizationPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsAuthorizationPoliciesServerClient {
	return &projectsLocationsAuthorizationPoliciesServerClient{cc}
}

func (c *projectsLocationsAuthorizationPoliciesServerClient) CreateProjectsLocationsAuthorizationPolicy(ctx context.Context, in *CreateProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/CreateProjectsLocationsAuthorizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthorizationPoliciesServerClient) DeleteProjectsLocationsAuthorizationPolicy(ctx context.Context, in *DeleteProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/DeleteProjectsLocationsAuthorizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthorizationPoliciesServerClient) GetProjectsLocationsAuthorizationPolicy(ctx context.Context, in *GetProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*AuthorizationPolicy, error) {
	out := new(AuthorizationPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/GetProjectsLocationsAuthorizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthorizationPoliciesServerClient) ListProjectsLocationsAuthorizationPolicies(ctx context.Context, in *ListProjectsLocationsAuthorizationPoliciesRequest, opts ...grpc.CallOption) (*ListAuthorizationPoliciesResponse, error) {
	out := new(ListAuthorizationPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/ListProjectsLocationsAuthorizationPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthorizationPoliciesServerClient) PatchProjectsLocationsAuthorizationPolicy(ctx context.Context, in *PatchProjectsLocationsAuthorizationPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/PatchProjectsLocationsAuthorizationPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsAuthorizationPoliciesServerServer is the server API for ProjectsLocationsAuthorizationPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsAuthorizationPoliciesServerServer
// for forward compatibility
type ProjectsLocationsAuthorizationPoliciesServerServer interface {
	// Creates a new AuthorizationPolicy in a given project and location.
	CreateProjectsLocationsAuthorizationPolicy(context.Context, *CreateProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single AuthorizationPolicy.
	DeleteProjectsLocationsAuthorizationPolicy(context.Context, *DeleteProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single AuthorizationPolicy.
	GetProjectsLocationsAuthorizationPolicy(context.Context, *GetProjectsLocationsAuthorizationPolicyRequest) (*AuthorizationPolicy, error)
	// Lists AuthorizationPolicies in a given project and location.
	ListProjectsLocationsAuthorizationPolicies(context.Context, *ListProjectsLocationsAuthorizationPoliciesRequest) (*ListAuthorizationPoliciesResponse, error)
	// Updates the parameters of a single AuthorizationPolicy.
	PatchProjectsLocationsAuthorizationPolicy(context.Context, *PatchProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsAuthorizationPoliciesServerServer()
}

// UnimplementedProjectsLocationsAuthorizationPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsAuthorizationPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) CreateProjectsLocationsAuthorizationPolicy(context.Context, *CreateProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsAuthorizationPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) DeleteProjectsLocationsAuthorizationPolicy(context.Context, *DeleteProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsAuthorizationPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) GetProjectsLocationsAuthorizationPolicy(context.Context, *GetProjectsLocationsAuthorizationPolicyRequest) (*AuthorizationPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsAuthorizationPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) ListProjectsLocationsAuthorizationPolicies(context.Context, *ListProjectsLocationsAuthorizationPoliciesRequest) (*ListAuthorizationPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsAuthorizationPolicies not implemented")
}
func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) PatchProjectsLocationsAuthorizationPolicy(context.Context, *PatchProjectsLocationsAuthorizationPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsAuthorizationPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthorizationPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsAuthorizationPoliciesServerServer() {
}

// UnsafeProjectsLocationsAuthorizationPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsAuthorizationPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsAuthorizationPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsAuthorizationPoliciesServerServer()
}

func RegisterProjectsLocationsAuthorizationPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsAuthorizationPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsAuthorizationPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsAuthorizationPoliciesServer_CreateProjectsLocationsAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).CreateProjectsLocationsAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/CreateProjectsLocationsAuthorizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).CreateProjectsLocationsAuthorizationPolicy(ctx, req.(*CreateProjectsLocationsAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthorizationPoliciesServer_DeleteProjectsLocationsAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).DeleteProjectsLocationsAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/DeleteProjectsLocationsAuthorizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).DeleteProjectsLocationsAuthorizationPolicy(ctx, req.(*DeleteProjectsLocationsAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthorizationPoliciesServer_GetProjectsLocationsAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).GetProjectsLocationsAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/GetProjectsLocationsAuthorizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).GetProjectsLocationsAuthorizationPolicy(ctx, req.(*GetProjectsLocationsAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthorizationPoliciesServer_ListProjectsLocationsAuthorizationPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsAuthorizationPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).ListProjectsLocationsAuthorizationPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/ListProjectsLocationsAuthorizationPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).ListProjectsLocationsAuthorizationPolicies(ctx, req.(*ListProjectsLocationsAuthorizationPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthorizationPoliciesServer_PatchProjectsLocationsAuthorizationPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsAuthorizationPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).PatchProjectsLocationsAuthorizationPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer/PatchProjectsLocationsAuthorizationPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthorizationPoliciesServerServer).PatchProjectsLocationsAuthorizationPolicy(ctx, req.(*PatchProjectsLocationsAuthorizationPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsAuthorizationPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsAuthorizationPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsAuthorizationPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsAuthorizationPoliciesServer",
	HandlerType: (*ProjectsLocationsAuthorizationPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsAuthorizationPolicy",
			Handler:    _ProjectsLocationsAuthorizationPoliciesServer_CreateProjectsLocationsAuthorizationPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsAuthorizationPolicy",
			Handler:    _ProjectsLocationsAuthorizationPoliciesServer_DeleteProjectsLocationsAuthorizationPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsAuthorizationPolicy",
			Handler:    _ProjectsLocationsAuthorizationPoliciesServer_GetProjectsLocationsAuthorizationPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsAuthorizationPolicies",
			Handler:    _ProjectsLocationsAuthorizationPoliciesServer_ListProjectsLocationsAuthorizationPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsAuthorizationPolicy",
			Handler:    _ProjectsLocationsAuthorizationPoliciesServer_PatchProjectsLocationsAuthorizationPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsAuthzPoliciesServerClient is the client API for ProjectsLocationsAuthzPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsAuthzPoliciesServerClient interface {
	// Creates a new AuthzPolicy in a given project and location.
	CreateProjectsLocationsAuthzPolicy(ctx context.Context, in *CreateProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single AuthzPolicy.
	DeleteProjectsLocationsAuthzPolicy(ctx context.Context, in *DeleteProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single AuthzPolicy.
	GetProjectsLocationsAuthzPolicy(ctx context.Context, in *GetProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*AuthzPolicy, error)
	// Lists AuthzPolicies in a given project and location.
	ListProjectsLocationsAuthzPolicies(ctx context.Context, in *ListProjectsLocationsAuthzPoliciesRequest, opts ...grpc.CallOption) (*ListAuthzPoliciesResponse, error)
	// Updates the parameters of a single AuthzPolicy.
	PatchProjectsLocationsAuthzPolicy(ctx context.Context, in *PatchProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsAuthzPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsAuthzPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsAuthzPoliciesServerClient {
	return &projectsLocationsAuthzPoliciesServerClient{cc}
}

func (c *projectsLocationsAuthzPoliciesServerClient) CreateProjectsLocationsAuthzPolicy(ctx context.Context, in *CreateProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/CreateProjectsLocationsAuthzPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthzPoliciesServerClient) DeleteProjectsLocationsAuthzPolicy(ctx context.Context, in *DeleteProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/DeleteProjectsLocationsAuthzPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthzPoliciesServerClient) GetProjectsLocationsAuthzPolicy(ctx context.Context, in *GetProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*AuthzPolicy, error) {
	out := new(AuthzPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/GetProjectsLocationsAuthzPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthzPoliciesServerClient) ListProjectsLocationsAuthzPolicies(ctx context.Context, in *ListProjectsLocationsAuthzPoliciesRequest, opts ...grpc.CallOption) (*ListAuthzPoliciesResponse, error) {
	out := new(ListAuthzPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/ListProjectsLocationsAuthzPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsAuthzPoliciesServerClient) PatchProjectsLocationsAuthzPolicy(ctx context.Context, in *PatchProjectsLocationsAuthzPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/PatchProjectsLocationsAuthzPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsAuthzPoliciesServerServer is the server API for ProjectsLocationsAuthzPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsAuthzPoliciesServerServer
// for forward compatibility
type ProjectsLocationsAuthzPoliciesServerServer interface {
	// Creates a new AuthzPolicy in a given project and location.
	CreateProjectsLocationsAuthzPolicy(context.Context, *CreateProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single AuthzPolicy.
	DeleteProjectsLocationsAuthzPolicy(context.Context, *DeleteProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single AuthzPolicy.
	GetProjectsLocationsAuthzPolicy(context.Context, *GetProjectsLocationsAuthzPolicyRequest) (*AuthzPolicy, error)
	// Lists AuthzPolicies in a given project and location.
	ListProjectsLocationsAuthzPolicies(context.Context, *ListProjectsLocationsAuthzPoliciesRequest) (*ListAuthzPoliciesResponse, error)
	// Updates the parameters of a single AuthzPolicy.
	PatchProjectsLocationsAuthzPolicy(context.Context, *PatchProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsAuthzPoliciesServerServer()
}

// UnimplementedProjectsLocationsAuthzPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsAuthzPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) CreateProjectsLocationsAuthzPolicy(context.Context, *CreateProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsAuthzPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) DeleteProjectsLocationsAuthzPolicy(context.Context, *DeleteProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsAuthzPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) GetProjectsLocationsAuthzPolicy(context.Context, *GetProjectsLocationsAuthzPolicyRequest) (*AuthzPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsAuthzPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) ListProjectsLocationsAuthzPolicies(context.Context, *ListProjectsLocationsAuthzPoliciesRequest) (*ListAuthzPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsAuthzPolicies not implemented")
}
func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) PatchProjectsLocationsAuthzPolicy(context.Context, *PatchProjectsLocationsAuthzPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsAuthzPolicy not implemented")
}
func (UnimplementedProjectsLocationsAuthzPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsAuthzPoliciesServerServer() {
}

// UnsafeProjectsLocationsAuthzPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsAuthzPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsAuthzPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsAuthzPoliciesServerServer()
}

func RegisterProjectsLocationsAuthzPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsAuthzPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsAuthzPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsAuthzPoliciesServer_CreateProjectsLocationsAuthzPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsAuthzPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).CreateProjectsLocationsAuthzPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/CreateProjectsLocationsAuthzPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).CreateProjectsLocationsAuthzPolicy(ctx, req.(*CreateProjectsLocationsAuthzPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthzPoliciesServer_DeleteProjectsLocationsAuthzPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsAuthzPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).DeleteProjectsLocationsAuthzPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/DeleteProjectsLocationsAuthzPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).DeleteProjectsLocationsAuthzPolicy(ctx, req.(*DeleteProjectsLocationsAuthzPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthzPoliciesServer_GetProjectsLocationsAuthzPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsAuthzPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).GetProjectsLocationsAuthzPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/GetProjectsLocationsAuthzPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).GetProjectsLocationsAuthzPolicy(ctx, req.(*GetProjectsLocationsAuthzPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthzPoliciesServer_ListProjectsLocationsAuthzPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsAuthzPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).ListProjectsLocationsAuthzPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/ListProjectsLocationsAuthzPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).ListProjectsLocationsAuthzPolicies(ctx, req.(*ListProjectsLocationsAuthzPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsAuthzPoliciesServer_PatchProjectsLocationsAuthzPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsAuthzPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).PatchProjectsLocationsAuthzPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer/PatchProjectsLocationsAuthzPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsAuthzPoliciesServerServer).PatchProjectsLocationsAuthzPolicy(ctx, req.(*PatchProjectsLocationsAuthzPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsAuthzPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsAuthzPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsAuthzPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsAuthzPoliciesServer",
	HandlerType: (*ProjectsLocationsAuthzPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsAuthzPolicy",
			Handler:    _ProjectsLocationsAuthzPoliciesServer_CreateProjectsLocationsAuthzPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsAuthzPolicy",
			Handler:    _ProjectsLocationsAuthzPoliciesServer_DeleteProjectsLocationsAuthzPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsAuthzPolicy",
			Handler:    _ProjectsLocationsAuthzPoliciesServer_GetProjectsLocationsAuthzPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsAuthzPolicies",
			Handler:    _ProjectsLocationsAuthzPoliciesServer_ListProjectsLocationsAuthzPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsAuthzPolicy",
			Handler:    _ProjectsLocationsAuthzPoliciesServer_PatchProjectsLocationsAuthzPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsClientTlsPoliciesServerClient is the client API for ProjectsLocationsClientTlsPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsClientTlsPoliciesServerClient interface {
	// Creates a new ClientTlsPolicy in a given project and location.
	CreateProjectsLocationsClientTlsPolicy(ctx context.Context, in *CreateProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ClientTlsPolicy.
	DeleteProjectsLocationsClientTlsPolicy(ctx context.Context, in *DeleteProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ClientTlsPolicy.
	GetProjectsLocationsClientTlsPolicy(ctx context.Context, in *GetProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*ClientTlsPolicy, error)
	// Lists ClientTlsPolicies in a given project and location.
	ListProjectsLocationsClientTlsPolicies(ctx context.Context, in *ListProjectsLocationsClientTlsPoliciesRequest, opts ...grpc.CallOption) (*ListClientTlsPoliciesResponse, error)
	// Updates the parameters of a single ClientTlsPolicy.
	PatchProjectsLocationsClientTlsPolicy(ctx context.Context, in *PatchProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsClientTlsPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsClientTlsPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsClientTlsPoliciesServerClient {
	return &projectsLocationsClientTlsPoliciesServerClient{cc}
}

func (c *projectsLocationsClientTlsPoliciesServerClient) CreateProjectsLocationsClientTlsPolicy(ctx context.Context, in *CreateProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/CreateProjectsLocationsClientTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsClientTlsPoliciesServerClient) DeleteProjectsLocationsClientTlsPolicy(ctx context.Context, in *DeleteProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/DeleteProjectsLocationsClientTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsClientTlsPoliciesServerClient) GetProjectsLocationsClientTlsPolicy(ctx context.Context, in *GetProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*ClientTlsPolicy, error) {
	out := new(ClientTlsPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/GetProjectsLocationsClientTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsClientTlsPoliciesServerClient) ListProjectsLocationsClientTlsPolicies(ctx context.Context, in *ListProjectsLocationsClientTlsPoliciesRequest, opts ...grpc.CallOption) (*ListClientTlsPoliciesResponse, error) {
	out := new(ListClientTlsPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/ListProjectsLocationsClientTlsPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsClientTlsPoliciesServerClient) PatchProjectsLocationsClientTlsPolicy(ctx context.Context, in *PatchProjectsLocationsClientTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/PatchProjectsLocationsClientTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsClientTlsPoliciesServerServer is the server API for ProjectsLocationsClientTlsPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsClientTlsPoliciesServerServer
// for forward compatibility
type ProjectsLocationsClientTlsPoliciesServerServer interface {
	// Creates a new ClientTlsPolicy in a given project and location.
	CreateProjectsLocationsClientTlsPolicy(context.Context, *CreateProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single ClientTlsPolicy.
	DeleteProjectsLocationsClientTlsPolicy(context.Context, *DeleteProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ClientTlsPolicy.
	GetProjectsLocationsClientTlsPolicy(context.Context, *GetProjectsLocationsClientTlsPolicyRequest) (*ClientTlsPolicy, error)
	// Lists ClientTlsPolicies in a given project and location.
	ListProjectsLocationsClientTlsPolicies(context.Context, *ListProjectsLocationsClientTlsPoliciesRequest) (*ListClientTlsPoliciesResponse, error)
	// Updates the parameters of a single ClientTlsPolicy.
	PatchProjectsLocationsClientTlsPolicy(context.Context, *PatchProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsClientTlsPoliciesServerServer()
}

// UnimplementedProjectsLocationsClientTlsPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsClientTlsPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) CreateProjectsLocationsClientTlsPolicy(context.Context, *CreateProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsClientTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) DeleteProjectsLocationsClientTlsPolicy(context.Context, *DeleteProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsClientTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) GetProjectsLocationsClientTlsPolicy(context.Context, *GetProjectsLocationsClientTlsPolicyRequest) (*ClientTlsPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsClientTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) ListProjectsLocationsClientTlsPolicies(context.Context, *ListProjectsLocationsClientTlsPoliciesRequest) (*ListClientTlsPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsClientTlsPolicies not implemented")
}
func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) PatchProjectsLocationsClientTlsPolicy(context.Context, *PatchProjectsLocationsClientTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsClientTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsClientTlsPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsClientTlsPoliciesServerServer() {
}

// UnsafeProjectsLocationsClientTlsPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsClientTlsPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsClientTlsPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsClientTlsPoliciesServerServer()
}

func RegisterProjectsLocationsClientTlsPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsClientTlsPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsClientTlsPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsClientTlsPoliciesServer_CreateProjectsLocationsClientTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsClientTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).CreateProjectsLocationsClientTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/CreateProjectsLocationsClientTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).CreateProjectsLocationsClientTlsPolicy(ctx, req.(*CreateProjectsLocationsClientTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsClientTlsPoliciesServer_DeleteProjectsLocationsClientTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsClientTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).DeleteProjectsLocationsClientTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/DeleteProjectsLocationsClientTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).DeleteProjectsLocationsClientTlsPolicy(ctx, req.(*DeleteProjectsLocationsClientTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsClientTlsPoliciesServer_GetProjectsLocationsClientTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsClientTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).GetProjectsLocationsClientTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/GetProjectsLocationsClientTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).GetProjectsLocationsClientTlsPolicy(ctx, req.(*GetProjectsLocationsClientTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsClientTlsPoliciesServer_ListProjectsLocationsClientTlsPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsClientTlsPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).ListProjectsLocationsClientTlsPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/ListProjectsLocationsClientTlsPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).ListProjectsLocationsClientTlsPolicies(ctx, req.(*ListProjectsLocationsClientTlsPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsClientTlsPoliciesServer_PatchProjectsLocationsClientTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsClientTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).PatchProjectsLocationsClientTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer/PatchProjectsLocationsClientTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsClientTlsPoliciesServerServer).PatchProjectsLocationsClientTlsPolicy(ctx, req.(*PatchProjectsLocationsClientTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsClientTlsPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsClientTlsPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsClientTlsPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsClientTlsPoliciesServer",
	HandlerType: (*ProjectsLocationsClientTlsPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsClientTlsPolicy",
			Handler:    _ProjectsLocationsClientTlsPoliciesServer_CreateProjectsLocationsClientTlsPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsClientTlsPolicy",
			Handler:    _ProjectsLocationsClientTlsPoliciesServer_DeleteProjectsLocationsClientTlsPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsClientTlsPolicy",
			Handler:    _ProjectsLocationsClientTlsPoliciesServer_GetProjectsLocationsClientTlsPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsClientTlsPolicies",
			Handler:    _ProjectsLocationsClientTlsPoliciesServer_ListProjectsLocationsClientTlsPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsClientTlsPolicy",
			Handler:    _ProjectsLocationsClientTlsPoliciesServer_PatchProjectsLocationsClientTlsPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsFirewallEndpointAssociationsServerClient is the client API for ProjectsLocationsFirewallEndpointAssociationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsFirewallEndpointAssociationsServerClient interface {
	// Creates a new FirewallEndpointAssociation in a given project and location.
	CreateProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *CreateProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single FirewallEndpointAssociation.
	DeleteProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *DeleteProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single FirewallEndpointAssociation.
	GetProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *GetProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*FirewallEndpointAssociation, error)
	// Lists Associations in a given project and location.
	ListProjectsLocationsFirewallEndpointAssociations(ctx context.Context, in *ListProjectsLocationsFirewallEndpointAssociationsRequest, opts ...grpc.CallOption) (*ListFirewallEndpointAssociationsResponse, error)
	// Update a single FirewallEndpointAssociation.
	PatchProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *PatchProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsFirewallEndpointAssociationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsFirewallEndpointAssociationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsFirewallEndpointAssociationsServerClient {
	return &projectsLocationsFirewallEndpointAssociationsServerClient{cc}
}

func (c *projectsLocationsFirewallEndpointAssociationsServerClient) CreateProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *CreateProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/CreateProjectsLocationsFirewallEndpointAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsFirewallEndpointAssociationsServerClient) DeleteProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *DeleteProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/DeleteProjectsLocationsFirewallEndpointAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsFirewallEndpointAssociationsServerClient) GetProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *GetProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*FirewallEndpointAssociation, error) {
	out := new(FirewallEndpointAssociation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/GetProjectsLocationsFirewallEndpointAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsFirewallEndpointAssociationsServerClient) ListProjectsLocationsFirewallEndpointAssociations(ctx context.Context, in *ListProjectsLocationsFirewallEndpointAssociationsRequest, opts ...grpc.CallOption) (*ListFirewallEndpointAssociationsResponse, error) {
	out := new(ListFirewallEndpointAssociationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/ListProjectsLocationsFirewallEndpointAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsFirewallEndpointAssociationsServerClient) PatchProjectsLocationsFirewallEndpointAssociation(ctx context.Context, in *PatchProjectsLocationsFirewallEndpointAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/PatchProjectsLocationsFirewallEndpointAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsFirewallEndpointAssociationsServerServer is the server API for ProjectsLocationsFirewallEndpointAssociationsServer service.
// All implementations must embed UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer
// for forward compatibility
type ProjectsLocationsFirewallEndpointAssociationsServerServer interface {
	// Creates a new FirewallEndpointAssociation in a given project and location.
	CreateProjectsLocationsFirewallEndpointAssociation(context.Context, *CreateProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error)
	// Deletes a single FirewallEndpointAssociation.
	DeleteProjectsLocationsFirewallEndpointAssociation(context.Context, *DeleteProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error)
	// Gets details of a single FirewallEndpointAssociation.
	GetProjectsLocationsFirewallEndpointAssociation(context.Context, *GetProjectsLocationsFirewallEndpointAssociationRequest) (*FirewallEndpointAssociation, error)
	// Lists Associations in a given project and location.
	ListProjectsLocationsFirewallEndpointAssociations(context.Context, *ListProjectsLocationsFirewallEndpointAssociationsRequest) (*ListFirewallEndpointAssociationsResponse, error)
	// Update a single FirewallEndpointAssociation.
	PatchProjectsLocationsFirewallEndpointAssociation(context.Context, *PatchProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer()
}

// UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer struct {
}

func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) CreateProjectsLocationsFirewallEndpointAssociation(context.Context, *CreateProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsFirewallEndpointAssociation not implemented")
}
func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) DeleteProjectsLocationsFirewallEndpointAssociation(context.Context, *DeleteProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsFirewallEndpointAssociation not implemented")
}
func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) GetProjectsLocationsFirewallEndpointAssociation(context.Context, *GetProjectsLocationsFirewallEndpointAssociationRequest) (*FirewallEndpointAssociation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsFirewallEndpointAssociation not implemented")
}
func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) ListProjectsLocationsFirewallEndpointAssociations(context.Context, *ListProjectsLocationsFirewallEndpointAssociationsRequest) (*ListFirewallEndpointAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsFirewallEndpointAssociations not implemented")
}
func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) PatchProjectsLocationsFirewallEndpointAssociation(context.Context, *PatchProjectsLocationsFirewallEndpointAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsFirewallEndpointAssociation not implemented")
}
func (UnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer) mustEmbedUnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer() {
}

// UnsafeProjectsLocationsFirewallEndpointAssociationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsFirewallEndpointAssociationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsFirewallEndpointAssociationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsFirewallEndpointAssociationsServerServer()
}

func RegisterProjectsLocationsFirewallEndpointAssociationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsFirewallEndpointAssociationsServerServer) {
	s.RegisterService(&ProjectsLocationsFirewallEndpointAssociationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsFirewallEndpointAssociationsServer_CreateProjectsLocationsFirewallEndpointAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsFirewallEndpointAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).CreateProjectsLocationsFirewallEndpointAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/CreateProjectsLocationsFirewallEndpointAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).CreateProjectsLocationsFirewallEndpointAssociation(ctx, req.(*CreateProjectsLocationsFirewallEndpointAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsFirewallEndpointAssociationsServer_DeleteProjectsLocationsFirewallEndpointAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsFirewallEndpointAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).DeleteProjectsLocationsFirewallEndpointAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/DeleteProjectsLocationsFirewallEndpointAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).DeleteProjectsLocationsFirewallEndpointAssociation(ctx, req.(*DeleteProjectsLocationsFirewallEndpointAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsFirewallEndpointAssociationsServer_GetProjectsLocationsFirewallEndpointAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsFirewallEndpointAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).GetProjectsLocationsFirewallEndpointAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/GetProjectsLocationsFirewallEndpointAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).GetProjectsLocationsFirewallEndpointAssociation(ctx, req.(*GetProjectsLocationsFirewallEndpointAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsFirewallEndpointAssociationsServer_ListProjectsLocationsFirewallEndpointAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsFirewallEndpointAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).ListProjectsLocationsFirewallEndpointAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/ListProjectsLocationsFirewallEndpointAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).ListProjectsLocationsFirewallEndpointAssociations(ctx, req.(*ListProjectsLocationsFirewallEndpointAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsFirewallEndpointAssociationsServer_PatchProjectsLocationsFirewallEndpointAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsFirewallEndpointAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).PatchProjectsLocationsFirewallEndpointAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer/PatchProjectsLocationsFirewallEndpointAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsFirewallEndpointAssociationsServerServer).PatchProjectsLocationsFirewallEndpointAssociation(ctx, req.(*PatchProjectsLocationsFirewallEndpointAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsFirewallEndpointAssociationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsFirewallEndpointAssociationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsFirewallEndpointAssociationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsFirewallEndpointAssociationsServer",
	HandlerType: (*ProjectsLocationsFirewallEndpointAssociationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsFirewallEndpointAssociation",
			Handler:    _ProjectsLocationsFirewallEndpointAssociationsServer_CreateProjectsLocationsFirewallEndpointAssociation_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsFirewallEndpointAssociation",
			Handler:    _ProjectsLocationsFirewallEndpointAssociationsServer_DeleteProjectsLocationsFirewallEndpointAssociation_Handler,
		},
		{
			MethodName: "GetProjectsLocationsFirewallEndpointAssociation",
			Handler:    _ProjectsLocationsFirewallEndpointAssociationsServer_GetProjectsLocationsFirewallEndpointAssociation_Handler,
		},
		{
			MethodName: "ListProjectsLocationsFirewallEndpointAssociations",
			Handler:    _ProjectsLocationsFirewallEndpointAssociationsServer_ListProjectsLocationsFirewallEndpointAssociations_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsFirewallEndpointAssociation",
			Handler:    _ProjectsLocationsFirewallEndpointAssociationsServer_PatchProjectsLocationsFirewallEndpointAssociation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsGatewaySecurityPoliciesServerClient is the client API for ProjectsLocationsGatewaySecurityPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGatewaySecurityPoliciesServerClient interface {
	// Creates a new GatewaySecurityPolicy in a given project and location.
	CreateProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *CreateProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single GatewaySecurityPolicy.
	DeleteProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *DeleteProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single GatewaySecurityPolicy.
	GetProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *GetProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*GatewaySecurityPolicy, error)
	// Lists GatewaySecurityPolicies in a given project and location.
	ListProjectsLocationsGatewaySecurityPolicies(ctx context.Context, in *ListProjectsLocationsGatewaySecurityPoliciesRequest, opts ...grpc.CallOption) (*ListGatewaySecurityPoliciesResponse, error)
	// Updates the parameters of a single GatewaySecurityPolicy.
	PatchProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *PatchProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsGatewaySecurityPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGatewaySecurityPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGatewaySecurityPoliciesServerClient {
	return &projectsLocationsGatewaySecurityPoliciesServerClient{cc}
}

func (c *projectsLocationsGatewaySecurityPoliciesServerClient) CreateProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *CreateProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/CreateProjectsLocationsGatewaySecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesServerClient) DeleteProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *DeleteProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/DeleteProjectsLocationsGatewaySecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesServerClient) GetProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *GetProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*GatewaySecurityPolicy, error) {
	out := new(GatewaySecurityPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/GetProjectsLocationsGatewaySecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesServerClient) ListProjectsLocationsGatewaySecurityPolicies(ctx context.Context, in *ListProjectsLocationsGatewaySecurityPoliciesRequest, opts ...grpc.CallOption) (*ListGatewaySecurityPoliciesResponse, error) {
	out := new(ListGatewaySecurityPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/ListProjectsLocationsGatewaySecurityPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesServerClient) PatchProjectsLocationsGatewaySecurityPolicy(ctx context.Context, in *PatchProjectsLocationsGatewaySecurityPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/PatchProjectsLocationsGatewaySecurityPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGatewaySecurityPoliciesServerServer is the server API for ProjectsLocationsGatewaySecurityPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer
// for forward compatibility
type ProjectsLocationsGatewaySecurityPoliciesServerServer interface {
	// Creates a new GatewaySecurityPolicy in a given project and location.
	CreateProjectsLocationsGatewaySecurityPolicy(context.Context, *CreateProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single GatewaySecurityPolicy.
	DeleteProjectsLocationsGatewaySecurityPolicy(context.Context, *DeleteProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single GatewaySecurityPolicy.
	GetProjectsLocationsGatewaySecurityPolicy(context.Context, *GetProjectsLocationsGatewaySecurityPolicyRequest) (*GatewaySecurityPolicy, error)
	// Lists GatewaySecurityPolicies in a given project and location.
	ListProjectsLocationsGatewaySecurityPolicies(context.Context, *ListProjectsLocationsGatewaySecurityPoliciesRequest) (*ListGatewaySecurityPoliciesResponse, error)
	// Updates the parameters of a single GatewaySecurityPolicy.
	PatchProjectsLocationsGatewaySecurityPolicy(context.Context, *PatchProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer()
}

// UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) CreateProjectsLocationsGatewaySecurityPolicy(context.Context, *CreateProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsGatewaySecurityPolicy not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) DeleteProjectsLocationsGatewaySecurityPolicy(context.Context, *DeleteProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsGatewaySecurityPolicy not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) GetProjectsLocationsGatewaySecurityPolicy(context.Context, *GetProjectsLocationsGatewaySecurityPolicyRequest) (*GatewaySecurityPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGatewaySecurityPolicy not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) ListProjectsLocationsGatewaySecurityPolicies(context.Context, *ListProjectsLocationsGatewaySecurityPoliciesRequest) (*ListGatewaySecurityPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGatewaySecurityPolicies not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) PatchProjectsLocationsGatewaySecurityPolicy(context.Context, *PatchProjectsLocationsGatewaySecurityPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsGatewaySecurityPolicy not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer() {
}

// UnsafeProjectsLocationsGatewaySecurityPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGatewaySecurityPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGatewaySecurityPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesServerServer()
}

func RegisterProjectsLocationsGatewaySecurityPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGatewaySecurityPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsGatewaySecurityPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsGatewaySecurityPoliciesServer_CreateProjectsLocationsGatewaySecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsGatewaySecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).CreateProjectsLocationsGatewaySecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/CreateProjectsLocationsGatewaySecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).CreateProjectsLocationsGatewaySecurityPolicy(ctx, req.(*CreateProjectsLocationsGatewaySecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesServer_DeleteProjectsLocationsGatewaySecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsGatewaySecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).DeleteProjectsLocationsGatewaySecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/DeleteProjectsLocationsGatewaySecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).DeleteProjectsLocationsGatewaySecurityPolicy(ctx, req.(*DeleteProjectsLocationsGatewaySecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesServer_GetProjectsLocationsGatewaySecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGatewaySecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).GetProjectsLocationsGatewaySecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/GetProjectsLocationsGatewaySecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).GetProjectsLocationsGatewaySecurityPolicy(ctx, req.(*GetProjectsLocationsGatewaySecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesServer_ListProjectsLocationsGatewaySecurityPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGatewaySecurityPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).ListProjectsLocationsGatewaySecurityPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/ListProjectsLocationsGatewaySecurityPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).ListProjectsLocationsGatewaySecurityPolicies(ctx, req.(*ListProjectsLocationsGatewaySecurityPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesServer_PatchProjectsLocationsGatewaySecurityPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsGatewaySecurityPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).PatchProjectsLocationsGatewaySecurityPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer/PatchProjectsLocationsGatewaySecurityPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesServerServer).PatchProjectsLocationsGatewaySecurityPolicy(ctx, req.(*PatchProjectsLocationsGatewaySecurityPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGatewaySecurityPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGatewaySecurityPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGatewaySecurityPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesServer",
	HandlerType: (*ProjectsLocationsGatewaySecurityPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsGatewaySecurityPolicy",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesServer_CreateProjectsLocationsGatewaySecurityPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsGatewaySecurityPolicy",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesServer_DeleteProjectsLocationsGatewaySecurityPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsGatewaySecurityPolicy",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesServer_GetProjectsLocationsGatewaySecurityPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGatewaySecurityPolicies",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesServer_ListProjectsLocationsGatewaySecurityPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsGatewaySecurityPolicy",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesServer_PatchProjectsLocationsGatewaySecurityPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsGatewaySecurityPoliciesRulesServerClient is the client API for ProjectsLocationsGatewaySecurityPoliciesRulesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsGatewaySecurityPoliciesRulesServerClient interface {
	// Creates a new GatewaySecurityPolicy in a given project and location.
	CreateProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single GatewaySecurityPolicyRule.
	DeleteProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single GatewaySecurityPolicyRule.
	GetProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *GetProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*GatewaySecurityPolicyRule, error)
	// Lists GatewaySecurityPolicyRules in a given project and location.
	ListProjectsLocationsGatewaySecurityPoliciesRules(ctx context.Context, in *ListProjectsLocationsGatewaySecurityPoliciesRulesRequest, opts ...grpc.CallOption) (*ListGatewaySecurityPolicyRulesResponse, error)
	// Updates the parameters of a single GatewaySecurityPolicyRule.
	PatchProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsGatewaySecurityPoliciesRulesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsGatewaySecurityPoliciesRulesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsGatewaySecurityPoliciesRulesServerClient {
	return &projectsLocationsGatewaySecurityPoliciesRulesServerClient{cc}
}

func (c *projectsLocationsGatewaySecurityPoliciesRulesServerClient) CreateProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/CreateProjectsLocationsGatewaySecurityPoliciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesRulesServerClient) DeleteProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/DeleteProjectsLocationsGatewaySecurityPoliciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesRulesServerClient) GetProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *GetProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*GatewaySecurityPolicyRule, error) {
	out := new(GatewaySecurityPolicyRule)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/GetProjectsLocationsGatewaySecurityPoliciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesRulesServerClient) ListProjectsLocationsGatewaySecurityPoliciesRules(ctx context.Context, in *ListProjectsLocationsGatewaySecurityPoliciesRulesRequest, opts ...grpc.CallOption) (*ListGatewaySecurityPolicyRulesResponse, error) {
	out := new(ListGatewaySecurityPolicyRulesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/ListProjectsLocationsGatewaySecurityPoliciesRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsGatewaySecurityPoliciesRulesServerClient) PatchProjectsLocationsGatewaySecurityPoliciesRule(ctx context.Context, in *PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/PatchProjectsLocationsGatewaySecurityPoliciesRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsGatewaySecurityPoliciesRulesServerServer is the server API for ProjectsLocationsGatewaySecurityPoliciesRulesServer service.
// All implementations must embed UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer
// for forward compatibility
type ProjectsLocationsGatewaySecurityPoliciesRulesServerServer interface {
	// Creates a new GatewaySecurityPolicy in a given project and location.
	CreateProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error)
	// Deletes a single GatewaySecurityPolicyRule.
	DeleteProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error)
	// Gets details of a single GatewaySecurityPolicyRule.
	GetProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *GetProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*GatewaySecurityPolicyRule, error)
	// Lists GatewaySecurityPolicyRules in a given project and location.
	ListProjectsLocationsGatewaySecurityPoliciesRules(context.Context, *ListProjectsLocationsGatewaySecurityPoliciesRulesRequest) (*ListGatewaySecurityPolicyRulesResponse, error)
	// Updates the parameters of a single GatewaySecurityPolicyRule.
	PatchProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer()
}

// UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer struct {
}

func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) CreateProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsGatewaySecurityPoliciesRule not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) DeleteProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsGatewaySecurityPoliciesRule not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) GetProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *GetProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*GatewaySecurityPolicyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsGatewaySecurityPoliciesRule not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) ListProjectsLocationsGatewaySecurityPoliciesRules(context.Context, *ListProjectsLocationsGatewaySecurityPoliciesRulesRequest) (*ListGatewaySecurityPolicyRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsGatewaySecurityPoliciesRules not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) PatchProjectsLocationsGatewaySecurityPoliciesRule(context.Context, *PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsGatewaySecurityPoliciesRule not implemented")
}
func (UnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer) mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer() {
}

// UnsafeProjectsLocationsGatewaySecurityPoliciesRulesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsGatewaySecurityPoliciesRulesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsGatewaySecurityPoliciesRulesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsGatewaySecurityPoliciesRulesServerServer()
}

func RegisterProjectsLocationsGatewaySecurityPoliciesRulesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsGatewaySecurityPoliciesRulesServerServer) {
	s.RegisterService(&ProjectsLocationsGatewaySecurityPoliciesRulesServer_ServiceDesc, srv)
}

func _ProjectsLocationsGatewaySecurityPoliciesRulesServer_CreateProjectsLocationsGatewaySecurityPoliciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).CreateProjectsLocationsGatewaySecurityPoliciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/CreateProjectsLocationsGatewaySecurityPoliciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).CreateProjectsLocationsGatewaySecurityPoliciesRule(ctx, req.(*CreateProjectsLocationsGatewaySecurityPoliciesRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesRulesServer_DeleteProjectsLocationsGatewaySecurityPoliciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).DeleteProjectsLocationsGatewaySecurityPoliciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/DeleteProjectsLocationsGatewaySecurityPoliciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).DeleteProjectsLocationsGatewaySecurityPoliciesRule(ctx, req.(*DeleteProjectsLocationsGatewaySecurityPoliciesRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesRulesServer_GetProjectsLocationsGatewaySecurityPoliciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsGatewaySecurityPoliciesRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).GetProjectsLocationsGatewaySecurityPoliciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/GetProjectsLocationsGatewaySecurityPoliciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).GetProjectsLocationsGatewaySecurityPoliciesRule(ctx, req.(*GetProjectsLocationsGatewaySecurityPoliciesRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesRulesServer_ListProjectsLocationsGatewaySecurityPoliciesRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsGatewaySecurityPoliciesRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).ListProjectsLocationsGatewaySecurityPoliciesRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/ListProjectsLocationsGatewaySecurityPoliciesRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).ListProjectsLocationsGatewaySecurityPoliciesRules(ctx, req.(*ListProjectsLocationsGatewaySecurityPoliciesRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsGatewaySecurityPoliciesRulesServer_PatchProjectsLocationsGatewaySecurityPoliciesRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).PatchProjectsLocationsGatewaySecurityPoliciesRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer/PatchProjectsLocationsGatewaySecurityPoliciesRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsGatewaySecurityPoliciesRulesServerServer).PatchProjectsLocationsGatewaySecurityPoliciesRule(ctx, req.(*PatchProjectsLocationsGatewaySecurityPoliciesRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsGatewaySecurityPoliciesRulesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsGatewaySecurityPoliciesRulesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsGatewaySecurityPoliciesRulesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsGatewaySecurityPoliciesRulesServer",
	HandlerType: (*ProjectsLocationsGatewaySecurityPoliciesRulesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsGatewaySecurityPoliciesRule",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesRulesServer_CreateProjectsLocationsGatewaySecurityPoliciesRule_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsGatewaySecurityPoliciesRule",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesRulesServer_DeleteProjectsLocationsGatewaySecurityPoliciesRule_Handler,
		},
		{
			MethodName: "GetProjectsLocationsGatewaySecurityPoliciesRule",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesRulesServer_GetProjectsLocationsGatewaySecurityPoliciesRule_Handler,
		},
		{
			MethodName: "ListProjectsLocationsGatewaySecurityPoliciesRules",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesRulesServer_ListProjectsLocationsGatewaySecurityPoliciesRules_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsGatewaySecurityPoliciesRule",
			Handler:    _ProjectsLocationsGatewaySecurityPoliciesRulesServer_PatchProjectsLocationsGatewaySecurityPoliciesRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsInterceptDeploymentGroupsServerClient is the client API for ProjectsLocationsInterceptDeploymentGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsInterceptDeploymentGroupsServerClient interface {
	// Creates a deployment group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *CreateProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a deployment group. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *DeleteProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific deployment group. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *GetProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*InterceptDeploymentGroup, error)
	// Lists deployment groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptDeploymentGroups(ctx context.Context, in *ListProjectsLocationsInterceptDeploymentGroupsRequest, opts ...grpc.CallOption) (*ListInterceptDeploymentGroupsResponse, error)
	// Updates a deployment group. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *PatchProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsInterceptDeploymentGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsInterceptDeploymentGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsInterceptDeploymentGroupsServerClient {
	return &projectsLocationsInterceptDeploymentGroupsServerClient{cc}
}

func (c *projectsLocationsInterceptDeploymentGroupsServerClient) CreateProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *CreateProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/CreateProjectsLocationsInterceptDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentGroupsServerClient) DeleteProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *DeleteProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/DeleteProjectsLocationsInterceptDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentGroupsServerClient) GetProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *GetProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*InterceptDeploymentGroup, error) {
	out := new(InterceptDeploymentGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/GetProjectsLocationsInterceptDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentGroupsServerClient) ListProjectsLocationsInterceptDeploymentGroups(ctx context.Context, in *ListProjectsLocationsInterceptDeploymentGroupsRequest, opts ...grpc.CallOption) (*ListInterceptDeploymentGroupsResponse, error) {
	out := new(ListInterceptDeploymentGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/ListProjectsLocationsInterceptDeploymentGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentGroupsServerClient) PatchProjectsLocationsInterceptDeploymentGroup(ctx context.Context, in *PatchProjectsLocationsInterceptDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/PatchProjectsLocationsInterceptDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsInterceptDeploymentGroupsServerServer is the server API for ProjectsLocationsInterceptDeploymentGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer
// for forward compatibility
type ProjectsLocationsInterceptDeploymentGroupsServerServer interface {
	// Creates a deployment group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptDeploymentGroup(context.Context, *CreateProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a deployment group. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptDeploymentGroup(context.Context, *DeleteProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error)
	// Gets a specific deployment group. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptDeploymentGroup(context.Context, *GetProjectsLocationsInterceptDeploymentGroupRequest) (*InterceptDeploymentGroup, error)
	// Lists deployment groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptDeploymentGroups(context.Context, *ListProjectsLocationsInterceptDeploymentGroupsRequest) (*ListInterceptDeploymentGroupsResponse, error)
	// Updates a deployment group. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptDeploymentGroup(context.Context, *PatchProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer()
}

// UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) CreateProjectsLocationsInterceptDeploymentGroup(context.Context, *CreateProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsInterceptDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) DeleteProjectsLocationsInterceptDeploymentGroup(context.Context, *DeleteProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsInterceptDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) GetProjectsLocationsInterceptDeploymentGroup(context.Context, *GetProjectsLocationsInterceptDeploymentGroupRequest) (*InterceptDeploymentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsInterceptDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) ListProjectsLocationsInterceptDeploymentGroups(context.Context, *ListProjectsLocationsInterceptDeploymentGroupsRequest) (*ListInterceptDeploymentGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsInterceptDeploymentGroups not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) PatchProjectsLocationsInterceptDeploymentGroup(context.Context, *PatchProjectsLocationsInterceptDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsInterceptDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer) mustEmbedUnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer() {
}

// UnsafeProjectsLocationsInterceptDeploymentGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsInterceptDeploymentGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsInterceptDeploymentGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsInterceptDeploymentGroupsServerServer()
}

func RegisterProjectsLocationsInterceptDeploymentGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsInterceptDeploymentGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsInterceptDeploymentGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsInterceptDeploymentGroupsServer_CreateProjectsLocationsInterceptDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsInterceptDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).CreateProjectsLocationsInterceptDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/CreateProjectsLocationsInterceptDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).CreateProjectsLocationsInterceptDeploymentGroup(ctx, req.(*CreateProjectsLocationsInterceptDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentGroupsServer_DeleteProjectsLocationsInterceptDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsInterceptDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).DeleteProjectsLocationsInterceptDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/DeleteProjectsLocationsInterceptDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).DeleteProjectsLocationsInterceptDeploymentGroup(ctx, req.(*DeleteProjectsLocationsInterceptDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentGroupsServer_GetProjectsLocationsInterceptDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsInterceptDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).GetProjectsLocationsInterceptDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/GetProjectsLocationsInterceptDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).GetProjectsLocationsInterceptDeploymentGroup(ctx, req.(*GetProjectsLocationsInterceptDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentGroupsServer_ListProjectsLocationsInterceptDeploymentGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsInterceptDeploymentGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).ListProjectsLocationsInterceptDeploymentGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/ListProjectsLocationsInterceptDeploymentGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).ListProjectsLocationsInterceptDeploymentGroups(ctx, req.(*ListProjectsLocationsInterceptDeploymentGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentGroupsServer_PatchProjectsLocationsInterceptDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsInterceptDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).PatchProjectsLocationsInterceptDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer/PatchProjectsLocationsInterceptDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentGroupsServerServer).PatchProjectsLocationsInterceptDeploymentGroup(ctx, req.(*PatchProjectsLocationsInterceptDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsInterceptDeploymentGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsInterceptDeploymentGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsInterceptDeploymentGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentGroupsServer",
	HandlerType: (*ProjectsLocationsInterceptDeploymentGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsInterceptDeploymentGroup",
			Handler:    _ProjectsLocationsInterceptDeploymentGroupsServer_CreateProjectsLocationsInterceptDeploymentGroup_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsInterceptDeploymentGroup",
			Handler:    _ProjectsLocationsInterceptDeploymentGroupsServer_DeleteProjectsLocationsInterceptDeploymentGroup_Handler,
		},
		{
			MethodName: "GetProjectsLocationsInterceptDeploymentGroup",
			Handler:    _ProjectsLocationsInterceptDeploymentGroupsServer_GetProjectsLocationsInterceptDeploymentGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsInterceptDeploymentGroups",
			Handler:    _ProjectsLocationsInterceptDeploymentGroupsServer_ListProjectsLocationsInterceptDeploymentGroups_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsInterceptDeploymentGroup",
			Handler:    _ProjectsLocationsInterceptDeploymentGroupsServer_PatchProjectsLocationsInterceptDeploymentGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsInterceptDeploymentsServerClient is the client API for ProjectsLocationsInterceptDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsInterceptDeploymentsServerClient interface {
	// Creates a deployment in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptDeployment(ctx context.Context, in *CreateProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a deployment. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptDeployment(ctx context.Context, in *DeleteProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific deployment. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptDeployment(ctx context.Context, in *GetProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*InterceptDeployment, error)
	// Lists deployments in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptDeployments(ctx context.Context, in *ListProjectsLocationsInterceptDeploymentsRequest, opts ...grpc.CallOption) (*ListInterceptDeploymentsResponse, error)
	// Updates a deployment. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptDeployment(ctx context.Context, in *PatchProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsInterceptDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsInterceptDeploymentsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsInterceptDeploymentsServerClient {
	return &projectsLocationsInterceptDeploymentsServerClient{cc}
}

func (c *projectsLocationsInterceptDeploymentsServerClient) CreateProjectsLocationsInterceptDeployment(ctx context.Context, in *CreateProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/CreateProjectsLocationsInterceptDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentsServerClient) DeleteProjectsLocationsInterceptDeployment(ctx context.Context, in *DeleteProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/DeleteProjectsLocationsInterceptDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentsServerClient) GetProjectsLocationsInterceptDeployment(ctx context.Context, in *GetProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*InterceptDeployment, error) {
	out := new(InterceptDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/GetProjectsLocationsInterceptDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentsServerClient) ListProjectsLocationsInterceptDeployments(ctx context.Context, in *ListProjectsLocationsInterceptDeploymentsRequest, opts ...grpc.CallOption) (*ListInterceptDeploymentsResponse, error) {
	out := new(ListInterceptDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/ListProjectsLocationsInterceptDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptDeploymentsServerClient) PatchProjectsLocationsInterceptDeployment(ctx context.Context, in *PatchProjectsLocationsInterceptDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/PatchProjectsLocationsInterceptDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsInterceptDeploymentsServerServer is the server API for ProjectsLocationsInterceptDeploymentsServer service.
// All implementations must embed UnimplementedProjectsLocationsInterceptDeploymentsServerServer
// for forward compatibility
type ProjectsLocationsInterceptDeploymentsServerServer interface {
	// Creates a deployment in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptDeployment(context.Context, *CreateProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error)
	// Deletes a deployment. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptDeployment(context.Context, *DeleteProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error)
	// Gets a specific deployment. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptDeployment(context.Context, *GetProjectsLocationsInterceptDeploymentRequest) (*InterceptDeployment, error)
	// Lists deployments in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptDeployments(context.Context, *ListProjectsLocationsInterceptDeploymentsRequest) (*ListInterceptDeploymentsResponse, error)
	// Updates a deployment. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptDeployment(context.Context, *PatchProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsInterceptDeploymentsServerServer()
}

// UnimplementedProjectsLocationsInterceptDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsInterceptDeploymentsServerServer struct {
}

func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) CreateProjectsLocationsInterceptDeployment(context.Context, *CreateProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsInterceptDeployment not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) DeleteProjectsLocationsInterceptDeployment(context.Context, *DeleteProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsInterceptDeployment not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) GetProjectsLocationsInterceptDeployment(context.Context, *GetProjectsLocationsInterceptDeploymentRequest) (*InterceptDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsInterceptDeployment not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) ListProjectsLocationsInterceptDeployments(context.Context, *ListProjectsLocationsInterceptDeploymentsRequest) (*ListInterceptDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsInterceptDeployments not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) PatchProjectsLocationsInterceptDeployment(context.Context, *PatchProjectsLocationsInterceptDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsInterceptDeployment not implemented")
}
func (UnimplementedProjectsLocationsInterceptDeploymentsServerServer) mustEmbedUnimplementedProjectsLocationsInterceptDeploymentsServerServer() {
}

// UnsafeProjectsLocationsInterceptDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsInterceptDeploymentsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsInterceptDeploymentsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsInterceptDeploymentsServerServer()
}

func RegisterProjectsLocationsInterceptDeploymentsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsInterceptDeploymentsServerServer) {
	s.RegisterService(&ProjectsLocationsInterceptDeploymentsServer_ServiceDesc, srv)
}

func _ProjectsLocationsInterceptDeploymentsServer_CreateProjectsLocationsInterceptDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsInterceptDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).CreateProjectsLocationsInterceptDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/CreateProjectsLocationsInterceptDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).CreateProjectsLocationsInterceptDeployment(ctx, req.(*CreateProjectsLocationsInterceptDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentsServer_DeleteProjectsLocationsInterceptDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsInterceptDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).DeleteProjectsLocationsInterceptDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/DeleteProjectsLocationsInterceptDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).DeleteProjectsLocationsInterceptDeployment(ctx, req.(*DeleteProjectsLocationsInterceptDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentsServer_GetProjectsLocationsInterceptDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsInterceptDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).GetProjectsLocationsInterceptDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/GetProjectsLocationsInterceptDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).GetProjectsLocationsInterceptDeployment(ctx, req.(*GetProjectsLocationsInterceptDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentsServer_ListProjectsLocationsInterceptDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsInterceptDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).ListProjectsLocationsInterceptDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/ListProjectsLocationsInterceptDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).ListProjectsLocationsInterceptDeployments(ctx, req.(*ListProjectsLocationsInterceptDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptDeploymentsServer_PatchProjectsLocationsInterceptDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsInterceptDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).PatchProjectsLocationsInterceptDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer/PatchProjectsLocationsInterceptDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptDeploymentsServerServer).PatchProjectsLocationsInterceptDeployment(ctx, req.(*PatchProjectsLocationsInterceptDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsInterceptDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsInterceptDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsInterceptDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsInterceptDeploymentsServer",
	HandlerType: (*ProjectsLocationsInterceptDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsInterceptDeployment",
			Handler:    _ProjectsLocationsInterceptDeploymentsServer_CreateProjectsLocationsInterceptDeployment_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsInterceptDeployment",
			Handler:    _ProjectsLocationsInterceptDeploymentsServer_DeleteProjectsLocationsInterceptDeployment_Handler,
		},
		{
			MethodName: "GetProjectsLocationsInterceptDeployment",
			Handler:    _ProjectsLocationsInterceptDeploymentsServer_GetProjectsLocationsInterceptDeployment_Handler,
		},
		{
			MethodName: "ListProjectsLocationsInterceptDeployments",
			Handler:    _ProjectsLocationsInterceptDeploymentsServer_ListProjectsLocationsInterceptDeployments_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsInterceptDeployment",
			Handler:    _ProjectsLocationsInterceptDeploymentsServer_PatchProjectsLocationsInterceptDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsInterceptEndpointGroupAssociationsServerClient is the client API for ProjectsLocationsInterceptEndpointGroupAssociationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsInterceptEndpointGroupAssociationsServerClient interface {
	// Creates an association in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *CreateProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an association. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific association. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *GetProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*InterceptEndpointGroupAssociation, error)
	// Lists associations in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptEndpointGroupAssociations(ctx context.Context, in *ListProjectsLocationsInterceptEndpointGroupAssociationsRequest, opts ...grpc.CallOption) (*ListInterceptEndpointGroupAssociationsResponse, error)
	// Updates an association. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *PatchProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsInterceptEndpointGroupAssociationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsInterceptEndpointGroupAssociationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsInterceptEndpointGroupAssociationsServerClient {
	return &projectsLocationsInterceptEndpointGroupAssociationsServerClient{cc}
}

func (c *projectsLocationsInterceptEndpointGroupAssociationsServerClient) CreateProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *CreateProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/CreateProjectsLocationsInterceptEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupAssociationsServerClient) DeleteProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/DeleteProjectsLocationsInterceptEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupAssociationsServerClient) GetProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *GetProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*InterceptEndpointGroupAssociation, error) {
	out := new(InterceptEndpointGroupAssociation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/GetProjectsLocationsInterceptEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupAssociationsServerClient) ListProjectsLocationsInterceptEndpointGroupAssociations(ctx context.Context, in *ListProjectsLocationsInterceptEndpointGroupAssociationsRequest, opts ...grpc.CallOption) (*ListInterceptEndpointGroupAssociationsResponse, error) {
	out := new(ListInterceptEndpointGroupAssociationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/ListProjectsLocationsInterceptEndpointGroupAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupAssociationsServerClient) PatchProjectsLocationsInterceptEndpointGroupAssociation(ctx context.Context, in *PatchProjectsLocationsInterceptEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/PatchProjectsLocationsInterceptEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsInterceptEndpointGroupAssociationsServerServer is the server API for ProjectsLocationsInterceptEndpointGroupAssociationsServer service.
// All implementations must embed UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer
// for forward compatibility
type ProjectsLocationsInterceptEndpointGroupAssociationsServerServer interface {
	// Creates an association in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *CreateProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	// Deletes an association. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	// Gets a specific association. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *GetProjectsLocationsInterceptEndpointGroupAssociationRequest) (*InterceptEndpointGroupAssociation, error)
	// Lists associations in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptEndpointGroupAssociations(context.Context, *ListProjectsLocationsInterceptEndpointGroupAssociationsRequest) (*ListInterceptEndpointGroupAssociationsResponse, error)
	// Updates an association. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *PatchProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer()
}

// UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer struct {
}

func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) CreateProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *CreateProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsInterceptEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) DeleteProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsInterceptEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) GetProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *GetProjectsLocationsInterceptEndpointGroupAssociationRequest) (*InterceptEndpointGroupAssociation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsInterceptEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) ListProjectsLocationsInterceptEndpointGroupAssociations(context.Context, *ListProjectsLocationsInterceptEndpointGroupAssociationsRequest) (*ListInterceptEndpointGroupAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsInterceptEndpointGroupAssociations not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) PatchProjectsLocationsInterceptEndpointGroupAssociation(context.Context, *PatchProjectsLocationsInterceptEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsInterceptEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer) mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer() {
}

// UnsafeProjectsLocationsInterceptEndpointGroupAssociationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsInterceptEndpointGroupAssociationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsInterceptEndpointGroupAssociationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupAssociationsServerServer()
}

func RegisterProjectsLocationsInterceptEndpointGroupAssociationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsInterceptEndpointGroupAssociationsServerServer) {
	s.RegisterService(&ProjectsLocationsInterceptEndpointGroupAssociationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsInterceptEndpointGroupAssociationsServer_CreateProjectsLocationsInterceptEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsInterceptEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).CreateProjectsLocationsInterceptEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/CreateProjectsLocationsInterceptEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).CreateProjectsLocationsInterceptEndpointGroupAssociation(ctx, req.(*CreateProjectsLocationsInterceptEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupAssociationsServer_DeleteProjectsLocationsInterceptEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).DeleteProjectsLocationsInterceptEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/DeleteProjectsLocationsInterceptEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).DeleteProjectsLocationsInterceptEndpointGroupAssociation(ctx, req.(*DeleteProjectsLocationsInterceptEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupAssociationsServer_GetProjectsLocationsInterceptEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsInterceptEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).GetProjectsLocationsInterceptEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/GetProjectsLocationsInterceptEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).GetProjectsLocationsInterceptEndpointGroupAssociation(ctx, req.(*GetProjectsLocationsInterceptEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupAssociationsServer_ListProjectsLocationsInterceptEndpointGroupAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsInterceptEndpointGroupAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).ListProjectsLocationsInterceptEndpointGroupAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/ListProjectsLocationsInterceptEndpointGroupAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).ListProjectsLocationsInterceptEndpointGroupAssociations(ctx, req.(*ListProjectsLocationsInterceptEndpointGroupAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupAssociationsServer_PatchProjectsLocationsInterceptEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsInterceptEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).PatchProjectsLocationsInterceptEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer/PatchProjectsLocationsInterceptEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupAssociationsServerServer).PatchProjectsLocationsInterceptEndpointGroupAssociation(ctx, req.(*PatchProjectsLocationsInterceptEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsInterceptEndpointGroupAssociationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsInterceptEndpointGroupAssociationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsInterceptEndpointGroupAssociationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupAssociationsServer",
	HandlerType: (*ProjectsLocationsInterceptEndpointGroupAssociationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsInterceptEndpointGroupAssociation",
			Handler:    _ProjectsLocationsInterceptEndpointGroupAssociationsServer_CreateProjectsLocationsInterceptEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsInterceptEndpointGroupAssociation",
			Handler:    _ProjectsLocationsInterceptEndpointGroupAssociationsServer_DeleteProjectsLocationsInterceptEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "GetProjectsLocationsInterceptEndpointGroupAssociation",
			Handler:    _ProjectsLocationsInterceptEndpointGroupAssociationsServer_GetProjectsLocationsInterceptEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "ListProjectsLocationsInterceptEndpointGroupAssociations",
			Handler:    _ProjectsLocationsInterceptEndpointGroupAssociationsServer_ListProjectsLocationsInterceptEndpointGroupAssociations_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsInterceptEndpointGroupAssociation",
			Handler:    _ProjectsLocationsInterceptEndpointGroupAssociationsServer_PatchProjectsLocationsInterceptEndpointGroupAssociation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsInterceptEndpointGroupsServerClient is the client API for ProjectsLocationsInterceptEndpointGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsInterceptEndpointGroupsServerClient interface {
	// Creates an endpoint group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *CreateProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an endpoint group. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *DeleteProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific endpoint group. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *GetProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*InterceptEndpointGroup, error)
	// Lists endpoint groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptEndpointGroups(ctx context.Context, in *ListProjectsLocationsInterceptEndpointGroupsRequest, opts ...grpc.CallOption) (*ListInterceptEndpointGroupsResponse, error)
	// Updates an endpoint group. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *PatchProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsInterceptEndpointGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsInterceptEndpointGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsInterceptEndpointGroupsServerClient {
	return &projectsLocationsInterceptEndpointGroupsServerClient{cc}
}

func (c *projectsLocationsInterceptEndpointGroupsServerClient) CreateProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *CreateProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/CreateProjectsLocationsInterceptEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupsServerClient) DeleteProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *DeleteProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/DeleteProjectsLocationsInterceptEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupsServerClient) GetProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *GetProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*InterceptEndpointGroup, error) {
	out := new(InterceptEndpointGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/GetProjectsLocationsInterceptEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupsServerClient) ListProjectsLocationsInterceptEndpointGroups(ctx context.Context, in *ListProjectsLocationsInterceptEndpointGroupsRequest, opts ...grpc.CallOption) (*ListInterceptEndpointGroupsResponse, error) {
	out := new(ListInterceptEndpointGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/ListProjectsLocationsInterceptEndpointGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsInterceptEndpointGroupsServerClient) PatchProjectsLocationsInterceptEndpointGroup(ctx context.Context, in *PatchProjectsLocationsInterceptEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/PatchProjectsLocationsInterceptEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsInterceptEndpointGroupsServerServer is the server API for ProjectsLocationsInterceptEndpointGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer
// for forward compatibility
type ProjectsLocationsInterceptEndpointGroupsServerServer interface {
	// Creates an endpoint group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsInterceptEndpointGroup(context.Context, *CreateProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error)
	// Deletes an endpoint group. See https://google.aip.dev/135.
	DeleteProjectsLocationsInterceptEndpointGroup(context.Context, *DeleteProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error)
	// Gets a specific endpoint group. See https://google.aip.dev/131.
	GetProjectsLocationsInterceptEndpointGroup(context.Context, *GetProjectsLocationsInterceptEndpointGroupRequest) (*InterceptEndpointGroup, error)
	// Lists endpoint groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsInterceptEndpointGroups(context.Context, *ListProjectsLocationsInterceptEndpointGroupsRequest) (*ListInterceptEndpointGroupsResponse, error)
	// Updates an endpoint group. See https://google.aip.dev/134.
	PatchProjectsLocationsInterceptEndpointGroup(context.Context, *PatchProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupsServerServer()
}

// UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) CreateProjectsLocationsInterceptEndpointGroup(context.Context, *CreateProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsInterceptEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) DeleteProjectsLocationsInterceptEndpointGroup(context.Context, *DeleteProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsInterceptEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) GetProjectsLocationsInterceptEndpointGroup(context.Context, *GetProjectsLocationsInterceptEndpointGroupRequest) (*InterceptEndpointGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsInterceptEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) ListProjectsLocationsInterceptEndpointGroups(context.Context, *ListProjectsLocationsInterceptEndpointGroupsRequest) (*ListInterceptEndpointGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsInterceptEndpointGroups not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) PatchProjectsLocationsInterceptEndpointGroup(context.Context, *PatchProjectsLocationsInterceptEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsInterceptEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsInterceptEndpointGroupsServerServer) mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupsServerServer() {
}

// UnsafeProjectsLocationsInterceptEndpointGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsInterceptEndpointGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsInterceptEndpointGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsInterceptEndpointGroupsServerServer()
}

func RegisterProjectsLocationsInterceptEndpointGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsInterceptEndpointGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsInterceptEndpointGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsInterceptEndpointGroupsServer_CreateProjectsLocationsInterceptEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsInterceptEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).CreateProjectsLocationsInterceptEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/CreateProjectsLocationsInterceptEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).CreateProjectsLocationsInterceptEndpointGroup(ctx, req.(*CreateProjectsLocationsInterceptEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupsServer_DeleteProjectsLocationsInterceptEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsInterceptEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).DeleteProjectsLocationsInterceptEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/DeleteProjectsLocationsInterceptEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).DeleteProjectsLocationsInterceptEndpointGroup(ctx, req.(*DeleteProjectsLocationsInterceptEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupsServer_GetProjectsLocationsInterceptEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsInterceptEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).GetProjectsLocationsInterceptEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/GetProjectsLocationsInterceptEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).GetProjectsLocationsInterceptEndpointGroup(ctx, req.(*GetProjectsLocationsInterceptEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupsServer_ListProjectsLocationsInterceptEndpointGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsInterceptEndpointGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).ListProjectsLocationsInterceptEndpointGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/ListProjectsLocationsInterceptEndpointGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).ListProjectsLocationsInterceptEndpointGroups(ctx, req.(*ListProjectsLocationsInterceptEndpointGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsInterceptEndpointGroupsServer_PatchProjectsLocationsInterceptEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsInterceptEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).PatchProjectsLocationsInterceptEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer/PatchProjectsLocationsInterceptEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsInterceptEndpointGroupsServerServer).PatchProjectsLocationsInterceptEndpointGroup(ctx, req.(*PatchProjectsLocationsInterceptEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsInterceptEndpointGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsInterceptEndpointGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsInterceptEndpointGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsInterceptEndpointGroupsServer",
	HandlerType: (*ProjectsLocationsInterceptEndpointGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsInterceptEndpointGroup",
			Handler:    _ProjectsLocationsInterceptEndpointGroupsServer_CreateProjectsLocationsInterceptEndpointGroup_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsInterceptEndpointGroup",
			Handler:    _ProjectsLocationsInterceptEndpointGroupsServer_DeleteProjectsLocationsInterceptEndpointGroup_Handler,
		},
		{
			MethodName: "GetProjectsLocationsInterceptEndpointGroup",
			Handler:    _ProjectsLocationsInterceptEndpointGroupsServer_GetProjectsLocationsInterceptEndpointGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsInterceptEndpointGroups",
			Handler:    _ProjectsLocationsInterceptEndpointGroupsServer_ListProjectsLocationsInterceptEndpointGroups_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsInterceptEndpointGroup",
			Handler:    _ProjectsLocationsInterceptEndpointGroupsServer_PatchProjectsLocationsInterceptEndpointGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsMirroringDeploymentGroupsServerClient is the client API for ProjectsLocationsMirroringDeploymentGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsMirroringDeploymentGroupsServerClient interface {
	// Creates a deployment group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *CreateProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a deployment group. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *DeleteProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific deployment group. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *GetProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*MirroringDeploymentGroup, error)
	// Lists deployment groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringDeploymentGroups(ctx context.Context, in *ListProjectsLocationsMirroringDeploymentGroupsRequest, opts ...grpc.CallOption) (*ListMirroringDeploymentGroupsResponse, error)
	// Updates a deployment group. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *PatchProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsMirroringDeploymentGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsMirroringDeploymentGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsMirroringDeploymentGroupsServerClient {
	return &projectsLocationsMirroringDeploymentGroupsServerClient{cc}
}

func (c *projectsLocationsMirroringDeploymentGroupsServerClient) CreateProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *CreateProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/CreateProjectsLocationsMirroringDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentGroupsServerClient) DeleteProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *DeleteProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/DeleteProjectsLocationsMirroringDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentGroupsServerClient) GetProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *GetProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*MirroringDeploymentGroup, error) {
	out := new(MirroringDeploymentGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/GetProjectsLocationsMirroringDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentGroupsServerClient) ListProjectsLocationsMirroringDeploymentGroups(ctx context.Context, in *ListProjectsLocationsMirroringDeploymentGroupsRequest, opts ...grpc.CallOption) (*ListMirroringDeploymentGroupsResponse, error) {
	out := new(ListMirroringDeploymentGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/ListProjectsLocationsMirroringDeploymentGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentGroupsServerClient) PatchProjectsLocationsMirroringDeploymentGroup(ctx context.Context, in *PatchProjectsLocationsMirroringDeploymentGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/PatchProjectsLocationsMirroringDeploymentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsMirroringDeploymentGroupsServerServer is the server API for ProjectsLocationsMirroringDeploymentGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer
// for forward compatibility
type ProjectsLocationsMirroringDeploymentGroupsServerServer interface {
	// Creates a deployment group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringDeploymentGroup(context.Context, *CreateProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error)
	// Deletes a deployment group. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringDeploymentGroup(context.Context, *DeleteProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error)
	// Gets a specific deployment group. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringDeploymentGroup(context.Context, *GetProjectsLocationsMirroringDeploymentGroupRequest) (*MirroringDeploymentGroup, error)
	// Lists deployment groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringDeploymentGroups(context.Context, *ListProjectsLocationsMirroringDeploymentGroupsRequest) (*ListMirroringDeploymentGroupsResponse, error)
	// Updates a deployment group. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringDeploymentGroup(context.Context, *PatchProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer()
}

// UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) CreateProjectsLocationsMirroringDeploymentGroup(context.Context, *CreateProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsMirroringDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) DeleteProjectsLocationsMirroringDeploymentGroup(context.Context, *DeleteProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsMirroringDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) GetProjectsLocationsMirroringDeploymentGroup(context.Context, *GetProjectsLocationsMirroringDeploymentGroupRequest) (*MirroringDeploymentGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsMirroringDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) ListProjectsLocationsMirroringDeploymentGroups(context.Context, *ListProjectsLocationsMirroringDeploymentGroupsRequest) (*ListMirroringDeploymentGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsMirroringDeploymentGroups not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) PatchProjectsLocationsMirroringDeploymentGroup(context.Context, *PatchProjectsLocationsMirroringDeploymentGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsMirroringDeploymentGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer) mustEmbedUnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer() {
}

// UnsafeProjectsLocationsMirroringDeploymentGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsMirroringDeploymentGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsMirroringDeploymentGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsMirroringDeploymentGroupsServerServer()
}

func RegisterProjectsLocationsMirroringDeploymentGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsMirroringDeploymentGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsMirroringDeploymentGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsMirroringDeploymentGroupsServer_CreateProjectsLocationsMirroringDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsMirroringDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).CreateProjectsLocationsMirroringDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/CreateProjectsLocationsMirroringDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).CreateProjectsLocationsMirroringDeploymentGroup(ctx, req.(*CreateProjectsLocationsMirroringDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentGroupsServer_DeleteProjectsLocationsMirroringDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsMirroringDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).DeleteProjectsLocationsMirroringDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/DeleteProjectsLocationsMirroringDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).DeleteProjectsLocationsMirroringDeploymentGroup(ctx, req.(*DeleteProjectsLocationsMirroringDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentGroupsServer_GetProjectsLocationsMirroringDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsMirroringDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).GetProjectsLocationsMirroringDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/GetProjectsLocationsMirroringDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).GetProjectsLocationsMirroringDeploymentGroup(ctx, req.(*GetProjectsLocationsMirroringDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentGroupsServer_ListProjectsLocationsMirroringDeploymentGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsMirroringDeploymentGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).ListProjectsLocationsMirroringDeploymentGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/ListProjectsLocationsMirroringDeploymentGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).ListProjectsLocationsMirroringDeploymentGroups(ctx, req.(*ListProjectsLocationsMirroringDeploymentGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentGroupsServer_PatchProjectsLocationsMirroringDeploymentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsMirroringDeploymentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).PatchProjectsLocationsMirroringDeploymentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer/PatchProjectsLocationsMirroringDeploymentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentGroupsServerServer).PatchProjectsLocationsMirroringDeploymentGroup(ctx, req.(*PatchProjectsLocationsMirroringDeploymentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsMirroringDeploymentGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsMirroringDeploymentGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsMirroringDeploymentGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentGroupsServer",
	HandlerType: (*ProjectsLocationsMirroringDeploymentGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsMirroringDeploymentGroup",
			Handler:    _ProjectsLocationsMirroringDeploymentGroupsServer_CreateProjectsLocationsMirroringDeploymentGroup_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsMirroringDeploymentGroup",
			Handler:    _ProjectsLocationsMirroringDeploymentGroupsServer_DeleteProjectsLocationsMirroringDeploymentGroup_Handler,
		},
		{
			MethodName: "GetProjectsLocationsMirroringDeploymentGroup",
			Handler:    _ProjectsLocationsMirroringDeploymentGroupsServer_GetProjectsLocationsMirroringDeploymentGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsMirroringDeploymentGroups",
			Handler:    _ProjectsLocationsMirroringDeploymentGroupsServer_ListProjectsLocationsMirroringDeploymentGroups_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsMirroringDeploymentGroup",
			Handler:    _ProjectsLocationsMirroringDeploymentGroupsServer_PatchProjectsLocationsMirroringDeploymentGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsMirroringDeploymentsServerClient is the client API for ProjectsLocationsMirroringDeploymentsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsMirroringDeploymentsServerClient interface {
	// Creates a deployment in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringDeployment(ctx context.Context, in *CreateProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a deployment. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringDeployment(ctx context.Context, in *DeleteProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific deployment. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringDeployment(ctx context.Context, in *GetProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*MirroringDeployment, error)
	// Lists deployments in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringDeployments(ctx context.Context, in *ListProjectsLocationsMirroringDeploymentsRequest, opts ...grpc.CallOption) (*ListMirroringDeploymentsResponse, error)
	// Updates a deployment. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringDeployment(ctx context.Context, in *PatchProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsMirroringDeploymentsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsMirroringDeploymentsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsMirroringDeploymentsServerClient {
	return &projectsLocationsMirroringDeploymentsServerClient{cc}
}

func (c *projectsLocationsMirroringDeploymentsServerClient) CreateProjectsLocationsMirroringDeployment(ctx context.Context, in *CreateProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/CreateProjectsLocationsMirroringDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentsServerClient) DeleteProjectsLocationsMirroringDeployment(ctx context.Context, in *DeleteProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/DeleteProjectsLocationsMirroringDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentsServerClient) GetProjectsLocationsMirroringDeployment(ctx context.Context, in *GetProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*MirroringDeployment, error) {
	out := new(MirroringDeployment)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/GetProjectsLocationsMirroringDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentsServerClient) ListProjectsLocationsMirroringDeployments(ctx context.Context, in *ListProjectsLocationsMirroringDeploymentsRequest, opts ...grpc.CallOption) (*ListMirroringDeploymentsResponse, error) {
	out := new(ListMirroringDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/ListProjectsLocationsMirroringDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringDeploymentsServerClient) PatchProjectsLocationsMirroringDeployment(ctx context.Context, in *PatchProjectsLocationsMirroringDeploymentRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/PatchProjectsLocationsMirroringDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsMirroringDeploymentsServerServer is the server API for ProjectsLocationsMirroringDeploymentsServer service.
// All implementations must embed UnimplementedProjectsLocationsMirroringDeploymentsServerServer
// for forward compatibility
type ProjectsLocationsMirroringDeploymentsServerServer interface {
	// Creates a deployment in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringDeployment(context.Context, *CreateProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error)
	// Deletes a deployment. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringDeployment(context.Context, *DeleteProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error)
	// Gets a specific deployment. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringDeployment(context.Context, *GetProjectsLocationsMirroringDeploymentRequest) (*MirroringDeployment, error)
	// Lists deployments in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringDeployments(context.Context, *ListProjectsLocationsMirroringDeploymentsRequest) (*ListMirroringDeploymentsResponse, error)
	// Updates a deployment. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringDeployment(context.Context, *PatchProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsMirroringDeploymentsServerServer()
}

// UnimplementedProjectsLocationsMirroringDeploymentsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsMirroringDeploymentsServerServer struct {
}

func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) CreateProjectsLocationsMirroringDeployment(context.Context, *CreateProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsMirroringDeployment not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) DeleteProjectsLocationsMirroringDeployment(context.Context, *DeleteProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsMirroringDeployment not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) GetProjectsLocationsMirroringDeployment(context.Context, *GetProjectsLocationsMirroringDeploymentRequest) (*MirroringDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsMirroringDeployment not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) ListProjectsLocationsMirroringDeployments(context.Context, *ListProjectsLocationsMirroringDeploymentsRequest) (*ListMirroringDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsMirroringDeployments not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) PatchProjectsLocationsMirroringDeployment(context.Context, *PatchProjectsLocationsMirroringDeploymentRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsMirroringDeployment not implemented")
}
func (UnimplementedProjectsLocationsMirroringDeploymentsServerServer) mustEmbedUnimplementedProjectsLocationsMirroringDeploymentsServerServer() {
}

// UnsafeProjectsLocationsMirroringDeploymentsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsMirroringDeploymentsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsMirroringDeploymentsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsMirroringDeploymentsServerServer()
}

func RegisterProjectsLocationsMirroringDeploymentsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsMirroringDeploymentsServerServer) {
	s.RegisterService(&ProjectsLocationsMirroringDeploymentsServer_ServiceDesc, srv)
}

func _ProjectsLocationsMirroringDeploymentsServer_CreateProjectsLocationsMirroringDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsMirroringDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).CreateProjectsLocationsMirroringDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/CreateProjectsLocationsMirroringDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).CreateProjectsLocationsMirroringDeployment(ctx, req.(*CreateProjectsLocationsMirroringDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentsServer_DeleteProjectsLocationsMirroringDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsMirroringDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).DeleteProjectsLocationsMirroringDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/DeleteProjectsLocationsMirroringDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).DeleteProjectsLocationsMirroringDeployment(ctx, req.(*DeleteProjectsLocationsMirroringDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentsServer_GetProjectsLocationsMirroringDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsMirroringDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).GetProjectsLocationsMirroringDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/GetProjectsLocationsMirroringDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).GetProjectsLocationsMirroringDeployment(ctx, req.(*GetProjectsLocationsMirroringDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentsServer_ListProjectsLocationsMirroringDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsMirroringDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).ListProjectsLocationsMirroringDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/ListProjectsLocationsMirroringDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).ListProjectsLocationsMirroringDeployments(ctx, req.(*ListProjectsLocationsMirroringDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringDeploymentsServer_PatchProjectsLocationsMirroringDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsMirroringDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).PatchProjectsLocationsMirroringDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer/PatchProjectsLocationsMirroringDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringDeploymentsServerServer).PatchProjectsLocationsMirroringDeployment(ctx, req.(*PatchProjectsLocationsMirroringDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsMirroringDeploymentsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsMirroringDeploymentsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsMirroringDeploymentsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsMirroringDeploymentsServer",
	HandlerType: (*ProjectsLocationsMirroringDeploymentsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsMirroringDeployment",
			Handler:    _ProjectsLocationsMirroringDeploymentsServer_CreateProjectsLocationsMirroringDeployment_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsMirroringDeployment",
			Handler:    _ProjectsLocationsMirroringDeploymentsServer_DeleteProjectsLocationsMirroringDeployment_Handler,
		},
		{
			MethodName: "GetProjectsLocationsMirroringDeployment",
			Handler:    _ProjectsLocationsMirroringDeploymentsServer_GetProjectsLocationsMirroringDeployment_Handler,
		},
		{
			MethodName: "ListProjectsLocationsMirroringDeployments",
			Handler:    _ProjectsLocationsMirroringDeploymentsServer_ListProjectsLocationsMirroringDeployments_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsMirroringDeployment",
			Handler:    _ProjectsLocationsMirroringDeploymentsServer_PatchProjectsLocationsMirroringDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsMirroringEndpointGroupAssociationsServerClient is the client API for ProjectsLocationsMirroringEndpointGroupAssociationsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsMirroringEndpointGroupAssociationsServerClient interface {
	// Creates an association in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *CreateProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an association. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific association. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *GetProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*MirroringEndpointGroupAssociation, error)
	// Lists associations in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringEndpointGroupAssociations(ctx context.Context, in *ListProjectsLocationsMirroringEndpointGroupAssociationsRequest, opts ...grpc.CallOption) (*ListMirroringEndpointGroupAssociationsResponse, error)
	// Updates an association. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *PatchProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsMirroringEndpointGroupAssociationsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsMirroringEndpointGroupAssociationsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsMirroringEndpointGroupAssociationsServerClient {
	return &projectsLocationsMirroringEndpointGroupAssociationsServerClient{cc}
}

func (c *projectsLocationsMirroringEndpointGroupAssociationsServerClient) CreateProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *CreateProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/CreateProjectsLocationsMirroringEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupAssociationsServerClient) DeleteProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/DeleteProjectsLocationsMirroringEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupAssociationsServerClient) GetProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *GetProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*MirroringEndpointGroupAssociation, error) {
	out := new(MirroringEndpointGroupAssociation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/GetProjectsLocationsMirroringEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupAssociationsServerClient) ListProjectsLocationsMirroringEndpointGroupAssociations(ctx context.Context, in *ListProjectsLocationsMirroringEndpointGroupAssociationsRequest, opts ...grpc.CallOption) (*ListMirroringEndpointGroupAssociationsResponse, error) {
	out := new(ListMirroringEndpointGroupAssociationsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/ListProjectsLocationsMirroringEndpointGroupAssociations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupAssociationsServerClient) PatchProjectsLocationsMirroringEndpointGroupAssociation(ctx context.Context, in *PatchProjectsLocationsMirroringEndpointGroupAssociationRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/PatchProjectsLocationsMirroringEndpointGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsMirroringEndpointGroupAssociationsServerServer is the server API for ProjectsLocationsMirroringEndpointGroupAssociationsServer service.
// All implementations must embed UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer
// for forward compatibility
type ProjectsLocationsMirroringEndpointGroupAssociationsServerServer interface {
	// Creates an association in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *CreateProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	// Deletes an association. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	// Gets a specific association. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *GetProjectsLocationsMirroringEndpointGroupAssociationRequest) (*MirroringEndpointGroupAssociation, error)
	// Lists associations in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringEndpointGroupAssociations(context.Context, *ListProjectsLocationsMirroringEndpointGroupAssociationsRequest) (*ListMirroringEndpointGroupAssociationsResponse, error)
	// Updates an association. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *PatchProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer()
}

// UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer struct {
}

func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) CreateProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *CreateProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsMirroringEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) DeleteProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsMirroringEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) GetProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *GetProjectsLocationsMirroringEndpointGroupAssociationRequest) (*MirroringEndpointGroupAssociation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsMirroringEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) ListProjectsLocationsMirroringEndpointGroupAssociations(context.Context, *ListProjectsLocationsMirroringEndpointGroupAssociationsRequest) (*ListMirroringEndpointGroupAssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsMirroringEndpointGroupAssociations not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) PatchProjectsLocationsMirroringEndpointGroupAssociation(context.Context, *PatchProjectsLocationsMirroringEndpointGroupAssociationRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsMirroringEndpointGroupAssociation not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer) mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer() {
}

// UnsafeProjectsLocationsMirroringEndpointGroupAssociationsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsMirroringEndpointGroupAssociationsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsMirroringEndpointGroupAssociationsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupAssociationsServerServer()
}

func RegisterProjectsLocationsMirroringEndpointGroupAssociationsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsMirroringEndpointGroupAssociationsServerServer) {
	s.RegisterService(&ProjectsLocationsMirroringEndpointGroupAssociationsServer_ServiceDesc, srv)
}

func _ProjectsLocationsMirroringEndpointGroupAssociationsServer_CreateProjectsLocationsMirroringEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsMirroringEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).CreateProjectsLocationsMirroringEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/CreateProjectsLocationsMirroringEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).CreateProjectsLocationsMirroringEndpointGroupAssociation(ctx, req.(*CreateProjectsLocationsMirroringEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupAssociationsServer_DeleteProjectsLocationsMirroringEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).DeleteProjectsLocationsMirroringEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/DeleteProjectsLocationsMirroringEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).DeleteProjectsLocationsMirroringEndpointGroupAssociation(ctx, req.(*DeleteProjectsLocationsMirroringEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupAssociationsServer_GetProjectsLocationsMirroringEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsMirroringEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).GetProjectsLocationsMirroringEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/GetProjectsLocationsMirroringEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).GetProjectsLocationsMirroringEndpointGroupAssociation(ctx, req.(*GetProjectsLocationsMirroringEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupAssociationsServer_ListProjectsLocationsMirroringEndpointGroupAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsMirroringEndpointGroupAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).ListProjectsLocationsMirroringEndpointGroupAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/ListProjectsLocationsMirroringEndpointGroupAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).ListProjectsLocationsMirroringEndpointGroupAssociations(ctx, req.(*ListProjectsLocationsMirroringEndpointGroupAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupAssociationsServer_PatchProjectsLocationsMirroringEndpointGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsMirroringEndpointGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).PatchProjectsLocationsMirroringEndpointGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer/PatchProjectsLocationsMirroringEndpointGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupAssociationsServerServer).PatchProjectsLocationsMirroringEndpointGroupAssociation(ctx, req.(*PatchProjectsLocationsMirroringEndpointGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsMirroringEndpointGroupAssociationsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsMirroringEndpointGroupAssociationsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsMirroringEndpointGroupAssociationsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupAssociationsServer",
	HandlerType: (*ProjectsLocationsMirroringEndpointGroupAssociationsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsMirroringEndpointGroupAssociation",
			Handler:    _ProjectsLocationsMirroringEndpointGroupAssociationsServer_CreateProjectsLocationsMirroringEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsMirroringEndpointGroupAssociation",
			Handler:    _ProjectsLocationsMirroringEndpointGroupAssociationsServer_DeleteProjectsLocationsMirroringEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "GetProjectsLocationsMirroringEndpointGroupAssociation",
			Handler:    _ProjectsLocationsMirroringEndpointGroupAssociationsServer_GetProjectsLocationsMirroringEndpointGroupAssociation_Handler,
		},
		{
			MethodName: "ListProjectsLocationsMirroringEndpointGroupAssociations",
			Handler:    _ProjectsLocationsMirroringEndpointGroupAssociationsServer_ListProjectsLocationsMirroringEndpointGroupAssociations_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsMirroringEndpointGroupAssociation",
			Handler:    _ProjectsLocationsMirroringEndpointGroupAssociationsServer_PatchProjectsLocationsMirroringEndpointGroupAssociation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsMirroringEndpointGroupsServerClient is the client API for ProjectsLocationsMirroringEndpointGroupsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsMirroringEndpointGroupsServerClient interface {
	// Creates an endpoint group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *CreateProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes an endpoint group. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *DeleteProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets a specific endpoint group. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *GetProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*MirroringEndpointGroup, error)
	// Lists endpoint groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringEndpointGroups(ctx context.Context, in *ListProjectsLocationsMirroringEndpointGroupsRequest, opts ...grpc.CallOption) (*ListMirroringEndpointGroupsResponse, error)
	// Updates an endpoint group. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *PatchProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsMirroringEndpointGroupsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsMirroringEndpointGroupsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsMirroringEndpointGroupsServerClient {
	return &projectsLocationsMirroringEndpointGroupsServerClient{cc}
}

func (c *projectsLocationsMirroringEndpointGroupsServerClient) CreateProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *CreateProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/CreateProjectsLocationsMirroringEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupsServerClient) DeleteProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *DeleteProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/DeleteProjectsLocationsMirroringEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupsServerClient) GetProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *GetProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*MirroringEndpointGroup, error) {
	out := new(MirroringEndpointGroup)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/GetProjectsLocationsMirroringEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupsServerClient) ListProjectsLocationsMirroringEndpointGroups(ctx context.Context, in *ListProjectsLocationsMirroringEndpointGroupsRequest, opts ...grpc.CallOption) (*ListMirroringEndpointGroupsResponse, error) {
	out := new(ListMirroringEndpointGroupsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/ListProjectsLocationsMirroringEndpointGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsMirroringEndpointGroupsServerClient) PatchProjectsLocationsMirroringEndpointGroup(ctx context.Context, in *PatchProjectsLocationsMirroringEndpointGroupRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/PatchProjectsLocationsMirroringEndpointGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsMirroringEndpointGroupsServerServer is the server API for ProjectsLocationsMirroringEndpointGroupsServer service.
// All implementations must embed UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer
// for forward compatibility
type ProjectsLocationsMirroringEndpointGroupsServerServer interface {
	// Creates an endpoint group in a given project and location. See https://google.aip.dev/133.
	CreateProjectsLocationsMirroringEndpointGroup(context.Context, *CreateProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error)
	// Deletes an endpoint group. See https://google.aip.dev/135.
	DeleteProjectsLocationsMirroringEndpointGroup(context.Context, *DeleteProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error)
	// Gets a specific endpoint group. See https://google.aip.dev/131.
	GetProjectsLocationsMirroringEndpointGroup(context.Context, *GetProjectsLocationsMirroringEndpointGroupRequest) (*MirroringEndpointGroup, error)
	// Lists endpoint groups in a given project and location. See https://google.aip.dev/132.
	ListProjectsLocationsMirroringEndpointGroups(context.Context, *ListProjectsLocationsMirroringEndpointGroupsRequest) (*ListMirroringEndpointGroupsResponse, error)
	// Updates an endpoint group. See https://google.aip.dev/134.
	PatchProjectsLocationsMirroringEndpointGroup(context.Context, *PatchProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupsServerServer()
}

// UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer struct {
}

func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) CreateProjectsLocationsMirroringEndpointGroup(context.Context, *CreateProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsMirroringEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) DeleteProjectsLocationsMirroringEndpointGroup(context.Context, *DeleteProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsMirroringEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) GetProjectsLocationsMirroringEndpointGroup(context.Context, *GetProjectsLocationsMirroringEndpointGroupRequest) (*MirroringEndpointGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsMirroringEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) ListProjectsLocationsMirroringEndpointGroups(context.Context, *ListProjectsLocationsMirroringEndpointGroupsRequest) (*ListMirroringEndpointGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsMirroringEndpointGroups not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) PatchProjectsLocationsMirroringEndpointGroup(context.Context, *PatchProjectsLocationsMirroringEndpointGroupRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsMirroringEndpointGroup not implemented")
}
func (UnimplementedProjectsLocationsMirroringEndpointGroupsServerServer) mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupsServerServer() {
}

// UnsafeProjectsLocationsMirroringEndpointGroupsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsMirroringEndpointGroupsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsMirroringEndpointGroupsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsMirroringEndpointGroupsServerServer()
}

func RegisterProjectsLocationsMirroringEndpointGroupsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsMirroringEndpointGroupsServerServer) {
	s.RegisterService(&ProjectsLocationsMirroringEndpointGroupsServer_ServiceDesc, srv)
}

func _ProjectsLocationsMirroringEndpointGroupsServer_CreateProjectsLocationsMirroringEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsMirroringEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).CreateProjectsLocationsMirroringEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/CreateProjectsLocationsMirroringEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).CreateProjectsLocationsMirroringEndpointGroup(ctx, req.(*CreateProjectsLocationsMirroringEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupsServer_DeleteProjectsLocationsMirroringEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsMirroringEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).DeleteProjectsLocationsMirroringEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/DeleteProjectsLocationsMirroringEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).DeleteProjectsLocationsMirroringEndpointGroup(ctx, req.(*DeleteProjectsLocationsMirroringEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupsServer_GetProjectsLocationsMirroringEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsMirroringEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).GetProjectsLocationsMirroringEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/GetProjectsLocationsMirroringEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).GetProjectsLocationsMirroringEndpointGroup(ctx, req.(*GetProjectsLocationsMirroringEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupsServer_ListProjectsLocationsMirroringEndpointGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsMirroringEndpointGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).ListProjectsLocationsMirroringEndpointGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/ListProjectsLocationsMirroringEndpointGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).ListProjectsLocationsMirroringEndpointGroups(ctx, req.(*ListProjectsLocationsMirroringEndpointGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsMirroringEndpointGroupsServer_PatchProjectsLocationsMirroringEndpointGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsMirroringEndpointGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).PatchProjectsLocationsMirroringEndpointGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer/PatchProjectsLocationsMirroringEndpointGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsMirroringEndpointGroupsServerServer).PatchProjectsLocationsMirroringEndpointGroup(ctx, req.(*PatchProjectsLocationsMirroringEndpointGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsMirroringEndpointGroupsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsMirroringEndpointGroupsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsMirroringEndpointGroupsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsMirroringEndpointGroupsServer",
	HandlerType: (*ProjectsLocationsMirroringEndpointGroupsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsMirroringEndpointGroup",
			Handler:    _ProjectsLocationsMirroringEndpointGroupsServer_CreateProjectsLocationsMirroringEndpointGroup_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsMirroringEndpointGroup",
			Handler:    _ProjectsLocationsMirroringEndpointGroupsServer_DeleteProjectsLocationsMirroringEndpointGroup_Handler,
		},
		{
			MethodName: "GetProjectsLocationsMirroringEndpointGroup",
			Handler:    _ProjectsLocationsMirroringEndpointGroupsServer_GetProjectsLocationsMirroringEndpointGroup_Handler,
		},
		{
			MethodName: "ListProjectsLocationsMirroringEndpointGroups",
			Handler:    _ProjectsLocationsMirroringEndpointGroupsServer_ListProjectsLocationsMirroringEndpointGroups_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsMirroringEndpointGroup",
			Handler:    _ProjectsLocationsMirroringEndpointGroupsServer_PatchProjectsLocationsMirroringEndpointGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsServerTlsPoliciesServerClient is the client API for ProjectsLocationsServerTlsPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsServerTlsPoliciesServerClient interface {
	// Creates a new ServerTlsPolicy in a given project and location.
	CreateProjectsLocationsServerTlsPolicy(ctx context.Context, in *CreateProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single ServerTlsPolicy.
	DeleteProjectsLocationsServerTlsPolicy(ctx context.Context, in *DeleteProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single ServerTlsPolicy.
	GetProjectsLocationsServerTlsPolicy(ctx context.Context, in *GetProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*ServerTlsPolicy, error)
	// Lists ServerTlsPolicies in a given project and location.
	ListProjectsLocationsServerTlsPolicies(ctx context.Context, in *ListProjectsLocationsServerTlsPoliciesRequest, opts ...grpc.CallOption) (*ListServerTlsPoliciesResponse, error)
	// Updates the parameters of a single ServerTlsPolicy.
	PatchProjectsLocationsServerTlsPolicy(ctx context.Context, in *PatchProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsServerTlsPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsServerTlsPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsServerTlsPoliciesServerClient {
	return &projectsLocationsServerTlsPoliciesServerClient{cc}
}

func (c *projectsLocationsServerTlsPoliciesServerClient) CreateProjectsLocationsServerTlsPolicy(ctx context.Context, in *CreateProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/CreateProjectsLocationsServerTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerTlsPoliciesServerClient) DeleteProjectsLocationsServerTlsPolicy(ctx context.Context, in *DeleteProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/DeleteProjectsLocationsServerTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerTlsPoliciesServerClient) GetProjectsLocationsServerTlsPolicy(ctx context.Context, in *GetProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*ServerTlsPolicy, error) {
	out := new(ServerTlsPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/GetProjectsLocationsServerTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerTlsPoliciesServerClient) ListProjectsLocationsServerTlsPolicies(ctx context.Context, in *ListProjectsLocationsServerTlsPoliciesRequest, opts ...grpc.CallOption) (*ListServerTlsPoliciesResponse, error) {
	out := new(ListServerTlsPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/ListProjectsLocationsServerTlsPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsServerTlsPoliciesServerClient) PatchProjectsLocationsServerTlsPolicy(ctx context.Context, in *PatchProjectsLocationsServerTlsPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/PatchProjectsLocationsServerTlsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsServerTlsPoliciesServerServer is the server API for ProjectsLocationsServerTlsPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsServerTlsPoliciesServerServer
// for forward compatibility
type ProjectsLocationsServerTlsPoliciesServerServer interface {
	// Creates a new ServerTlsPolicy in a given project and location.
	CreateProjectsLocationsServerTlsPolicy(context.Context, *CreateProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single ServerTlsPolicy.
	DeleteProjectsLocationsServerTlsPolicy(context.Context, *DeleteProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single ServerTlsPolicy.
	GetProjectsLocationsServerTlsPolicy(context.Context, *GetProjectsLocationsServerTlsPolicyRequest) (*ServerTlsPolicy, error)
	// Lists ServerTlsPolicies in a given project and location.
	ListProjectsLocationsServerTlsPolicies(context.Context, *ListProjectsLocationsServerTlsPoliciesRequest) (*ListServerTlsPoliciesResponse, error)
	// Updates the parameters of a single ServerTlsPolicy.
	PatchProjectsLocationsServerTlsPolicy(context.Context, *PatchProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsServerTlsPoliciesServerServer()
}

// UnimplementedProjectsLocationsServerTlsPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsServerTlsPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) CreateProjectsLocationsServerTlsPolicy(context.Context, *CreateProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsServerTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) DeleteProjectsLocationsServerTlsPolicy(context.Context, *DeleteProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsServerTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) GetProjectsLocationsServerTlsPolicy(context.Context, *GetProjectsLocationsServerTlsPolicyRequest) (*ServerTlsPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsServerTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) ListProjectsLocationsServerTlsPolicies(context.Context, *ListProjectsLocationsServerTlsPoliciesRequest) (*ListServerTlsPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsServerTlsPolicies not implemented")
}
func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) PatchProjectsLocationsServerTlsPolicy(context.Context, *PatchProjectsLocationsServerTlsPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsServerTlsPolicy not implemented")
}
func (UnimplementedProjectsLocationsServerTlsPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsServerTlsPoliciesServerServer() {
}

// UnsafeProjectsLocationsServerTlsPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsServerTlsPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsServerTlsPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsServerTlsPoliciesServerServer()
}

func RegisterProjectsLocationsServerTlsPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsServerTlsPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsServerTlsPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsServerTlsPoliciesServer_CreateProjectsLocationsServerTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsServerTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).CreateProjectsLocationsServerTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/CreateProjectsLocationsServerTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).CreateProjectsLocationsServerTlsPolicy(ctx, req.(*CreateProjectsLocationsServerTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServerTlsPoliciesServer_DeleteProjectsLocationsServerTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsServerTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).DeleteProjectsLocationsServerTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/DeleteProjectsLocationsServerTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).DeleteProjectsLocationsServerTlsPolicy(ctx, req.(*DeleteProjectsLocationsServerTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServerTlsPoliciesServer_GetProjectsLocationsServerTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsServerTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).GetProjectsLocationsServerTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/GetProjectsLocationsServerTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).GetProjectsLocationsServerTlsPolicy(ctx, req.(*GetProjectsLocationsServerTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServerTlsPoliciesServer_ListProjectsLocationsServerTlsPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsServerTlsPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).ListProjectsLocationsServerTlsPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/ListProjectsLocationsServerTlsPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).ListProjectsLocationsServerTlsPolicies(ctx, req.(*ListProjectsLocationsServerTlsPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsServerTlsPoliciesServer_PatchProjectsLocationsServerTlsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsServerTlsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).PatchProjectsLocationsServerTlsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer/PatchProjectsLocationsServerTlsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsServerTlsPoliciesServerServer).PatchProjectsLocationsServerTlsPolicy(ctx, req.(*PatchProjectsLocationsServerTlsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsServerTlsPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsServerTlsPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsServerTlsPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsServerTlsPoliciesServer",
	HandlerType: (*ProjectsLocationsServerTlsPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsServerTlsPolicy",
			Handler:    _ProjectsLocationsServerTlsPoliciesServer_CreateProjectsLocationsServerTlsPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsServerTlsPolicy",
			Handler:    _ProjectsLocationsServerTlsPoliciesServer_DeleteProjectsLocationsServerTlsPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsServerTlsPolicy",
			Handler:    _ProjectsLocationsServerTlsPoliciesServer_GetProjectsLocationsServerTlsPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsServerTlsPolicies",
			Handler:    _ProjectsLocationsServerTlsPoliciesServer_ListProjectsLocationsServerTlsPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsServerTlsPolicy",
			Handler:    _ProjectsLocationsServerTlsPoliciesServer_PatchProjectsLocationsServerTlsPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsTlsInspectionPoliciesServerClient is the client API for ProjectsLocationsTlsInspectionPoliciesServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsTlsInspectionPoliciesServerClient interface {
	// Creates a new TlsInspectionPolicy in a given project and location.
	CreateProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *CreateProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single TlsInspectionPolicy.
	DeleteProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *DeleteProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single TlsInspectionPolicy.
	GetProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *GetProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*TlsInspectionPolicy, error)
	// Lists TlsInspectionPolicies in a given project and location.
	ListProjectsLocationsTlsInspectionPolicies(ctx context.Context, in *ListProjectsLocationsTlsInspectionPoliciesRequest, opts ...grpc.CallOption) (*ListTlsInspectionPoliciesResponse, error)
	// Updates the parameters of a single TlsInspectionPolicy.
	PatchProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *PatchProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsTlsInspectionPoliciesServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsTlsInspectionPoliciesServerClient(cc grpc.ClientConnInterface) ProjectsLocationsTlsInspectionPoliciesServerClient {
	return &projectsLocationsTlsInspectionPoliciesServerClient{cc}
}

func (c *projectsLocationsTlsInspectionPoliciesServerClient) CreateProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *CreateProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/CreateProjectsLocationsTlsInspectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsTlsInspectionPoliciesServerClient) DeleteProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *DeleteProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/DeleteProjectsLocationsTlsInspectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsTlsInspectionPoliciesServerClient) GetProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *GetProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*TlsInspectionPolicy, error) {
	out := new(TlsInspectionPolicy)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/GetProjectsLocationsTlsInspectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsTlsInspectionPoliciesServerClient) ListProjectsLocationsTlsInspectionPolicies(ctx context.Context, in *ListProjectsLocationsTlsInspectionPoliciesRequest, opts ...grpc.CallOption) (*ListTlsInspectionPoliciesResponse, error) {
	out := new(ListTlsInspectionPoliciesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/ListProjectsLocationsTlsInspectionPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsTlsInspectionPoliciesServerClient) PatchProjectsLocationsTlsInspectionPolicy(ctx context.Context, in *PatchProjectsLocationsTlsInspectionPolicyRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/PatchProjectsLocationsTlsInspectionPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsTlsInspectionPoliciesServerServer is the server API for ProjectsLocationsTlsInspectionPoliciesServer service.
// All implementations must embed UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer
// for forward compatibility
type ProjectsLocationsTlsInspectionPoliciesServerServer interface {
	// Creates a new TlsInspectionPolicy in a given project and location.
	CreateProjectsLocationsTlsInspectionPolicy(context.Context, *CreateProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error)
	// Deletes a single TlsInspectionPolicy.
	DeleteProjectsLocationsTlsInspectionPolicy(context.Context, *DeleteProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error)
	// Gets details of a single TlsInspectionPolicy.
	GetProjectsLocationsTlsInspectionPolicy(context.Context, *GetProjectsLocationsTlsInspectionPolicyRequest) (*TlsInspectionPolicy, error)
	// Lists TlsInspectionPolicies in a given project and location.
	ListProjectsLocationsTlsInspectionPolicies(context.Context, *ListProjectsLocationsTlsInspectionPoliciesRequest) (*ListTlsInspectionPoliciesResponse, error)
	// Updates the parameters of a single TlsInspectionPolicy.
	PatchProjectsLocationsTlsInspectionPolicy(context.Context, *PatchProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsTlsInspectionPoliciesServerServer()
}

// UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer struct {
}

func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) CreateProjectsLocationsTlsInspectionPolicy(context.Context, *CreateProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsTlsInspectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) DeleteProjectsLocationsTlsInspectionPolicy(context.Context, *DeleteProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsTlsInspectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) GetProjectsLocationsTlsInspectionPolicy(context.Context, *GetProjectsLocationsTlsInspectionPolicyRequest) (*TlsInspectionPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsTlsInspectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) ListProjectsLocationsTlsInspectionPolicies(context.Context, *ListProjectsLocationsTlsInspectionPoliciesRequest) (*ListTlsInspectionPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsTlsInspectionPolicies not implemented")
}
func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) PatchProjectsLocationsTlsInspectionPolicy(context.Context, *PatchProjectsLocationsTlsInspectionPolicyRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsTlsInspectionPolicy not implemented")
}
func (UnimplementedProjectsLocationsTlsInspectionPoliciesServerServer) mustEmbedUnimplementedProjectsLocationsTlsInspectionPoliciesServerServer() {
}

// UnsafeProjectsLocationsTlsInspectionPoliciesServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsTlsInspectionPoliciesServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsTlsInspectionPoliciesServerServer interface {
	mustEmbedUnimplementedProjectsLocationsTlsInspectionPoliciesServerServer()
}

func RegisterProjectsLocationsTlsInspectionPoliciesServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsTlsInspectionPoliciesServerServer) {
	s.RegisterService(&ProjectsLocationsTlsInspectionPoliciesServer_ServiceDesc, srv)
}

func _ProjectsLocationsTlsInspectionPoliciesServer_CreateProjectsLocationsTlsInspectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsTlsInspectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).CreateProjectsLocationsTlsInspectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/CreateProjectsLocationsTlsInspectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).CreateProjectsLocationsTlsInspectionPolicy(ctx, req.(*CreateProjectsLocationsTlsInspectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsTlsInspectionPoliciesServer_DeleteProjectsLocationsTlsInspectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsTlsInspectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).DeleteProjectsLocationsTlsInspectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/DeleteProjectsLocationsTlsInspectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).DeleteProjectsLocationsTlsInspectionPolicy(ctx, req.(*DeleteProjectsLocationsTlsInspectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsTlsInspectionPoliciesServer_GetProjectsLocationsTlsInspectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsTlsInspectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).GetProjectsLocationsTlsInspectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/GetProjectsLocationsTlsInspectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).GetProjectsLocationsTlsInspectionPolicy(ctx, req.(*GetProjectsLocationsTlsInspectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsTlsInspectionPoliciesServer_ListProjectsLocationsTlsInspectionPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsTlsInspectionPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).ListProjectsLocationsTlsInspectionPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/ListProjectsLocationsTlsInspectionPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).ListProjectsLocationsTlsInspectionPolicies(ctx, req.(*ListProjectsLocationsTlsInspectionPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsTlsInspectionPoliciesServer_PatchProjectsLocationsTlsInspectionPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsTlsInspectionPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).PatchProjectsLocationsTlsInspectionPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer/PatchProjectsLocationsTlsInspectionPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsTlsInspectionPoliciesServerServer).PatchProjectsLocationsTlsInspectionPolicy(ctx, req.(*PatchProjectsLocationsTlsInspectionPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsTlsInspectionPoliciesServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsTlsInspectionPoliciesServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsTlsInspectionPoliciesServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsTlsInspectionPoliciesServer",
	HandlerType: (*ProjectsLocationsTlsInspectionPoliciesServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsTlsInspectionPolicy",
			Handler:    _ProjectsLocationsTlsInspectionPoliciesServer_CreateProjectsLocationsTlsInspectionPolicy_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsTlsInspectionPolicy",
			Handler:    _ProjectsLocationsTlsInspectionPoliciesServer_DeleteProjectsLocationsTlsInspectionPolicy_Handler,
		},
		{
			MethodName: "GetProjectsLocationsTlsInspectionPolicy",
			Handler:    _ProjectsLocationsTlsInspectionPoliciesServer_GetProjectsLocationsTlsInspectionPolicy_Handler,
		},
		{
			MethodName: "ListProjectsLocationsTlsInspectionPolicies",
			Handler:    _ProjectsLocationsTlsInspectionPoliciesServer_ListProjectsLocationsTlsInspectionPolicies_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsTlsInspectionPolicy",
			Handler:    _ProjectsLocationsTlsInspectionPoliciesServer_PatchProjectsLocationsTlsInspectionPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}

// ProjectsLocationsUrlListsServerClient is the client API for ProjectsLocationsUrlListsServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsLocationsUrlListsServerClient interface {
	// Creates a new UrlList in a given project and location.
	CreateProjectsLocationsUrlList(ctx context.Context, in *CreateProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single UrlList.
	DeleteProjectsLocationsUrlList(ctx context.Context, in *DeleteProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Gets details of a single UrlList.
	GetProjectsLocationsUrlList(ctx context.Context, in *GetProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*UrlList, error)
	// Lists UrlLists in a given project and location.
	ListProjectsLocationsUrlLists(ctx context.Context, in *ListProjectsLocationsUrlListsRequest, opts ...grpc.CallOption) (*ListUrlListsResponse, error)
	// Updates the parameters of a single UrlList.
	PatchProjectsLocationsUrlList(ctx context.Context, in *PatchProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type projectsLocationsUrlListsServerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsLocationsUrlListsServerClient(cc grpc.ClientConnInterface) ProjectsLocationsUrlListsServerClient {
	return &projectsLocationsUrlListsServerClient{cc}
}

func (c *projectsLocationsUrlListsServerClient) CreateProjectsLocationsUrlList(ctx context.Context, in *CreateProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/CreateProjectsLocationsUrlList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsUrlListsServerClient) DeleteProjectsLocationsUrlList(ctx context.Context, in *DeleteProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/DeleteProjectsLocationsUrlList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsUrlListsServerClient) GetProjectsLocationsUrlList(ctx context.Context, in *GetProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*UrlList, error) {
	out := new(UrlList)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/GetProjectsLocationsUrlList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsUrlListsServerClient) ListProjectsLocationsUrlLists(ctx context.Context, in *ListProjectsLocationsUrlListsRequest, opts ...grpc.CallOption) (*ListUrlListsResponse, error) {
	out := new(ListUrlListsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/ListProjectsLocationsUrlLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsLocationsUrlListsServerClient) PatchProjectsLocationsUrlList(ctx context.Context, in *PatchProjectsLocationsUrlListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/PatchProjectsLocationsUrlList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsLocationsUrlListsServerServer is the server API for ProjectsLocationsUrlListsServer service.
// All implementations must embed UnimplementedProjectsLocationsUrlListsServerServer
// for forward compatibility
type ProjectsLocationsUrlListsServerServer interface {
	// Creates a new UrlList in a given project and location.
	CreateProjectsLocationsUrlList(context.Context, *CreateProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error)
	// Deletes a single UrlList.
	DeleteProjectsLocationsUrlList(context.Context, *DeleteProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error)
	// Gets details of a single UrlList.
	GetProjectsLocationsUrlList(context.Context, *GetProjectsLocationsUrlListRequest) (*UrlList, error)
	// Lists UrlLists in a given project and location.
	ListProjectsLocationsUrlLists(context.Context, *ListProjectsLocationsUrlListsRequest) (*ListUrlListsResponse, error)
	// Updates the parameters of a single UrlList.
	PatchProjectsLocationsUrlList(context.Context, *PatchProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error)
	mustEmbedUnimplementedProjectsLocationsUrlListsServerServer()
}

// UnimplementedProjectsLocationsUrlListsServerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsLocationsUrlListsServerServer struct {
}

func (UnimplementedProjectsLocationsUrlListsServerServer) CreateProjectsLocationsUrlList(context.Context, *CreateProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectsLocationsUrlList not implemented")
}
func (UnimplementedProjectsLocationsUrlListsServerServer) DeleteProjectsLocationsUrlList(context.Context, *DeleteProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectsLocationsUrlList not implemented")
}
func (UnimplementedProjectsLocationsUrlListsServerServer) GetProjectsLocationsUrlList(context.Context, *GetProjectsLocationsUrlListRequest) (*UrlList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsLocationsUrlList not implemented")
}
func (UnimplementedProjectsLocationsUrlListsServerServer) ListProjectsLocationsUrlLists(context.Context, *ListProjectsLocationsUrlListsRequest) (*ListUrlListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectsLocationsUrlLists not implemented")
}
func (UnimplementedProjectsLocationsUrlListsServerServer) PatchProjectsLocationsUrlList(context.Context, *PatchProjectsLocationsUrlListRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectsLocationsUrlList not implemented")
}
func (UnimplementedProjectsLocationsUrlListsServerServer) mustEmbedUnimplementedProjectsLocationsUrlListsServerServer() {
}

// UnsafeProjectsLocationsUrlListsServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsLocationsUrlListsServerServer will
// result in compilation errors.
type UnsafeProjectsLocationsUrlListsServerServer interface {
	mustEmbedUnimplementedProjectsLocationsUrlListsServerServer()
}

func RegisterProjectsLocationsUrlListsServerServer(s grpc.ServiceRegistrar, srv ProjectsLocationsUrlListsServerServer) {
	s.RegisterService(&ProjectsLocationsUrlListsServer_ServiceDesc, srv)
}

func _ProjectsLocationsUrlListsServer_CreateProjectsLocationsUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectsLocationsUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsUrlListsServerServer).CreateProjectsLocationsUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/CreateProjectsLocationsUrlList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsUrlListsServerServer).CreateProjectsLocationsUrlList(ctx, req.(*CreateProjectsLocationsUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsUrlListsServer_DeleteProjectsLocationsUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsLocationsUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsUrlListsServerServer).DeleteProjectsLocationsUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/DeleteProjectsLocationsUrlList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsUrlListsServerServer).DeleteProjectsLocationsUrlList(ctx, req.(*DeleteProjectsLocationsUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsUrlListsServer_GetProjectsLocationsUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsLocationsUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsUrlListsServerServer).GetProjectsLocationsUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/GetProjectsLocationsUrlList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsUrlListsServerServer).GetProjectsLocationsUrlList(ctx, req.(*GetProjectsLocationsUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsUrlListsServer_ListProjectsLocationsUrlLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsLocationsUrlListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsUrlListsServerServer).ListProjectsLocationsUrlLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/ListProjectsLocationsUrlLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsUrlListsServerServer).ListProjectsLocationsUrlLists(ctx, req.(*ListProjectsLocationsUrlListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsLocationsUrlListsServer_PatchProjectsLocationsUrlList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectsLocationsUrlListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsLocationsUrlListsServerServer).PatchProjectsLocationsUrlList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer/PatchProjectsLocationsUrlList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsLocationsUrlListsServerServer).PatchProjectsLocationsUrlList(ctx, req.(*PatchProjectsLocationsUrlListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectsLocationsUrlListsServer_ServiceDesc is the grpc.ServiceDesc for ProjectsLocationsUrlListsServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectsLocationsUrlListsServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.networksecurity.v1.ProjectsLocationsUrlListsServer",
	HandlerType: (*ProjectsLocationsUrlListsServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjectsLocationsUrlList",
			Handler:    _ProjectsLocationsUrlListsServer_CreateProjectsLocationsUrlList_Handler,
		},
		{
			MethodName: "DeleteProjectsLocationsUrlList",
			Handler:    _ProjectsLocationsUrlListsServer_DeleteProjectsLocationsUrlList_Handler,
		},
		{
			MethodName: "GetProjectsLocationsUrlList",
			Handler:    _ProjectsLocationsUrlListsServer_GetProjectsLocationsUrlList_Handler,
		},
		{
			MethodName: "ListProjectsLocationsUrlLists",
			Handler:    _ProjectsLocationsUrlListsServer_ListProjectsLocationsUrlLists_Handler,
		},
		{
			MethodName: "PatchProjectsLocationsUrlList",
			Handler:    _ProjectsLocationsUrlListsServer_PatchProjectsLocationsUrlList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mockgcp/cloud/networksecurity/v1/service.proto",
}
