// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: mockgcp/cloud/tpu/v2/cloud_tpu.proto

package tpupb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	interval "google.golang.org/genproto/googleapis/type/interval"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The different mode of the attached disk.
type AttachedDisk_DiskMode int32

const (
	// The disk mode is not known/set.
	AttachedDisk_DISK_MODE_UNSPECIFIED AttachedDisk_DiskMode = 0
	// Attaches the disk in read-write mode. Only one TPU node can attach a disk
	// in read-write mode at a time.
	AttachedDisk_READ_WRITE AttachedDisk_DiskMode = 1
	// Attaches the disk in read-only mode. Multiple TPU nodes can attach
	// a disk in read-only mode at a time.
	AttachedDisk_READ_ONLY AttachedDisk_DiskMode = 2
)

// Enum value maps for AttachedDisk_DiskMode.
var (
	AttachedDisk_DiskMode_name = map[int32]string{
		0: "DISK_MODE_UNSPECIFIED",
		1: "READ_WRITE",
		2: "READ_ONLY",
	}
	AttachedDisk_DiskMode_value = map[string]int32{
		"DISK_MODE_UNSPECIFIED": 0,
		"READ_WRITE":            1,
		"READ_ONLY":             2,
	}
)

func (x AttachedDisk_DiskMode) Enum() *AttachedDisk_DiskMode {
	p := new(AttachedDisk_DiskMode)
	*p = x
	return p
}

func (x AttachedDisk_DiskMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachedDisk_DiskMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[0].Descriptor()
}

func (AttachedDisk_DiskMode) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[0]
}

func (x AttachedDisk_DiskMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachedDisk_DiskMode.Descriptor instead.
func (AttachedDisk_DiskMode) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{3, 0}
}

// Represents the different states of a TPU node during its lifecycle.
type Node_State int32

const (
	// TPU node state is not known/set.
	Node_STATE_UNSPECIFIED Node_State = 0
	// TPU node is being created.
	Node_CREATING Node_State = 1
	// TPU node has been created.
	Node_READY Node_State = 2
	// TPU node is restarting.
	Node_RESTARTING Node_State = 3
	// TPU node is undergoing reimaging.
	Node_REIMAGING Node_State = 4
	// TPU node is being deleted.
	Node_DELETING Node_State = 5
	// TPU node is being repaired and may be unusable. Details can be
	// found in the 'help_description' field.
	Node_REPAIRING Node_State = 6
	// TPU node is stopped.
	Node_STOPPED Node_State = 8
	// TPU node is currently stopping.
	Node_STOPPING Node_State = 9
	// TPU node is currently starting.
	Node_STARTING Node_State = 10
	// TPU node has been preempted. Only applies to Preemptible TPU Nodes.
	Node_PREEMPTED Node_State = 11
	// TPU node has been terminated due to maintenance or has reached the end of
	// its life cycle (for preemptible nodes).
	Node_TERMINATED Node_State = 12
	// TPU node is currently hiding.
	Node_HIDING Node_State = 13
	// TPU node has been hidden.
	Node_HIDDEN Node_State = 14
	// TPU node is currently unhiding.
	Node_UNHIDING Node_State = 15
	// TPU node has unknown state after a failed repair.
	Node_UNKNOWN Node_State = 16
)

// Enum value maps for Node_State.
var (
	Node_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "CREATING",
		2:  "READY",
		3:  "RESTARTING",
		4:  "REIMAGING",
		5:  "DELETING",
		6:  "REPAIRING",
		8:  "STOPPED",
		9:  "STOPPING",
		10: "STARTING",
		11: "PREEMPTED",
		12: "TERMINATED",
		13: "HIDING",
		14: "HIDDEN",
		15: "UNHIDING",
		16: "UNKNOWN",
	}
	Node_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"READY":             2,
		"RESTARTING":        3,
		"REIMAGING":         4,
		"DELETING":          5,
		"REPAIRING":         6,
		"STOPPED":           8,
		"STOPPING":          9,
		"STARTING":          10,
		"PREEMPTED":         11,
		"TERMINATED":        12,
		"HIDING":            13,
		"HIDDEN":            14,
		"UNHIDING":          15,
		"UNKNOWN":           16,
	}
)

func (x Node_State) Enum() *Node_State {
	p := new(Node_State)
	*p = x
	return p
}

func (x Node_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_State) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[1].Descriptor()
}

func (Node_State) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[1]
}

func (x Node_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_State.Descriptor instead.
func (Node_State) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{9, 0}
}

// Health defines the status of a TPU node as reported by
// Health Monitor.
type Node_Health int32

const (
	// Health status is unknown: not initialized or failed to retrieve.
	Node_HEALTH_UNSPECIFIED Node_Health = 0
	// The resource is healthy.
	Node_HEALTHY Node_Health = 1
	// The resource is unresponsive.
	Node_TIMEOUT Node_Health = 3
	// The in-guest ML stack is unhealthy.
	Node_UNHEALTHY_TENSORFLOW Node_Health = 4
	// The node is under maintenance/priority boost caused rescheduling and
	// will resume running once rescheduled.
	Node_UNHEALTHY_MAINTENANCE Node_Health = 5
)

// Enum value maps for Node_Health.
var (
	Node_Health_name = map[int32]string{
		0: "HEALTH_UNSPECIFIED",
		1: "HEALTHY",
		3: "TIMEOUT",
		4: "UNHEALTHY_TENSORFLOW",
		5: "UNHEALTHY_MAINTENANCE",
	}
	Node_Health_value = map[string]int32{
		"HEALTH_UNSPECIFIED":    0,
		"HEALTHY":               1,
		"TIMEOUT":               3,
		"UNHEALTHY_TENSORFLOW":  4,
		"UNHEALTHY_MAINTENANCE": 5,
	}
)

func (x Node_Health) Enum() *Node_Health {
	p := new(Node_Health)
	*p = x
	return p
}

func (x Node_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[2].Descriptor()
}

func (Node_Health) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[2]
}

func (x Node_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Health.Descriptor instead.
func (Node_Health) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{9, 1}
}

// TPU API Version.
type Node_ApiVersion int32

const (
	// API version is unknown.
	Node_API_VERSION_UNSPECIFIED Node_ApiVersion = 0
	// TPU API V1Alpha1 version.
	Node_V1_ALPHA1 Node_ApiVersion = 1
	// TPU API V1 version.
	Node_V1 Node_ApiVersion = 2
	// TPU API V2Alpha1 version.
	Node_V2_ALPHA1 Node_ApiVersion = 3
	// TPU API V2 version.
	Node_V2 Node_ApiVersion = 4
)

// Enum value maps for Node_ApiVersion.
var (
	Node_ApiVersion_name = map[int32]string{
		0: "API_VERSION_UNSPECIFIED",
		1: "V1_ALPHA1",
		2: "V1",
		3: "V2_ALPHA1",
		4: "V2",
	}
	Node_ApiVersion_value = map[string]int32{
		"API_VERSION_UNSPECIFIED": 0,
		"V1_ALPHA1":               1,
		"V1":                      2,
		"V2_ALPHA1":               3,
		"V2":                      4,
	}
)

func (x Node_ApiVersion) Enum() *Node_ApiVersion {
	p := new(Node_ApiVersion)
	*p = x
	return p
}

func (x Node_ApiVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_ApiVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[3].Descriptor()
}

func (Node_ApiVersion) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[3]
}

func (x Node_ApiVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_ApiVersion.Descriptor instead.
func (Node_ApiVersion) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{9, 2}
}

// Output only state of the request
type QueuedResourceState_State int32

const (
	// State of the QueuedResource request is not known/set.
	QueuedResourceState_STATE_UNSPECIFIED QueuedResourceState_State = 0
	// The QueuedResource request has been received. We're still working on
	// determining if we will be able to honor this request.
	QueuedResourceState_CREATING QueuedResourceState_State = 1
	// The QueuedResource request has passed initial validation/admission
	// control and has been persisted in the queue.
	QueuedResourceState_ACCEPTED QueuedResourceState_State = 2
	// The QueuedResource request has been selected. The
	// associated resources are currently being provisioned (or very soon
	// will begin provisioning).
	QueuedResourceState_PROVISIONING QueuedResourceState_State = 3
	// The request could not be completed. This may be due to some
	// late-discovered problem with the request itself, or due to
	// unavailability of resources within the constraints of the request
	// (e.g., the 'valid until' start timing constraint expired).
	QueuedResourceState_FAILED QueuedResourceState_State = 4
	// The QueuedResource is being deleted.
	QueuedResourceState_DELETING QueuedResourceState_State = 5
	// The resources specified in the QueuedResource request have been
	// provisioned and are ready for use by the end-user/consumer.
	QueuedResourceState_ACTIVE QueuedResourceState_State = 6
	// The resources specified in the QueuedResource request are being
	// deleted. This may have been initiated by the user, or
	// the Cloud TPU service. Inspect the state data for more details.
	QueuedResourceState_SUSPENDING QueuedResourceState_State = 7
	// The resources specified in the QueuedResource request have been
	// deleted.
	QueuedResourceState_SUSPENDED QueuedResourceState_State = 8
	// The QueuedResource request has passed initial validation and has been
	// persisted in the queue. It will remain in this state until there are
	// sufficient free resources to begin provisioning your request. Wait times
	// will vary significantly depending on demand levels. When demand is high,
	// not all requests can be immediately provisioned. If you
	// need more reliable obtainability of TPUs consider purchasing a
	// reservation. To put a limit on how long you are willing to wait, use
	// [timing
	// constraints](https://cloud.google.com/tpu/docs/queued-resources#request_a_queued_resource_before_a_specified_time).
	QueuedResourceState_WAITING_FOR_RESOURCES QueuedResourceState_State = 9
)

// Enum value maps for QueuedResourceState_State.
var (
	QueuedResourceState_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACCEPTED",
		3: "PROVISIONING",
		4: "FAILED",
		5: "DELETING",
		6: "ACTIVE",
		7: "SUSPENDING",
		8: "SUSPENDED",
		9: "WAITING_FOR_RESOURCES",
	}
	QueuedResourceState_State_value = map[string]int32{
		"STATE_UNSPECIFIED":     0,
		"CREATING":              1,
		"ACCEPTED":              2,
		"PROVISIONING":          3,
		"FAILED":                4,
		"DELETING":              5,
		"ACTIVE":                6,
		"SUSPENDING":            7,
		"SUSPENDED":             8,
		"WAITING_FOR_RESOURCES": 9,
	}
)

func (x QueuedResourceState_State) Enum() *QueuedResourceState_State {
	p := new(QueuedResourceState_State)
	*p = x
	return p
}

func (x QueuedResourceState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueuedResourceState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[4].Descriptor()
}

func (QueuedResourceState_State) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[4]
}

func (x QueuedResourceState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueuedResourceState_State.Descriptor instead.
func (QueuedResourceState_State) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 0}
}

// The initiator of the QueuedResource's SUSPENDING/SUSPENDED state.
type QueuedResourceState_StateInitiator int32

const (
	// The state initiator is unspecified.
	QueuedResourceState_STATE_INITIATOR_UNSPECIFIED QueuedResourceState_StateInitiator = 0
	// The current QueuedResource state was initiated by the user.
	QueuedResourceState_USER QueuedResourceState_StateInitiator = 1
	// The current QueuedResource state was initiated by the service.
	QueuedResourceState_SERVICE QueuedResourceState_StateInitiator = 2
)

// Enum value maps for QueuedResourceState_StateInitiator.
var (
	QueuedResourceState_StateInitiator_name = map[int32]string{
		0: "STATE_INITIATOR_UNSPECIFIED",
		1: "USER",
		2: "SERVICE",
	}
	QueuedResourceState_StateInitiator_value = map[string]int32{
		"STATE_INITIATOR_UNSPECIFIED": 0,
		"USER":                        1,
		"SERVICE":                     2,
	}
)

func (x QueuedResourceState_StateInitiator) Enum() *QueuedResourceState_StateInitiator {
	p := new(QueuedResourceState_StateInitiator)
	*p = x
	return p
}

func (x QueuedResourceState_StateInitiator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueuedResourceState_StateInitiator) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[5].Descriptor()
}

func (QueuedResourceState_StateInitiator) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[5]
}

func (x QueuedResourceState_StateInitiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueuedResourceState_StateInitiator.Descriptor instead.
func (QueuedResourceState_StateInitiator) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 1}
}

// SymptomType represents the different types of Symptoms that a TPU can be
// at.
type Symptom_SymptomType int32

const (
	// Unspecified symptom.
	Symptom_SYMPTOM_TYPE_UNSPECIFIED Symptom_SymptomType = 0
	// TPU VM memory is low.
	Symptom_LOW_MEMORY Symptom_SymptomType = 1
	// TPU runtime is out of memory.
	Symptom_OUT_OF_MEMORY Symptom_SymptomType = 2
	// TPU runtime execution has timed out.
	Symptom_EXECUTE_TIMED_OUT Symptom_SymptomType = 3
	// TPU runtime fails to construct a mesh that recognizes each TPU device's
	// neighbors.
	Symptom_MESH_BUILD_FAIL Symptom_SymptomType = 4
	// TPU HBM is out of memory.
	Symptom_HBM_OUT_OF_MEMORY Symptom_SymptomType = 5
	// Abusive behaviors have been identified on the current project.
	Symptom_PROJECT_ABUSE Symptom_SymptomType = 6
)

// Enum value maps for Symptom_SymptomType.
var (
	Symptom_SymptomType_name = map[int32]string{
		0: "SYMPTOM_TYPE_UNSPECIFIED",
		1: "LOW_MEMORY",
		2: "OUT_OF_MEMORY",
		3: "EXECUTE_TIMED_OUT",
		4: "MESH_BUILD_FAIL",
		5: "HBM_OUT_OF_MEMORY",
		6: "PROJECT_ABUSE",
	}
	Symptom_SymptomType_value = map[string]int32{
		"SYMPTOM_TYPE_UNSPECIFIED": 0,
		"LOW_MEMORY":               1,
		"OUT_OF_MEMORY":            2,
		"EXECUTE_TIMED_OUT":        3,
		"MESH_BUILD_FAIL":          4,
		"HBM_OUT_OF_MEMORY":        5,
		"PROJECT_ABUSE":            6,
	}
)

func (x Symptom_SymptomType) Enum() *Symptom_SymptomType {
	p := new(Symptom_SymptomType)
	*p = x
	return p
}

func (x Symptom_SymptomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Symptom_SymptomType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[6].Descriptor()
}

func (Symptom_SymptomType) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[6]
}

func (x Symptom_SymptomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Symptom_SymptomType.Descriptor instead.
func (Symptom_SymptomType) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{38, 0}
}

// TPU type.
type AcceleratorConfig_Type int32

const (
	// Unspecified version.
	AcceleratorConfig_TYPE_UNSPECIFIED AcceleratorConfig_Type = 0
	// TPU v2.
	AcceleratorConfig_V2 AcceleratorConfig_Type = 2
	// TPU v3.
	AcceleratorConfig_V3 AcceleratorConfig_Type = 4
	// TPU v4.
	AcceleratorConfig_V4 AcceleratorConfig_Type = 7
	// TPU v5lite pod.
	AcceleratorConfig_V5LITE_POD AcceleratorConfig_Type = 9
	// TPU v5p.
	AcceleratorConfig_V5P AcceleratorConfig_Type = 10
	// TPU v6e.
	AcceleratorConfig_V6E AcceleratorConfig_Type = 11
)

// Enum value maps for AcceleratorConfig_Type.
var (
	AcceleratorConfig_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		2:  "V2",
		4:  "V3",
		7:  "V4",
		9:  "V5LITE_POD",
		10: "V5P",
		11: "V6E",
	}
	AcceleratorConfig_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"V2":               2,
		"V3":               4,
		"V4":               7,
		"V5LITE_POD":       9,
		"V5P":              10,
		"V6E":              11,
	}
)

func (x AcceleratorConfig_Type) Enum() *AcceleratorConfig_Type {
	p := new(AcceleratorConfig_Type)
	*p = x
	return p
}

func (x AcceleratorConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceleratorConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[7].Descriptor()
}

func (AcceleratorConfig_Type) Type() protoreflect.EnumType {
	return &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes[7]
}

func (x AcceleratorConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceleratorConfig_Type.Descriptor instead.
func (AcceleratorConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{41, 0}
}

// A guest attributes.
type GuestAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path to be queried. This can be the default namespace ('/') or a
	// nested namespace ('/\<namespace\>/') or a specified key
	// ('/\<namespace\>/\<key\>')
	QueryPath string `protobuf:"bytes,1,opt,name=query_path,json=queryPath,proto3" json:"query_path,omitempty"`
	// The value of the requested queried path.
	QueryValue *GuestAttributesValue `protobuf:"bytes,2,opt,name=query_value,json=queryValue,proto3" json:"query_value,omitempty"`
}

func (x *GuestAttributes) Reset() {
	*x = GuestAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAttributes) ProtoMessage() {}

func (x *GuestAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAttributes.ProtoReflect.Descriptor instead.
func (*GuestAttributes) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{0}
}

func (x *GuestAttributes) GetQueryPath() string {
	if x != nil {
		return x.QueryPath
	}
	return ""
}

func (x *GuestAttributes) GetQueryValue() *GuestAttributesValue {
	if x != nil {
		return x.QueryValue
	}
	return nil
}

// Array of guest attribute namespace/key/value tuples.
type GuestAttributesValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of guest attributes entries.
	Items []*GuestAttributesEntry `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GuestAttributesValue) Reset() {
	*x = GuestAttributesValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAttributesValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAttributesValue) ProtoMessage() {}

func (x *GuestAttributesValue) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAttributesValue.ProtoReflect.Descriptor instead.
func (*GuestAttributesValue) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{1}
}

func (x *GuestAttributesValue) GetItems() []*GuestAttributesEntry {
	if x != nil {
		return x.Items
	}
	return nil
}

// A guest attributes namespace/key/value entry.
type GuestAttributesEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace for the guest attribute entry.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Key for the guest attribute entry.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Value for the guest attribute entry.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GuestAttributesEntry) Reset() {
	*x = GuestAttributesEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuestAttributesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuestAttributesEntry) ProtoMessage() {}

func (x *GuestAttributesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuestAttributesEntry.ProtoReflect.Descriptor instead.
func (*GuestAttributesEntry) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{2}
}

func (x *GuestAttributesEntry) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GuestAttributesEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GuestAttributesEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A node-attached disk resource.
// Next ID: 8;
type AttachedDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the full path to an existing disk.
	// For example: "projects/my-project/zones/us-central1-c/disks/my-disk".
	SourceDisk string `protobuf:"bytes,3,opt,name=source_disk,json=sourceDisk,proto3" json:"source_disk,omitempty"`
	// The mode in which to attach this disk.
	// If not specified, the default is READ_WRITE mode.
	// Only applicable to data_disks.
	Mode AttachedDisk_DiskMode `protobuf:"varint,4,opt,name=mode,proto3,enum=mockgcp.cloud.tpu.v2.AttachedDisk_DiskMode" json:"mode,omitempty"`
}

func (x *AttachedDisk) Reset() {
	*x = AttachedDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDisk) ProtoMessage() {}

func (x *AttachedDisk) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDisk.ProtoReflect.Descriptor instead.
func (*AttachedDisk) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{3}
}

func (x *AttachedDisk) GetSourceDisk() string {
	if x != nil {
		return x.SourceDisk
	}
	return ""
}

func (x *AttachedDisk) GetMode() AttachedDisk_DiskMode {
	if x != nil {
		return x.Mode
	}
	return AttachedDisk_DISK_MODE_UNSPECIFIED
}

// Sets the scheduling options for this node.
type SchedulingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the node is preemptible.
	Preemptible bool `protobuf:"varint,1,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	// Whether the node is created under a reservation.
	Reserved bool `protobuf:"varint,2,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// Optional. Defines whether the node is Spot VM.
	Spot bool `protobuf:"varint,3,opt,name=spot,proto3" json:"spot,omitempty"`
}

func (x *SchedulingConfig) Reset() {
	*x = SchedulingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingConfig) ProtoMessage() {}

func (x *SchedulingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingConfig.ProtoReflect.Descriptor instead.
func (*SchedulingConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{4}
}

func (x *SchedulingConfig) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

func (x *SchedulingConfig) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *SchedulingConfig) GetSpot() bool {
	if x != nil {
		return x.Spot
	}
	return false
}

// A network endpoint over which a TPU worker can be reached.
type NetworkEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The internal IP address of this network endpoint.
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// The port of this network endpoint.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The access config for the TPU worker.
	AccessConfig *AccessConfig `protobuf:"bytes,5,opt,name=access_config,json=accessConfig,proto3" json:"access_config,omitempty"`
}

func (x *NetworkEndpoint) Reset() {
	*x = NetworkEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEndpoint) ProtoMessage() {}

func (x *NetworkEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEndpoint.ProtoReflect.Descriptor instead.
func (*NetworkEndpoint) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkEndpoint) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *NetworkEndpoint) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NetworkEndpoint) GetAccessConfig() *AccessConfig {
	if x != nil {
		return x.AccessConfig
	}
	return nil
}

// An access config attached to the TPU worker.
type AccessConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. An external IP address associated with the TPU worker.
	ExternalIp string `protobuf:"bytes,1,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
}

func (x *AccessConfig) Reset() {
	*x = AccessConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessConfig) ProtoMessage() {}

func (x *AccessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessConfig.ProtoReflect.Descriptor instead.
func (*AccessConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{6}
}

func (x *AccessConfig) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

// Network related configurations.
type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the network for the TPU node. It must be a preexisting Google
	// Compute Engine network. If none is provided, "default" will be used.
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	// The name of the subnetwork for the TPU node. It must be a preexisting
	// Google Compute Engine subnetwork. If none is provided, "default" will be
	// used.
	Subnetwork string `protobuf:"bytes,2,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	// Indicates that external IP addresses would be associated with the TPU
	// workers. If set to false, the specified subnetwork or network should have
	// Private Google Access enabled.
	EnableExternalIps bool `protobuf:"varint,3,opt,name=enable_external_ips,json=enableExternalIps,proto3" json:"enable_external_ips,omitempty"`
	// Allows the TPU node to send and receive packets with non-matching
	// destination or source IPs. This is required if you plan to use the TPU
	// workers to forward routes.
	CanIpForward bool `protobuf:"varint,4,opt,name=can_ip_forward,json=canIpForward,proto3" json:"can_ip_forward,omitempty"`
	// Optional. Specifies networking queue count for TPU VM instance's network
	// interface.
	QueueCount int32 `protobuf:"varint,6,opt,name=queue_count,json=queueCount,proto3" json:"queue_count,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkConfig) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NetworkConfig) GetSubnetwork() string {
	if x != nil {
		return x.Subnetwork
	}
	return ""
}

func (x *NetworkConfig) GetEnableExternalIps() bool {
	if x != nil {
		return x.EnableExternalIps
	}
	return false
}

func (x *NetworkConfig) GetCanIpForward() bool {
	if x != nil {
		return x.CanIpForward
	}
	return false
}

func (x *NetworkConfig) GetQueueCount() int32 {
	if x != nil {
		return x.QueueCount
	}
	return 0
}

// A service account.
type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Email address of the service account. If empty, default Compute service
	// account will be used.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The list of scopes to be made available for this service account. If empty,
	// access to all Cloud APIs will be allowed.
	Scope []string `protobuf:"bytes,2,rep,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ServiceAccount) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// A TPU instance.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Immutable. The name of the TPU.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The user-supplied description of the TPU. Maximum of 512 characters.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. The type of hardware accelerators associated with this node.
	AcceleratorType string `protobuf:"bytes,5,opt,name=accelerator_type,json=acceleratorType,proto3" json:"accelerator_type,omitempty"`
	// Output only. The current state for the TPU Node.
	State Node_State `protobuf:"varint,9,opt,name=state,proto3,enum=mockgcp.cloud.tpu.v2.Node_State" json:"state,omitempty"`
	// Output only. If this field is populated, it contains a description of why
	// the TPU Node is unhealthy.
	HealthDescription string `protobuf:"bytes,10,opt,name=health_description,json=healthDescription,proto3" json:"health_description,omitempty"`
	// Required. The runtime version running in the Node.
	RuntimeVersion string `protobuf:"bytes,11,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	// Network configurations for the TPU node. network_config and network_configs
	// are mutually exclusive, you can only specify one of them. If both are
	// specified, an error will be returned.
	NetworkConfig *NetworkConfig `protobuf:"bytes,36,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`
	// Optional. Repeated network configurations for the TPU node. This field is
	// used to specify multiple networks configs for the TPU node. network_config
	// and network_configs are mutually exclusive, you can only specify one of
	// them. If both are specified, an error will be returned.
	NetworkConfigs []*NetworkConfig `protobuf:"bytes,49,rep,name=network_configs,json=networkConfigs,proto3" json:"network_configs,omitempty"`
	// The CIDR block that the TPU node will use when selecting an IP address.
	// This CIDR block must be a /29 block; the Compute Engine networks API
	// forbids a smaller block, and using a larger block would be wasteful (a
	// node can only consume one IP address). Errors will occur if the CIDR block
	// has already been used for a currently existing TPU node, the CIDR block
	// conflicts with any subnetworks in the user's provided network, or the
	// provided network is peered with another network that is using that CIDR
	// block.
	CidrBlock string `protobuf:"bytes,13,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty"`
	// The Google Cloud Platform Service Account to be used by the TPU node VMs.
	// If None is specified, the default compute service account will be used.
	ServiceAccount *ServiceAccount `protobuf:"bytes,37,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Output only. The time when the node was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The scheduling options for this node.
	SchedulingConfig *SchedulingConfig `protobuf:"bytes,17,opt,name=scheduling_config,json=schedulingConfig,proto3" json:"scheduling_config,omitempty"`
	// Output only. The network endpoints where TPU workers can be accessed and
	// sent work. It is recommended that runtime clients of the node reach out
	// to the 0th entry in this map first.
	NetworkEndpoints []*NetworkEndpoint `protobuf:"bytes,21,rep,name=network_endpoints,json=networkEndpoints,proto3" json:"network_endpoints,omitempty"`
	// The health status of the TPU node.
	Health Node_Health `protobuf:"varint,22,opt,name=health,proto3,enum=mockgcp.cloud.tpu.v2.Node_Health" json:"health,omitempty"`
	// Resource labels to represent user-provided metadata.
	Labels map[string]string `protobuf:"bytes,24,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Custom metadata to apply to the TPU Node.
	// Can set startup-script and shutdown-script
	Metadata map[string]string `protobuf:"bytes,34,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tags to apply to the TPU Node. Tags are used to identify valid sources or
	// targets for network firewalls.
	Tags []string `protobuf:"bytes,40,rep,name=tags,proto3" json:"tags,omitempty"`
	// Output only. The unique identifier for the TPU Node.
	Id int64 `protobuf:"varint,33,opt,name=id,proto3" json:"id,omitempty"`
	// The additional data disks for the Node.
	DataDisks []*AttachedDisk `protobuf:"bytes,41,rep,name=data_disks,json=dataDisks,proto3" json:"data_disks,omitempty"`
	// Output only. The API version that created this Node.
	ApiVersion Node_ApiVersion `protobuf:"varint,38,opt,name=api_version,json=apiVersion,proto3,enum=mockgcp.cloud.tpu.v2.Node_ApiVersion" json:"api_version,omitempty"`
	// Output only. The Symptoms that have occurred to the TPU Node.
	Symptoms []*Symptom `protobuf:"bytes,39,rep,name=symptoms,proto3" json:"symptoms,omitempty"`
	// Shielded Instance options.
	ShieldedInstanceConfig *ShieldedInstanceConfig `protobuf:"bytes,45,opt,name=shielded_instance_config,json=shieldedInstanceConfig,proto3" json:"shielded_instance_config,omitempty"`
	// The AccleratorConfig for the TPU Node.
	AcceleratorConfig *AcceleratorConfig `protobuf:"bytes,46,opt,name=accelerator_config,json=acceleratorConfig,proto3" json:"accelerator_config,omitempty"`
	// Output only. The qualified name of the QueuedResource that requested this
	// Node.
	QueuedResource string `protobuf:"bytes,47,opt,name=queued_resource,json=queuedResource,proto3" json:"queued_resource,omitempty"`
	// Output only. Whether the Node belongs to a Multislice group.
	MultisliceNode bool `protobuf:"varint,48,opt,name=multislice_node,json=multisliceNode,proto3" json:"multislice_node,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{9}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetAcceleratorType() string {
	if x != nil {
		return x.AcceleratorType
	}
	return ""
}

func (x *Node) GetState() Node_State {
	if x != nil {
		return x.State
	}
	return Node_STATE_UNSPECIFIED
}

func (x *Node) GetHealthDescription() string {
	if x != nil {
		return x.HealthDescription
	}
	return ""
}

func (x *Node) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *Node) GetNetworkConfig() *NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *Node) GetNetworkConfigs() []*NetworkConfig {
	if x != nil {
		return x.NetworkConfigs
	}
	return nil
}

func (x *Node) GetCidrBlock() string {
	if x != nil {
		return x.CidrBlock
	}
	return ""
}

func (x *Node) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

func (x *Node) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Node) GetSchedulingConfig() *SchedulingConfig {
	if x != nil {
		return x.SchedulingConfig
	}
	return nil
}

func (x *Node) GetNetworkEndpoints() []*NetworkEndpoint {
	if x != nil {
		return x.NetworkEndpoints
	}
	return nil
}

func (x *Node) GetHealth() Node_Health {
	if x != nil {
		return x.Health
	}
	return Node_HEALTH_UNSPECIFIED
}

func (x *Node) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Node) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Node) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetDataDisks() []*AttachedDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *Node) GetApiVersion() Node_ApiVersion {
	if x != nil {
		return x.ApiVersion
	}
	return Node_API_VERSION_UNSPECIFIED
}

func (x *Node) GetSymptoms() []*Symptom {
	if x != nil {
		return x.Symptoms
	}
	return nil
}

func (x *Node) GetShieldedInstanceConfig() *ShieldedInstanceConfig {
	if x != nil {
		return x.ShieldedInstanceConfig
	}
	return nil
}

func (x *Node) GetAcceleratorConfig() *AcceleratorConfig {
	if x != nil {
		return x.AcceleratorConfig
	}
	return nil
}

func (x *Node) GetQueuedResource() string {
	if x != nil {
		return x.QueuedResource
	}
	return ""
}

func (x *Node) GetMultisliceNode() bool {
	if x != nil {
		return x.MultisliceNode
	}
	return false
}

// A QueuedResource represents a request for resources that will be placed
// in a queue and fulfilled when the necessary resources are available.
type QueuedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Immutable. The name of the QueuedResource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The time when the QueuedResource was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Resource specification.
	//
	// Types that are assignable to Resource:
	//
	//	*QueuedResource_Tpu_
	Resource isQueuedResource_Resource `protobuf_oneof:"resource"`
	// Tier specifies the required tier.
	//
	// Types that are assignable to Tier:
	//
	//	*QueuedResource_Spot_
	//	*QueuedResource_Guaranteed_
	Tier isQueuedResource_Tier `protobuf_oneof:"tier"`
	// Optional. The queueing policy of the QueuedRequest.
	QueueingPolicy *QueuedResource_QueueingPolicy `protobuf:"bytes,5,opt,name=queueing_policy,json=queueingPolicy,proto3" json:"queueing_policy,omitempty"`
	// Output only. State of the QueuedResource request.
	State *QueuedResourceState `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	// Optional. Name of the reservation in which the resource should be
	// provisioned. Format:
	// projects/{project}/locations/{zone}/reservations/{reservation}
	ReservationName string `protobuf:"bytes,7,opt,name=reservation_name,json=reservationName,proto3" json:"reservation_name,omitempty"`
}

func (x *QueuedResource) Reset() {
	*x = QueuedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource) ProtoMessage() {}

func (x *QueuedResource) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource.ProtoReflect.Descriptor instead.
func (*QueuedResource) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10}
}

func (x *QueuedResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueuedResource) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (m *QueuedResource) GetResource() isQueuedResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *QueuedResource) GetTpu() *QueuedResource_Tpu {
	if x, ok := x.GetResource().(*QueuedResource_Tpu_); ok {
		return x.Tpu
	}
	return nil
}

func (m *QueuedResource) GetTier() isQueuedResource_Tier {
	if m != nil {
		return m.Tier
	}
	return nil
}

func (x *QueuedResource) GetSpot() *QueuedResource_Spot {
	if x, ok := x.GetTier().(*QueuedResource_Spot_); ok {
		return x.Spot
	}
	return nil
}

func (x *QueuedResource) GetGuaranteed() *QueuedResource_Guaranteed {
	if x, ok := x.GetTier().(*QueuedResource_Guaranteed_); ok {
		return x.Guaranteed
	}
	return nil
}

func (x *QueuedResource) GetQueueingPolicy() *QueuedResource_QueueingPolicy {
	if x != nil {
		return x.QueueingPolicy
	}
	return nil
}

func (x *QueuedResource) GetState() *QueuedResourceState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *QueuedResource) GetReservationName() string {
	if x != nil {
		return x.ReservationName
	}
	return ""
}

type isQueuedResource_Resource interface {
	isQueuedResource_Resource()
}

type QueuedResource_Tpu_ struct {
	// Optional. Defines a TPU resource.
	Tpu *QueuedResource_Tpu `protobuf:"bytes,2,opt,name=tpu,proto3,oneof"`
}

func (*QueuedResource_Tpu_) isQueuedResource_Resource() {}

type isQueuedResource_Tier interface {
	isQueuedResource_Tier()
}

type QueuedResource_Spot_ struct {
	// Optional. The Spot tier.
	Spot *QueuedResource_Spot `protobuf:"bytes,3,opt,name=spot,proto3,oneof"`
}

type QueuedResource_Guaranteed_ struct {
	// Optional. The Guaranteed tier
	Guaranteed *QueuedResource_Guaranteed `protobuf:"bytes,4,opt,name=guaranteed,proto3,oneof"`
}

func (*QueuedResource_Spot_) isQueuedResource_Tier() {}

func (*QueuedResource_Guaranteed_) isQueuedResource_Tier() {}

// QueuedResourceState defines the details of the QueuedResource request.
type QueuedResourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. State of the QueuedResource request.
	State QueuedResourceState_State `protobuf:"varint,1,opt,name=state,proto3,enum=mockgcp.cloud.tpu.v2.QueuedResourceState_State" json:"state,omitempty"`
	// Further data for the state.
	//
	// Types that are assignable to StateData:
	//
	//	*QueuedResourceState_CreatingData_
	//	*QueuedResourceState_AcceptedData_
	//	*QueuedResourceState_ProvisioningData_
	//	*QueuedResourceState_FailedData_
	//	*QueuedResourceState_DeletingData_
	//	*QueuedResourceState_ActiveData_
	//	*QueuedResourceState_SuspendingData_
	//	*QueuedResourceState_SuspendedData_
	StateData isQueuedResourceState_StateData `protobuf_oneof:"state_data"`
	// Output only. The initiator of the QueuedResources's current state. Used to
	// indicate whether the SUSPENDING/SUSPENDED state was initiated by the user
	// or the service.
	StateInitiator QueuedResourceState_StateInitiator `protobuf:"varint,10,opt,name=state_initiator,json=stateInitiator,proto3,enum=mockgcp.cloud.tpu.v2.QueuedResourceState_StateInitiator" json:"state_initiator,omitempty"`
}

func (x *QueuedResourceState) Reset() {
	*x = QueuedResourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState) ProtoMessage() {}

func (x *QueuedResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState.ProtoReflect.Descriptor instead.
func (*QueuedResourceState) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11}
}

func (x *QueuedResourceState) GetState() QueuedResourceState_State {
	if x != nil {
		return x.State
	}
	return QueuedResourceState_STATE_UNSPECIFIED
}

func (m *QueuedResourceState) GetStateData() isQueuedResourceState_StateData {
	if m != nil {
		return m.StateData
	}
	return nil
}

func (x *QueuedResourceState) GetCreatingData() *QueuedResourceState_CreatingData {
	if x, ok := x.GetStateData().(*QueuedResourceState_CreatingData_); ok {
		return x.CreatingData
	}
	return nil
}

func (x *QueuedResourceState) GetAcceptedData() *QueuedResourceState_AcceptedData {
	if x, ok := x.GetStateData().(*QueuedResourceState_AcceptedData_); ok {
		return x.AcceptedData
	}
	return nil
}

func (x *QueuedResourceState) GetProvisioningData() *QueuedResourceState_ProvisioningData {
	if x, ok := x.GetStateData().(*QueuedResourceState_ProvisioningData_); ok {
		return x.ProvisioningData
	}
	return nil
}

func (x *QueuedResourceState) GetFailedData() *QueuedResourceState_FailedData {
	if x, ok := x.GetStateData().(*QueuedResourceState_FailedData_); ok {
		return x.FailedData
	}
	return nil
}

func (x *QueuedResourceState) GetDeletingData() *QueuedResourceState_DeletingData {
	if x, ok := x.GetStateData().(*QueuedResourceState_DeletingData_); ok {
		return x.DeletingData
	}
	return nil
}

func (x *QueuedResourceState) GetActiveData() *QueuedResourceState_ActiveData {
	if x, ok := x.GetStateData().(*QueuedResourceState_ActiveData_); ok {
		return x.ActiveData
	}
	return nil
}

func (x *QueuedResourceState) GetSuspendingData() *QueuedResourceState_SuspendingData {
	if x, ok := x.GetStateData().(*QueuedResourceState_SuspendingData_); ok {
		return x.SuspendingData
	}
	return nil
}

func (x *QueuedResourceState) GetSuspendedData() *QueuedResourceState_SuspendedData {
	if x, ok := x.GetStateData().(*QueuedResourceState_SuspendedData_); ok {
		return x.SuspendedData
	}
	return nil
}

func (x *QueuedResourceState) GetStateInitiator() QueuedResourceState_StateInitiator {
	if x != nil {
		return x.StateInitiator
	}
	return QueuedResourceState_STATE_INITIATOR_UNSPECIFIED
}

type isQueuedResourceState_StateData interface {
	isQueuedResourceState_StateData()
}

type QueuedResourceState_CreatingData_ struct {
	// Output only. Further data for the creating state.
	CreatingData *QueuedResourceState_CreatingData `protobuf:"bytes,2,opt,name=creating_data,json=creatingData,proto3,oneof"`
}

type QueuedResourceState_AcceptedData_ struct {
	// Output only. Further data for the accepted state.
	AcceptedData *QueuedResourceState_AcceptedData `protobuf:"bytes,3,opt,name=accepted_data,json=acceptedData,proto3,oneof"`
}

type QueuedResourceState_ProvisioningData_ struct {
	// Output only. Further data for the provisioning state.
	ProvisioningData *QueuedResourceState_ProvisioningData `protobuf:"bytes,4,opt,name=provisioning_data,json=provisioningData,proto3,oneof"`
}

type QueuedResourceState_FailedData_ struct {
	// Output only. Further data for the failed state.
	FailedData *QueuedResourceState_FailedData `protobuf:"bytes,5,opt,name=failed_data,json=failedData,proto3,oneof"`
}

type QueuedResourceState_DeletingData_ struct {
	// Output only. Further data for the deleting state.
	DeletingData *QueuedResourceState_DeletingData `protobuf:"bytes,6,opt,name=deleting_data,json=deletingData,proto3,oneof"`
}

type QueuedResourceState_ActiveData_ struct {
	// Output only. Further data for the active state.
	ActiveData *QueuedResourceState_ActiveData `protobuf:"bytes,7,opt,name=active_data,json=activeData,proto3,oneof"`
}

type QueuedResourceState_SuspendingData_ struct {
	// Output only. Further data for the suspending state.
	SuspendingData *QueuedResourceState_SuspendingData `protobuf:"bytes,8,opt,name=suspending_data,json=suspendingData,proto3,oneof"`
}

type QueuedResourceState_SuspendedData_ struct {
	// Output only. Further data for the suspended state.
	SuspendedData *QueuedResourceState_SuspendedData `protobuf:"bytes,9,opt,name=suspended_data,json=suspendedData,proto3,oneof"`
}

func (*QueuedResourceState_CreatingData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_AcceptedData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_ProvisioningData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_FailedData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_DeletingData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_ActiveData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_SuspendingData_) isQueuedResourceState_StateData() {}

func (*QueuedResourceState_SuspendedData_) isQueuedResourceState_StateData() {}

// Request for [ListNodes][mockgcp.cloud.tpu.v2.Tpu.ListNodes].
type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{12}
}

func (x *ListNodesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response for [ListNodes][mockgcp.cloud.tpu.v2.Tpu.ListNodes].
type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The listed nodes.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// The next page token or empty if none.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{13}
}

func (x *ListNodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListNodesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListNodesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request for [GetNode][mockgcp.cloud.tpu.v2.Tpu.GetNode].
type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{14}
}

func (x *GetNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for [CreateNode][mockgcp.cloud.tpu.v2.Tpu.CreateNode].
type CreateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The unqualified resource name.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Required. The node.
	Node *Node `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{15}
}

func (x *CreateNodeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *CreateNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

// Request for [DeleteNode][mockgcp.cloud.tpu.v2.Tpu.DeleteNode].
type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for [StopNode][mockgcp.cloud.tpu.v2.Tpu.StopNode].
type StopNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StopNodeRequest) Reset() {
	*x = StopNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopNodeRequest) ProtoMessage() {}

func (x *StopNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopNodeRequest.ProtoReflect.Descriptor instead.
func (*StopNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{17}
}

func (x *StopNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for [StartNode][mockgcp.cloud.tpu.v2.Tpu.StartNode].
type StartNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StartNodeRequest) Reset() {
	*x = StartNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartNodeRequest) ProtoMessage() {}

func (x *StartNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartNodeRequest.ProtoReflect.Descriptor instead.
func (*StartNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{18}
}

func (x *StartNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for [UpdateNode][mockgcp.cloud.tpu.v2.Tpu.UpdateNode].
type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Mask of fields from [Node][Tpu.Node] to update.
	// Supported fields: [description, tags, labels, metadata,
	// network_config.enable_external_ips].
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. The node. Only fields specified in update_mask are updated.
	Node *Node `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateNodeRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNodeRequest) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

// Request for
// [ListQueuedResources][mockgcp.cloud.tpu.v2.Tpu.ListQueuedResources].
type ListQueuedResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. The next_page_token value returned from a previous List request,
	// if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListQueuedResourcesRequest) Reset() {
	*x = ListQueuedResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueuedResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuedResourcesRequest) ProtoMessage() {}

func (x *ListQueuedResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuedResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListQueuedResourcesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{20}
}

func (x *ListQueuedResourcesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListQueuedResourcesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQueuedResourcesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response for
// [ListQueuedResources][mockgcp.cloud.tpu.v2.Tpu.ListQueuedResources].
type ListQueuedResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The listed queued resources.
	QueuedResources []*QueuedResource `protobuf:"bytes,1,rep,name=queued_resources,json=queuedResources,proto3" json:"queued_resources,omitempty"`
	// The next page token or empty if none.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListQueuedResourcesResponse) Reset() {
	*x = ListQueuedResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueuedResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueuedResourcesResponse) ProtoMessage() {}

func (x *ListQueuedResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueuedResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListQueuedResourcesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{21}
}

func (x *ListQueuedResourcesResponse) GetQueuedResources() []*QueuedResource {
	if x != nil {
		return x.QueuedResources
	}
	return nil
}

func (x *ListQueuedResourcesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListQueuedResourcesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Request for [GetQueuedResource][mockgcp.cloud.tpu.v2.Tpu.GetQueuedResource]
type GetQueuedResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetQueuedResourceRequest) Reset() {
	*x = GetQueuedResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueuedResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueuedResourceRequest) ProtoMessage() {}

func (x *GetQueuedResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueuedResourceRequest.ProtoReflect.Descriptor instead.
func (*GetQueuedResourceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{22}
}

func (x *GetQueuedResourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for
// [CreateQueuedResource][mockgcp.cloud.tpu.v2.Tpu.CreateQueuedResource].
type CreateQueuedResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The unqualified resource name. Should follow the
	// `^[A-Za-z0-9_.~+%-]+$` regex format.
	QueuedResourceId string `protobuf:"bytes,2,opt,name=queued_resource_id,json=queuedResourceId,proto3" json:"queued_resource_id,omitempty"`
	// Required. The queued resource.
	QueuedResource *QueuedResource `protobuf:"bytes,3,opt,name=queued_resource,json=queuedResource,proto3" json:"queued_resource,omitempty"`
	// Optional. Idempotent request UUID.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateQueuedResourceRequest) Reset() {
	*x = CreateQueuedResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueuedResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueuedResourceRequest) ProtoMessage() {}

func (x *CreateQueuedResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueuedResourceRequest.ProtoReflect.Descriptor instead.
func (*CreateQueuedResourceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{23}
}

func (x *CreateQueuedResourceRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateQueuedResourceRequest) GetQueuedResourceId() string {
	if x != nil {
		return x.QueuedResourceId
	}
	return ""
}

func (x *CreateQueuedResourceRequest) GetQueuedResource() *QueuedResource {
	if x != nil {
		return x.QueuedResource
	}
	return nil
}

func (x *CreateQueuedResourceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Request for
// [DeleteQueuedResource][mockgcp.cloud.tpu.v2.Tpu.DeleteQueuedResource].
type DeleteQueuedResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Idempotent request UUID.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Optional. If set to true, all running nodes belonging to this queued
	// resource will be deleted first and then the queued resource will be
	// deleted. Otherwise (i.e. force=false), the queued resource will only be
	// deleted if its nodes have already been deleted or the queued resource is in
	// the ACCEPTED, FAILED, or SUSPENDED state.
	Force bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteQueuedResourceRequest) Reset() {
	*x = DeleteQueuedResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQueuedResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueuedResourceRequest) ProtoMessage() {}

func (x *DeleteQueuedResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueuedResourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteQueuedResourceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteQueuedResourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteQueuedResourceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DeleteQueuedResourceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// Request for
// [ResetQueuedResource][mockgcp.cloud.tpu.v2.Tpu.ResetQueuedResource].
type ResetQueuedResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the queued resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ResetQueuedResourceRequest) Reset() {
	*x = ResetQueuedResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetQueuedResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetQueuedResourceRequest) ProtoMessage() {}

func (x *ResetQueuedResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetQueuedResourceRequest.ProtoReflect.Descriptor instead.
func (*ResetQueuedResourceRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{25}
}

func (x *ResetQueuedResourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The per-product per-project service identity for Cloud TPU service.
type ServiceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The email address of the service identity.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ServiceIdentity) Reset() {
	*x = ServiceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceIdentity) ProtoMessage() {}

func (x *ServiceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceIdentity.ProtoReflect.Descriptor instead.
func (*ServiceIdentity) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{26}
}

func (x *ServiceIdentity) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// Request for
// [GenerateServiceIdentity][mockgcp.cloud.tpu.v2.Tpu.GenerateServiceIdentity].
type GenerateServiceIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *GenerateServiceIdentityRequest) Reset() {
	*x = GenerateServiceIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServiceIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServiceIdentityRequest) ProtoMessage() {}

func (x *GenerateServiceIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServiceIdentityRequest.ProtoReflect.Descriptor instead.
func (*GenerateServiceIdentityRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{27}
}

func (x *GenerateServiceIdentityRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Response for
// [GenerateServiceIdentity][mockgcp.cloud.tpu.v2.Tpu.GenerateServiceIdentity].
type GenerateServiceIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ServiceIdentity that was created or retrieved.
	Identity *ServiceIdentity `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *GenerateServiceIdentityResponse) Reset() {
	*x = GenerateServiceIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServiceIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServiceIdentityResponse) ProtoMessage() {}

func (x *GenerateServiceIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServiceIdentityResponse.ProtoReflect.Descriptor instead.
func (*GenerateServiceIdentityResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{28}
}

func (x *GenerateServiceIdentityResponse) GetIdentity() *ServiceIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

// A accelerator type that a Node can be configured with.
type AcceleratorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The accelerator type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The accelerator config.
	AcceleratorConfigs []*AcceleratorConfig `protobuf:"bytes,3,rep,name=accelerator_configs,json=acceleratorConfigs,proto3" json:"accelerator_configs,omitempty"`
}

func (x *AcceleratorType) Reset() {
	*x = AcceleratorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorType) ProtoMessage() {}

func (x *AcceleratorType) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorType.ProtoReflect.Descriptor instead.
func (*AcceleratorType) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{29}
}

func (x *AcceleratorType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AcceleratorType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AcceleratorType) GetAcceleratorConfigs() []*AcceleratorConfig {
	if x != nil {
		return x.AcceleratorConfigs
	}
	return nil
}

// Request for [GetAcceleratorType][mockgcp.cloud.tpu.v2.Tpu.GetAcceleratorType].
type GetAcceleratorTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAcceleratorTypeRequest) Reset() {
	*x = GetAcceleratorTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAcceleratorTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcceleratorTypeRequest) ProtoMessage() {}

func (x *GetAcceleratorTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcceleratorTypeRequest.ProtoReflect.Descriptor instead.
func (*GetAcceleratorTypeRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{30}
}

func (x *GetAcceleratorTypeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for
// [ListAcceleratorTypes][mockgcp.cloud.tpu.v2.Tpu.ListAcceleratorTypes].
type ListAcceleratorTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// List filter.
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sort results.
	OrderBy string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListAcceleratorTypesRequest) Reset() {
	*x = ListAcceleratorTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcceleratorTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcceleratorTypesRequest) ProtoMessage() {}

func (x *ListAcceleratorTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcceleratorTypesRequest.ProtoReflect.Descriptor instead.
func (*ListAcceleratorTypesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{31}
}

func (x *ListAcceleratorTypesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAcceleratorTypesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAcceleratorTypesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAcceleratorTypesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListAcceleratorTypesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for
// [ListAcceleratorTypes][mockgcp.cloud.tpu.v2.Tpu.ListAcceleratorTypes].
type ListAcceleratorTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The listed nodes.
	AcceleratorTypes []*AcceleratorType `protobuf:"bytes,1,rep,name=accelerator_types,json=acceleratorTypes,proto3" json:"accelerator_types,omitempty"`
	// The next page token or empty if none.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListAcceleratorTypesResponse) Reset() {
	*x = ListAcceleratorTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAcceleratorTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAcceleratorTypesResponse) ProtoMessage() {}

func (x *ListAcceleratorTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAcceleratorTypesResponse.ProtoReflect.Descriptor instead.
func (*ListAcceleratorTypesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{32}
}

func (x *ListAcceleratorTypesResponse) GetAcceleratorTypes() []*AcceleratorType {
	if x != nil {
		return x.AcceleratorTypes
	}
	return nil
}

func (x *ListAcceleratorTypesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListAcceleratorTypesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// A runtime version that a Node can be configured with.
type RuntimeVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The runtime version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *RuntimeVersion) Reset() {
	*x = RuntimeVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeVersion) ProtoMessage() {}

func (x *RuntimeVersion) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeVersion.ProtoReflect.Descriptor instead.
func (*RuntimeVersion) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{33}
}

func (x *RuntimeVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuntimeVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Request for [GetRuntimeVersion][mockgcp.cloud.tpu.v2.Tpu.GetRuntimeVersion].
type GetRuntimeVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRuntimeVersionRequest) Reset() {
	*x = GetRuntimeVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRuntimeVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuntimeVersionRequest) ProtoMessage() {}

func (x *GetRuntimeVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuntimeVersionRequest.ProtoReflect.Descriptor instead.
func (*GetRuntimeVersionRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{34}
}

func (x *GetRuntimeVersionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for
// [ListRuntimeVersions][mockgcp.cloud.tpu.v2.Tpu.ListRuntimeVersions].
type ListRuntimeVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// List filter.
	Filter string `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sort results.
	OrderBy string `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListRuntimeVersionsRequest) Reset() {
	*x = ListRuntimeVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuntimeVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuntimeVersionsRequest) ProtoMessage() {}

func (x *ListRuntimeVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuntimeVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListRuntimeVersionsRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{35}
}

func (x *ListRuntimeVersionsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRuntimeVersionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuntimeVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRuntimeVersionsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListRuntimeVersionsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response for
// [ListRuntimeVersions][mockgcp.cloud.tpu.v2.Tpu.ListRuntimeVersions].
type ListRuntimeVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The listed nodes.
	RuntimeVersions []*RuntimeVersion `protobuf:"bytes,1,rep,name=runtime_versions,json=runtimeVersions,proto3" json:"runtime_versions,omitempty"`
	// The next page token or empty if none.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListRuntimeVersionsResponse) Reset() {
	*x = ListRuntimeVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuntimeVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuntimeVersionsResponse) ProtoMessage() {}

func (x *ListRuntimeVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuntimeVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListRuntimeVersionsResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{36}
}

func (x *ListRuntimeVersionsResponse) GetRuntimeVersions() []*RuntimeVersion {
	if x != nil {
		return x.RuntimeVersions
	}
	return nil
}

func (x *ListRuntimeVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListRuntimeVersionsResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Metadata describing an [Operation][google.longrunning.Operation]
type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time the operation was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The time the operation finished running.
	EndTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Target of the operation - for example
	// projects/project-1/connectivityTests/test-1
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	// Human-readable status of the operation, if any.
	StatusDetail string `protobuf:"bytes,5,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	// Specifies if cancellation was requested for the operation.
	CancelRequested bool `protobuf:"varint,6,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	// API version.
	ApiVersion string `protobuf:"bytes,7,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{37}
}

func (x *OperationMetadata) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OperationMetadata) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *OperationMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperationMetadata) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *OperationMetadata) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *OperationMetadata) GetCancelRequested() bool {
	if x != nil {
		return x.CancelRequested
	}
	return false
}

func (x *OperationMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

// A Symptom instance.
type Symptom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp when the Symptom is created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Type of the Symptom.
	SymptomType Symptom_SymptomType `protobuf:"varint,2,opt,name=symptom_type,json=symptomType,proto3,enum=mockgcp.cloud.tpu.v2.Symptom_SymptomType" json:"symptom_type,omitempty"`
	// Detailed information of the current Symptom.
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerId string `protobuf:"bytes,4,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
}

func (x *Symptom) Reset() {
	*x = Symptom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symptom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symptom) ProtoMessage() {}

func (x *Symptom) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symptom.ProtoReflect.Descriptor instead.
func (*Symptom) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{38}
}

func (x *Symptom) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Symptom) GetSymptomType() Symptom_SymptomType {
	if x != nil {
		return x.SymptomType
	}
	return Symptom_SYMPTOM_TYPE_UNSPECIFIED
}

func (x *Symptom) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Symptom) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

// Request for [GetGuestAttributes][mockgcp.cloud.tpu.v2.Tpu.GetGuestAttributes].
type GetGuestAttributesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The guest attributes path to be queried.
	QueryPath string `protobuf:"bytes,2,opt,name=query_path,json=queryPath,proto3" json:"query_path,omitempty"`
	// The 0-based worker ID. If it is empty, all workers' GuestAttributes will be
	// returned.
	WorkerIds []string `protobuf:"bytes,3,rep,name=worker_ids,json=workerIds,proto3" json:"worker_ids,omitempty"`
}

func (x *GetGuestAttributesRequest) Reset() {
	*x = GetGuestAttributesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestAttributesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestAttributesRequest) ProtoMessage() {}

func (x *GetGuestAttributesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestAttributesRequest.ProtoReflect.Descriptor instead.
func (*GetGuestAttributesRequest) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{39}
}

func (x *GetGuestAttributesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGuestAttributesRequest) GetQueryPath() string {
	if x != nil {
		return x.QueryPath
	}
	return ""
}

func (x *GetGuestAttributesRequest) GetWorkerIds() []string {
	if x != nil {
		return x.WorkerIds
	}
	return nil
}

// Response for
// [GetGuestAttributes][mockgcp.cloud.tpu.v2.Tpu.GetGuestAttributes].
type GetGuestAttributesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The guest attributes for the TPU workers.
	GuestAttributes []*GuestAttributes `protobuf:"bytes,1,rep,name=guest_attributes,json=guestAttributes,proto3" json:"guest_attributes,omitempty"`
}

func (x *GetGuestAttributesResponse) Reset() {
	*x = GetGuestAttributesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGuestAttributesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGuestAttributesResponse) ProtoMessage() {}

func (x *GetGuestAttributesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGuestAttributesResponse.ProtoReflect.Descriptor instead.
func (*GetGuestAttributesResponse) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{40}
}

func (x *GetGuestAttributesResponse) GetGuestAttributes() []*GuestAttributes {
	if x != nil {
		return x.GuestAttributes
	}
	return nil
}

// A TPU accelerator configuration.
type AcceleratorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Type of TPU.
	Type AcceleratorConfig_Type `protobuf:"varint,1,opt,name=type,proto3,enum=mockgcp.cloud.tpu.v2.AcceleratorConfig_Type" json:"type,omitempty"`
	// Required. Topology of TPU in chips.
	Topology string `protobuf:"bytes,2,opt,name=topology,proto3" json:"topology,omitempty"`
}

func (x *AcceleratorConfig) Reset() {
	*x = AcceleratorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorConfig) ProtoMessage() {}

func (x *AcceleratorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorConfig.ProtoReflect.Descriptor instead.
func (*AcceleratorConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{41}
}

func (x *AcceleratorConfig) GetType() AcceleratorConfig_Type {
	if x != nil {
		return x.Type
	}
	return AcceleratorConfig_TYPE_UNSPECIFIED
}

func (x *AcceleratorConfig) GetTopology() string {
	if x != nil {
		return x.Topology
	}
	return ""
}

// A set of Shielded Instance options.
type ShieldedInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the instance has Secure Boot enabled.
	EnableSecureBoot bool `protobuf:"varint,1,opt,name=enable_secure_boot,json=enableSecureBoot,proto3" json:"enable_secure_boot,omitempty"`
}

func (x *ShieldedInstanceConfig) Reset() {
	*x = ShieldedInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedInstanceConfig) ProtoMessage() {}

func (x *ShieldedInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedInstanceConfig.ProtoReflect.Descriptor instead.
func (*ShieldedInstanceConfig) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{42}
}

func (x *ShieldedInstanceConfig) GetEnableSecureBoot() bool {
	if x != nil {
		return x.EnableSecureBoot
	}
	return false
}

// Details of the TPU resource(s) being requested.
type QueuedResource_Tpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The TPU node(s) being requested.
	NodeSpec []*QueuedResource_Tpu_NodeSpec `protobuf:"bytes,1,rep,name=node_spec,json=nodeSpec,proto3" json:"node_spec,omitempty"`
}

func (x *QueuedResource_Tpu) Reset() {
	*x = QueuedResource_Tpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_Tpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_Tpu) ProtoMessage() {}

func (x *QueuedResource_Tpu) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_Tpu.ProtoReflect.Descriptor instead.
func (*QueuedResource_Tpu) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 0}
}

func (x *QueuedResource_Tpu) GetNodeSpec() []*QueuedResource_Tpu_NodeSpec {
	if x != nil {
		return x.NodeSpec
	}
	return nil
}

// Spot tier definition.
type QueuedResource_Spot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResource_Spot) Reset() {
	*x = QueuedResource_Spot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_Spot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_Spot) ProtoMessage() {}

func (x *QueuedResource_Spot) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_Spot.ProtoReflect.Descriptor instead.
func (*QueuedResource_Spot) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 1}
}

// Guaranteed tier definition.
type QueuedResource_Guaranteed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Defines the minimum duration of the guarantee. If specified,
	// the requested resources will only be provisioned if they can be
	// allocated for at least the given duration.
	MinDuration *duration.Duration `protobuf:"bytes,1,opt,name=min_duration,json=minDuration,proto3" json:"min_duration,omitempty"`
}

func (x *QueuedResource_Guaranteed) Reset() {
	*x = QueuedResource_Guaranteed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_Guaranteed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_Guaranteed) ProtoMessage() {}

func (x *QueuedResource_Guaranteed) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_Guaranteed.ProtoReflect.Descriptor instead.
func (*QueuedResource_Guaranteed) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 2}
}

func (x *QueuedResource_Guaranteed) GetMinDuration() *duration.Duration {
	if x != nil {
		return x.MinDuration
	}
	return nil
}

// Defines the policy of the QueuedRequest.
type QueuedResource_QueueingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time flexibility specification.
	//
	// Types that are assignable to StartTimingConstraints:
	//
	//	*QueuedResource_QueueingPolicy_ValidUntilDuration
	//	*QueuedResource_QueueingPolicy_ValidUntilTime
	//	*QueuedResource_QueueingPolicy_ValidAfterDuration
	//	*QueuedResource_QueueingPolicy_ValidAfterTime
	//	*QueuedResource_QueueingPolicy_ValidInterval
	StartTimingConstraints isQueuedResource_QueueingPolicy_StartTimingConstraints `protobuf_oneof:"start_timing_constraints"`
}

func (x *QueuedResource_QueueingPolicy) Reset() {
	*x = QueuedResource_QueueingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_QueueingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_QueueingPolicy) ProtoMessage() {}

func (x *QueuedResource_QueueingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_QueueingPolicy.ProtoReflect.Descriptor instead.
func (*QueuedResource_QueueingPolicy) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 3}
}

func (m *QueuedResource_QueueingPolicy) GetStartTimingConstraints() isQueuedResource_QueueingPolicy_StartTimingConstraints {
	if m != nil {
		return m.StartTimingConstraints
	}
	return nil
}

func (x *QueuedResource_QueueingPolicy) GetValidUntilDuration() *duration.Duration {
	if x, ok := x.GetStartTimingConstraints().(*QueuedResource_QueueingPolicy_ValidUntilDuration); ok {
		return x.ValidUntilDuration
	}
	return nil
}

func (x *QueuedResource_QueueingPolicy) GetValidUntilTime() *timestamp.Timestamp {
	if x, ok := x.GetStartTimingConstraints().(*QueuedResource_QueueingPolicy_ValidUntilTime); ok {
		return x.ValidUntilTime
	}
	return nil
}

func (x *QueuedResource_QueueingPolicy) GetValidAfterDuration() *duration.Duration {
	if x, ok := x.GetStartTimingConstraints().(*QueuedResource_QueueingPolicy_ValidAfterDuration); ok {
		return x.ValidAfterDuration
	}
	return nil
}

func (x *QueuedResource_QueueingPolicy) GetValidAfterTime() *timestamp.Timestamp {
	if x, ok := x.GetStartTimingConstraints().(*QueuedResource_QueueingPolicy_ValidAfterTime); ok {
		return x.ValidAfterTime
	}
	return nil
}

func (x *QueuedResource_QueueingPolicy) GetValidInterval() *interval.Interval {
	if x, ok := x.GetStartTimingConstraints().(*QueuedResource_QueueingPolicy_ValidInterval); ok {
		return x.ValidInterval
	}
	return nil
}

type isQueuedResource_QueueingPolicy_StartTimingConstraints interface {
	isQueuedResource_QueueingPolicy_StartTimingConstraints()
}

type QueuedResource_QueueingPolicy_ValidUntilDuration struct {
	// Optional. A relative time after which resources should not be created.
	// If the request cannot be fulfilled by this time the request will be
	// failed.
	ValidUntilDuration *duration.Duration `protobuf:"bytes,1,opt,name=valid_until_duration,json=validUntilDuration,proto3,oneof"`
}

type QueuedResource_QueueingPolicy_ValidUntilTime struct {
	// Optional. An absolute time after which resources should not be created.
	// If the request cannot be fulfilled by this time the request will be
	// failed.
	ValidUntilTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=valid_until_time,json=validUntilTime,proto3,oneof"`
}

type QueuedResource_QueueingPolicy_ValidAfterDuration struct {
	// Optional. A relative time after which resources may be created.
	ValidAfterDuration *duration.Duration `protobuf:"bytes,3,opt,name=valid_after_duration,json=validAfterDuration,proto3,oneof"`
}

type QueuedResource_QueueingPolicy_ValidAfterTime struct {
	// Optional. An absolute time after which resources may be created.
	ValidAfterTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=valid_after_time,json=validAfterTime,proto3,oneof"`
}

type QueuedResource_QueueingPolicy_ValidInterval struct {
	// Optional. An absolute time interval within which resources may be
	// created.
	ValidInterval *interval.Interval `protobuf:"bytes,5,opt,name=valid_interval,json=validInterval,proto3,oneof"`
}

func (*QueuedResource_QueueingPolicy_ValidUntilDuration) isQueuedResource_QueueingPolicy_StartTimingConstraints() {
}

func (*QueuedResource_QueueingPolicy_ValidUntilTime) isQueuedResource_QueueingPolicy_StartTimingConstraints() {
}

func (*QueuedResource_QueueingPolicy_ValidAfterDuration) isQueuedResource_QueueingPolicy_StartTimingConstraints() {
}

func (*QueuedResource_QueueingPolicy_ValidAfterTime) isQueuedResource_QueueingPolicy_StartTimingConstraints() {
}

func (*QueuedResource_QueueingPolicy_ValidInterval) isQueuedResource_QueueingPolicy_StartTimingConstraints() {
}

// Details of the TPU node(s) being requested. Users can request either a
// single node or multiple nodes.
// NodeSpec provides the specification for node(s) to be created.
type QueuedResource_Tpu_NodeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Either a node_id or multislice_params.
	//
	// Types that are assignable to NameStrategy:
	//
	//	*QueuedResource_Tpu_NodeSpec_NodeId
	//	*QueuedResource_Tpu_NodeSpec_MultisliceParams_
	NameStrategy isQueuedResource_Tpu_NodeSpec_NameStrategy `protobuf_oneof:"name_strategy"`
	// Required. The node.
	Node *Node `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *QueuedResource_Tpu_NodeSpec) Reset() {
	*x = QueuedResource_Tpu_NodeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_Tpu_NodeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_Tpu_NodeSpec) ProtoMessage() {}

func (x *QueuedResource_Tpu_NodeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_Tpu_NodeSpec.ProtoReflect.Descriptor instead.
func (*QueuedResource_Tpu_NodeSpec) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *QueuedResource_Tpu_NodeSpec) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (m *QueuedResource_Tpu_NodeSpec) GetNameStrategy() isQueuedResource_Tpu_NodeSpec_NameStrategy {
	if m != nil {
		return m.NameStrategy
	}
	return nil
}

func (x *QueuedResource_Tpu_NodeSpec) GetNodeId() string {
	if x, ok := x.GetNameStrategy().(*QueuedResource_Tpu_NodeSpec_NodeId); ok {
		return x.NodeId
	}
	return ""
}

func (x *QueuedResource_Tpu_NodeSpec) GetMultisliceParams() *QueuedResource_Tpu_NodeSpec_MultisliceParams {
	if x, ok := x.GetNameStrategy().(*QueuedResource_Tpu_NodeSpec_MultisliceParams_); ok {
		return x.MultisliceParams
	}
	return nil
}

func (x *QueuedResource_Tpu_NodeSpec) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type isQueuedResource_Tpu_NodeSpec_NameStrategy interface {
	isQueuedResource_Tpu_NodeSpec_NameStrategy()
}

type QueuedResource_Tpu_NodeSpec_NodeId struct {
	// Optional. The unqualified resource name. Should follow the
	// `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when
	// requesting a single node. In case of multislice requests,
	// multislice_params must be populated instead.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3,oneof"`
}

type QueuedResource_Tpu_NodeSpec_MultisliceParams_ struct {
	// Optional. Fields to specify in case of multislice request.
	MultisliceParams *QueuedResource_Tpu_NodeSpec_MultisliceParams `protobuf:"bytes,3,opt,name=multislice_params,json=multisliceParams,proto3,oneof"`
}

func (*QueuedResource_Tpu_NodeSpec_NodeId) isQueuedResource_Tpu_NodeSpec_NameStrategy() {}

func (*QueuedResource_Tpu_NodeSpec_MultisliceParams_) isQueuedResource_Tpu_NodeSpec_NameStrategy() {}

// Parameters to specify for multislice QueuedResource requests. This
// message must be populated in case of multislice requests instead of
// node_id.
type QueuedResource_Tpu_NodeSpec_MultisliceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Number of nodes with this spec. The system will attempt
	// to provision "node_count" nodes as part of the request.
	// This needs to be > 1.
	NodeCount int32 `protobuf:"varint,1,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// Optional. Prefix of node_ids in case of multislice request.
	// Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format.
	// If node_count = 3 and node_id_prefix = "np", node ids of nodes
	// created will be "np-0", "np-1", "np-2". If this field is not
	// provided we use queued_resource_id as the node_id_prefix.
	NodeIdPrefix string `protobuf:"bytes,2,opt,name=node_id_prefix,json=nodeIdPrefix,proto3" json:"node_id_prefix,omitempty"`
}

func (x *QueuedResource_Tpu_NodeSpec_MultisliceParams) Reset() {
	*x = QueuedResource_Tpu_NodeSpec_MultisliceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResource_Tpu_NodeSpec_MultisliceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResource_Tpu_NodeSpec_MultisliceParams) ProtoMessage() {}

func (x *QueuedResource_Tpu_NodeSpec_MultisliceParams) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResource_Tpu_NodeSpec_MultisliceParams.ProtoReflect.Descriptor instead.
func (*QueuedResource_Tpu_NodeSpec_MultisliceParams) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{10, 0, 0, 0}
}

func (x *QueuedResource_Tpu_NodeSpec_MultisliceParams) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *QueuedResource_Tpu_NodeSpec_MultisliceParams) GetNodeIdPrefix() string {
	if x != nil {
		return x.NodeIdPrefix
	}
	return ""
}

// Further data for the creating state.
type QueuedResourceState_CreatingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_CreatingData) Reset() {
	*x = QueuedResourceState_CreatingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_CreatingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_CreatingData) ProtoMessage() {}

func (x *QueuedResourceState_CreatingData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_CreatingData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_CreatingData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 0}
}

// Further data for the accepted state.
type QueuedResourceState_AcceptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_AcceptedData) Reset() {
	*x = QueuedResourceState_AcceptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_AcceptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_AcceptedData) ProtoMessage() {}

func (x *QueuedResourceState_AcceptedData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_AcceptedData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_AcceptedData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 1}
}

// Further data for the provisioning state.
type QueuedResourceState_ProvisioningData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_ProvisioningData) Reset() {
	*x = QueuedResourceState_ProvisioningData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_ProvisioningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_ProvisioningData) ProtoMessage() {}

func (x *QueuedResourceState_ProvisioningData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_ProvisioningData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_ProvisioningData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 2}
}

// Further data for the failed state.
type QueuedResourceState_FailedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The error that caused the queued resource to enter the
	// FAILED state.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *QueuedResourceState_FailedData) Reset() {
	*x = QueuedResourceState_FailedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_FailedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_FailedData) ProtoMessage() {}

func (x *QueuedResourceState_FailedData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_FailedData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_FailedData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 3}
}

func (x *QueuedResourceState_FailedData) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Further data for the deleting state.
type QueuedResourceState_DeletingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_DeletingData) Reset() {
	*x = QueuedResourceState_DeletingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_DeletingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_DeletingData) ProtoMessage() {}

func (x *QueuedResourceState_DeletingData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_DeletingData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_DeletingData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 4}
}

// Further data for the active state.
type QueuedResourceState_ActiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_ActiveData) Reset() {
	*x = QueuedResourceState_ActiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_ActiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_ActiveData) ProtoMessage() {}

func (x *QueuedResourceState_ActiveData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_ActiveData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_ActiveData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 5}
}

// Further data for the suspending state.
type QueuedResourceState_SuspendingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_SuspendingData) Reset() {
	*x = QueuedResourceState_SuspendingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_SuspendingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_SuspendingData) ProtoMessage() {}

func (x *QueuedResourceState_SuspendingData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_SuspendingData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_SuspendingData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 6}
}

// Further data for the suspended state.
type QueuedResourceState_SuspendedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuedResourceState_SuspendedData) Reset() {
	*x = QueuedResourceState_SuspendedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedResourceState_SuspendedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedResourceState_SuspendedData) ProtoMessage() {}

func (x *QueuedResourceState_SuspendedData) ProtoReflect() protoreflect.Message {
	mi := &file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedResourceState_SuspendedData.ProtoReflect.Descriptor instead.
func (*QueuedResourceState_SuspendedData) Descriptor() ([]byte, []int) {
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP(), []int{11, 7}
}

var File_mockgcp_cloud_tpu_v2_cloud_tpu_proto protoreflect.FileDescriptor

var file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x70, 0x75, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x70, 0x75,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x0f, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x69, 0x0a, 0x10, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04,
	0x73, 0x70, 0x6f, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x34, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x70,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x49, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x22, 0xed, 0x10, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x51, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x64, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x3e,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x28, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x08, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x12, 0x66, 0x0a,
	0x18, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x16, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xee, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x50, 0x41,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x48, 0x49, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x10, 0x22, 0x6f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x12,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x4e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x05, 0x22, 0x57, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x56, 0x31, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x56, 0x31, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x32, 0x5f, 0x41, 0x4c, 0x50, 0x48,
	0x41, 0x31, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x32, 0x10, 0x04, 0x3a, 0x52, 0xea, 0x41,
	0x4f, 0x0a, 0x17, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x7d,
	0x22, 0xcf, 0x0d, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x03, 0x74, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x70, 0x75, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x70, 0x75, 0x12, 0x44, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x67, 0x75,
	0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x12, 0x61, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e,
	0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xeb, 0x03, 0x0a, 0x03,
	0x54, 0x70, 0x75, 0x12, 0x53, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x70, 0x75,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x8e, 0x03, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x70, 0x75, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x10,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x61, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x6f,
	0x74, 0x1a, 0x4f, 0x0a, 0x0a, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0xb3, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x52, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x1a, 0x0a, 0x18,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x93, 0x01, 0xea, 0x41, 0x8f, 0x01, 0x0a,
	0x21, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x49, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x7d, 0x2a, 0x0f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x32, 0x0e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x22, 0xab, 0x0b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6e,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68,
	0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x66, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0a, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x0a, 0x0e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x0a, 0x0d, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x09, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x87, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x19, 0x12, 0x17, 0x74,
	0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x19, 0x0a, 0x17, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x23, 0x0a, 0x21, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x48, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x19, 0x0a, 0x17, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x19, 0x0a, 0x17, 0x74,
	0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x47, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x19, 0x0a, 0x17, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e,
	0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x12, 0x21, 0x74, 0x70, 0x75, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9b,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x1a,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23,
	0x0a, 0x21, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x63, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x89, 0x02,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x3a, 0x74, 0xea, 0x41, 0x71, 0x0a, 0x22, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x0a, 0x22, 0x74, 0x70,
	0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x24, 0x12, 0x22,
	0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x71, 0xea, 0x41, 0x6e, 0x0a, 0x21,
	0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x22, 0x59, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x0a, 0x21,
	0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x23, 0x12, 0x21,
	0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x07, 0x53,
	0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x63, 0x6b,
	0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x2e, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6d,
	0x70, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x59, 0x4d, 0x50,
	0x54, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
	0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x42, 0x4d, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x42, 0x55, 0x53, 0x45, 0x10, 0x06, 0x22,
	0x8e, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x19, 0x0a, 0x17, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x22, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0xd3, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22, 0x56,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x33, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x34, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x35, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x50,
	0x4f, 0x44, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x35, 0x50, 0x10, 0x0a, 0x12, 0x07, 0x0a,
	0x03, 0x56, 0x36, 0x45, 0x10, 0x0b, 0x22, 0x46, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x32, 0xc4,
	0x1b, 0x0a, 0x03, 0x54, 0x70, 0x75, 0x12, 0x98, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f,
	0x76, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x3a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0xda, 0x41, 0x13, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2c, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0xca,
	0x41, 0x19, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbb, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x32, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0x41, 0x2a, 0x0a,
	0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa7, 0x01, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x19, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x22, 0x2f, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x3a, 0x01, 0x2a, 0xca, 0x41, 0x19, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0xc1, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x32,
	0x2e, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0xda, 0x41, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0xca, 0x41, 0x19, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xda, 0x41,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x32,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x89, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x33, 0x2f, 0x76, 0x32,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x3a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0xda, 0x41, 0x29, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0xca, 0x41, 0x23,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0xd9, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x6d,
	0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xca, 0x41, 0x2a, 0x0a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0xd9, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e,
	0x22, 0x39, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0xca, 0x41, 0x23, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0xce, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x34, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63,
	0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x3b, 0x2f, 0x76,
	0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x3a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xc4, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67,
	0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x32, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76,
	0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x76, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x3c, 0x2f, 0x76,
	0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x67, 0x65, 0x74, 0x47, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x1a, 0x46, 0xca,
	0x41, 0x12, 0x74, 0x70, 0x75, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77,
	0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x56, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x67, 0x63, 0x70, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x76,
	0x32, 0x42, 0x0d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x29, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x70, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x74, 0x70, 0x75, 0x70, 0x62, 0x3b, 0x74, 0x70, 0x75, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescOnce sync.Once
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescData = file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDesc
)

func file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescGZIP() []byte {
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescOnce.Do(func() {
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescData)
	})
	return file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDescData
}

var file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes = make([]protoimpl.MessageInfo, 59)
var file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_goTypes = []interface{}{
	(AttachedDisk_DiskMode)(0),                           // 0: mockgcp.cloud.tpu.v2.AttachedDisk.DiskMode
	(Node_State)(0),                                      // 1: mockgcp.cloud.tpu.v2.Node.State
	(Node_Health)(0),                                     // 2: mockgcp.cloud.tpu.v2.Node.Health
	(Node_ApiVersion)(0),                                 // 3: mockgcp.cloud.tpu.v2.Node.ApiVersion
	(QueuedResourceState_State)(0),                       // 4: mockgcp.cloud.tpu.v2.QueuedResourceState.State
	(QueuedResourceState_StateInitiator)(0),              // 5: mockgcp.cloud.tpu.v2.QueuedResourceState.StateInitiator
	(Symptom_SymptomType)(0),                             // 6: mockgcp.cloud.tpu.v2.Symptom.SymptomType
	(AcceleratorConfig_Type)(0),                          // 7: mockgcp.cloud.tpu.v2.AcceleratorConfig.Type
	(*GuestAttributes)(nil),                              // 8: mockgcp.cloud.tpu.v2.GuestAttributes
	(*GuestAttributesValue)(nil),                         // 9: mockgcp.cloud.tpu.v2.GuestAttributesValue
	(*GuestAttributesEntry)(nil),                         // 10: mockgcp.cloud.tpu.v2.GuestAttributesEntry
	(*AttachedDisk)(nil),                                 // 11: mockgcp.cloud.tpu.v2.AttachedDisk
	(*SchedulingConfig)(nil),                             // 12: mockgcp.cloud.tpu.v2.SchedulingConfig
	(*NetworkEndpoint)(nil),                              // 13: mockgcp.cloud.tpu.v2.NetworkEndpoint
	(*AccessConfig)(nil),                                 // 14: mockgcp.cloud.tpu.v2.AccessConfig
	(*NetworkConfig)(nil),                                // 15: mockgcp.cloud.tpu.v2.NetworkConfig
	(*ServiceAccount)(nil),                               // 16: mockgcp.cloud.tpu.v2.ServiceAccount
	(*Node)(nil),                                         // 17: mockgcp.cloud.tpu.v2.Node
	(*QueuedResource)(nil),                               // 18: mockgcp.cloud.tpu.v2.QueuedResource
	(*QueuedResourceState)(nil),                          // 19: mockgcp.cloud.tpu.v2.QueuedResourceState
	(*ListNodesRequest)(nil),                             // 20: mockgcp.cloud.tpu.v2.ListNodesRequest
	(*ListNodesResponse)(nil),                            // 21: mockgcp.cloud.tpu.v2.ListNodesResponse
	(*GetNodeRequest)(nil),                               // 22: mockgcp.cloud.tpu.v2.GetNodeRequest
	(*CreateNodeRequest)(nil),                            // 23: mockgcp.cloud.tpu.v2.CreateNodeRequest
	(*DeleteNodeRequest)(nil),                            // 24: mockgcp.cloud.tpu.v2.DeleteNodeRequest
	(*StopNodeRequest)(nil),                              // 25: mockgcp.cloud.tpu.v2.StopNodeRequest
	(*StartNodeRequest)(nil),                             // 26: mockgcp.cloud.tpu.v2.StartNodeRequest
	(*UpdateNodeRequest)(nil),                            // 27: mockgcp.cloud.tpu.v2.UpdateNodeRequest
	(*ListQueuedResourcesRequest)(nil),                   // 28: mockgcp.cloud.tpu.v2.ListQueuedResourcesRequest
	(*ListQueuedResourcesResponse)(nil),                  // 29: mockgcp.cloud.tpu.v2.ListQueuedResourcesResponse
	(*GetQueuedResourceRequest)(nil),                     // 30: mockgcp.cloud.tpu.v2.GetQueuedResourceRequest
	(*CreateQueuedResourceRequest)(nil),                  // 31: mockgcp.cloud.tpu.v2.CreateQueuedResourceRequest
	(*DeleteQueuedResourceRequest)(nil),                  // 32: mockgcp.cloud.tpu.v2.DeleteQueuedResourceRequest
	(*ResetQueuedResourceRequest)(nil),                   // 33: mockgcp.cloud.tpu.v2.ResetQueuedResourceRequest
	(*ServiceIdentity)(nil),                              // 34: mockgcp.cloud.tpu.v2.ServiceIdentity
	(*GenerateServiceIdentityRequest)(nil),               // 35: mockgcp.cloud.tpu.v2.GenerateServiceIdentityRequest
	(*GenerateServiceIdentityResponse)(nil),              // 36: mockgcp.cloud.tpu.v2.GenerateServiceIdentityResponse
	(*AcceleratorType)(nil),                              // 37: mockgcp.cloud.tpu.v2.AcceleratorType
	(*GetAcceleratorTypeRequest)(nil),                    // 38: mockgcp.cloud.tpu.v2.GetAcceleratorTypeRequest
	(*ListAcceleratorTypesRequest)(nil),                  // 39: mockgcp.cloud.tpu.v2.ListAcceleratorTypesRequest
	(*ListAcceleratorTypesResponse)(nil),                 // 40: mockgcp.cloud.tpu.v2.ListAcceleratorTypesResponse
	(*RuntimeVersion)(nil),                               // 41: mockgcp.cloud.tpu.v2.RuntimeVersion
	(*GetRuntimeVersionRequest)(nil),                     // 42: mockgcp.cloud.tpu.v2.GetRuntimeVersionRequest
	(*ListRuntimeVersionsRequest)(nil),                   // 43: mockgcp.cloud.tpu.v2.ListRuntimeVersionsRequest
	(*ListRuntimeVersionsResponse)(nil),                  // 44: mockgcp.cloud.tpu.v2.ListRuntimeVersionsResponse
	(*OperationMetadata)(nil),                            // 45: mockgcp.cloud.tpu.v2.OperationMetadata
	(*Symptom)(nil),                                      // 46: mockgcp.cloud.tpu.v2.Symptom
	(*GetGuestAttributesRequest)(nil),                    // 47: mockgcp.cloud.tpu.v2.GetGuestAttributesRequest
	(*GetGuestAttributesResponse)(nil),                   // 48: mockgcp.cloud.tpu.v2.GetGuestAttributesResponse
	(*AcceleratorConfig)(nil),                            // 49: mockgcp.cloud.tpu.v2.AcceleratorConfig
	(*ShieldedInstanceConfig)(nil),                       // 50: mockgcp.cloud.tpu.v2.ShieldedInstanceConfig
	nil,                                                  // 51: mockgcp.cloud.tpu.v2.Node.LabelsEntry
	nil,                                                  // 52: mockgcp.cloud.tpu.v2.Node.MetadataEntry
	(*QueuedResource_Tpu)(nil),                           // 53: mockgcp.cloud.tpu.v2.QueuedResource.Tpu
	(*QueuedResource_Spot)(nil),                          // 54: mockgcp.cloud.tpu.v2.QueuedResource.Spot
	(*QueuedResource_Guaranteed)(nil),                    // 55: mockgcp.cloud.tpu.v2.QueuedResource.Guaranteed
	(*QueuedResource_QueueingPolicy)(nil),                // 56: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy
	(*QueuedResource_Tpu_NodeSpec)(nil),                  // 57: mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec
	(*QueuedResource_Tpu_NodeSpec_MultisliceParams)(nil), // 58: mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec.MultisliceParams
	(*QueuedResourceState_CreatingData)(nil),             // 59: mockgcp.cloud.tpu.v2.QueuedResourceState.CreatingData
	(*QueuedResourceState_AcceptedData)(nil),             // 60: mockgcp.cloud.tpu.v2.QueuedResourceState.AcceptedData
	(*QueuedResourceState_ProvisioningData)(nil),         // 61: mockgcp.cloud.tpu.v2.QueuedResourceState.ProvisioningData
	(*QueuedResourceState_FailedData)(nil),               // 62: mockgcp.cloud.tpu.v2.QueuedResourceState.FailedData
	(*QueuedResourceState_DeletingData)(nil),             // 63: mockgcp.cloud.tpu.v2.QueuedResourceState.DeletingData
	(*QueuedResourceState_ActiveData)(nil),               // 64: mockgcp.cloud.tpu.v2.QueuedResourceState.ActiveData
	(*QueuedResourceState_SuspendingData)(nil),           // 65: mockgcp.cloud.tpu.v2.QueuedResourceState.SuspendingData
	(*QueuedResourceState_SuspendedData)(nil),            // 66: mockgcp.cloud.tpu.v2.QueuedResourceState.SuspendedData
	(*timestamp.Timestamp)(nil),                          // 67: google.protobuf.Timestamp
	(*field_mask.FieldMask)(nil),                         // 68: google.protobuf.FieldMask
	(*duration.Duration)(nil),                            // 69: google.protobuf.Duration
	(*interval.Interval)(nil),                            // 70: google.type.Interval
	(*status.Status)(nil),                                // 71: google.rpc.Status
	(*longrunningpb.Operation)(nil),                      // 72: google.longrunning.Operation
}
var file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_depIdxs = []int32{
	9,  // 0: mockgcp.cloud.tpu.v2.GuestAttributes.query_value:type_name -> mockgcp.cloud.tpu.v2.GuestAttributesValue
	10, // 1: mockgcp.cloud.tpu.v2.GuestAttributesValue.items:type_name -> mockgcp.cloud.tpu.v2.GuestAttributesEntry
	0,  // 2: mockgcp.cloud.tpu.v2.AttachedDisk.mode:type_name -> mockgcp.cloud.tpu.v2.AttachedDisk.DiskMode
	14, // 3: mockgcp.cloud.tpu.v2.NetworkEndpoint.access_config:type_name -> mockgcp.cloud.tpu.v2.AccessConfig
	1,  // 4: mockgcp.cloud.tpu.v2.Node.state:type_name -> mockgcp.cloud.tpu.v2.Node.State
	15, // 5: mockgcp.cloud.tpu.v2.Node.network_config:type_name -> mockgcp.cloud.tpu.v2.NetworkConfig
	15, // 6: mockgcp.cloud.tpu.v2.Node.network_configs:type_name -> mockgcp.cloud.tpu.v2.NetworkConfig
	16, // 7: mockgcp.cloud.tpu.v2.Node.service_account:type_name -> mockgcp.cloud.tpu.v2.ServiceAccount
	67, // 8: mockgcp.cloud.tpu.v2.Node.create_time:type_name -> google.protobuf.Timestamp
	12, // 9: mockgcp.cloud.tpu.v2.Node.scheduling_config:type_name -> mockgcp.cloud.tpu.v2.SchedulingConfig
	13, // 10: mockgcp.cloud.tpu.v2.Node.network_endpoints:type_name -> mockgcp.cloud.tpu.v2.NetworkEndpoint
	2,  // 11: mockgcp.cloud.tpu.v2.Node.health:type_name -> mockgcp.cloud.tpu.v2.Node.Health
	51, // 12: mockgcp.cloud.tpu.v2.Node.labels:type_name -> mockgcp.cloud.tpu.v2.Node.LabelsEntry
	52, // 13: mockgcp.cloud.tpu.v2.Node.metadata:type_name -> mockgcp.cloud.tpu.v2.Node.MetadataEntry
	11, // 14: mockgcp.cloud.tpu.v2.Node.data_disks:type_name -> mockgcp.cloud.tpu.v2.AttachedDisk
	3,  // 15: mockgcp.cloud.tpu.v2.Node.api_version:type_name -> mockgcp.cloud.tpu.v2.Node.ApiVersion
	46, // 16: mockgcp.cloud.tpu.v2.Node.symptoms:type_name -> mockgcp.cloud.tpu.v2.Symptom
	50, // 17: mockgcp.cloud.tpu.v2.Node.shielded_instance_config:type_name -> mockgcp.cloud.tpu.v2.ShieldedInstanceConfig
	49, // 18: mockgcp.cloud.tpu.v2.Node.accelerator_config:type_name -> mockgcp.cloud.tpu.v2.AcceleratorConfig
	67, // 19: mockgcp.cloud.tpu.v2.QueuedResource.create_time:type_name -> google.protobuf.Timestamp
	53, // 20: mockgcp.cloud.tpu.v2.QueuedResource.tpu:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.Tpu
	54, // 21: mockgcp.cloud.tpu.v2.QueuedResource.spot:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.Spot
	55, // 22: mockgcp.cloud.tpu.v2.QueuedResource.guaranteed:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.Guaranteed
	56, // 23: mockgcp.cloud.tpu.v2.QueuedResource.queueing_policy:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy
	19, // 24: mockgcp.cloud.tpu.v2.QueuedResource.state:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState
	4,  // 25: mockgcp.cloud.tpu.v2.QueuedResourceState.state:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.State
	59, // 26: mockgcp.cloud.tpu.v2.QueuedResourceState.creating_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.CreatingData
	60, // 27: mockgcp.cloud.tpu.v2.QueuedResourceState.accepted_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.AcceptedData
	61, // 28: mockgcp.cloud.tpu.v2.QueuedResourceState.provisioning_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.ProvisioningData
	62, // 29: mockgcp.cloud.tpu.v2.QueuedResourceState.failed_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.FailedData
	63, // 30: mockgcp.cloud.tpu.v2.QueuedResourceState.deleting_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.DeletingData
	64, // 31: mockgcp.cloud.tpu.v2.QueuedResourceState.active_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.ActiveData
	65, // 32: mockgcp.cloud.tpu.v2.QueuedResourceState.suspending_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.SuspendingData
	66, // 33: mockgcp.cloud.tpu.v2.QueuedResourceState.suspended_data:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.SuspendedData
	5,  // 34: mockgcp.cloud.tpu.v2.QueuedResourceState.state_initiator:type_name -> mockgcp.cloud.tpu.v2.QueuedResourceState.StateInitiator
	17, // 35: mockgcp.cloud.tpu.v2.ListNodesResponse.nodes:type_name -> mockgcp.cloud.tpu.v2.Node
	17, // 36: mockgcp.cloud.tpu.v2.CreateNodeRequest.node:type_name -> mockgcp.cloud.tpu.v2.Node
	68, // 37: mockgcp.cloud.tpu.v2.UpdateNodeRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 38: mockgcp.cloud.tpu.v2.UpdateNodeRequest.node:type_name -> mockgcp.cloud.tpu.v2.Node
	18, // 39: mockgcp.cloud.tpu.v2.ListQueuedResourcesResponse.queued_resources:type_name -> mockgcp.cloud.tpu.v2.QueuedResource
	18, // 40: mockgcp.cloud.tpu.v2.CreateQueuedResourceRequest.queued_resource:type_name -> mockgcp.cloud.tpu.v2.QueuedResource
	34, // 41: mockgcp.cloud.tpu.v2.GenerateServiceIdentityResponse.identity:type_name -> mockgcp.cloud.tpu.v2.ServiceIdentity
	49, // 42: mockgcp.cloud.tpu.v2.AcceleratorType.accelerator_configs:type_name -> mockgcp.cloud.tpu.v2.AcceleratorConfig
	37, // 43: mockgcp.cloud.tpu.v2.ListAcceleratorTypesResponse.accelerator_types:type_name -> mockgcp.cloud.tpu.v2.AcceleratorType
	41, // 44: mockgcp.cloud.tpu.v2.ListRuntimeVersionsResponse.runtime_versions:type_name -> mockgcp.cloud.tpu.v2.RuntimeVersion
	67, // 45: mockgcp.cloud.tpu.v2.OperationMetadata.create_time:type_name -> google.protobuf.Timestamp
	67, // 46: mockgcp.cloud.tpu.v2.OperationMetadata.end_time:type_name -> google.protobuf.Timestamp
	67, // 47: mockgcp.cloud.tpu.v2.Symptom.create_time:type_name -> google.protobuf.Timestamp
	6,  // 48: mockgcp.cloud.tpu.v2.Symptom.symptom_type:type_name -> mockgcp.cloud.tpu.v2.Symptom.SymptomType
	8,  // 49: mockgcp.cloud.tpu.v2.GetGuestAttributesResponse.guest_attributes:type_name -> mockgcp.cloud.tpu.v2.GuestAttributes
	7,  // 50: mockgcp.cloud.tpu.v2.AcceleratorConfig.type:type_name -> mockgcp.cloud.tpu.v2.AcceleratorConfig.Type
	57, // 51: mockgcp.cloud.tpu.v2.QueuedResource.Tpu.node_spec:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec
	69, // 52: mockgcp.cloud.tpu.v2.QueuedResource.Guaranteed.min_duration:type_name -> google.protobuf.Duration
	69, // 53: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy.valid_until_duration:type_name -> google.protobuf.Duration
	67, // 54: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy.valid_until_time:type_name -> google.protobuf.Timestamp
	69, // 55: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy.valid_after_duration:type_name -> google.protobuf.Duration
	67, // 56: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy.valid_after_time:type_name -> google.protobuf.Timestamp
	70, // 57: mockgcp.cloud.tpu.v2.QueuedResource.QueueingPolicy.valid_interval:type_name -> google.type.Interval
	58, // 58: mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec.multislice_params:type_name -> mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec.MultisliceParams
	17, // 59: mockgcp.cloud.tpu.v2.QueuedResource.Tpu.NodeSpec.node:type_name -> mockgcp.cloud.tpu.v2.Node
	71, // 60: mockgcp.cloud.tpu.v2.QueuedResourceState.FailedData.error:type_name -> google.rpc.Status
	20, // 61: mockgcp.cloud.tpu.v2.Tpu.ListNodes:input_type -> mockgcp.cloud.tpu.v2.ListNodesRequest
	22, // 62: mockgcp.cloud.tpu.v2.Tpu.GetNode:input_type -> mockgcp.cloud.tpu.v2.GetNodeRequest
	23, // 63: mockgcp.cloud.tpu.v2.Tpu.CreateNode:input_type -> mockgcp.cloud.tpu.v2.CreateNodeRequest
	24, // 64: mockgcp.cloud.tpu.v2.Tpu.DeleteNode:input_type -> mockgcp.cloud.tpu.v2.DeleteNodeRequest
	25, // 65: mockgcp.cloud.tpu.v2.Tpu.StopNode:input_type -> mockgcp.cloud.tpu.v2.StopNodeRequest
	26, // 66: mockgcp.cloud.tpu.v2.Tpu.StartNode:input_type -> mockgcp.cloud.tpu.v2.StartNodeRequest
	27, // 67: mockgcp.cloud.tpu.v2.Tpu.UpdateNode:input_type -> mockgcp.cloud.tpu.v2.UpdateNodeRequest
	28, // 68: mockgcp.cloud.tpu.v2.Tpu.ListQueuedResources:input_type -> mockgcp.cloud.tpu.v2.ListQueuedResourcesRequest
	30, // 69: mockgcp.cloud.tpu.v2.Tpu.GetQueuedResource:input_type -> mockgcp.cloud.tpu.v2.GetQueuedResourceRequest
	31, // 70: mockgcp.cloud.tpu.v2.Tpu.CreateQueuedResource:input_type -> mockgcp.cloud.tpu.v2.CreateQueuedResourceRequest
	32, // 71: mockgcp.cloud.tpu.v2.Tpu.DeleteQueuedResource:input_type -> mockgcp.cloud.tpu.v2.DeleteQueuedResourceRequest
	33, // 72: mockgcp.cloud.tpu.v2.Tpu.ResetQueuedResource:input_type -> mockgcp.cloud.tpu.v2.ResetQueuedResourceRequest
	35, // 73: mockgcp.cloud.tpu.v2.Tpu.GenerateServiceIdentity:input_type -> mockgcp.cloud.tpu.v2.GenerateServiceIdentityRequest
	39, // 74: mockgcp.cloud.tpu.v2.Tpu.ListAcceleratorTypes:input_type -> mockgcp.cloud.tpu.v2.ListAcceleratorTypesRequest
	38, // 75: mockgcp.cloud.tpu.v2.Tpu.GetAcceleratorType:input_type -> mockgcp.cloud.tpu.v2.GetAcceleratorTypeRequest
	43, // 76: mockgcp.cloud.tpu.v2.Tpu.ListRuntimeVersions:input_type -> mockgcp.cloud.tpu.v2.ListRuntimeVersionsRequest
	42, // 77: mockgcp.cloud.tpu.v2.Tpu.GetRuntimeVersion:input_type -> mockgcp.cloud.tpu.v2.GetRuntimeVersionRequest
	47, // 78: mockgcp.cloud.tpu.v2.Tpu.GetGuestAttributes:input_type -> mockgcp.cloud.tpu.v2.GetGuestAttributesRequest
	21, // 79: mockgcp.cloud.tpu.v2.Tpu.ListNodes:output_type -> mockgcp.cloud.tpu.v2.ListNodesResponse
	17, // 80: mockgcp.cloud.tpu.v2.Tpu.GetNode:output_type -> mockgcp.cloud.tpu.v2.Node
	72, // 81: mockgcp.cloud.tpu.v2.Tpu.CreateNode:output_type -> google.longrunning.Operation
	72, // 82: mockgcp.cloud.tpu.v2.Tpu.DeleteNode:output_type -> google.longrunning.Operation
	72, // 83: mockgcp.cloud.tpu.v2.Tpu.StopNode:output_type -> google.longrunning.Operation
	72, // 84: mockgcp.cloud.tpu.v2.Tpu.StartNode:output_type -> google.longrunning.Operation
	72, // 85: mockgcp.cloud.tpu.v2.Tpu.UpdateNode:output_type -> google.longrunning.Operation
	29, // 86: mockgcp.cloud.tpu.v2.Tpu.ListQueuedResources:output_type -> mockgcp.cloud.tpu.v2.ListQueuedResourcesResponse
	18, // 87: mockgcp.cloud.tpu.v2.Tpu.GetQueuedResource:output_type -> mockgcp.cloud.tpu.v2.QueuedResource
	72, // 88: mockgcp.cloud.tpu.v2.Tpu.CreateQueuedResource:output_type -> google.longrunning.Operation
	72, // 89: mockgcp.cloud.tpu.v2.Tpu.DeleteQueuedResource:output_type -> google.longrunning.Operation
	72, // 90: mockgcp.cloud.tpu.v2.Tpu.ResetQueuedResource:output_type -> google.longrunning.Operation
	36, // 91: mockgcp.cloud.tpu.v2.Tpu.GenerateServiceIdentity:output_type -> mockgcp.cloud.tpu.v2.GenerateServiceIdentityResponse
	40, // 92: mockgcp.cloud.tpu.v2.Tpu.ListAcceleratorTypes:output_type -> mockgcp.cloud.tpu.v2.ListAcceleratorTypesResponse
	37, // 93: mockgcp.cloud.tpu.v2.Tpu.GetAcceleratorType:output_type -> mockgcp.cloud.tpu.v2.AcceleratorType
	44, // 94: mockgcp.cloud.tpu.v2.Tpu.ListRuntimeVersions:output_type -> mockgcp.cloud.tpu.v2.ListRuntimeVersionsResponse
	41, // 95: mockgcp.cloud.tpu.v2.Tpu.GetRuntimeVersion:output_type -> mockgcp.cloud.tpu.v2.RuntimeVersion
	48, // 96: mockgcp.cloud.tpu.v2.Tpu.GetGuestAttributes:output_type -> mockgcp.cloud.tpu.v2.GetGuestAttributesResponse
	79, // [79:97] is the sub-list for method output_type
	61, // [61:79] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_init() }
func file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_init() {
	if File_mockgcp_cloud_tpu_v2_cloud_tpu_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAttributesValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuestAttributesEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueuedResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueuedResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueuedResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueuedResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQueuedResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetQueuedResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServiceIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServiceIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAcceleratorTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcceleratorTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAcceleratorTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRuntimeVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuntimeVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuntimeVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symptom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestAttributesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGuestAttributesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_Tpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_Spot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_Guaranteed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_QueueingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_Tpu_NodeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResource_Tpu_NodeSpec_MultisliceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_CreatingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_AcceptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_ProvisioningData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_FailedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_DeletingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_ActiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_SuspendingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedResourceState_SuspendedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*QueuedResource_Tpu_)(nil),
		(*QueuedResource_Spot_)(nil),
		(*QueuedResource_Guaranteed_)(nil),
	}
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*QueuedResourceState_CreatingData_)(nil),
		(*QueuedResourceState_AcceptedData_)(nil),
		(*QueuedResourceState_ProvisioningData_)(nil),
		(*QueuedResourceState_FailedData_)(nil),
		(*QueuedResourceState_DeletingData_)(nil),
		(*QueuedResourceState_ActiveData_)(nil),
		(*QueuedResourceState_SuspendingData_)(nil),
		(*QueuedResourceState_SuspendedData_)(nil),
	}
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*QueuedResource_QueueingPolicy_ValidUntilDuration)(nil),
		(*QueuedResource_QueueingPolicy_ValidUntilTime)(nil),
		(*QueuedResource_QueueingPolicy_ValidAfterDuration)(nil),
		(*QueuedResource_QueueingPolicy_ValidAfterTime)(nil),
		(*QueuedResource_QueueingPolicy_ValidInterval)(nil),
	}
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*QueuedResource_Tpu_NodeSpec_NodeId)(nil),
		(*QueuedResource_Tpu_NodeSpec_MultisliceParams_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   59,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_goTypes,
		DependencyIndexes: file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_depIdxs,
		EnumInfos:         file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_enumTypes,
		MessageInfos:      file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_msgTypes,
	}.Build()
	File_mockgcp_cloud_tpu_v2_cloud_tpu_proto = out.File
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_rawDesc = nil
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_goTypes = nil
	file_mockgcp_cloud_tpu_v2_cloud_tpu_proto_depIdxs = nil
}
